{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:message-mark-as-unread/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:message-mark-as-unread/server/unreadMessages.js"],"names":["logger","Logger","sections","connection","events","module","exportDefault","watch","require","v","Meteor","methods","unreadMessages","firstUnreadMessage","userId","Error","method","originalMessage","RocketChat","models","Messages","findOneById","_id","fields","u","rid","file","ts","action","lastSeen","Subscriptions","findOneByRoomIdAndUserId","ls","debug","setAsUnreadByRoomIdAndUserId"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,IAAIC,MAAJ,CAAW,qBAAX,EAAkC;AAChDC,WAAU;AACTC,cAAY,YADH;AAETC,UAAQ;AAFC;AADsC,CAAlC,CAAf;AAAAC,OAAOC,aAAP,CAMeN,MANf,6F;;;;;;;;;;;ACAA,IAAIA,eAAJ;AAAWK,OAAOE,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAAA,sBAASC,CAAT,EAAW;AAACT,WAAOS,CAAP;AAAS;AAArB,CAAjC,EAAwD,CAAxD;AACXC,OAAOC,OAAP,CAAe;AACdC,eADc,YACCC,kBADD,EACqB;AAClC,MAAI,CAACH,OAAOI,MAAP,EAAL,EAAsB;AACrB,SAAM,IAAIJ,OAAOK,KAAX,CAAiB,oBAAjB,EAAuC,cAAvC,EAAuD;AAC5DC,YAAQ;AADoD,IAAvD,CAAN;AAGA;;AACD,MAAMC,kBAAkBC,WAAWC,MAAX,CAAkBC,QAAlB,CAA2BC,WAA3B,CAAuCR,mBAAmBS,GAA1D,EAA+D;AACtFC,WAAQ;AACPC,OAAG,CADI;AAEPC,SAAK,CAFE;AAGPC,UAAM,CAHC;AAIPC,QAAI;AAJG;AAD8E,GAA/D,CAAxB;;AAQA,MAAIV,mBAAmB,IAAnB,IAA2BP,OAAOI,MAAP,OAAoBG,gBAAgBO,CAAhB,CAAkBF,GAArE,EAA0E;AACzE,SAAM,IAAIZ,OAAOK,KAAX,CAAiB,0BAAjB,EAA6C,aAA7C,EAA4D;AACjEC,YAAQ,gBADyD;AAEjEY,YAAQ;AAFyD,IAA5D,CAAN;AAIA;;AACD,MAAMC,WAAWX,WAAWC,MAAX,CAAkBW,aAAlB,CAAgCC,wBAAhC,CAAyDd,gBAAgBQ,GAAzE,EAA8Ef,OAAOI,MAAP,EAA9E,EAA+FkB,EAAhH;;AACA,MAAInB,mBAAmBc,EAAnB,IAAyBE,QAA7B,EAAuC;AACtC,UAAO7B,OAAOG,UAAP,CAAkB8B,KAAlB,CAAwB,8CAAxB,CAAP;AACA;;AACDjC,SAAOG,UAAP,CAAkB8B,KAAlB,kCAAwDhB,gBAAgBU,EAAxE;AACA,SAAOT,WAAWC,MAAX,CAAkBW,aAAlB,CAAgCI,4BAAhC,CAA6DjB,gBAAgBQ,GAA7E,EAAkFf,OAAOI,MAAP,EAAlF,EAAmGG,gBAAgBU,EAAnH,CAAP;AACA;AA3Ba,CAAf,uH","file":"/packages/rocketchat_message-mark-as-unread.js","sourcesContent":["const logger = new Logger('MessageMarkAsUnread', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events'\n\t}\n});\nexport default logger;\n","import logger from './logger';\nMeteor.methods({\n\tunreadMessages(firstUnreadMessage) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unreadMessages'\n\t\t\t});\n\t\t}\n\t\tconst originalMessage = RocketChat.models.Messages.findOneById(firstUnreadMessage._id, {\n\t\t\tfields: {\n\t\t\t\tu: 1,\n\t\t\t\trid: 1,\n\t\t\t\tfile: 1,\n\t\t\t\tts: 1\n\t\t\t}\n\t\t});\n\t\tif (originalMessage == null || Meteor.userId() === originalMessage.u._id) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Not allowed', {\n\t\t\t\tmethod: 'unreadMessages',\n\t\t\t\taction: 'Unread_messages'\n\t\t\t});\n\t\t}\n\t\tconst lastSeen = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, Meteor.userId()).ls;\n\t\tif (firstUnreadMessage.ts >= lastSeen) {\n\t\t\treturn logger.connection.debug('Provided message is already marked as unread');\n\t\t}\n\t\tlogger.connection.debug(`Updating unread  message of ${ originalMessage.ts } as the first unread`);\n\t\treturn RocketChat.models.Subscriptions.setAsUnreadByRoomIdAndUserId(originalMessage.rid, Meteor.userId(), originalMessage.ts);\n\t}\n});\n"]}