{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-gridfs/ufs-gridfs.js"],"names":["module","export","GridFSStore","_","watch","require","v","check","Meteor","UploadFS","options","extend","chunkSize","collectionName","TypeError","isServer","mongo","Package","MongoInternals","NpmModule","db","defaultRemoteCollectionDriver","mongoStore","GridFSBucket","bucketName","chunkSizeBytes","delete","fileId","callback","err","console","error","getReadStream","file","openDownloadStream","start","end","getWriteStream","writeStream","openUploadStreamWithId","contentType","type","on","emit","Store","store","GridFS"],"mappings":"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","file":"/packages/jalik_ufs-gridfs.js","sourcesContent":["/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\nimport {check} from \"meteor/check\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {UploadFS} from \"meteor/jalik:ufs\";\r\n\r\n\r\n/**\r\n * GridFS store\r\n * @param options\r\n * @constructor\r\n */\r\nexport class GridFSStore extends UploadFS.Store {\r\n\r\n    constructor(options) {\r\n        // Default options\r\n        options = _.extend({\r\n            chunkSize: 1024 * 255,\r\n            collectionName: 'uploadfs'\r\n        }, options);\r\n\r\n        // Check options\r\n        if (typeof options.chunkSize !== \"number\") {\r\n            throw new TypeError(\"GridFSStore: chunkSize is not a number\");\r\n        }\r\n        if (typeof options.collectionName !== \"string\") {\r\n            throw new TypeError(\"GridFSStore: collectionName is not a string\");\r\n        }\r\n\r\n        super(options);\r\n\r\n        this.chunkSize = options.chunkSize;\r\n        this.collectionName = options.collectionName;\r\n\r\n        if (Meteor.isServer) {\r\n            let mongo = Package.mongo.MongoInternals.NpmModule;\r\n            let db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\r\n            let mongoStore = new mongo.GridFSBucket(db, {\r\n                bucketName: options.collectionName,\r\n                chunkSizeBytes: options.chunkSize\r\n            });\r\n\r\n            /**\r\n             * Removes the file\r\n             * @param fileId\r\n             * @param callback\r\n             */\r\n            this.delete = function (fileId, callback) {\r\n                if (typeof callback !== 'function') {\r\n                    callback = function (err) {\r\n                        if (err) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                }\r\n                return mongoStore.delete(fileId, callback);\r\n            };\r\n\r\n            /**\r\n             * Returns the file read stream\r\n             * @param fileId\r\n             * @param file\r\n             * @param options\r\n             * @return {*}\r\n             */\r\n            this.getReadStream = function (fileId, file, options) {\r\n                options = _.extend({}, options);\r\n                return mongoStore.openDownloadStream(fileId, {\r\n                    start: options.start,\r\n                    end: options.end\r\n                });\r\n            };\r\n\r\n            /**\r\n             * Returns the file write stream\r\n             * @param fileId\r\n             * @param file\r\n             * @param options\r\n             * @return {*}\r\n             */\r\n            this.getWriteStream = function (fileId, file, options) {\r\n                let writeStream = mongoStore.openUploadStreamWithId(fileId, fileId, {\r\n                    chunkSizeBytes: this.chunkSize,\r\n                    contentType: file.type\r\n                });\r\n                writeStream.on('close', function () {\r\n                    writeStream.emit('finish');\r\n                });\r\n                return writeStream;\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Add store to UFS namespace\r\nUploadFS.store.GridFS = GridFSStore;\r\n"]}