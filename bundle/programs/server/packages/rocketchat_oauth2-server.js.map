{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_oauth2-server/model.coffee","meteor://ðŸ’»app/model.coffee.js","meteor://ðŸ’»app/packages/rocketchat_oauth2-server/oauth.coffee","meteor://ðŸ’»app/oauth.coffee.js"],"names":["AccessTokens","AuthCodes","Clients","Model","RefreshTokens","debug","config","accessTokensCollectionName","refreshTokensCollectionName","clientsCollectionName","authCodesCollectionName","accessTokensCollection","Meteor","Collection","refreshTokensCollection","clientsCollection","authCodesCollection","prototype","getAccessToken","bindEnvironment","bearerToken","callback","e","token","console","log","findOne","accessToken","error","getClient","clientId","clientSecret","client","active","grantTypeAllowed","grantType","saveAccessToken","expires","user","tokenId","insert","userId","id","getAuthCode","authCode","code","saveAuthCode","codeId","upsert","saveRefreshToken","refreshToken","getRefreshToken","express","oauthserver","Npm","require","OAuth2Server","app","routes","model","oauth","grants","publishAuhorizedClients","initRoutes","publish","ready","users","find","_id","fields","debugMiddleware","self","transformRequestsNotUsingFormUrlencodedType","req","res","next","method","url","is","headers","body","Object","assign","query","all","grant","get","client_id","redirect","redirectUri","redirect_uri","post","sendStatus","send","Accounts","_hashLoginToken","authCodeGrant","allow","update","$addToSet","use","errorHandler"],"mappings":"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","file":"/packages/rocketchat_oauth2-server.js","sourcesContent":["AccessTokens = undefined\nRefreshTokens = undefined\nClients = undefined\nAuthCodes = undefined\ndebug = undefined\n\n@Model = class Model\n\tconstructor: (config={}) ->\n\t\tconfig.accessTokensCollectionName ?= 'oauth_access_tokens'\n\t\tconfig.refreshTokensCollectionName ?= 'oauth_refresh_tokens'\n\t\tconfig.clientsCollectionName ?= 'oauth_clients'\n\t\tconfig.authCodesCollectionName ?= 'oauth_auth_codes'\n\n\t\t@debug = debug = config.debug\n\n\t\t@AccessTokens = AccessTokens = config.accessTokensCollection or new Meteor.Collection config.accessTokensCollectionName\n\t\t@RefreshTokens = RefreshTokens = config.refreshTokensCollection or new Meteor.Collection config.refreshTokensCollectionName\n\t\t@Clients = Clients = config.clientsCollection or new Meteor.Collection config.clientsCollectionName\n\t\t@AuthCodes = AuthCodes = config.authCodesCollection or new Meteor.Collection config.authCodesCollectionName\n\n\n\tgetAccessToken: Meteor.bindEnvironment (bearerToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')'\n\n\t\ttry\n\t\t\ttoken = AccessTokens.findOne accessToken: bearerToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetClient: Meteor.bindEnvironment (clientId, clientSecret, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')'\n\n\t\ttry\n\t\t\tif not clientSecret?\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId }\n\t\t\telse\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId, clientSecret: clientSecret }\n\t\t\tcallback null, client\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgrantTypeAllowed: (clientId, grantType, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')'\n\n\t\treturn callback(false, grantType in ['authorization_code', 'refresh_token'])\n\n\n\tsaveAccessToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = AccessTokens.insert\n\t\t\t\taccessToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetAuthCode: Meteor.bindEnvironment (authCode, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')'\n\n\t\ttry\n\t\t\tcode = AuthCodes.findOne authCode: authCode\n\t\t\tcallback null, code\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveAuthCode: Meteor.bindEnvironment (code, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')'\n\n\t\ttry\n\t\t\tcodeId = AuthCodes.upsert\n\t\t\t\tauthCode: code\n\t\t\t,\n\t\t\t\tauthCode: code\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, codeId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveRefreshToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = RefreshTokens.insert\n\t\t\t\trefreshToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetRefreshToken: Meteor.bindEnvironment (refreshToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')'\n\n\t\ttry\n\t\t\ttoken = RefreshTokens.findOne refreshToken: refreshToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n","var AccessTokens, AuthCodes, Clients, Model, RefreshTokens, debug;\n\nAccessTokens = void 0;\n\nRefreshTokens = void 0;\n\nClients = void 0;\n\nAuthCodes = void 0;\n\ndebug = void 0;\n\nthis.Model = Model = (function() {\n  function Model(config) {\n    if (config == null) {\n      config = {};\n    }\n    if (config.accessTokensCollectionName == null) {\n      config.accessTokensCollectionName = 'oauth_access_tokens';\n    }\n    if (config.refreshTokensCollectionName == null) {\n      config.refreshTokensCollectionName = 'oauth_refresh_tokens';\n    }\n    if (config.clientsCollectionName == null) {\n      config.clientsCollectionName = 'oauth_clients';\n    }\n    if (config.authCodesCollectionName == null) {\n      config.authCodesCollectionName = 'oauth_auth_codes';\n    }\n    this.debug = debug = config.debug;\n    this.AccessTokens = AccessTokens = config.accessTokensCollection || new Meteor.Collection(config.accessTokensCollectionName);\n    this.RefreshTokens = RefreshTokens = config.refreshTokensCollection || new Meteor.Collection(config.refreshTokensCollectionName);\n    this.Clients = Clients = config.clientsCollection || new Meteor.Collection(config.clientsCollectionName);\n    this.AuthCodes = AuthCodes = config.authCodesCollection || new Meteor.Collection(config.authCodesCollectionName);\n  }\n\n  Model.prototype.getAccessToken = Meteor.bindEnvironment(function(bearerToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')');\n    }\n    try {\n      token = AccessTokens.findOne({\n        accessToken: bearerToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getClient = Meteor.bindEnvironment(function(clientId, clientSecret, callback) {\n    var client, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')');\n    }\n    try {\n      if (clientSecret == null) {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId\n        });\n      } else {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId,\n          clientSecret: clientSecret\n        });\n      }\n      return callback(null, client);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.grantTypeAllowed = function(clientId, grantType, callback) {\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')');\n    }\n    return callback(false, grantType === 'authorization_code' || grantType === 'refresh_token');\n  };\n\n  Model.prototype.saveAccessToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      tokenId = AccessTokens.insert({\n        accessToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, tokenId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getAuthCode = Meteor.bindEnvironment(function(authCode, callback) {\n    var code, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')');\n    }\n    try {\n      code = AuthCodes.findOne({\n        authCode: authCode\n      });\n      return callback(null, code);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAuthCode = Meteor.bindEnvironment(function(code, clientId, expires, user, callback) {\n    var codeId, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')');\n    }\n    try {\n      codeId = AuthCodes.upsert({\n        authCode: code\n      }, {\n        authCode: code,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, codeId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveRefreshToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      return tokenId = RefreshTokens.insert({\n        refreshToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      }, callback(null, tokenId));\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getRefreshToken = Meteor.bindEnvironment(function(refreshToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')');\n    }\n    try {\n      token = RefreshTokens.findOne({\n        refreshToken: refreshToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  return Model;\n\n})();\n","oauthserver = Npm.require('oauth2-server')\nexpress = Npm.require('express')\n\n# WebApp.rawConnectHandlers.use app\n# JsonRoutes.Middleware.use app\n\n\nclass OAuth2Server\n\tconstructor: (@config={}) ->\n\t\t@app = express()\n\n\t\t@routes = express()\n\n\t\t@model = new Model(@config)\n\n\t\t@oauth = oauthserver\n\t\t\tmodel: @model\n\t\t\tgrants: ['authorization_code', 'refresh_token']\n\t\t\tdebug: @config.debug\n\n\t\t@publishAuhorizedClients()\n\t\t@initRoutes()\n\n\t\treturn @\n\n\n\tpublishAuhorizedClients: ->\n\t\tMeteor.publish 'authorizedOAuth', ->\n\t\t\t\tif not @userId?\n\t\t\t\t\treturn @ready()\n\n\t\t\t\treturn Meteor.users.find\n\t\t\t\t\t_id: @userId\n\t\t\t\t,\n\t\t\t\t\tfields:\n\t\t\t\t\t\t'oauth.authorizedClients': 1\n\n\t\t\t\treturn user?\n\n\n\tinitRoutes: ->\n\t\tself = @\n\t\tdebugMiddleware = (req, res, next) ->\n\t\t\tif self.config.debug is true\n\t\t\t\tconsole.log '[OAuth2Server]', req.method, req.url\n\t\t\tnext()\n\n\t\t# Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n\t\t# and they pass the required information as query strings\n\t\ttransformRequestsNotUsingFormUrlencodedType = (req, res, next) ->\n\t\t\tif not req.is('application/x-www-form-urlencoded') and req.method is 'POST'\n\t\t\t\tif self.config.debug is true\n\t\t\t\t\tconsole.log '[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.'\n\t\t\t\treq.headers['content-type'] = 'application/x-www-form-urlencoded'\n\t\t\t\treq.body = Object.assign {}, req.body, req.query\n\t\t\tnext()\n\n\t\t@app.all '/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, @oauth.grant()\n\n\t\t@app.get '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tclient = self.model.Clients.findOne({ active: true, clientId: req.query.client_id })\n\t\t\tif not client?\n\t\t\t\treturn res.redirect '/oauth/error/404'\n\n\t\t\tif client.redirectUri isnt req.query.redirect_uri\n\t\t\t\treturn res.redirect '/oauth/error/invalid_redirect_uri'\n\n\t\t\tnext()\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tif not req.body.token?\n\t\t\t\treturn res.sendStatus(401).send('No token')\n\n\t\t\tuser = Meteor.users.findOne\n\t\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken req.body.token\n\n\t\t\tif not user?\n\t\t\t\treturn res.sendStatus(401).send('Invalid token')\n\n\t\t\treq.user =\n\t\t\t\tid: user._id\n\n\t\t\tnext()\n\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, @oauth.authCodeGrant (req, next) ->\n\t\t\tif req.body.allow is 'yes'\n\t\t\t\tMeteor.users.update req.user.id, {$addToSet: {'oauth.authorizedClients': @clientId}}\n\n\t\t\tnext(null, req.body.allow is 'yes', req.user)\n\n\t\t@app.use @routes\n\n\t\t@app.all '/oauth/*', @oauth.errorHandler()\n","var express, oauthserver;              \n\noauthserver = Npm.require('oauth2-server');\n\nexpress = Npm.require('express');\n\nOAuth2Server = (function() {\n  function OAuth2Server(config) {\n    this.config = config != null ? config : {};\n    this.app = express();\n    this.routes = express();\n    this.model = new Model(this.config);\n    this.oauth = oauthserver({\n      model: this.model,\n      grants: ['authorization_code', 'refresh_token'],\n      debug: this.config.debug\n    });\n    this.publishAuhorizedClients();\n    this.initRoutes();\n    return this;\n  }\n\n  OAuth2Server.prototype.publishAuhorizedClients = function() {\n    return Meteor.publish('authorizedOAuth', function() {\n      if (this.userId == null) {\n        return this.ready();\n      }\n      return Meteor.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          'oauth.authorizedClients': 1\n        }\n      });\n      return typeof user !== \"undefined\" && user !== null;\n    });\n  };\n\n  OAuth2Server.prototype.initRoutes = function() {\n    var debugMiddleware, self, transformRequestsNotUsingFormUrlencodedType;\n    self = this;\n    debugMiddleware = function(req, res, next) {\n      if (self.config.debug === true) {\n        console.log('[OAuth2Server]', req.method, req.url);\n      }\n      return next();\n    };\n    transformRequestsNotUsingFormUrlencodedType = function(req, res, next) {\n      if (!req.is('application/x-www-form-urlencoded') && req.method === 'POST') {\n        if (self.config.debug === true) {\n          console.log('[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.');\n        }\n        req.headers['content-type'] = 'application/x-www-form-urlencoded';\n        req.body = Object.assign({}, req.body, req.query);\n      }\n      return next();\n    };\n    this.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, this.oauth.grant());\n    this.app.get('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var client;\n      client = self.model.Clients.findOne({\n        active: true,\n        clientId: req.query.client_id\n      });\n      if (client == null) {\n        return res.redirect('/oauth/error/404');\n      }\n      if (client.redirectUri !== req.query.redirect_uri) {\n        return res.redirect('/oauth/error/invalid_redirect_uri');\n      }\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var user;\n      if (req.body.token == null) {\n        return res.sendStatus(401).send('No token');\n      }\n      user = Meteor.users.findOne({\n        'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.token)\n      });\n      if (user == null) {\n        return res.sendStatus(401).send('Invalid token');\n      }\n      req.user = {\n        id: user._id\n      };\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, this.oauth.authCodeGrant(function(req, next) {\n      if (req.body.allow === 'yes') {\n        Meteor.users.update(req.user.id, {\n          $addToSet: {\n            'oauth.authorizedClients': this.clientId\n          }\n        });\n      }\n      return next(null, req.body.allow === 'yes', req.user);\n    }));\n    this.app.use(this.routes);\n    return this.app.all('/oauth/*', this.oauth.errorHandler());\n  };\n\n  return OAuth2Server;\n\n})();\n"]}