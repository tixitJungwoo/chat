{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:irc/server/settings.js","meteor://ðŸ’»app/packages/rocketchat_irc/server/server.coffee","meteor://ðŸ’»app/server/server.coffee.js"],"names":["Meteor","startup","RocketChat","settings","addGroup","add","type","i18nLabel","i18nDescription","alert","section","IRC_AVAILABILITY","IRC_HOST","IRC_PORT","IrcClient","IrcLoginer","IrcLogoutCleanUper","IrcRoomJoiner","IrcRoomLeaver","IrcSender","Lru","MESSAGE_CACHE_SIZE","async","bind","ircClientMap","ircReceiveMessageCache","ircSendMessageCache","net","slice","bind1","fn","me","apply","arguments","get","Npm","require","f","g","bindEnvironment","args","self","length","call","concat","wrapAsync","loginReq","onReceiveRawMessage","onError","onTimeout","onClose","onConnect","connect","user","_id","ircPort","ircHost","msgBuf","isConnected","isDistroyed","socket","Socket","setNoDelay","setEncoding","setKeepAlive","on","isJoiningRoom","receiveMemberListBuf","pendingJoinRoomBuf","successLoginMessageRegex","failedLoginMessageRegex","receiveMessageRegex","receiveMemberListRegex","endMemberListRegex","addMemberToRoomRegex","removeMemberFromRoomRegex","quitMemberRegex","prototype","loginCb","initRoomList","disconnect","destroy","i","len","msg","ref","results","console","log","yellow","username","write","name","push","data","line","matchResult","toString","split","trim","indexOf","replace","exec","onReceiveMessage","onReceiveMemberList","onEndMemberList","onAddMemberToRoom","onRemoveMemberFromRoom","onQuitMember","onSuccessLoginMessage","onFailedLoginMessage","allowed","source","target","content","cacheKey","message","now","room","timestamp","Date","getTime","join","set","createUserWhenNotExist","models","Rooms","findOneByName","substring","createDirectRoomWhenNotExist","ts","sendMessage","roomName","members","appendMembers","member","newMembers","oldMembers","removeMembers","findOneByNameAndType","usernames","_","difference","removeUsernamesById","addUsernamesById","shift","joinRoom","t","sendRawMessage","u","rooms","roomsCursor","findByTypeContainingUsername","fields","fetch","leaveRoom","getMemberList","addUsernameByName","removeUsernameByName","removeUsernameFromAll","users","update","$set","status","findOne","email","pass","rid","sort","upsert","$setOnInsert","msgs","Subscriptions","$and","open","unread","getByUid","uid","create","login","ircClient","findOneById","callbacks","priority","LOW"],"mappings":"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","file":"/packages/rocketchat_irc.js","sourcesContent":["Meteor.startup(function() {\n\tRocketChat.settings.addGroup('IRC', function() {\n\n// Is this thing on?\n\t\tthis.add('IRC_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enabled',\n\t\t\ti18nDescription: 'IRC_Enabled',\n\t\t\talert: 'IRC Support is a work in progress. Use on a production system is not recommended at this time.'\n\t\t});\n\n// The IRC host server to talk to\n\t\tthis.add('IRC_Host', 'irc.freenode.net', {\n\t\t\ttype: 'string',\n\t\t\ti18nLabel: 'Host',\n\t\t\ti18nDescription: 'IRC_Hostname'\n\t\t});\n\n// The port to connect on the remote server\n\t\tthis.add('IRC_Port', 6667, {\n\t\t\ttype: 'int',\n\t\t\ti18nLabel: 'Port',\n\t\t\ti18nDescription: 'IRC_Port'\n\t\t});\n\n// Cache size of the messages we send the host IRC server\n\t\tthis.add('IRC_Message_Cache_Size', 200, {\n\t\t\ttype: 'int',\n\t\t\ti18nLabel: 'Message Cache Size',\n\t\t\ti18nDescription: 'IRC_Message_Cache_Size'\n\t\t});\n\n// Expandable box for modifying regular expressions for IRC interaction\n\t\tthis.section('Regular_Expressions', function() {\n\t\t\tthis.add('IRC_RegEx_successLogin', 'Welcome to the freenode Internet Relay Chat Network', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Login Successful',\n\t\t\t\ti18nDescription: 'IRC_Login_Success'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_failedLogin', 'You have not registered', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Login Failed',\n\t\t\t\ti18nDescription: 'IRC_Login_Fail'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_receiveMessage', '^:(\\S+)!~\\S+ PRIVMSG (\\S+) :(.+)$', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Private Message',\n\t\t\t\ti18nDescription: 'IRC_Private_Message'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_receiveMemberList', '^:\\S+ \\d+ \\S+ = #(\\S+) :(.*)$', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Channel User List Start',\n\t\t\t\ti18nDescription: 'IRC_Channel_Users'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_endMemberList', '^.+#(\\S+) :End of \\/NAMES list.$', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Channel User List End',\n\t\t\t\ti18nDescription: 'IRC_Channel_Users_End'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_addMemberToRoom', '^:(\\S+)!~\\S+ JOIN #(\\S+)$', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Join Channel',\n\t\t\t\ti18nDescription: 'IRC_Channel_Join'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_removeMemberFromRoom', '^:(\\S+)!~\\S+ PART #(\\S+)$', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Leave Channel',\n\t\t\t\ti18nDescription: 'IRC_Channel_Leave'\n\t\t\t});\n\t\t\tthis.add('IRC_RegEx_quitMember', '^:(\\S+)!~\\S+ QUIT .*$', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Quit IRC Session',\n\t\t\t\ti18nDescription: 'IRC_Quit'\n\t\t\t});\n\t\t});\n\n\t});\n});\n","# # #\n# Assign values\n#\n\n# Package availability\nIRC_AVAILABILITY = RocketChat.settings.get('IRC_Enabled');\n\n# Cache prep\nnet = Npm.require('net')\nLru = Npm.require('lru-cache')\nMESSAGE_CACHE_SIZE = RocketChat.settings.get('IRC_Message_Cache_Size');\nircReceiveMessageCache = Lru MESSAGE_CACHE_SIZE\nircSendMessageCache = Lru MESSAGE_CACHE_SIZE\n\n# IRC server\nIRC_PORT = RocketChat.settings.get('IRC_Port');\nIRC_HOST = RocketChat.settings.get('IRC_Host');\n\nircClientMap = {}\n\n\n# # #\n# Core functionality\n#\n\nbind = (f) ->\n\tg = Meteor.bindEnvironment (self, args...) -> f.apply(self, args)\n\t(args...) -> g @, args...\n\nasync = (f, args...) ->\n\tMeteor.wrapAsync(f)(args...)\n\nclass IrcClient\n\tconstructor: (@loginReq) ->\n\t\t@user = @loginReq.user\n\t\tircClientMap[@user._id] = this\n\t\t@ircPort = IRC_PORT\n\t\t@ircHost = IRC_HOST\n\t\t@msgBuf = []\n\n\t\t@isConnected = false\n\t\t@isDistroyed = false\n\t\t@socket = new net.Socket\n\t\t@socket.setNoDelay\n\t\t@socket.setEncoding 'utf-8'\n\t\t@socket.setKeepAlive true\n\t\t@onConnect = bind @onConnect\n\t\t@onClose = bind @onClose\n\t\t@onTimeout = bind @onTimeout\n\t\t@onError = bind @onError\n\t\t@onReceiveRawMessage = bind @onReceiveRawMessage\n\t\t@socket.on 'data', @onReceiveRawMessage\n\t\t@socket.on 'close', @onClose\n\t\t@socket.on 'timeout', @onTimeout\n\t\t@socket.on 'error', @onError\n\n\t\t@isJoiningRoom = false\n\t\t@receiveMemberListBuf = {}\n\t\t@pendingJoinRoomBuf = []\n\n\t\t@successLoginMessageRegex = /RocketChat.settings.get('IRC_RegEx_successLogin');/\n\t\t@failedLoginMessageRegex = /RocketChat.settings.get('IRC_RegEx_failedLogin');/\n\t\t@receiveMessageRegex = /RocketChat.settings.get('IRC_RegEx_receiveMessage');/\n\t\t@receiveMemberListRegex = /RocketChat.settings.get('IRC_RegEx_receiveMemberList');/\n\t\t@endMemberListRegex = /RocketChat.settings.get('IRC_RegEx_endMemberList');/\n\t\t@addMemberToRoomRegex = /RocketChat.settings.get('IRC_RegEx_addMemberToRoom');/\n\t\t@removeMemberFromRoomRegex = /RocketChat.settings.get('IRC_RegEx_removeMemberFromRoom');/\n\t\t@quitMemberRegex = /RocketChat.settings.get('IRC_RegEx_quitMember');/\n\n\tconnect: (@loginCb) =>\n\t\t@socket.connect @ircPort, @ircHost, @onConnect\n\t\t@initRoomList()\n\n\tdisconnect: () ->\n\t\t@isDistroyed = true\n\t\t@socket.destroy()\n\n\tonConnect: () =>\n\t\tconsole.log '[irc] onConnect -> '.yellow, @user.username, 'connect success.'\n\t\t@socket.write \"NICK #{@user.username}\\r\\n\"\n\t\t@socket.write \"USER #{@user.username} 0 * :#{@user.name}\\r\\n\"\n\t\t# message order could not make sure here\n\t\t@isConnected = true\n\t\t@socket.write msg for msg in @msgBuf\n\n\tonClose: (data) =>\n\t\tconsole.log '[irc] onClose -> '.yellow, @user.username, 'connection close.'\n\t\t@isConnected = false\n\t\tif @isDistroyed\n\t\t\tdelete ircClientMap[@user._id]\n\t\telse\n\t\t\t@connect()\n\n\tonTimeout: () =>\n\t\tconsole.log '[irc] onTimeout -> '.yellow, @user.username, 'connection timeout.', arguments\n\n\tonError: () =>\n\t\tconsole.log '[irc] onError -> '.yellow, @user.username, 'connection error.', arguments\n\n\tonReceiveRawMessage: (data) =>\n\t\tdata = data.toString().split('\\n')\n\t\tfor line in data\n\t\t\tline = line.trim()\n\t\t\tconsole.log \"[#{@ircHost}:#{@ircPort}]:\", line\n\t\t\t# Send heartbeat package to irc server\n\t\t\tif line.indexOf('PING') == 0\n\t\t\t\t@socket.write line.replace('PING :', 'PONG ')\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @receiveMessageRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onReceiveMessage matchResult[1], matchResult[2], matchResult[3]\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @receiveMemberListRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onReceiveMemberList matchResult[1], matchResult[2].split ' '\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @endMemberListRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onEndMemberList matchResult[1]\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @addMemberToRoomRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onAddMemberToRoom matchResult[1], matchResult[2]\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @removeMemberFromRoomRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onRemoveMemberFromRoom matchResult[1], matchResult[2]\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @quitMemberRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onQuitMember matchResult[1]\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @successLoginMessageRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onSuccessLoginMessage()\n\t\t\t\tcontinue\n\n\t\t\tmatchResult = @failedLoginMessageRegex.exec line\n\t\t\tif matchResult\n\t\t\t\t@onFailedLoginMessage()\n\t\t\t\tcontinue\n\n\tonSuccessLoginMessage: () ->\n\t\tconsole.log '[irc] onSuccessLoginMessage -> '.yellow\n\t\tif @loginCb\n\t\t\t@loginCb null, @loginReq\n\n\tonFailedLoginMessage: () ->\n\t\tconsole.log '[irc] onFailedLoginMessage -> '.yellow\n\t\t@loginReq.allowed = false\n\t\t@disconnect()\n\t\tif @loginCb\n\t\t\t@loginCb null, @loginReq\n\n\tonReceiveMessage: (source, target, content) ->\n\t\tnow = new Date\n\t\ttimestamp = now.getTime()\n\n\t\tcacheKey = [source, target, content].join ','\n\t\tconsole.log '[irc] ircSendMessageCache.get -> '.yellow, 'key:', cacheKey, 'value:', ircSendMessageCache.get(cacheKey), 'ts:', (timestamp - 1000)\n\t\tif ircSendMessageCache.get(cacheKey) > (timestamp - 1000)\n\t\t\treturn\n\t\telse\n\t\t\tircSendMessageCache.set cacheKey, timestamp\n\n\t\tconsole.log '[irc] onReceiveMessage -> '.yellow, 'source:', source, 'target:', target, 'content:', content\n\t\tsource = @createUserWhenNotExist source\n\t\tif target[0] == '#'\n\t\t\troom = RocketChat.models.Rooms.findOneByName target.substring(1)\n\t\telse\n\t\t\troom = @createDirectRoomWhenNotExist(source, @user)\n\n\t\tmessage =\n\t\t\tmsg: content\n\t\t\tts: now\n\t\tcacheKey = \"#{source.username}#{timestamp}\"\n\t\tircReceiveMessageCache.set cacheKey, true\n\t\tconsole.log '[irc] ircReceiveMessageCache.set -> '.yellow, 'key:', cacheKey\n\t\tRocketChat.sendMessage source, message, room\n\n\tonReceiveMemberList: (roomName, members) ->\n\t\t@receiveMemberListBuf[roomName] = @receiveMemberListBuf[roomName].concat members\n\n\tonEndMemberList: (roomName) ->\n\t\tnewMembers = @receiveMemberListBuf[roomName]\n\t\tconsole.log '[irc] onEndMemberList -> '.yellow, 'room:', roomName, 'members:', newMembers.join ','\n\t\troom = RocketChat.models.Rooms.findOneByNameAndType roomName, 'c'\n\t\tunless room\n\t\t\treturn\n\n\t\toldMembers = room.usernames\n\t\tappendMembers = _.difference newMembers, oldMembers\n\t\tremoveMembers = _.difference oldMembers, newMembers\n\n\t\tfor member in appendMembers\n\t\t\t@createUserWhenNotExist member\n\n\t\tRocketChat.models.Rooms.removeUsernamesById room._id, removeMembers\n\t\tRocketChat.models.Rooms.addUsernamesById room._id, appendMembers\n\n\t\t@isJoiningRoom = false\n\t\troomName = @pendingJoinRoomBuf.shift()\n\t\tif roomName\n\t\t\t@joinRoom\n\t\t\t\tt: 'c'\n\t\t\t\tname: roomName\n\n\tsendRawMessage: (msg) ->\n\t\tconsole.log '[irc] sendRawMessage -> '.yellow, msg.slice(0, -2)\n\t\tif @isConnected\n\t\t\t@socket.write msg\n\t\telse\n\t\t\t@msgBuf.push msg\n\n\tsendMessage: (room, message) ->\n\t\tconsole.log '[irc] sendMessage -> '.yellow, 'userName:', message.u.username\n\t\ttarget = ''\n\t\tif room.t == 'c'\n\t\t\ttarget = \"##{room.name}\"\n\t\telse if room.t == 'd'\n\t\t\tfor name in room.usernames\n\t\t\t\tif message.u.username != name\n\t\t\t\t\ttarget = name\n\t\t\t\t\tbreak\n\n\t\tcacheKey = [@user.username, target, message.msg].join ','\n\t\tconsole.log '[irc] ircSendMessageCache.set -> '.yellow, 'key:', cacheKey, 'ts:', message.ts.getTime()\n\t\tircSendMessageCache.set cacheKey, message.ts.getTime()\n\t\tmsg = \"PRIVMSG #{target} :#{message.msg}\\r\\n\"\n\t\t@sendRawMessage msg\n\n\tinitRoomList: ->\n\t\troomsCursor = RocketChat.models.Rooms.findByTypeContainingUsername 'c', @user.username,\n\t\t\tfields:\n\t\t\t\tname: 1\n\t\t\t\tt: 1\n\n\t\trooms = roomsCursor.fetch()\n\t\tfor room in rooms\n\t\t\t@joinRoom(room)\n\n\tjoinRoom: (room) ->\n\t\tif room.t isnt 'c' or room.name == 'general'\n\t\t\treturn\n\n\t\tif @isJoiningRoom\n\t\t\t@pendingJoinRoomBuf.push room.name\n\t\telse\n\t\t\tconsole.log '[irc] joinRoom -> '.yellow, 'roomName:', room.name, 'pendingJoinRoomBuf:', @pendingJoinRoomBuf.join ','\n\t\t\tmsg = \"JOIN ##{room.name}\\r\\n\"\n\t\t\t@receiveMemberListBuf[room.name] = []\n\t\t\t@sendRawMessage msg\n\t\t\t@isJoiningRoom = true\n\n\tleaveRoom: (room) ->\n\t\tif room.t isnt 'c'\n\t\t\treturn\n\t\tmsg = \"PART ##{room.name}\\r\\n\"\n\t\t@sendRawMessage msg\n\n\tgetMemberList: (room) ->\n\t\tif room.t isnt 'c'\n\t\t\treturn\n\t\tmsg = \"NAMES ##{room.name}\\r\\n\"\n\t\t@receiveMemberListBuf[room.name] = []\n\t\t@sendRawMessage msg\n\n\tonAddMemberToRoom: (member, roomName) ->\n\t\tif @user.username == member\n\t\t\treturn\n\n\t\tconsole.log '[irc] onAddMemberToRoom -> '.yellow, 'roomName:', roomName, 'member:', member\n\t\t@createUserWhenNotExist member\n\n\t\tRocketChat.models.Rooms.addUsernameByName roomName, member\n\n\tonRemoveMemberFromRoom: (member, roomName)->\n\t\tconsole.log '[irc] onRemoveMemberFromRoom -> '.yellow, 'roomName:', roomName, 'member:', member\n\t\tRocketChat.models.Rooms.removeUsernameByName roomName, member\n\n\tonQuitMember: (member) ->\n\t\tconsole.log '[irc] onQuitMember ->'.yellow, 'username:', member\n\t\tRocketChat.models.Rooms.removeUsernameFromAll member\n\n\t\tMeteor.users.update {name: member},\n\t\t\t$set:\n\t\t\t\tstatus: 'offline'\n\n\tcreateUserWhenNotExist: (name) ->\n\t\tuser = Meteor.users.findOne {name: name}\n\t\tunless user\n\t\t\tconsole.log '[irc] createNotExistUser ->'.yellow, 'userName:', name\n\t\t\tMeteor.call 'registerUser',\n\t\t\t\temail: \"#{name}@rocketchat.org\"\n\t\t\t\tpass: 'rocketchat'\n\t\t\t\tname: name\n\t\t\tMeteor.users.update {name: name},\n\t\t\t\t$set:\n\t\t\t\t\tstatus: 'online'\n\t\t\t\t\tusername: name\n\t\t\tuser = Meteor.users.findOne {name: name}\n\t\treturn user\n\n\n\tcreateDirectRoomWhenNotExist: (source, target) ->\n\t\tconsole.log '[irc] createDirectRoomWhenNotExist -> '.yellow, 'source:', source, 'target:', target\n\t\trid = [source._id, target._id].sort().join('')\n\t\tnow = new Date()\n\t\tRocketChat.models.Rooms.upsert\n\t\t\t_id: rid\n\t\t,\n\t\t\t$set:\n\t\t\t\tusernames: [source.username, target.username]\n\t\t\t$setOnInsert:\n\t\t\t\tt: 'd'\n\t\t\t\tmsgs: 0\n\t\t\t\tts: now\n\n\t\tRocketChat.models.Subscriptions.upsert\n\t\t\trid: rid\n\t\t\t$and: [{'u._id': target._id}]\n\t\t,\n\t\t\t$setOnInsert:\n\t\t\t\tname: source.username\n\t\t\t\tt: 'd'\n\t\t\t\topen: false\n\t\t\t\talert: false\n\t\t\t\tunread: 0\n\t\t\t\tu:\n\t\t\t\t\t_id: target._id\n\t\t\t\t\tusername: target.username\n\t\treturn {\n\t\t\tt: 'd'\n\t\t\t_id: rid\n\t\t}\n\nIrcClient.getByUid = (uid) ->\n\treturn ircClientMap[uid]\n\nIrcClient.create = (login) ->\n\tunless login.user?\n\t\treturn login\n\tunless login.user._id of ircClientMap\n\t\tircClient = new IrcClient login\n\t\treturn async ircClient.connect\n\n\treturn login\n\n\nclass IrcLoginer\n\tconstructor: (login) ->\n\t\tconsole.log '[irc] validateLogin -> '.yellow, login\n\t\treturn IrcClient.create login\n\n\nclass IrcSender\n\tconstructor: (message) ->\n\t\tname = message.u.username\n\t\ttimestamp = message.ts.getTime()\n\t\tcacheKey = \"#{name}#{timestamp}\"\n\t\tif ircReceiveMessageCache.get cacheKey\n\t\t\treturn message\n\n\t\troom = RocketChat.models.Rooms.findOneById message.rid, { fields: { name: 1, usernames: 1, t: 1 } }\n\t\tircClient = IrcClient.getByUid message.u._id\n\t\tircClient.sendMessage room, message\n\t\treturn message\n\n\nclass IrcRoomJoiner\n\tconstructor: (user, room) ->\n\t\tircClient = IrcClient.getByUid user._id\n\t\tircClient.joinRoom room\n\t\treturn room\n\n\nclass IrcRoomLeaver\n\tconstructor: (user, room) ->\n\t\tircClient = IrcClient.getByUid user._id\n\t\tircClient.leaveRoom room\n\t\treturn room\n\n\nclass IrcLogoutCleanUper\n\tconstructor: (user) ->\n\t\tircClient = IrcClient.getByUid user._id\n\t\tircClient.disconnect()\n\t\treturn user\n\n\n# # #\n# Make magic happen\n#\n\n# Only proceed if the package has been enabled\nif IRC_AVAILABILITY == true\n\tRocketChat.callbacks.add 'beforeValidateLogin', IrcLoginer, RocketChat.callbacks.priority.LOW, 'irc-loginer'\n\tRocketChat.callbacks.add 'beforeSaveMessage', IrcSender, RocketChat.callbacks.priority.LOW, 'irc-sender'\n\tRocketChat.callbacks.add 'beforeJoinRoom', IrcRoomJoiner, RocketChat.callbacks.priority.LOW, 'irc-room-joiner'\n\tRocketChat.callbacks.add 'beforeCreateChannel', IrcRoomJoiner, RocketChat.callbacks.priority.LOW, 'irc-room-joiner-create-channel'\n\tRocketChat.callbacks.add 'beforeLeaveRoom', IrcRoomLeaver, RocketChat.callbacks.priority.LOW, 'irc-room-leaver'\n\tRocketChat.callbacks.add 'afterLogoutCleanUp', IrcLogoutCleanUper, RocketChat.callbacks.priority.LOW, 'irc-clean-up'\nelse\n\treturn\n","var IRC_AVAILABILITY, IRC_HOST, IRC_PORT, IrcClient, IrcLoginer, IrcLogoutCleanUper, IrcRoomJoiner, IrcRoomLeaver, IrcSender, Lru, MESSAGE_CACHE_SIZE, async, bind, ircClientMap, ircReceiveMessageCache, ircSendMessageCache, net,\n  slice = [].slice,\n  bind1 = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nIRC_AVAILABILITY = RocketChat.settings.get('IRC_Enabled');\n\nnet = Npm.require('net');\n\nLru = Npm.require('lru-cache');\n\nMESSAGE_CACHE_SIZE = RocketChat.settings.get('IRC_Message_Cache_Size');\n\nircReceiveMessageCache = Lru(MESSAGE_CACHE_SIZE);\n\nircSendMessageCache = Lru(MESSAGE_CACHE_SIZE);\n\nIRC_PORT = RocketChat.settings.get('IRC_Port');\n\nIRC_HOST = RocketChat.settings.get('IRC_Host');\n\nircClientMap = {};\n\nbind = function(f) {\n  var g;\n  g = Meteor.bindEnvironment(function() {\n    var args, self;\n    self = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return f.apply(self, args);\n  });\n  return function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return g.apply(null, [this].concat(slice.call(args)));\n  };\n};\n\nasync = function() {\n  var args, f;\n  f = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n  return Meteor.wrapAsync(f).apply(null, args);\n};\n\nIrcClient = (function() {\n  function IrcClient(loginReq) {\n    this.loginReq = loginReq;\n    this.onReceiveRawMessage = bind1(this.onReceiveRawMessage, this);\n    this.onError = bind1(this.onError, this);\n    this.onTimeout = bind1(this.onTimeout, this);\n    this.onClose = bind1(this.onClose, this);\n    this.onConnect = bind1(this.onConnect, this);\n    this.connect = bind1(this.connect, this);\n    this.user = this.loginReq.user;\n    ircClientMap[this.user._id] = this;\n    this.ircPort = IRC_PORT;\n    this.ircHost = IRC_HOST;\n    this.msgBuf = [];\n    this.isConnected = false;\n    this.isDistroyed = false;\n    this.socket = new net.Socket;\n    this.socket.setNoDelay;\n    this.socket.setEncoding('utf-8');\n    this.socket.setKeepAlive(true);\n    this.onConnect = bind(this.onConnect);\n    this.onClose = bind(this.onClose);\n    this.onTimeout = bind(this.onTimeout);\n    this.onError = bind(this.onError);\n    this.onReceiveRawMessage = bind(this.onReceiveRawMessage);\n    this.socket.on('data', this.onReceiveRawMessage);\n    this.socket.on('close', this.onClose);\n    this.socket.on('timeout', this.onTimeout);\n    this.socket.on('error', this.onError);\n    this.isJoiningRoom = false;\n    this.receiveMemberListBuf = {};\n    this.pendingJoinRoomBuf = [];\n    this.successLoginMessageRegex = /RocketChat.settings.get('IRC_RegEx_successLogin');/;\n    this.failedLoginMessageRegex = /RocketChat.settings.get('IRC_RegEx_failedLogin');/;\n    this.receiveMessageRegex = /RocketChat.settings.get('IRC_RegEx_receiveMessage');/;\n    this.receiveMemberListRegex = /RocketChat.settings.get('IRC_RegEx_receiveMemberList');/;\n    this.endMemberListRegex = /RocketChat.settings.get('IRC_RegEx_endMemberList');/;\n    this.addMemberToRoomRegex = /RocketChat.settings.get('IRC_RegEx_addMemberToRoom');/;\n    this.removeMemberFromRoomRegex = /RocketChat.settings.get('IRC_RegEx_removeMemberFromRoom');/;\n    this.quitMemberRegex = /RocketChat.settings.get('IRC_RegEx_quitMember');/;\n  }\n\n  IrcClient.prototype.connect = function(loginCb) {\n    this.loginCb = loginCb;\n    this.socket.connect(this.ircPort, this.ircHost, this.onConnect);\n    return this.initRoomList();\n  };\n\n  IrcClient.prototype.disconnect = function() {\n    this.isDistroyed = true;\n    return this.socket.destroy();\n  };\n\n  IrcClient.prototype.onConnect = function() {\n    var i, len, msg, ref, results;\n    console.log('[irc] onConnect -> '.yellow, this.user.username, 'connect success.');\n    this.socket.write(\"NICK \" + this.user.username + \"\\r\\n\");\n    this.socket.write(\"USER \" + this.user.username + \" 0 * :\" + this.user.name + \"\\r\\n\");\n    this.isConnected = true;\n    ref = this.msgBuf;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      msg = ref[i];\n      results.push(this.socket.write(msg));\n    }\n    return results;\n  };\n\n  IrcClient.prototype.onClose = function(data) {\n    console.log('[irc] onClose -> '.yellow, this.user.username, 'connection close.');\n    this.isConnected = false;\n    if (this.isDistroyed) {\n      return delete ircClientMap[this.user._id];\n    } else {\n      return this.connect();\n    }\n  };\n\n  IrcClient.prototype.onTimeout = function() {\n    return console.log('[irc] onTimeout -> '.yellow, this.user.username, 'connection timeout.', arguments);\n  };\n\n  IrcClient.prototype.onError = function() {\n    return console.log('[irc] onError -> '.yellow, this.user.username, 'connection error.', arguments);\n  };\n\n  IrcClient.prototype.onReceiveRawMessage = function(data) {\n    var i, len, line, matchResult, results;\n    data = data.toString().split('\\n');\n    results = [];\n    for (i = 0, len = data.length; i < len; i++) {\n      line = data[i];\n      line = line.trim();\n      console.log(\"[\" + this.ircHost + \":\" + this.ircPort + \"]:\", line);\n      if (line.indexOf('PING') === 0) {\n        this.socket.write(line.replace('PING :', 'PONG '));\n        continue;\n      }\n      matchResult = this.receiveMessageRegex.exec(line);\n      if (matchResult) {\n        this.onReceiveMessage(matchResult[1], matchResult[2], matchResult[3]);\n        continue;\n      }\n      matchResult = this.receiveMemberListRegex.exec(line);\n      if (matchResult) {\n        this.onReceiveMemberList(matchResult[1], matchResult[2].split(' '));\n        continue;\n      }\n      matchResult = this.endMemberListRegex.exec(line);\n      if (matchResult) {\n        this.onEndMemberList(matchResult[1]);\n        continue;\n      }\n      matchResult = this.addMemberToRoomRegex.exec(line);\n      if (matchResult) {\n        this.onAddMemberToRoom(matchResult[1], matchResult[2]);\n        continue;\n      }\n      matchResult = this.removeMemberFromRoomRegex.exec(line);\n      if (matchResult) {\n        this.onRemoveMemberFromRoom(matchResult[1], matchResult[2]);\n        continue;\n      }\n      matchResult = this.quitMemberRegex.exec(line);\n      if (matchResult) {\n        this.onQuitMember(matchResult[1]);\n        continue;\n      }\n      matchResult = this.successLoginMessageRegex.exec(line);\n      if (matchResult) {\n        this.onSuccessLoginMessage();\n        continue;\n      }\n      matchResult = this.failedLoginMessageRegex.exec(line);\n      if (matchResult) {\n        this.onFailedLoginMessage();\n        continue;\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  IrcClient.prototype.onSuccessLoginMessage = function() {\n    console.log('[irc] onSuccessLoginMessage -> '.yellow);\n    if (this.loginCb) {\n      return this.loginCb(null, this.loginReq);\n    }\n  };\n\n  IrcClient.prototype.onFailedLoginMessage = function() {\n    console.log('[irc] onFailedLoginMessage -> '.yellow);\n    this.loginReq.allowed = false;\n    this.disconnect();\n    if (this.loginCb) {\n      return this.loginCb(null, this.loginReq);\n    }\n  };\n\n  IrcClient.prototype.onReceiveMessage = function(source, target, content) {\n    var cacheKey, message, now, room, timestamp;\n    now = new Date;\n    timestamp = now.getTime();\n    cacheKey = [source, target, content].join(',');\n    console.log('[irc] ircSendMessageCache.get -> '.yellow, 'key:', cacheKey, 'value:', ircSendMessageCache.get(cacheKey), 'ts:', timestamp - 1000);\n    if (ircSendMessageCache.get(cacheKey) > (timestamp - 1000)) {\n      return;\n    } else {\n      ircSendMessageCache.set(cacheKey, timestamp);\n    }\n    console.log('[irc] onReceiveMessage -> '.yellow, 'source:', source, 'target:', target, 'content:', content);\n    source = this.createUserWhenNotExist(source);\n    if (target[0] === '#') {\n      room = RocketChat.models.Rooms.findOneByName(target.substring(1));\n    } else {\n      room = this.createDirectRoomWhenNotExist(source, this.user);\n    }\n    message = {\n      msg: content,\n      ts: now\n    };\n    cacheKey = \"\" + source.username + timestamp;\n    ircReceiveMessageCache.set(cacheKey, true);\n    console.log('[irc] ircReceiveMessageCache.set -> '.yellow, 'key:', cacheKey);\n    return RocketChat.sendMessage(source, message, room);\n  };\n\n  IrcClient.prototype.onReceiveMemberList = function(roomName, members) {\n    return this.receiveMemberListBuf[roomName] = this.receiveMemberListBuf[roomName].concat(members);\n  };\n\n  IrcClient.prototype.onEndMemberList = function(roomName) {\n    var appendMembers, i, len, member, newMembers, oldMembers, removeMembers, room;\n    newMembers = this.receiveMemberListBuf[roomName];\n    console.log('[irc] onEndMemberList -> '.yellow, 'room:', roomName, 'members:', newMembers.join(','));\n    room = RocketChat.models.Rooms.findOneByNameAndType(roomName, 'c');\n    if (!room) {\n      return;\n    }\n    oldMembers = room.usernames;\n    appendMembers = _.difference(newMembers, oldMembers);\n    removeMembers = _.difference(oldMembers, newMembers);\n    for (i = 0, len = appendMembers.length; i < len; i++) {\n      member = appendMembers[i];\n      this.createUserWhenNotExist(member);\n    }\n    RocketChat.models.Rooms.removeUsernamesById(room._id, removeMembers);\n    RocketChat.models.Rooms.addUsernamesById(room._id, appendMembers);\n    this.isJoiningRoom = false;\n    roomName = this.pendingJoinRoomBuf.shift();\n    if (roomName) {\n      return this.joinRoom({\n        t: 'c',\n        name: roomName\n      });\n    }\n  };\n\n  IrcClient.prototype.sendRawMessage = function(msg) {\n    console.log('[irc] sendRawMessage -> '.yellow, msg.slice(0, -2));\n    if (this.isConnected) {\n      return this.socket.write(msg);\n    } else {\n      return this.msgBuf.push(msg);\n    }\n  };\n\n  IrcClient.prototype.sendMessage = function(room, message) {\n    var cacheKey, i, len, msg, name, ref, target;\n    console.log('[irc] sendMessage -> '.yellow, 'userName:', message.u.username);\n    target = '';\n    if (room.t === 'c') {\n      target = \"#\" + room.name;\n    } else if (room.t === 'd') {\n      ref = room.usernames;\n      for (i = 0, len = ref.length; i < len; i++) {\n        name = ref[i];\n        if (message.u.username !== name) {\n          target = name;\n          break;\n        }\n      }\n    }\n    cacheKey = [this.user.username, target, message.msg].join(',');\n    console.log('[irc] ircSendMessageCache.set -> '.yellow, 'key:', cacheKey, 'ts:', message.ts.getTime());\n    ircSendMessageCache.set(cacheKey, message.ts.getTime());\n    msg = \"PRIVMSG \" + target + \" :\" + message.msg + \"\\r\\n\";\n    return this.sendRawMessage(msg);\n  };\n\n  IrcClient.prototype.initRoomList = function() {\n    var i, len, results, room, rooms, roomsCursor;\n    roomsCursor = RocketChat.models.Rooms.findByTypeContainingUsername('c', this.user.username, {\n      fields: {\n        name: 1,\n        t: 1\n      }\n    });\n    rooms = roomsCursor.fetch();\n    results = [];\n    for (i = 0, len = rooms.length; i < len; i++) {\n      room = rooms[i];\n      results.push(this.joinRoom(room));\n    }\n    return results;\n  };\n\n  IrcClient.prototype.joinRoom = function(room) {\n    var msg;\n    if (room.t !== 'c' || room.name === 'general') {\n      return;\n    }\n    if (this.isJoiningRoom) {\n      return this.pendingJoinRoomBuf.push(room.name);\n    } else {\n      console.log('[irc] joinRoom -> '.yellow, 'roomName:', room.name, 'pendingJoinRoomBuf:', this.pendingJoinRoomBuf.join(','));\n      msg = \"JOIN #\" + room.name + \"\\r\\n\";\n      this.receiveMemberListBuf[room.name] = [];\n      this.sendRawMessage(msg);\n      return this.isJoiningRoom = true;\n    }\n  };\n\n  IrcClient.prototype.leaveRoom = function(room) {\n    var msg;\n    if (room.t !== 'c') {\n      return;\n    }\n    msg = \"PART #\" + room.name + \"\\r\\n\";\n    return this.sendRawMessage(msg);\n  };\n\n  IrcClient.prototype.getMemberList = function(room) {\n    var msg;\n    if (room.t !== 'c') {\n      return;\n    }\n    msg = \"NAMES #\" + room.name + \"\\r\\n\";\n    this.receiveMemberListBuf[room.name] = [];\n    return this.sendRawMessage(msg);\n  };\n\n  IrcClient.prototype.onAddMemberToRoom = function(member, roomName) {\n    if (this.user.username === member) {\n      return;\n    }\n    console.log('[irc] onAddMemberToRoom -> '.yellow, 'roomName:', roomName, 'member:', member);\n    this.createUserWhenNotExist(member);\n    return RocketChat.models.Rooms.addUsernameByName(roomName, member);\n  };\n\n  IrcClient.prototype.onRemoveMemberFromRoom = function(member, roomName) {\n    console.log('[irc] onRemoveMemberFromRoom -> '.yellow, 'roomName:', roomName, 'member:', member);\n    return RocketChat.models.Rooms.removeUsernameByName(roomName, member);\n  };\n\n  IrcClient.prototype.onQuitMember = function(member) {\n    console.log('[irc] onQuitMember ->'.yellow, 'username:', member);\n    RocketChat.models.Rooms.removeUsernameFromAll(member);\n    return Meteor.users.update({\n      name: member\n    }, {\n      $set: {\n        status: 'offline'\n      }\n    });\n  };\n\n  IrcClient.prototype.createUserWhenNotExist = function(name) {\n    var user;\n    user = Meteor.users.findOne({\n      name: name\n    });\n    if (!user) {\n      console.log('[irc] createNotExistUser ->'.yellow, 'userName:', name);\n      Meteor.call('registerUser', {\n        email: name + \"@rocketchat.org\",\n        pass: 'rocketchat',\n        name: name\n      });\n      Meteor.users.update({\n        name: name\n      }, {\n        $set: {\n          status: 'online',\n          username: name\n        }\n      });\n      user = Meteor.users.findOne({\n        name: name\n      });\n    }\n    return user;\n  };\n\n  IrcClient.prototype.createDirectRoomWhenNotExist = function(source, target) {\n    var now, rid;\n    console.log('[irc] createDirectRoomWhenNotExist -> '.yellow, 'source:', source, 'target:', target);\n    rid = [source._id, target._id].sort().join('');\n    now = new Date();\n    RocketChat.models.Rooms.upsert({\n      _id: rid\n    }, {\n      $set: {\n        usernames: [source.username, target.username]\n      },\n      $setOnInsert: {\n        t: 'd',\n        msgs: 0,\n        ts: now\n      }\n    });\n    RocketChat.models.Subscriptions.upsert({\n      rid: rid,\n      $and: [\n        {\n          'u._id': target._id\n        }\n      ]\n    }, {\n      $setOnInsert: {\n        name: source.username,\n        t: 'd',\n        open: false,\n        alert: false,\n        unread: 0,\n        u: {\n          _id: target._id,\n          username: target.username\n        }\n      }\n    });\n    return {\n      t: 'd',\n      _id: rid\n    };\n  };\n\n  return IrcClient;\n\n})();\n\nIrcClient.getByUid = function(uid) {\n  return ircClientMap[uid];\n};\n\nIrcClient.create = function(login) {\n  var ircClient;\n  if (login.user == null) {\n    return login;\n  }\n  if (!(login.user._id in ircClientMap)) {\n    ircClient = new IrcClient(login);\n    return async(ircClient.connect);\n  }\n  return login;\n};\n\nIrcLoginer = (function() {\n  function IrcLoginer(login) {\n    console.log('[irc] validateLogin -> '.yellow, login);\n    return IrcClient.create(login);\n  }\n\n  return IrcLoginer;\n\n})();\n\nIrcSender = (function() {\n  function IrcSender(message) {\n    var cacheKey, ircClient, name, room, timestamp;\n    name = message.u.username;\n    timestamp = message.ts.getTime();\n    cacheKey = \"\" + name + timestamp;\n    if (ircReceiveMessageCache.get(cacheKey)) {\n      return message;\n    }\n    room = RocketChat.models.Rooms.findOneById(message.rid, {\n      fields: {\n        name: 1,\n        usernames: 1,\n        t: 1\n      }\n    });\n    ircClient = IrcClient.getByUid(message.u._id);\n    ircClient.sendMessage(room, message);\n    return message;\n  }\n\n  return IrcSender;\n\n})();\n\nIrcRoomJoiner = (function() {\n  function IrcRoomJoiner(user, room) {\n    var ircClient;\n    ircClient = IrcClient.getByUid(user._id);\n    ircClient.joinRoom(room);\n    return room;\n  }\n\n  return IrcRoomJoiner;\n\n})();\n\nIrcRoomLeaver = (function() {\n  function IrcRoomLeaver(user, room) {\n    var ircClient;\n    ircClient = IrcClient.getByUid(user._id);\n    ircClient.leaveRoom(room);\n    return room;\n  }\n\n  return IrcRoomLeaver;\n\n})();\n\nIrcLogoutCleanUper = (function() {\n  function IrcLogoutCleanUper(user) {\n    var ircClient;\n    ircClient = IrcClient.getByUid(user._id);\n    ircClient.disconnect();\n    return user;\n  }\n\n  return IrcLogoutCleanUper;\n\n})();\n\nif (IRC_AVAILABILITY === true) {\n  RocketChat.callbacks.add('beforeValidateLogin', IrcLoginer, RocketChat.callbacks.priority.LOW, 'irc-loginer');\n  RocketChat.callbacks.add('beforeSaveMessage', IrcSender, RocketChat.callbacks.priority.LOW, 'irc-sender');\n  RocketChat.callbacks.add('beforeJoinRoom', IrcRoomJoiner, RocketChat.callbacks.priority.LOW, 'irc-room-joiner');\n  RocketChat.callbacks.add('beforeCreateChannel', IrcRoomJoiner, RocketChat.callbacks.priority.LOW, 'irc-room-joiner-create-channel');\n  RocketChat.callbacks.add('beforeLeaveRoom', IrcRoomLeaver, RocketChat.callbacks.priority.LOW, 'irc-room-leaver');\n  RocketChat.callbacks.add('afterLogoutCleanUp', IrcLogoutCleanUper, RocketChat.callbacks.priority.LOW, 'irc-clean-up');\n} else {\n  return;\n}\n"]}