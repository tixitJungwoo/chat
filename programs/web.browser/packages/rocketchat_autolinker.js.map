{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:autolinker/client.js"],"names":["Autolinker","module","watch","require","v","AutoLinker","message","_","trim","html","regUrls","RegExp","RocketChat","settings","get","autolinker","stripPrefix","urls","schemeMatches","wwwMatches","tldMatches","email","phone","twitter","replaceFn","match","getType","test","matchedText","indexOf","Meteor","absoluteUrl","tag","buildTag","setAttr","regNonAutoLink","msgParts","split","forEach","part","index","length","codeMatch","link","join","callbacks","add"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,mBAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA,sBAASC,CAAT,EAAW;AAACJ,eAAWI,CAAX;AAAa;AAAzB,CAAnC,EAA8D,CAA9D;;AAOf,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC5B,KAAIC,EAAEC,IAAF,CAAOF,QAAQG,IAAf,CAAJ,EAA0B;AACzB,MAAMC,UAAU,IAAIC,MAAJ,CAAWC,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,uBAAxB,CAAX,CAAhB;AAEA,MAAMC,aAAa,IAAIf,UAAJ,CAAe;AACjCgB,gBAAaJ,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,wBAAxB,CADoB;AAEjCG,SAAM;AACLC,mBAAeN,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,wBAAxB,CADV;AAELK,gBAAYP,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,qBAAxB,CAFP;AAGLM,gBAAYR,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,qBAAxB;AAHP,IAF2B;AAOjCO,UAAOT,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,kBAAxB,CAP0B;AAQjCQ,UAAOV,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,kBAAxB,CAR0B;AASjCS,YAAS,KATwB;AAUjCC,YAViC,YAUvBC,KAVuB,EAUhB;AAChB,QAAIA,MAAMC,OAAN,OAAoB,KAAxB,EAA+B;AAC9B,SAAIhB,QAAQiB,IAAR,CAAaF,MAAMG,WAAnB,CAAJ,EAAqC;AACpC,UAAIH,MAAMG,WAAN,CAAkBC,OAAlB,CAA0BC,OAAOC,WAAP,EAA1B,MAAoD,CAAxD,EAA2D;AAC1D,WAAMC,MAAMP,MAAMQ,QAAN,EAAZ,CAD0D,CACzB;;AACjCD,WAAIE,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,EAF0D,CAE3B;;AAC/B,cAAOF,GAAP;AACA;;AAED,aAAO,IAAP;AACA;AACD;;AAED,WAAO,IAAP;AACA;AAxBgC,GAAf,CAAnB;AA2BA,MAAIG,iBAAiB,2CAArB;;AACA,MAAIvB,WAAWC,QAAX,CAAoBC,GAApB,CAAwB,eAAxB,CAAJ,EAA8C;AAC7CqB,oBAAiB,yEAAjB;AACA,GAjCwB,CAmCzB;;;AACA,MAAMC,WAAW9B,QAAQG,IAAR,CAAa4B,KAAb,CAAmBF,cAAnB,CAAjB;AAEAC,WAASE,OAAT,CAAiB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACjC,OAAID,QAAQA,KAAKE,MAAL,GAAc,CAA1B,EAA6B;AAC5B;AACA,QAAMC,YAAYH,KAAKd,KAAL,CAAWU,cAAX,CAAlB;;AACA,QAAI,CAACO,SAAL,EAAgB;AACfN,cAASI,KAAT,IAAkBzB,WAAW4B,IAAX,CAAgBJ,IAAhB,CAAlB;AACA;AACD;AACD,GARD,EAtCyB,CAgDzB;;AACAjC,UAAQG,IAAR,GAAe2B,SAASQ,IAAT,CAAc,EAAd,CAAf;AACA;;AAED,QAAOtC,OAAP;AACA;;AAEDM,WAAWiC,SAAX,CAAqBC,GAArB,CAAyB,eAAzB,EAA0CzC,UAA1C,wE","file":"/packages/rocketchat_autolinker.js","sourcesContent":["//\n// AutoLinker is a named function that will replace links on messages\n// @param {Object} message - The message object\n//\n\nimport Autolinker from 'autolinker';\n\nfunction AutoLinker(message) {\n\tif (_.trim(message.html)) {\n\t\tconst regUrls = new RegExp(RocketChat.settings.get('AutoLinker_UrlsRegExp'));\n\n\t\tconst autolinker = new Autolinker({\n\t\t\tstripPrefix: RocketChat.settings.get('AutoLinker_StripPrefix'),\n\t\t\turls: {\n\t\t\t\tschemeMatches: RocketChat.settings.get('AutoLinker_Urls_Scheme'),\n\t\t\t\twwwMatches: RocketChat.settings.get('AutoLinker_Urls_www'),\n\t\t\t\ttldMatches: RocketChat.settings.get('AutoLinker_Urls_TLD')\n\t\t\t},\n\t\t\temail: RocketChat.settings.get('AutoLinker_Email'),\n\t\t\tphone: RocketChat.settings.get('AutoLinker_Phone'),\n\t\t\ttwitter: false,\n\t\t\treplaceFn(match) {\n\t\t\t\tif (match.getType() === 'url') {\n\t\t\t\t\tif (regUrls.test(match.matchedText)) {\n\t\t\t\t\t\tif (match.matchedText.indexOf(Meteor.absoluteUrl()) === 0) {\n\t\t\t\t\t\t\tconst tag = match.buildTag();\t\t\t\t// returns an `Autolinker.HtmlTag` instance for an <a> tag\n\t\t\t\t\t\t\ttag.setAttr('target', '');\t\t\t\t\t// sets target to empty, instead of _blank\n\t\t\t\t\t\t\treturn tag;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tlet regNonAutoLink = /(```\\w*[\\n ]?[\\s\\S]*?```+?)|(`(?:[^`]+)`)/;\n\t\tif (RocketChat.settings.get('Katex_Enabled')) {\n\t\t\tregNonAutoLink = /(```\\w*[\\n ]?[\\s\\S]*?```+?)|(`(?:[^`]+)`)|(\\\\\\(\\w*[\\n ]?[\\s\\S]*?\\\\\\)+?)/;\n\t\t}\n\n\t\t// Separate text in code blocks and non code blocks\n\t\tconst msgParts = message.html.split(regNonAutoLink);\n\n\t\tmsgParts.forEach((part, index) => {\n\t\t\tif (part && part.length > 0) {\n\t\t\t\t// Verify if this part is code\n\t\t\t\tconst codeMatch = part.match(regNonAutoLink);\n\t\t\t\tif (!codeMatch) {\n\t\t\t\t\tmsgParts[index] = autolinker.link(part);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Re-mount message\n\t\tmessage.html = msgParts.join('');\n\t}\n\n\treturn message;\n}\n\nRocketChat.callbacks.add('renderMessage', AutoLinker);\n"]}