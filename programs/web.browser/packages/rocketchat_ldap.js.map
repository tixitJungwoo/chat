{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:ldap/client/loginHelper.js"],"names":["Meteor","loginWithLDAP","username","password","customLdapOptions","callback","args","i","arguments","length","push","shift","pop","loginRequest","ldap","ldapPass","ldapOptions","Accounts","callLoginMethod","methodArguments","userCallback","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACAA,OAAOC,aAAP,GAAuB,UAASC,QAAT,EAAmBC,QAAnB,EAA6BC,iBAA7B,EAAgDC,QAAhD,EAA0D;AAChF;AACA,KAAMC,OAAO,EAAb;;AACA,MAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAA9B,EAAsCF,GAAtC,EAA2C;AAC1CD,OAAKI,IAAL,CAAUF,UAAUD,CAAV,CAAV;AACA,EAL+E,CAMhF;;;AACAL,YAAWI,KAAKK,KAAL,EAAX;AACAR,YAAWG,KAAKK,KAAL,EAAX,CARgF,CAUhF;AACA;;AACA,KAAI,OAAOL,KAAKA,KAAKG,MAAL,GAAY,CAAjB,CAAP,KAA+B,UAAnC,EAA+C;AAC9CJ,aAAWC,KAAKM,GAAL,EAAX;AACA,EAFD,MAEO;AACNP,aAAW,IAAX;AACA,EAhB+E,CAkBhF;;;AACA,KAAIC,KAAKG,MAAL,GAAc,CAAlB,EAAqB;AACpBL,sBAAoBE,KAAKK,KAAL,EAApB;AACA,EAFD,MAEO;AACNP,sBAAoB,EAApB;AACA,EAvB+E,CAyBhF;;;AACA,KAAMS,eAAe;AACpBC,QAAM,IADc;AAEpBZ,oBAFoB;AAGpBa,YAAUZ,QAHU;AAIpBa,eAAaZ;AAJO,EAArB;AAOAa,UAASC,eAAT,CAAyB;AACxB;AACA;AACAC,mBAAiB,CAACN,YAAD,CAHO;AAIxBO,cAJwB,YAIXC,KAJW,CAIN,YAJM,EAIQ;AAC/B,OAAIA,KAAJ,EAAW;AACV,QAAIhB,QAAJ,EAAc;AACbA,cAASgB,KAAT;AACA;AACD,IAJD,MAIO,IAAIhB,QAAJ,EAAc;AACpBA;AACA;AACD;AAZuB,EAAzB;AAcA,CA/CD,2F","file":"/packages/rocketchat_ldap.js","sourcesContent":["// Pass in username, password as normal\n// customLdapOptions should be passed in if you want to override LDAP_DEFAULTS\n// on any particular call (if you have multiple ldap servers you'd like to connect to)\n// You'll likely want to set the dn value here {dn: \"...\"}\nMeteor.loginWithLDAP = function(username, password, customLdapOptions, callback) {\n\t// Retrieve arguments as array\n\tconst args = [];\n\tfor (let i = 0; i < arguments.length; i++) {\n\t\targs.push(arguments[i]);\n\t}\n\t// Pull username and password\n\tusername = args.shift();\n\tpassword = args.shift();\n\n\t// Check if last argument is a function\n\t// if it is, pop it off and set callback to it\n\tif (typeof args[args.length-1] === 'function') {\n\t\tcallback = args.pop();\n\t} else {\n\t\tcallback = null;\n\t}\n\n\t// if args still holds options item, grab it\n\tif (args.length > 0) {\n\t\tcustomLdapOptions = args.shift();\n\t} else {\n\t\tcustomLdapOptions = {};\n\t}\n\n\t// Set up loginRequest object\n\tconst loginRequest = {\n\t\tldap: true,\n\t\tusername,\n\t\tldapPass: password,\n\t\tldapOptions: customLdapOptions\n\t};\n\n\tAccounts.callLoginMethod({\n\t\t// Call login method with ldap = true\n\t\t// This will hook into our login handler for ldap\n\t\tmethodArguments: [loginRequest],\n\t\tuserCallback(error/*, result*/) {\n\t\t\tif (error) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback(error);\n\t\t\t\t}\n\t\t\t} else if (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t});\n};\n"]}