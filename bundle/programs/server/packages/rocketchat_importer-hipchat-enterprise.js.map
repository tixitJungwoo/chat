{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/main.js"],"names":["Importer","HipChatEnterprise","name","descriptionI18N","mimeType","logger","debug","Readable","require","zlib","tarStream","Npm","extract","path","messages","Map","directMessages","prepare","dataURI","sentContentType","fileName","tempUsers","tempRooms","tempMessages","tempDirectMessages","promise","Promise","resolve","reject","on","Meteor","bindEnvironment","header","stream","next","indexOf","info","parse","chunk","file","JSON","base","updateProgress","ProgressStep","PREPARING_USERS","u","push","id","User","email","username","mention_name","avatar","replace","timezone","isDeleted","is_deleted","PREPARING_CHANNELS","r","Room","creator","owner","created","Date","toLowerCase","isPrivate","privacy","isArchived","is_archived","topic","dirSplit","dir","split","roomIdentifier","msgs","m","PrivateUserMessage","type","senderId","sender","receiverId","receiver","text","message","ts","timestamp","set","roomMsgs","UserMessage","userId","TopicRoomMessage","warn","err","usersId","collection","insert","importRecord","_id","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","get","Base","getBSONSize","MaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","entries","directMsgUser","ERROR","selectionUsers","map","SelectionUser","selectionChannels","SelectionChannel","USER_SELECTION","Selection","s","Buffer","pipe","createGunzip","startImport","importSelection","started","now","user","user_id","do_import","update","$set","c","channel_id","startedByUserId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","setName","deleted","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","creatorId","roomInfo","rid","IMPORTING_MESSAGES","ch","messagesMap","hipChannel","getChannelFromRoomIdentifier","room","findOneById","fields","usernames","t","msgGroupData","msg","isNaN","getRocketUserFromUserId","sendMessage","Messages","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","directMsgRoom","directMessagesMap","hipUser","getUserFromDirectMessageIdentifier","sort","join","FINISHING","DONE","timeTook","log","getProgress","getSelection","directIdentifier","addImporter","warnings","href"],"mappings":"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","file":"/packages/rocketchat_importer-hipchat-enterprise.js","sourcesContent":["/* globals Importer */\n\nImporter.HipChatEnterprise = class ImporterHipChatEnterprise extends Importer.Base {\n\tconstructor(name, descriptionI18N, mimeType) {\n\t\tsuper(name, descriptionI18N, mimeType);\n\t\tthis.logger.debug('Constructed a new HipChat Enterprise Importer.');\n\n\t\tthis.Readable = require('stream').Readable;\n\t\tthis.zlib = require('zlib');\n\t\tthis.tarStream = Npm.require('tar-stream');\n\t\tthis.extract = this.tarStream.extract();\n\t\tthis.path = require('path');\n\t\tthis.messages = new Map();\n\t\tthis.directMessages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst tempUsers = [];\n\t\tconst tempRooms = [];\n\t\tconst tempMessages = new Map();\n\t\tconst tempDirectMessages = new Map();\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tthis.extract.on('entry', Meteor.bindEnvironment((header, stream, next) => {\n\t\t\t\tif (header.name.indexOf('.json') !== -1) {\n\t\t\t\t\tconst info = this.path.parse(header.name);\n\n\t\t\t\t\tstream.on('data', Meteor.bindEnvironment((chunk) => {\n\t\t\t\t\t\tthis.logger.debug(`Processing the file: ${ header.name }`);\n\t\t\t\t\t\tconst file = JSON.parse(chunk);\n\n\t\t\t\t\t\tif (info.base === 'users.json') {\n\t\t\t\t\t\t\tsuper.updateProgress(Importer.ProgressStep.PREPARING_USERS);\n\t\t\t\t\t\t\tfor (const u of file) {\n\t\t\t\t\t\t\t\ttempUsers.push({\n\t\t\t\t\t\t\t\t\tid: u.User.id,\n\t\t\t\t\t\t\t\t\temail: u.User.email,\n\t\t\t\t\t\t\t\t\tname: u.User.name,\n\t\t\t\t\t\t\t\t\tusername: u.User.mention_name,\n\t\t\t\t\t\t\t\t\tavatar: u.User.avatar.replace(/\\n/g, ''),\n\t\t\t\t\t\t\t\t\ttimezone: u.User.timezone,\n\t\t\t\t\t\t\t\t\tisDeleted: u.User.is_deleted\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (info.base === 'rooms.json') {\n\t\t\t\t\t\t\tsuper.updateProgress(Importer.ProgressStep.PREPARING_CHANNELS);\n\t\t\t\t\t\t\tfor (const r of file) {\n\t\t\t\t\t\t\t\ttempRooms.push({\n\t\t\t\t\t\t\t\t\tid: r.Room.id,\n\t\t\t\t\t\t\t\t\tcreator: r.Room.owner,\n\t\t\t\t\t\t\t\t\tcreated: new Date(r.Room.created),\n\t\t\t\t\t\t\t\t\tname: r.Room.name.replace(/ /g, '_').toLowerCase(),\n\t\t\t\t\t\t\t\t\tisPrivate: r.Room.privacy === 'private',\n\t\t\t\t\t\t\t\t\tisArchived: r.Room.is_archived,\n\t\t\t\t\t\t\t\t\ttopic: r.Room.topic\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (info.base === 'history.json') {\n\t\t\t\t\t\t\tconst dirSplit = info.dir.split('/'); //['.', 'users', '1']\n\t\t\t\t\t\t\tconst roomIdentifier = `${ dirSplit[1] }/${ dirSplit[2] }`;\n\n\t\t\t\t\t\t\tif (dirSplit[1] === 'users') {\n\t\t\t\t\t\t\t\tconst msgs = [];\n\t\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\t\tif (m.PrivateUserMessage) {\n\t\t\t\t\t\t\t\t\t\tmsgs.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ m.PrivateUserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\t\tsenderId: m.PrivateUserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\t\treceiverId: m.PrivateUserMessage.receiver.id,\n\t\t\t\t\t\t\t\t\t\t\ttext: m.PrivateUserMessage.message.indexOf('/me ') === -1 ? m.PrivateUserMessage.message : `${ m.PrivateUserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\t\tts: new Date(m.PrivateUserMessage.timestamp.split(' ')[0])\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttempDirectMessages.set(roomIdentifier, msgs);\n\t\t\t\t\t\t\t} else if (dirSplit[1] === 'rooms') {\n\t\t\t\t\t\t\t\tconst roomMsgs = [];\n\n\t\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\t\tif (m.UserMessage) {\n\t\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ dirSplit[2] }-${ m.UserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\t\tuserId: m.UserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\t\ttext: m.UserMessage.message.indexOf('/me ') === -1 ? m.UserMessage.message : `${ m.UserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\t\tts: new Date(m.UserMessage.timestamp.split(' ')[0])\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else if (m.TopicRoomMessage) {\n\t\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'topic',\n\t\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ dirSplit[2] }-${ m.TopicRoomMessage.id }`,\n\t\t\t\t\t\t\t\t\t\t\tuserId: m.TopicRoomMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\t\tts: new Date(m.TopicRoomMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t\t\ttext: m.TopicRoomMessage.message\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.logger.warn('HipChat Enterprise importer isn\\'t configured to handle this message:', m);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttempMessages.set(roomIdentifier, roomMsgs);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer isn't configured to handle \"${ dirSplit[1] }\" files.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//What are these files!?\n\t\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer doesn't know what to do with the file \"${ header.name }\" :o`, info);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\n\t\t\t\t\tstream.on('end', () => next());\n\t\t\t\t\tstream.on('error', () => next());\n\t\t\t\t} else {\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis.extract.on('error', (err) => {\n\t\t\t\tthis.logger.warn('extract error:', err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tthis.extract.on('finish', Meteor.bindEnvironment(() => {\n\t\t\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t\t\t// if someone tries to import a several thousands users instance\n\t\t\t\tconst usersId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'users', 'users': tempUsers });\n\t\t\t\tthis.users = this.collection.findOne(usersId);\n\t\t\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\t\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t\t\t// Insert the channels records.\n\t\t\t\tconst channelsId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'channels', 'channels': tempRooms });\n\t\t\t\tthis.channels = this.collection.findOne(channelsId);\n\t\t\t\tsuper.updateRecord({ 'count.channels': tempRooms.length });\n\t\t\t\tsuper.addCountToTotal(tempRooms.length);\n\n\t\t\t\t// Save the messages records to the import record for `startImport` usage\n\t\t\t\tsuper.updateProgress(Importer.ProgressStep.PREPARING_MESSAGES);\n\t\t\t\tlet messagesCount = 0;\n\t\t\t\tfor (const [channel, msgs] of tempMessages.entries()) {\n\t\t\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': channel });\n\n\t\t\t\t\tif (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n\t\t\t\t\t\tImporter.Base.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\t\tthis.messages.get(channel).set(`${ channel }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }`, 'messages': msgs });\n\t\t\t\t\t\tthis.messages.get(channel).set(channel, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const [directMsgUser, msgs] of tempDirectMessages.entries()) {\n\t\t\t\t\tthis.logger.debug(`Preparing the direct messages for: ${ directMsgUser }`);\n\t\t\t\t\tif (!this.directMessages.get(directMsgUser)) {\n\t\t\t\t\t\tthis.directMessages.set(directMsgUser, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': directMsgUser });\n\n\t\t\t\t\tif (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n\t\t\t\t\t\tImporter.Base.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'directMessages', 'name': `${ directMsgUser }/${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(`${ directMsgUser }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'directMessages', 'name': `${ directMsgUser }`, 'messages': msgs });\n\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(directMsgUser, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\t\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t\t\t//Ensure we have some users, channels, and messages\n\t\t\t\tif (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n\t\t\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded rooms ${ tempRooms.length }, and the loaded messages ${ messagesCount }`);\n\t\t\t\t\tsuper.updateProgress(Importer.ProgressStep.ERROR);\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selectionUsers = tempUsers.map((u) => new Importer.SelectionUser(u.id, u.username, u.email, u.isDeleted, false, true));\n\t\t\t\tconst selectionChannels = tempRooms.map((r) => new Importer.SelectionChannel(r.id, r.name, r.isArchived, true, r.isPrivate));\n\n\t\t\t\tsuper.updateProgress(Importer.ProgressStep.USER_SELECTION);\n\n\t\t\t\tresolve(new Importer.Selection(this.name, selectionUsers, selectionChannels));\n\t\t\t}));\n\n\t\t\t//Wish I could make this cleaner :(\n\t\t\tconst split = dataURI.split(',');\n\t\t\tconst s = new this.Readable;\n\t\t\ts.push(new Buffer(split[split.length - 1], 'base64'));\n\t\t\ts.push(null);\n\t\t\ts.pipe(this.zlib.createGunzip()).pipe(this.extract);\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t//Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t//Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(Importer.ProgressStep.IMPORTING_USERS);\n\t\t\t//Import the users\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tthis.logger.debug(`Starting the user import: ${ u.username } and are we importing them? ${ u.do_import }`);\n\t\t\t\tif (!u.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\tlet existantUser = RocketChat.models.Users.findOneByEmailAddress(u.email);\n\n\t\t\t\t\t//If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t//since we have an existing user, let's try a few things\n\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst userId = Accounts.createUser({ email: u.email, password: Date.now() + u.name + u.email.toUpperCase() });\n\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, {joinDefaultChannelsSilenced: true});\n\t\t\t\t\t\t\t//TODO: Use moment timezone to calc the time offset - Meteor.call 'userSetUtcOffset', user.tz_offset / 3600\n\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\t//TODO: Think about using a custom field for the users \"title\" field\n\n\t\t\t\t\t\t\tif (u.avatar) {\n\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', `data:image/png;base64,${ u.avatar }`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif (u.deleted) {\n\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t//Import the channels\n\t\t\tsuper.updateProgress(Importer.ProgressStep.IMPORTING_CHANNELS);\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (!c.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t//If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\tif (u.id === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//Create the channel\n\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, []);\n\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $set: { ts: c.created, topic: c.topic }, $addToSet: { importIds: c.id } });\n\t\t\t\t\t}\n\n\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t//Import the Messages\n\t\t\tsuper.updateProgress(Importer.ProgressStep.IMPORTING_MESSAGES);\n\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\tconst hipChannel = this.getChannelFromRoomIdentifier(ch);\n\t\t\t\tif (!hipChannel.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(hipChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst creator = this.getRocketUserFromUserId(msg.userId);\n\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\tswitch (msg.type) {\n\t\t\t\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, {\n\t\t\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\t\t\tusername: creator.username\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'topic':\n\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, msg.text, creator, { _id: msg.id, ts: msg.ts });\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Import the Direct Messages\n\t\t\tfor (const [directMsgRoom, directMessagesMap] of this.directMessages.entries()) {\n\t\t\t\tconst hipUser = this.getUserFromDirectMessageIdentifier(directMsgRoom);\n\t\t\t\tif (!hipUser.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t//Verify this direct message user's room is valid (confusing but idk how else to explain it)\n\t\t\t\tif (!this.getRocketUserFromUserId(hipUser.id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const [msgGroupData, msgs] of directMessagesMap.entries()) {\n\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ directMsgRoom }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ directMsgRoom }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//make sure the message sender is a valid user inside rocket.chat\n\t\t\t\t\t\tconst sender = this.getRocketUserFromUserId(msg.senderId);\n\t\t\t\t\t\tif (!sender) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//make sure the receiver of the message is a valid rocket.chat user\n\t\t\t\t\t\tconst receiver = this.getRocketUserFromUserId(msg.receiverId);\n\t\t\t\t\t\tif (!receiver) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet room = RocketChat.models.Rooms.findOneById([receiver._id, sender._id].sort().join(''));\n\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call('createDirectMessage', receiver.username);\n\t\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById(roomInfo.rid);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\tRocketChat.sendMessage(sender, {\n\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t_id: sender._id,\n\t\t\t\t\t\t\t\t\tusername: sender.username\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsuper.updateProgress(Importer.ProgressStep.FINISHING);\n\t\t\tsuper.updateProgress(Importer.ProgressStep.DONE);\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`HipChat Enterprise Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new Importer.SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new Importer.SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\n\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels);\n\t}\n\n\tgetChannelFromRoomIdentifier(roomIdentifier) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (`rooms/${ ch.id }` === roomIdentifier) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromDirectMessageIdentifier(directIdentifier) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (`users/${ u.id }` === directIdentifier) {\n\t\t\t\treturn u;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRocketUserFromUserId(userId) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.id === userId) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 }});\n\t\t\t}\n\t\t}\n\t}\n};\n","/* globals Importer */\n\nImporter.addImporter('hipchatenterprise', Importer.HipChatEnterprise, {\n\tname: 'HipChat Enterprise',\n\twarnings: [\n\t\t{\n\t\t\ttext: 'Importer_HipChatEnterprise_Information',\n\t\t\thref: 'https://rocket.chat/docs/administrator-guides/import/hipchat/enterprise/'\n\t\t}, {\n\t\t\ttext: 'Importer_HipChatEnterprise_BetaWarning',\n\t\t\thref: 'https://github.com/RocketChat/Rocket.Chat/issues/new'\n\t\t}\n\t],\n\tmimeType: 'application/gzip'\n});\n"]}