{"version":3,"sources":["meteor://ðŸ’»app/packages/pauli:linkedin-oauth/linkedin-client.js"],"names":["LinkedIn","requestCredential","options","credentialRequestCompleteCallback","console","log","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","scope","requestPermissions","join","loginStyle","OAuth","_loginStyle","loginUrl","clientId","_redirectUri","_stateParam","launchLogin","loginService"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,WAAW,EAAX,C,CAEA;AACA;AACA;AACA;AACA;;AACAA,SAASC,iBAAT,GAA6B,UAAUC,OAAV,EAAmBC,iCAAnB,EAAsD;AACjFC,UAAQC,GAAR,CAAY,IAAZ,EAAkB,4BAAlB,EADiF,CAEjF;;AACA,MAAI,CAACF,iCAAD,IAAsC,OAAOD,OAAP,KAAmB,UAA7D,EAAyE;AACvEC,wCAAoCD,OAApC;AACAA,cAAU,EAAV;AACD;;AAED,MAAMI,SAASC,qBAAqBC,cAArB,CAAoCC,OAApC,CAA4C;AAACC,aAAS;AAAV,GAA5C,CAAf;AACAN,UAAQC,GAAR,CAAY,WAAZ,EAAyBC,MAAzB;;AACA,MAAI,CAACA,MAAL,EAAa;AACXH,yCAAqCA,kCAAkC,IAAII,qBAAqBI,WAAzB,CAAqC,wBAArC,CAAlC,CAArC;AACAP,YAAQC,GAAR,CAAY,IAAZ,EAAkB,qBAAlB;AACA;AACD;;AAED,MAAMO,kBAAkBC,OAAOC,MAAP,EAAxB;AAEA,MAAIC,QAAQ,EAAZ;;AACA,MAAIb,WAAWA,QAAQc,kBAAvB,EAA2C;AACvCD,YAAQb,QAAQc,kBAAR,CAA2BC,IAA3B,CAAgC,GAAhC,CAAR;AACH;;AAED,MAAMC,aAAaC,MAAMC,WAAN,CAAkB,UAAlB,EAA8Bd,MAA9B,EAAsCJ,OAAtC,CAAnB;;AAEA,MAAMmB,WACA,sDACA,qBADA,GACwB,aADxB,GACwCf,OAAOgB,QAD/C,GAEA,gBAFA,GAEmBH,MAAMI,YAAN,CAAmB,UAAnB,EAA+BjB,MAA/B,CAFnB,GAGA,SAHA,GAGYS,KAHZ,GAIA,SAJA,GAIYI,MAAMK,WAAN,CAAkBN,UAAlB,EAA8BN,eAA9B,CALlB;;AAOAO,QAAMM,WAAN,CAAkB;AAChBC,kBAAc,UADE;AAEhBR,gBAAYA,UAFI;AAGhBG,cAAUA,QAHM;AAIhBlB,uCAAmCA,iCAJnB;AAKhBS,qBAAiBA;AALD,GAAlB;AAOD,CAvCD,2G","file":"/packages/pauli_linkedin-oauth.js","sourcesContent":["LinkedIn = {};\n\n// Request LinkedIn credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nLinkedIn.requestCredential = function (options, credentialRequestCompleteCallback) {\n  console.log('ðŸ”‘', 'LinkedIn.requestCredential');\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({service: 'linkedin'});\n  console.log('ðŸ”‘ config', config);\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\n    console.log('ðŸ”‘', 'returning no config');\n    return;\n  }\n\n  const credentialToken = Random.secret();\n\n  let scope = [];\n  if (options && options.requestPermissions) {\n      scope = options.requestPermissions.join('+');\n  }\n\n  const loginStyle = OAuth._loginStyle('linkedin', config, options);\n\n  const loginUrl =\n        'https://www.linkedin.com/uas/oauth2/authorization' +\n        '?response_type=code' + '&client_id=' + config.clientId +\n        '&redirect_uri=' + OAuth._redirectUri('linkedin', config) +\n        '&scope=' + scope +\n        '&state=' + OAuth._stateParam(loginStyle, credentialToken);\n\n  OAuth.launchLogin({\n    loginService: \"linkedin\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken\n  });\n};\n"]}