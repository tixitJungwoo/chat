{
  "_args": [
    [
      {
        "raw": "minipass@https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
        "scope": null,
        "escapedName": "minipass",
        "name": "minipass",
        "rawSpec": "https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
        "spec": "https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
        "type": "remote"
      },
      "/Users/ben/meteor/packages/modules/.npm/package-new-wfowmi"
    ]
  ],
  "_from": "minipass@>=2.0.0 <3.0.0",
  "_id": "minipass@2.0.2",
  "_inCache": true,
  "_location": "/minipass",
  "_phantomChildren": {},
  "_requested": {
    "raw": "minipass@https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
    "scope": null,
    "escapedName": "minipass",
    "name": "minipass",
    "rawSpec": "https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
    "spec": "https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/minizlib"
  ],
  "_resolved": "https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
  "_shasum": "fae5c78124051f56fd2007df0012e0dac7a752ce",
  "_shrinkwrap": null,
  "_spec": "minipass@https://registry.npmjs.org/minipass/-/minipass-2.0.2.tgz",
  "_where": "/Users/ben/meteor/packages/modules/.npm/package-new-wfowmi",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/minipass/issues"
  },
  "dependencies": {
    "yallist": "^3.0.0"
  },
  "description": "minimal implementation of a PassThrough stream",
  "devDependencies": {
    "end-of-stream": "^1.4.0",
    "tap": "10"
  },
  "homepage": "https://github.com/isaacs/minipass#readme",
  "keywords": [
    "passthrough",
    "stream"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "minipass",
  "optionalDependencies": {},
  "readme": "# minipass\n\nA _very_ minimal implementation of a [PassThrough\nstream](https://nodejs.org/api/stream.html#stream_class_stream_passthrough)\n\nSupports pipe()ing (including multi-pipe() and backpressure\ntransmission), buffering data until either a `data` event handler or\n`pipe()` is added (so you don't lose the first chunk), and most other\ncases where PassThrough is a good idea.\n\nThere is a `read()` method, but it's much more efficient to consume\ndata from this stream via `'data'` events or by calling `pipe()` into\nsome other stream.  Calling `read()` requires the buffer to be\nflattened in some cases, which requires copying memory.  Also,\n`read()` always returns Buffers, even if an `encoding` option is\nspecified.\n\nThere is also no `unpipe()` method.  Once you start piping, there is\nno stopping it!\n\nThis is not a `through` or `through2` stream.  It doesn't transform\nthe data.  It also assumes that the data will be Buffers or strings.\nIt doesn't support object mode.\n\nFor an example of a stream that extends MiniPass to provide transform\ncapabilities, check out [minizlib](http://npm.im/minizlib).\n\n## USAGE\n\n```js\nconst MiniPass = require('minipass')\nconst mp = new MiniPass(options) // optional: { encoding }\nmp.write('foo')\nmp.pipe(someOtherStream)\nmp.end('bar')\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/minipass.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "tap test/*.js --100"
  },
  "version": "2.0.2"
}
