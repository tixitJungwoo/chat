{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-local/ufs-local.js"],"names":["module","export","LocalStore","_","watch","require","v","check","Meteor","UploadFS","options","extend","mode","path","writeMode","TypeError","self","isServer","fs","Npm","stat","err","mkdirp","console","error","message","info","chmod","getPath","file","delete","fileId","callback","getFilePath","bindEnvironment","isFile","unlink","getCollection","remove","call","getReadStream","createReadStream","flags","encoding","autoClose","start","end","getWriteStream","createWriteStream","findOne","fields","extension","Store","store","Local"],"mappings":"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","file":"/packages/jalik_ufs-local.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\nimport {UploadFS} from 'meteor/jalik:ufs';\n\n\n/**\n * File system store\n * @param options\n * @constructor\n */\nexport class LocalStore extends UploadFS.Store {\n\n    constructor(options) {\n        // Default options\n        options = _.extend({\n            mode: '0744',\n            path: 'ufs/uploads',\n            writeMode: '0744'\n        }, options);\n\n        // Check options\n        if (typeof options.mode !== \"string\") {\n            throw new TypeError(\"LocalStore: mode is not a string\");\n        }\n        if (typeof options.path !== \"string\") {\n            throw new TypeError(\"LocalStore: path is not a string\");\n        }\n        if (typeof options.writeMode !== \"string\") {\n            throw new TypeError(\"LocalStore: writeMode is not a string\");\n        }\n\n        super(options);\n        let self = this;\n\n        // Private attributes\n        let mode = options.mode;\n        let path = options.path;\n        let writeMode = options.writeMode;\n\n        if (Meteor.isServer) {\n            const fs = Npm.require('fs');\n\n            fs.stat(path, function (err) {\n                if (err) {\n                    const mkdirp = Npm.require('mkdirp');\n\n                    // Create the directory\n                    mkdirp(path, {mode: mode}, function (err) {\n                        if (err) {\n                            console.error(`LocalStore: cannot create store at ${path} (${err.message})`);\n                        } else {\n                            console.info(`LocalStore: store created at ${path}`);\n                        }\n                    });\n                } else {\n                    // Set directory permissions\n                    fs.chmod(path, mode, function (err) {\n                        err && console.error(`LocalStore: cannot set store permissions ${mode} (${err.message})`);\n                    });\n                }\n            });\n        }\n\n        /**\n         * Returns the path or sub path\n         * @param file\n         * @return {string}\n         */\n        this.getPath = function (file) {\n            return path + (file ? `/${file}` : '');\n        };\n\n\n        if (Meteor.isServer) {\n            /**\n             * Removes the file\n             * @param fileId\n             * @param callback\n             */\n            this.delete = function (fileId, callback) {\n                let path = this.getFilePath(fileId);\n\n                if (typeof callback !== 'function') {\n                    callback = function (err) {\n                        err && console.error(`LocalStore: cannot delete file \"${fileId}\" at ${path} (${err.message})`);\n                    }\n                }\n                const fs = Npm.require('fs');\n                fs.stat(path, Meteor.bindEnvironment(function (err, stat) {\n                    if (!err && stat && stat.isFile()) {\n                        fs.unlink(path, Meteor.bindEnvironment(function () {\n                            self.getCollection().remove(fileId);\n                            callback.call(self);\n                        }));\n                    }\n                }));\n            };\n\n            /**\n             * Returns the file read stream\n             * @param fileId\n             * @param file\n             * @param options\n             * @return {*}\n             */\n            this.getReadStream = function (fileId, file, options) {\n                const fs = Npm.require('fs');\n                options = _.extend({}, options);\n                return fs.createReadStream(self.getFilePath(fileId, file), {\n                    flags: 'r',\n                    encoding: null,\n                    autoClose: true,\n                    start: options.start,\n                    end: options.end\n                });\n            };\n\n            /**\n             * Returns the file write stream\n             * @param fileId\n             * @param file\n             * @param options\n             * @return {*}\n             */\n            this.getWriteStream = function (fileId, file, options) {\n                const fs = Npm.require('fs');\n                options = _.extend({}, options);\n                return fs.createWriteStream(self.getFilePath(fileId, file), {\n                    flags: 'a',\n                    encoding: null,\n                    mode: writeMode,\n                    start: options.start\n                });\n            };\n        }\n    }\n\n    /**\n     * Returns the file path\n     * @param fileId\n     * @param file\n     * @return {string}\n     */\n    getFilePath(fileId, file) {\n        file = file || this.getCollection().findOne(fileId, {fields: {extension: 1}});\n        return file && this.getPath(fileId + (file.extension ? `.${file.extension }` : ''));\n    }\n}\n\n// Add store to UFS namespace\nUploadFS.store.Local = LocalStore;\n"]}