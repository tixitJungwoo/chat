{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slackbridge/logger.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/settings.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/slackbridge.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/slashcommand/slackbridge_import.server.js"],"names":["logger","Logger","sections","connection","events","Meteor","startup","RocketChat","settings","addGroup","add","type","i18nLabel","enableQuery","_id","value","i18nDescription","SlackBridge","util","Npm","require","slackClient","apiToken","get","aliasFormat","excludeBotnames","rtm","connected","userTags","slackChannelMap","reactionsMap","Map","key","disconnect","connect","info","RtmClient","start","registerForSlackEvents","registerForRocketEvents","unregisterForRocketEvents","populateSlackChannelMap","err","class","error","convertSlackMsgTxtToRocketTxtFormat","slackMsgTxt","_","isEmpty","replace","match","userId","findRocketUser","addRocketUser","slack","rocket","findRocketChannel","slackChannelId","models","Rooms","findOneByImportId","addRocketChannel","slackChannelID","hasRetried","debug","slackResults","isGroup","charAt","HTTP","params","token","channel","data","ok","rocketChannelData","group","existingRocketRoom","findOneByName","name","is_general","rocketId","addImportIds","id","rocketUsers","members","member","creator","rocketUser","username","push","rocketUserCreator","rocketChannel","createRoom","rid","e","message","_sleepForMs","console","log","roomUpdate","ts","Date","created","lastSetTopic","topic","last_set","purpose","family","findOneById","slackUserID","Users","user","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsername","newUser","password","Random","joinDefaultChannels","Accounts","createUser","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","update","$set","url","image_original","image_512","setUserAvatar","importIds","bot_id","addAliasToRocketMsg","rocketUserName","rocketMsgObj","alias","format","createAndSaveRocketMessage","slackMessage","rocketMsgDataDefaults","isImporting","subtype","processSlackSubtypedMessage","msg","text","u","extend","edited","editedAt","parseInt","split","fields","pinned_to","indexOf","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","Messages","findOneBySlackBotIdAndSlackTs","sendMessage","onSlackReactionRemoved","slackReactionMsg","getRocketUser","rocketMsg","findOneBySlackTs","item","rocketID","createRocketID","rocketReaction","reaction","reactions","theReaction","usernames","set","runAsUser","call","onSlackReactionAdded","includes","onSlackMessage","processSlackMessageDeleted","processSlackMessageChanged","processSlackNewMessage","undefined","bot","attachments","icons","emoji","createUserJoinWithRoomIdAndUser","imported","addUserToRoom","inviter","createUserAddedWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","removeUserFromRoom","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","saveRoomTopic","createRoomRenamedWithRoomIdRoomNameAndUser","saveRoomName","archiveRoom","unarchiveRoom","file","url_private_download","details","message_id","size","mimetype","uploadFileFromSlack","t","author_subname","getAvatarUrlFromUsername","setPinnedByIdAndUserId","channel_id","slackFileURL","timeStamp","requestModule","test","parsedUrl","parse","headers","bindEnvironment","stream","fileId","fileStore","create","write","Error","absoluteUrl","attachment","title","title_link","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","callbacks","onRocketMessage","bind","priority","LOW","onRocketMessageDelete","onRocketSetReaction","onRocketUnSetReaction","remove","CLIENT_EVENTS","on","RTM","AUTHENTICATED","UNABLE_TO_RTM_START","DISCONNECT","RTM_EVENTS","MESSAGE","REACTION_ADDED","reactionMsg","REACTION_REMOVED","CHANNEL_CREATED","CHANNEL_JOINED","CHANNEL_LEFT","CHANNEL_DELETED","CHANNEL_RENAME","GROUP_JOINED","GROUP_LEFT","GROUP_RENAME","TEAM_JOIN","findSlackChannel","rocketChannelName","response","isArray","channels","length","is_member","groups","importFromHistory","options","messages","latest","reverse","has_more","copySlackChannelInfo","channelMap","topic_last_set","topic_creator","copyPins","items","pin","msgObj","importMessages","callback","rocketchat_room","results","oldest","slack_room","slackChannel","slackGroup","rocketMessageDeleted","postDeleteMessageToSlack","rocketMsgID","delete","slackTS","getSlackTS","postReactionAddedToSlack","postReactionRemoveToSlack","rocketMessage","processRocketMessageChanged","outSlackChannels","keys","pluck","postMessageToSlack","timestamp","postResult","post","statusCode","as_user","iconUrl","icon_url","link_names","setSlackBotIdAndSlackTs","postMessageUpdateToSlack","updatedBySlack","previous_message","getRocketChannel","deleteMessage","currentMsg","updateMessage","msgDataDefaults","code","index","substr","slackTs","slackUser","SlackBridgeImport","command","Match","String","room","users","findOne","msgStream","emit","TAPi18n","__","postProcess","sprintf","language","slashCommands"],"mappings":"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","file":"/packages/rocketchat_slackbridge.js","sourcesContent":["/* globals logger:true */\n/* exported logger */\n\nlogger = new Logger('SlackBridge', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events',\n\t\tclass: 'Class'\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('SlackBridge', function() {\n\t\tthis.add('SlackBridge_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enabled',\n\t\t\tpublic: true\n\t\t});\n\n\t\tthis.add('SlackBridge_APIToken', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'API_Token'\n\t\t});\n\n\t\tthis.add('SlackBridge_AliasFormat', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Alias_Format',\n\t\t\ti18nDescription: 'Alias_Format_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_ExcludeBotnames', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Exclude_Botnames',\n\t\t\ti18nDescription: 'Exclude_Botnames_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_All', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}]\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Channels', '', {\n\t\t\ttype: 'roomPick',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_All',\n\t\t\t\tvalue: false\n\t\t\t}]\n\t\t});\n\t});\n});\n","/* globals logger */\n\nclass SlackBridge {\n\n\tconstructor() {\n\t\tthis.util = Npm.require('util');\n\t\tthis.slackClient = Npm.require('slack-client');\n\t\tthis.apiToken = RocketChat.settings.get('SlackBridge_APIToken');\n\t\tthis.aliasFormat = RocketChat.settings.get('SlackBridge_AliasFormat');\n\t\tthis.excludeBotnames = RocketChat.settings.get('SlackBridge_Botnames');\n\t\tthis.rtm = {};\n\t\tthis.connected = false;\n\t\tthis.userTags = {};\n\t\tthis.slackChannelMap = {};\n\t\tthis.reactionsMap = new Map();\n\n\t\tRocketChat.settings.get('SlackBridge_APIToken', (key, value) => {\n\t\t\tif (value !== this.apiToken) {\n\t\t\t\tthis.apiToken = value;\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_AliasFormat', (key, value) => {\n\t\t\tthis.aliasFormat = value;\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_ExcludeBotnames', (key, value) => {\n\t\t\tthis.excludeBotnames = value;\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_Enabled', (key, value) => {\n\t\t\tif (value && this.apiToken) {\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.disconnect();\n\t\t\t}\n\t\t});\n\t}\n\n\tconnect() {\n\t\tif (this.connected === false) {\n\t\t\tthis.connected = true;\n\t\t\tlogger.connection.info('Connecting via token: ', this.apiToken);\n\t\t\tconst RtmClient = this.slackClient.RtmClient;\n\t\t\tthis.rtm = new RtmClient(this.apiToken);\n\t\t\tthis.rtm.start();\n\t\t\tthis.registerForSlackEvents();\n\t\t\tRocketChat.settings.get('SlackBridge_Out_Enabled', (key, value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tthis.registerForRocketEvents();\n\t\t\t\t} else {\n\t\t\t\t\tthis.unregisterForRocketEvents();\n\t\t\t\t}\n\t\t\t});\n\t\t\tMeteor.startup(() => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.populateSlackChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.class.error('Error attempting to connect to Slack', err);\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.connected === true) {\n\t\t\tthis.connected = false;\n\t\t\tthis.rtm.disconnect && this.rtm.disconnect();\n\t\t\tlogger.connection.info('Disconnected');\n\t\t\tthis.unregisterForRocketEvents();\n\t\t}\n\t}\n\n\tconvertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tslackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\tthis.findRocketUser(userId) || this.addRocketUser(userId); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tslackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n\n\tfindRocketChannel(slackChannelId) {\n\t\treturn RocketChat.models.Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\taddRocketChannel(slackChannelID, hasRetried = false) {\n\t\tlogger.class.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet slackResults = null;\n\t\tlet isGroup = false;\n\t\tif (slackChannelID.charAt(0) === 'C') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.apiToken, channel: slackChannelID } });\n\t\t} else if (slackChannelID.charAt(0) === 'G') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/groups.info', { params: { token: this.apiToken, channel: slackChannelID } });\n\t\t\tisGroup = true;\n\t\t}\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true) {\n\t\t\tconst rocketChannelData = isGroup ? slackResults.data.group : slackResults.data.channel;\n\t\t\tconst existingRocketRoom = RocketChat.models.Rooms.findOneByName(rocketChannelData.name);\n\n\t\t\t// If the room exists, make sure we have its id in importIds\n\t\t\tif (existingRocketRoom || rocketChannelData.is_general) {\n\t\t\t\trocketChannelData.rocketId = rocketChannelData.is_general ? 'GENERAL' : existingRocketRoom._id;\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t} else {\n\t\t\t\tconst rocketUsers = [];\n\t\t\t\tfor (const member of rocketChannelData.members) {\n\t\t\t\t\tif (member !== rocketChannelData.creator) {\n\t\t\t\t\t\tconst rocketUser = this.findRocketUser(member) || this.addRocketUser(member);\n\t\t\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst rocketUserCreator = rocketChannelData.creator ? this.findRocketUser(rocketChannelData.creator) || this.addRocketUser(rocketChannelData.creator) : null;\n\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\tlogger.class.error('Could not fetch room creator information', rocketChannelData.creator);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst rocketChannel = RocketChat.createRoom(isGroup ? 'p' : 'c', rocketChannelData.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\trocketChannelData.rocketId = rocketChannel.rid;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\tlogger.class.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\tMeteor._sleepForMs(1000);\n\t\t\t\t\t\treturn this.findRocketChannel(slackChannelID) || this.addRocketChannel(slackChannelID, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomUpdate = {\n\t\t\t\t\tts: new Date(rocketChannelData.created * 1000)\n\t\t\t\t};\n\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\tif (!_.isEmpty(rocketChannelData.topic && rocketChannelData.topic.value)) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.topic.value;\n\t\t\t\t\tlastSetTopic = rocketChannelData.topic.last_set;\n\t\t\t\t}\n\t\t\t\tif (!_.isEmpty(rocketChannelData.purpose && rocketChannelData.purpose.value) && rocketChannelData.purpose.last_set > lastSetTopic) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.purpose.value;\n\t\t\t\t}\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t\tthis.slackChannelMap[rocketChannelData.rocketId] = { id: slackChannelID, family: slackChannelID.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t}\n\t\t\treturn RocketChat.models.Rooms.findOneById(rocketChannelData.rocketId);\n\t\t}\n\t\tlogger.class.debug('Channel not added');\n\t\treturn;\n\t}\n\n\tfindRocketUser(slackUserID) {\n\t\tconst rocketUser = RocketChat.models.Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUser.username }` };\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\taddRocketUser(slackUserID) {\n\t\tlogger.class.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tconst slackResults = HTTP.get('https://slack.com/api/users.info', { params: { token: this.apiToken, user: slackUserID } });\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true && slackResults.data.user) {\n\t\t\tconst rocketUserData = slackResults.data.user;\n\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\tconst email = rocketUserData.profile && rocketUserData.profile.email || '';\n\t\t\tlet existingRocketUser;\n\t\t\tif (!isBot) {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByEmailAddress(email) || RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t} else {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t}\n\n\t\t\tif (existingRocketUser) {\n\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t} else {\n\t\t\t\tconst newUser = {\n\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\tusername: rocketUserData.name\n\t\t\t\t};\n\n\t\t\t\tif (!isBot && email) {\n\t\t\t\t\tnewUser.email = email;\n\t\t\t\t}\n\n\t\t\t\tif (isBot) {\n\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t}\n\n\t\t\t\trocketUserData.rocketId = Accounts.createUser(newUser);\n\t\t\t\tconst userUpdate = {\n\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\troles: isBot ? [ 'bot' ] : [ 'user' ]\n\t\t\t\t};\n\n\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\tuserUpdate['name'] = rocketUserData.profile.real_name;\n\t\t\t\t}\n\n\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\tuserUpdate['active'] = false;\n\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t}\n\n\t\t\t\tRocketChat.models.Users.update({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\tconst user = RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\tlet url = null;\n\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (url) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tRocketChat.setUserAvatar(user, url, null, 'url');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.class.debug('Error setting user avatar', error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst importIds = [ rocketUserData.id ];\n\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t}\n\t\t\tRocketChat.models.Users.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUserData.name }` };\n\t\t\t}\n\t\t\treturn RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\t\t}\n\t\tlogger.class.debug('User not added');\n\t\treturn;\n\t}\n\n\taddAliasToRocketMsg(rocketUserName, rocketMsgObj) {\n\t\tif (this.aliasFormat) {\n\t\t\tconst alias = this.util.format(this.aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tcreateAndSaveRocketMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = this.processSlackSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToRocketMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tMeteor.setTimeout(() => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts && !RocketChat.models.Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n\t\t\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\tlogger.class.debug('Send message to Rocket.Chat');\n\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tonSlackReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.getRocketUser(slackReactionMsg.user);\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\t\treturn; //Reaction already removed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.reactionsMap.set(`unset${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.class.debug('Removing reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tonSlackReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.getRocketUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; //Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.reactionsMap.set(`set${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.class.debug('Adding reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tonSlackMessage(slackMessage, isImporting) {\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tthis.processSlackMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tthis.processSlackMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//Keeping backwards compatability for now, refactor later\n\t\t\t\t\tthis.processSlackNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t//Simple message\n\t\t\tthis.processSlackNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tprocessSlackSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tlet rocketMsgObj = null;\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\tif (slackMessage.username !== undefined && this.excludeBotnames && slackMessage.username.match(this.excludeBotnames)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tbot: true,\n\t\t\t\t\tattachments: slackMessage.attachments,\n\t\t\t\t\tusername: slackMessage.username || slackMessage.bot_id\n\t\t\t\t};\n\t\t\t\tthis.addAliasToRocketMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\t\t\tif (slackMessage.icons) {\n\t\t\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t\t\t}\n\t\t\t\treturn rocketMsgObj;\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.addAliasToRocketMsg(rocketUser.username, {\n\t\t\t\t\tmsg: `_${ this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text) }_`\n\t\t\t\t});\n\t\t\tcase 'channel_join':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'group_join':\n\t\t\t\tif (slackMessage.inviter) {\n\t\t\t\t\tconst inviter = slackMessage.inviter ? this.findRocketUser(slackMessage.inviter) || this.addRocketUser(slackMessage.inviter) : null;\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tRocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: inviter._id,\n\t\t\t\t\t\t\t\tusername: inviter.username\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.removeUserFromRoom(rocketChannel._id, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.archiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.unarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\t\t\tconst details = {\n\t\t\t\t\t\tmessage_id: `slack-${ slackMessage.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\tname: slackMessage.file.name,\n\t\t\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\t\t\trid: rocketChannel._id\n\t\t\t\t\t};\n\t\t\t\t\treturn this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_comment':\n\t\t\t\tlogger.class.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tlogger.class.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\t\t\trocketMsgObj = {\n\t\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\t\t\t'author_name' : slackMessage.attachments[0].author_subname,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(slackMessage.attachments[0].author_subname),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tif (!isImporting) {\n\t\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ slackMessage.attachments[0].channel_id }-${ slackMessage.attachments[0].ts.replace(/\\./g, '-') }`, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn rocketMsgObj;\n\t\t\t\t} else {\n\t\t\t\t\tlogger.class.error('Pinned item with no attachment');\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'unpinned_item':\n\t\t\t\tlogger.class.error('Unpinned item not implemented');\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t//details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tuploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst url = Npm.require('url');\n\t\tconst requestModule = /https/i.test(slackFileURL) ? Npm.require('https') : Npm.require('http');\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { 'Authorization': `Bearer ${ this.apiToken }` };\n\t\trequestModule.get(parsedUrl, Meteor.bindEnvironment((stream) => {\n\t\t\tconst fileId = Meteor.fileStore.create(details);\n\t\t\tif (fileId) {\n\t\t\t\tMeteor.fileStore.write(stream, fileId, (err, file) => {\n\t\t\t\t\tconsole.log('fileStore.write', file);\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow new Error(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\t\ttitle: `File Uploaded: ${ file.name }`,\n\t\t\t\t\t\t\ttitle_link: url\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst msg = {\n\t\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t_id: file._id\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\t\tattachments: [attachment]\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (details.message_id && (typeof details.message_id === 'string')) {\n\t\t\t\t\t\t\tmsg['_id'] = details.message_id;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn RocketChat.sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tregisterForRocketEvents() {\n\t\tRocketChat.callbacks.add('afterSaveMessage', this.onRocketMessage.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tRocketChat.callbacks.add('afterDeleteMessage', this.onRocketMessageDelete.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.add('setReaction', this.onRocketSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.add('unsetReaction', this.onRocketUnSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForRocketEvents() {\n\t\tRocketChat.callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tRocketChat.callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.remove('setReaction', 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tregisterForSlackEvents() {\n\t\tconst CLIENT_EVENTS = this.slackClient.CLIENT_EVENTS;\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, () => {\n\t\t\tlogger.connection.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.UNABLE_TO_RTM_START, () => {\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.DISCONNECT, () => {\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tconst RTM_EVENTS = this.slackClient.RTM_EVENTS;\n\n\t\t/**\n\t\t* Event fired when someone messages a channel the bot is in\n\t\t* {\n\t\t*\ttype: 'message',\n\t\t* \tchannel: [channel_id],\n\t\t* \tuser: [user_id],\n\t\t* \ttext: [message],\n\t\t* \tts: [ts.milli],\n\t\t* \tteam: [team_id],\n\t\t* \tsubtype: [message_subtype],\n\t\t* \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.MESSAGE, Meteor.bindEnvironment((slackMessage) => {\n\t\t\tlogger.events.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\tif (slackMessage) {\n\t\t\t\tthis.onSlackMessage(slackMessage);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on(RTM_EVENTS.REACTION_ADDED, Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.events.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\tthis.onSlackReactionAdded(reactionMsg);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on(RTM_EVENTS.REACTION_REMOVED, Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.events.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\tthis.onSlackReactionRemoved(reactionMsg);\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t* Event fired when someone creates a public channel\n\t\t* {\n\t\t*\ttype: 'channel_created',\n\t\t*\tchannel: {\n\t\t*\t\tid: [channel_id],\n\t\t*\t\tis_channel: true,\n\t\t*\t\tname: [channel_name],\n\t\t*\t\tcreated: [ts],\n\t\t*\t\tcreator: [user_id],\n\t\t*\t\tis_shared: false,\n\t\t*\t\tis_org_shared: false\n\t\t*\t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_CREATED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot joins a public channel\n\t\t* {\n\t\t* \ttype: 'channel_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_general: false,\n\t\t* \t\tis_member: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_JOINED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot leaves (or is removed from) a public channel\n\t\t* {\n\t\t* \ttype: 'channel_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_LEFT, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when an archived channel is deleted by an admin\n\t\t* {\n\t\t* \ttype: 'channel_deleted',\n\t\t* \tchannel: [channel_id],\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_DELETED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the channel has its name changed\n\t\t* {\n\t\t* \ttype: 'channel_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_RENAME, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot joins a private channel\n\t\t* {\n\t\t* \ttype: 'group_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_mpim: false,\n\t\t* \t\tis_open: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_JOINED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot leaves (or is removed from) a private channel\n\t\t* {\n\t\t* \ttype: 'group_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_LEFT, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the private channel has its name changed\n\t\t* {\n\t\t* \ttype: 'group_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_RENAME, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when a new user joins the team\n\t\t* {\n\t\t* \ttype: 'team_join',\n\t\t* \tuser:\n\t\t* \t{\n\t\t* \t\tid: [user_id],\n\t\t* \t\tteam_id: [team_id],\n\t\t* \t\tname: [user_name],\n\t\t* \t\tdeleted: false,\n\t\t* \t\tstatus: null,\n\t\t* \t\tcolor: [color_code],\n\t\t* \t\treal_name: '',\n\t\t* \t\ttz: [timezone],\n\t\t* \t\ttz_label: [timezone_label],\n\t\t* \t\ttz_offset: [timezone_offset],\n\t\t* \t\tprofile:\n\t\t* \t\t{\n\t\t* \t\t\tavatar_hash: '',\n\t\t* \t\t\treal_name: '',\n\t\t* \t\t\treal_name_normalized: '',\n\t\t* \t\t\temail: '',\n\t\t* \t\t\timage_24: '',\n\t\t* \t\t\timage_32: '',\n\t\t* \t\t\timage_48: '',\n\t\t* \t\t\timage_72: '',\n\t\t* \t\t\timage_192: '',\n\t\t* \t\t\timage_512: '',\n\t\t* \t\t\tfields: null\n\t\t* \t\t},\n\t\t* \t\tis_admin: false,\n\t\t* \t\tis_owner: false,\n\t\t* \t\tis_primary_owner: false,\n\t\t* \t\tis_restricted: false,\n\t\t* \t\tis_ultra_restricted: false,\n\t\t* \t\tis_bot: false,\n\t\t* \t\tpresence: [user_presence]\n\t\t* \t},\n\t\t* \tcache_ts: [ts]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.TEAM_JOIN, Meteor.bindEnvironment(() => {}));\n\t}\n\n\tfindSlackChannel(rocketChannelName) {\n\t\tlogger.class.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const channel of response.data.channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const group of response.data.groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportFromHistory(family, options) {\n\t\tlogger.class.debug('Importing messages history');\n\t\tconst response = HTTP.get(`https://slack.com/api/${ family }.history`, { params: _.extend({ token: this.apiToken }, options) });\n\t\tif (response && response.data && _.isArray(response.data.messages) && response.data.messages.length > 0) {\n\t\t\tlet latest = 0;\n\t\t\tfor (const message of response.data.messages.reverse()) {\n\t\t\t\tlogger.class.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tthis.onSlackMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: response.data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tcopySlackChannelInfo(rid, channelMap) {\n\t\tlogger.class.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst response = HTTP.get(`https://slack.com/api/${ channelMap.family }.info`, { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data) {\n\t\t\tconst data = channelMap.family === 'channels' ? response.data.channel : response.data.group;\n\t\t\tif (data && _.isArray(data.members) && data.members.length > 0) {\n\t\t\t\tfor (const member of data.members) {\n\t\t\t\t\tconst user = this.findRocketUser(member) || this.addRocketUser(member);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tlogger.class.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tRocketChat.addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (data && data.topic && data.topic.value) {\n\t\t\t\ttopic = data.topic.value;\n\t\t\t\ttopic_last_set = data.topic.last_set;\n\t\t\t\ttopic_creator = data.topic.creator;\n\t\t\t}\n\n\t\t\tif (data && data.purpose && data.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < data.purpose.last_set) {\n\t\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = this.findRocketUser(topic_creator) || this.addRocketUser(topic_creator);\n\t\t\t\tlogger.class.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tRocketChat.saveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tcopyPins(rid, channelMap) {\n\t\tconst response = HTTP.get('https://slack.com/api/pins.list', { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data && _.isArray(response.data.items) && response.data.items.length > 0) {\n\t\t\tfor (const pin of response.data.items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = this.findRocketUser(pin.message.user);\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\t'author_name' : user.username,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(user.username),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(pin.message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ pin.channel }-${ pin.message.ts.replace(/\\./g, '-') }`, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportMessages(rid, callback) {\n\t\tlogger.class.info('importMessages: ', rid);\n\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.slackChannelMap[rid]) {\n\t\t\t\tthis.copySlackChannelInfo(rid, this.slackChannelMap[rid]);\n\n\t\t\t\tlogger.class.debug('Importing messages from Slack to Rocket.Chat', this.slackChannelMap[rid], rid);\n\t\t\t\tlet results = this.importFromHistory(this.slackChannelMap[rid].family, { channel: this.slackChannelMap[rid].id, oldest: 1 });\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\tresults = this.importFromHistory(this.slackChannelMap[rid].family, { channel: this.slackChannelMap[rid].id, oldest: results.ts });\n\t\t\t\t}\n\n\t\t\t\tlogger.class.debug('Pinning Slack channel messages to Rocket.Chat', this.slackChannelMap[rid], rid);\n\t\t\t\tthis.copyPins(rid, this.slackChannelMap[rid]);\n\n\t\t\t\treturn callback();\n\t\t\t} else {\n\t\t\t\tconst slack_room = this.findSlackChannel(rocketchat_room.name);\n\t\t\t\tif (slack_room) {\n\t\t\t\t\tthis.slackChannelMap[rid] = { id: slack_room.id, family: slack_room.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.class.error('Could not find Slack room with specified name', rocketchat_room.name);\n\t\t\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.class.error('Could not find Rocket.Chat room with specified id', rid);\n\t\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t\t}\n\t}\n\n\tpopulateSlackChannelMap() {\n\t\tlogger.class.debug('Populating channel map');\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const slackChannel of response.data.channels) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackChannel.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tthis.slackChannelMap[rocketchat_room._id] = { id: slackChannel.id, family: slackChannel.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const slackGroup of response.data.groups) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackGroup.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tthis.slackChannelMap[rocketchat_room._id] = { id: slackGroup.id, family: slackGroup.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketMessageDelete(rocketMessageDeleted) {\n\t\tlogger.class.debug('onRocketMessageDelete', rocketMessageDeleted);\n\n\t\tthis.postDeleteMessageToSlack(rocketMessageDeleted);\n\t}\n\n\tonRocketSetReaction(rocketMsgID, reaction) {\n\t\tlogger.class.debug('onRocketSetReaction');\n\n\t\tif (rocketMsgID && reaction) {\n\t\t\tif (this.reactionsMap.delete(`set${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t//This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\tif (rocketMsg) {\n\t\t\t\tconst slackChannel = this.slackChannelMap[rocketMsg.rid].id;\n\t\t\t\tconst slackTS = this.getSlackTS(rocketMsg);\n\t\t\t\tthis.postReactionAddedToSlack(reaction.replace(/:/g, ''), slackChannel, slackTS);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketUnSetReaction(rocketMsgID, reaction) {\n\t\tlogger.class.debug('onRocketUnSetReaction');\n\n\t\tif (rocketMsgID && reaction) {\n\t\t\tif (this.reactionsMap.delete(`unset${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t//This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\tif (rocketMsg) {\n\t\t\t\tconst slackChannel = this.slackChannelMap[rocketMsg.rid].id;\n\t\t\t\tconst slackTS = this.getSlackTS(rocketMsg);\n\t\t\t\tthis.postReactionRemoveToSlack(reaction.replace(/:/g, ''), slackChannel, slackTS);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketMessage(rocketMessage) {\n\t\tlogger.class.debug('onRocketMessage', rocketMessage);\n\n\t\tif (rocketMessage.editedAt) {\n\t\t\t//This is an Edit Event\n\t\t\tthis.processRocketMessageChanged(rocketMessage);\n\t\t\treturn rocketMessage;\n\t\t}\n\t\t// Ignore messages originating from Slack\n\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\treturn rocketMessage;\n\t\t}\n\n\t\t//Probably a new message from Rocket.Chat\n\t\tconst outSlackChannels = RocketChat.settings.get('SlackBridge_Out_All') ? _.keys(this.slackChannelMap) : _.pluck(RocketChat.settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t//logger.class.debug('Out SlackChannels: ', outSlackChannels);\n\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\tthis.postMessageToSlack(this.slackChannelMap[rocketMessage.rid], rocketMessage);\n\t\t}\n\t\treturn rocketMessage;\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tpostReactionAddedToSlack(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.class.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.add', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tpostReactionRemoveToSlack(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.class.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.remove', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostDeleteMessageToSlack(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getSlackTS(rocketMessage),\n\t\t\t\tchannel: this.slackChannelMap[rocketMessage.rid].id,\n\t\t\t\tas_user: true\n\t\t\t};\n\n\t\t\tlogger.class.debug('Post Delete Message to Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.delete', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Message deleted on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessageToSlack(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getAvatarUrlFromUsername(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1\n\t\t\t};\n\t\t\tlogger.class.debug('Post Message To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.postMessage', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.message && postResult.data.message.bot_id && postResult.data.message.ts) {\n\t\t\t\tRocketChat.models.Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n\t\t\t\tlogger.class.debug(`RocketMsgID=${ rocketMessage._id } SlackMsgID=${ postResult.data.message.ts } SlackBotID=${ postResult.data.message.bot_id }`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tpostMessageUpdateToSlack(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getSlackTS(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true\n\t\t\t};\n\t\t\tlogger.class.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.update', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessRocketMessageChanged(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t//We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//This was a change from Rocket.Chat\n\t\t\tconst slackChannel = this.slackChannelMap[rocketMessage.rid];\n\t\t\tthis.postMessageUpdateToSlack(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tprocessSlackMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\t\tconst rocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t//Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = RocketChat.models.Messages\n\t\t\t\t\t.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t//Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = RocketChat.models.Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tRocketChat.deleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tlogger.class.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tprocessSlackMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = RocketChat.models.Messages.findOneById(this.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t//Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && (slackMessage.message.text !== currentMsg.msg)) {\n\t\t\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user ? this.findRocketUser(slackMessage.previous_message.user) || this.addRocketUser(slackMessage.previous_message.user) : null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t//@TODO _id\n\t\t\t\t\t_id: this.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true\t//We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tRocketChat.updateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tlogger.class.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tprocessSlackNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user ? this.findRocketUser(slackMessage.user) || this.addRocketUser(slackMessage.user) : null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000)\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults['imported'] = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.createAndSaveRocketMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetSlackTS(rocketMsg) {\n\t\t//slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t//This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index+1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t//This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\tgetRocketChannel(slackMessage) {\n\t\treturn slackMessage.channel ? this.findRocketChannel(slackMessage.channel) || this.addRocketChannel(slackMessage.channel) : null;\n\t}\n\n\tgetRocketUser(slackUser) {\n\t\treturn slackUser ? this.findRocketUser(slackUser) || this.addRocketUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${ slackChannel }-${ ts.replace(/\\./g, '-') }`;\n\t}\n\n}\n\nRocketChat.SlackBridge = new SlackBridge;\n","/* globals msgStream */\nfunction SlackBridgeImport(command, params, item) {\n\tif (command !== 'slackbridge-import' || !Match.test(params, String)) {\n\t\treturn;\n\t}\n\n\tconst room = RocketChat.models.Rooms.findOneById(item.rid);\n\tconst channel = room.name;\n\tconst user = Meteor.users.findOne(Meteor.userId());\n\n\tmsgStream.emit(item.rid, {\n\t\t_id: Random.id(),\n\t\trid: item.rid,\n\t\tu: { username: 'rocket.cat' },\n\t\tts: new Date(),\n\t\tmsg: TAPi18n.__('SlackBridge_start', {\n\t\t\tpostProcess: 'sprintf',\n\t\t\tsprintf: [user.username, channel]\n\t\t}, user.language)\n\t});\n\n\ttry {\n\t\tRocketChat.SlackBridge.importMessages(item.rid, error => {\n\t\t\tif (error) {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel, error.message]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_finish', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tmsgStream.emit(item.rid, {\n\t\t\t_id: Random.id(),\n\t\t\trid: item.rid,\n\t\t\tu: { username: 'rocket.cat' },\n\t\t\tts: new Date(),\n\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\tsprintf: [channel, error.message]\n\t\t\t}, user.language)\n\t\t});\n\t\tthrow error;\n\t}\n\treturn SlackBridgeImport;\n}\n\nRocketChat.slashCommands.add('slackbridge-import', SlackBridgeImport);\n"]}