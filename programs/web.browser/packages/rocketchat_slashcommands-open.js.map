{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slashcommands-open/client.js"],"names":["Open","command","params","dict","Match","test","String","room","trim","type","replace","query","name","$in","subscription","ChatSubscription","findOne","RocketChat","roomTypes","openRouteLink","t","FlowRouter","current","queryParams","indexOf","Meteor","call","err","models","Subscriptions","slashCommands","add","description","clientOnly"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,IAAT,CAAcC,OAAd,EAAuBC,MAAvB,CAA8B,UAA9B,EAA0C;AACzC,KAAMC,OAAO;AACZ,OAAK,CAAC,GAAD,EAAM,GAAN,CADO;AAEZ,OAAK,CAAC,GAAD;AAFO,EAAb;;AAKA,KAAIF,YAAY,MAAZ,IAAsB,CAACG,MAAMC,IAAN,CAAWH,MAAX,EAAmBI,MAAnB,CAA3B,EAAuD;AACtD;AACA;;AAED,KAAIC,OAAOL,OAAOM,IAAP,EAAX;AACA,KAAMC,OAAON,KAAKI,KAAK,CAAL,CAAL,CAAb;AACAA,QAAOA,KAAKG,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAP;AAEA,KAAMC,QAAQ;AACbC,QAAML;AADO,EAAd;;AAIA,KAAIE,IAAJ,EAAU;AACTE,QAAM,GAAN,IAAa;AACZE,QAAKJ;AADO,GAAb;AAGA;;AAED,KAAMK,eAAeC,iBAAiBC,OAAjB,CAAyBL,KAAzB,CAArB;;AAEA,KAAIG,YAAJ,EAAkB;AACjBG,aAAWC,SAAX,CAAqBC,aAArB,CAAmCL,aAAaM,CAAhD,EAAmDN,YAAnD,EAAiEO,WAAWC,OAAX,GAAqBC,WAAtF;AACA;;AAED,KAAId,QAAQA,KAAKe,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAnC,EAAsC;AACrC;AACA;;AACD,QAAOC,OAAOC,IAAP,CAAY,qBAAZ,EAAmCnB,IAAnC,EAAyC,UAASoB,GAAT,EAAc;AAC7D,MAAIA,GAAJ,EAAS;AACR;AACA;;AACD,MAAMb,eAAeG,WAAWW,MAAX,CAAkBC,aAAlB,CAAgCb,OAAhC,CAAwCL,KAAxC,CAArB;AACAM,aAAWC,SAAX,CAAqBC,aAArB,CAAmCL,aAAaM,CAAhD,EAAmDN,YAAnD,EAAiEO,WAAWC,OAAX,GAAqBC,WAAtF;AACA,EANM,CAAP;AAQA;;AAEDN,WAAWa,aAAX,CAAyBC,GAAzB,CAA6B,MAA7B,EAAqC/B,IAArC,EAA2C;AAC1CgC,cAAa,yCAD6B;AAE1C9B,SAAQ,WAFkC;AAG1C+B,aAAY;AAH8B,CAA3C,0G","file":"/packages/rocketchat_slashcommands-open.js","sourcesContent":["function Open(command, params /*, item*/) {\n\tconst dict = {\n\t\t'#': ['c', 'p'],\n\t\t'@': ['d']\n\t};\n\n\tif (command !== 'open' || !Match.test(params, String)) {\n\t\treturn;\n\t}\n\n\tlet room = params.trim();\n\tconst type = dict[room[0]];\n\troom = room.replace(/#|@/, '');\n\n\tconst query = {\n\t\tname: room\n\t};\n\n\tif (type) {\n\t\tquery['t'] = {\n\t\t\t$in: type\n\t\t};\n\t}\n\n\tconst subscription = ChatSubscription.findOne(query);\n\n\tif (subscription) {\n\t\tRocketChat.roomTypes.openRouteLink(subscription.t, subscription, FlowRouter.current().queryParams);\n\t}\n\n\tif (type && type.indexOf('d') === -1) {\n\t\treturn;\n\t}\n\treturn Meteor.call('createDirectMessage', room, function(err) {\n\t\tif (err) {\n\t\t\treturn;\n\t\t}\n\t\tconst subscription = RocketChat.models.Subscriptions.findOne(query);\n\t\tRocketChat.roomTypes.openRouteLink(subscription.t, subscription, FlowRouter.current().queryParams);\n\t});\n\n}\n\nRocketChat.slashCommands.add('open', Open, {\n\tdescription: 'Opens_a_channel_group_or_direct_message',\n\tparams: 'room_name',\n\tclientOnly: true\n});\n"]}