{"version":3,"sources":["meteor://ðŸ’»app/packages/tap_i18n/lib/tap_i18n/tap_i18n-helpers.coffee","meteor://ðŸ’»app/packages/tap_i18n/lib/tap_i18n/tap_i18n-common.coffee","meteor://ðŸ’»app/packages/tap_i18n/lib/tap_i18n/tap_i18n-server.coffee","meteor://ðŸ’»app/lib/tap_i18n/tap_i18n-server.coffee.js","meteor://ðŸ’»app/packages/tap_i18n/lib/tap_i18n/tap_i18n-init.coffee"],"names":["share","helpers","indexOf","item","i","l","length","_","extend","TAPi18n","prototype","server_translators","_registerServerTranslator","lang_tag","package_name","_enabled","_getSpecificLangTranslator","_fallback_language","addResourceBundle","translations","_registerAllServerTranslators","len","ref","results","_getProjectLanguages","push","results1","call","_getPackageI18nextProxy","_this","key","options","_getPackageDomain","console","log","_registerHTTPMethod","methods","self","Meteor","Error","conf","i18n_files_route","replace","get","langs","language_translations","output","RegExp","globals","langauges_tags_regex","test","params","setStatusCode","split","JSON","stringify","lang","HTTP","_onceEnabled"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"/packages/tap_i18n.js","sourcesContent":["share.helpers = {}","fallback_language = globals.fallback_language\n\nTAPi18n = ->\n  EventEmitter.call @\n\n  @_fallback_language = fallback_language\n\n  @_language_changed_tracker = new Tracker.Dependency\n\n  @_loaded_languages = [fallback_language] # stores the loaded languages, the fallback language is loaded automatically\n\n  @conf = null # If conf isn't null we assume that tap:i18n is enabled for the project.\n             # We assume conf is valid, we sterilize and validate it during the build process.\n\n  @packages = {} # Stores the packages' package-tap.i18n jsons\n\n  @languages_names = {} # Stores languages that we've found languages files for in the project dir.\n                                      # format:\n                                      # {\n                                      #    lang_tag: [lang_name_in_english, lang_name_in_local_language]\n                                      # }\n\n  @translations = {} # Stores the packages/project translations - Server side only\n                   # fallback_language translations are not stored here\n\n\n  if Meteor.isClient\n    Session.set @_loaded_lang_session_key, null\n\n    @_languageSpecificTranslators = {}\n    @_languageSpecificTranslatorsTrackers = {}\n\n  if Meteor.isServer\n    @server_translators = {}\n\n    Meteor.startup =>\n      # If tap-i18n is enabled for that project\n      if @_enabled()\n        @_registerHTTPMethod()\n\n  @__ = @_getPackageI18nextProxy(globals.project_translations_domain)\n\n  TAPi18next.setLng fallback_language\n\n  return @\n\nUtil.inherits TAPi18n, EventEmitter\n\n_.extend TAPi18n.prototype,\n  _loaded_lang_session_key: \"TAPi18n::loaded_lang\"\n\n  _enable: (conf) ->\n    # tap:i18n gets enabled for a project once a conf file is set for it.\n    # It can be either a conf object that was set by project-tap.i18n file or\n    # a default conf, which is being added if the project has lang files\n    # (*.i18n.json) but not project-tap.i18n\n    @conf = conf\n\n    @._onceEnabled()\n\n  _onceEnabled: () ->\n    # The arch specific code can use this for procedures that should be performed once\n    # tap:i18n gets enabled (project conf file is being set)\n    return\n\n  _enabled: ->\n    # read the comment of @conf\n    @conf?\n\n  _getPackageDomain: (package_name) ->\n    package_name.replace(/:/g, \"-\")\n\n  addResourceBundle: (lang_tag, package_name, translations) ->\n    TAPi18next.addResourceBundle(lang_tag, @_getPackageDomain(package_name), translations)\n\n  _getSpecificLangTranslator: (lang) ->\n    current_lang = TAPi18next.lng()\n\n    translator = null\n    TAPi18next.setLng lang, {fixLng: true}, (lang_translator) =>\n      translator = lang_translator\n\n    # Restore i18next lang that had been changed in the process of generating\n    # lang specific translator\n    TAPi18next.setLng current_lang\n\n    return translator\n\n  _getProjectLanguages: () ->\n    # Return an array of languages available for the current project\n    if @._enabled()\n      if _.isArray @.conf.supported_languages\n        return _.union([@._fallback_language], @.conf.supported_languages)\n      else\n        # If supported_languages is null, all the languages we found\n        # translations files to in the project level are considered supported.\n        # We use the @.languages_names array to tell which languages we found\n        # since for every i18n.json file we found in the project level we add\n        # an entry for its language to @.languages_names in the build process.\n        #\n        # We also know for certain that when tap-i18n is enabled the fallback\n        # lang is in @.languages_names\n        return _.keys @.languages_names\n    else\n      return [@._fallback_language]\n\n  getLanguages: ->\n    if not @._enabled()\n      return null\n\n    languages = {}\n    for lang_tag in @._getProjectLanguages()\n      languages[lang_tag] =\n        name: @.languages_names[lang_tag][1]\n        en: @.languages_names[lang_tag][0]\n\n    languages\n\n  _loadLangFileObject: (language_tag, data) ->\n    for package_name, package_keys of data\n      # Translations that are added by loadTranslations() have higher priority\n      package_keys = _.extend({}, package_keys, @_loadTranslations_cache[language_tag]?[package_name] or {})\n\n      @addResourceBundle(language_tag, package_name, package_keys)\n\n  _loadTranslations_cache: {}\n  loadTranslations: (translations, namespace) ->\n    project_languages = @_getProjectLanguages()\n\n    for language_tag, translation_keys of translations\n      if not @_loadTranslations_cache[language_tag]?\n        @_loadTranslations_cache[language_tag] = {}\n\n      if not @_loadTranslations_cache[language_tag][namespace]?\n        @_loadTranslations_cache[language_tag][namespace] = {}\n\n      _.extend(@_loadTranslations_cache[language_tag][namespace], translation_keys)\n\n      @addResourceBundle(language_tag, namespace, translation_keys)\n\n      if Meteor.isClient and @getLanguage() == language_tag\n        # Retranslate if session language updated\n        @_language_changed_tracker.changed()","_.extend TAPi18n.prototype,\n  server_translators: null\n\n  _registerServerTranslator: (lang_tag, package_name) ->\n    if @_enabled()\n      if not(lang_tag of @server_translators)\n        @server_translators[lang_tag] = @_getSpecificLangTranslator(lang_tag)\n\n      # fallback language is integrated, and isn't part of @translations \n      if lang_tag != @_fallback_language\n        @addResourceBundle(lang_tag, package_name, @translations[lang_tag][package_name])\n\n    if not(@_fallback_language of @server_translators)\n      @server_translators[@_fallback_language] = @_getSpecificLangTranslator(@_fallback_language)\n\n  _registerAllServerTranslators: () ->\n    for lang_tag in @_getProjectLanguages()\n      for package_name of @translations[lang_tag]\n        @_registerServerTranslator(lang_tag, package_name)\n\n  _getPackageI18nextProxy: (package_name) ->\n    # A proxy to TAPi18next.t where the namespace is preset to the package's\n    (key, options, lang_tag=null) =>\n      if not lang_tag?\n        # translate to fallback_language\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else if not(lang_tag of @server_translators)\n        console.log \"Warning: language #{lang_tag} is not supported in this project, fallback language (#{@_fallback_language})\"\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else\n        return @server_translators[lang_tag] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n\n  _registerHTTPMethod: ->\n    self = @\n\n    methods = {}\n\n    if not self._enabled()\n      throw new Meteor.Error 500, \"tap-i18n has to be enabled in order to register the HTTP method\"\n\n    methods[\"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/multi/:langs\"] =\n      get: () ->\n        if not RegExp(\"^((#{globals.langauges_tags_regex},)*#{globals.langauges_tags_regex}|all).json$\").test(@params.langs)\n          return @setStatusCode(401)\n\n        langs = @params.langs.replace \".json\", \"\"\n\n        if langs == \"all\"\n          output = self.translations\n        else\n          output = {}\n\n          langs = langs.split(\",\")\n          for lang_tag in langs\n            if lang_tag in self._getProjectLanguages() and \\\n               lang_tag != self._fallback_language # fallback language is integrated to the bundle\n              language_translations = self.translations[lang_tag]\n\n              if language_translations?\n                output[lang_tag] = language_translations\n\n        return JSON.stringify(output)\n\n    methods[\"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/:lang\"] =\n      get: () ->\n        if not RegExp(\"^#{globals.langauges_tags_regex}.json$\").test(@params.lang)\n          return @setStatusCode(401)\n\n        lang_tag = @params.lang.replace \".json\", \"\"\n\n        if lang_tag not in self._getProjectLanguages() or \\\n           lang_tag == self._fallback_language # fallback language is integrated to the bundle\n          return @setStatusCode(404) # not found\n\n        language_translations = self.translations[lang_tag]\n        # returning {} if lang_tag is not in translations allows the project\n        # developer to force a language supporte with project-tap.i18n's\n        # supported_languages property, even if that language has no lang\n        # files.\n        return JSON.stringify(if language_translations? then language_translations else {})\n\n    HTTP.methods methods\n\n  _onceEnabled: ->\n    @_registerAllServerTranslators()","var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n_.extend(TAPi18n.prototype, {\n  server_translators: null,\n  _registerServerTranslator: function(lang_tag, package_name) {\n    if (this._enabled()) {\n      if (!(lang_tag in this.server_translators)) {\n        this.server_translators[lang_tag] = this._getSpecificLangTranslator(lang_tag);\n      }\n      if (lang_tag !== this._fallback_language) {\n        this.addResourceBundle(lang_tag, package_name, this.translations[lang_tag][package_name]);\n      }\n    }\n    if (!(this._fallback_language in this.server_translators)) {\n      return this.server_translators[this._fallback_language] = this._getSpecificLangTranslator(this._fallback_language);\n    }\n  },\n  _registerAllServerTranslators: function() {\n    var i, lang_tag, len, package_name, ref, results;\n    ref = this._getProjectLanguages();\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      lang_tag = ref[i];\n      results.push((function() {\n        var results1;\n        results1 = [];\n        for (package_name in this.translations[lang_tag]) {\n          results1.push(this._registerServerTranslator(lang_tag, package_name));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  },\n  _getPackageI18nextProxy: function(package_name) {\n    return (function(_this) {\n      return function(key, options, lang_tag) {\n        if (lang_tag == null) {\n          lang_tag = null;\n        }\n        if (lang_tag == null) {\n          return _this.server_translators[_this._fallback_language]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        } else if (!(lang_tag in _this.server_translators)) {\n          console.log(\"Warning: language \" + lang_tag + \" is not supported in this project, fallback language (\" + _this._fallback_language + \")\");\n          return _this.server_translators[_this._fallback_language]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        } else {\n          return _this.server_translators[lang_tag]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        }\n      };\n    })(this);\n  },\n  _registerHTTPMethod: function() {\n    var methods, self;\n    self = this;\n    methods = {};\n    if (!self._enabled()) {\n      throw new Meteor.Error(500, \"tap-i18n has to be enabled in order to register the HTTP method\");\n    }\n    methods[(self.conf.i18n_files_route.replace(/\\/$/, \"\")) + \"/multi/:langs\"] = {\n      get: function() {\n        var i, lang_tag, langs, language_translations, len, output;\n        if (!RegExp(\"^((\" + globals.langauges_tags_regex + \",)*\" + globals.langauges_tags_regex + \"|all).json$\").test(this.params.langs)) {\n          return this.setStatusCode(401);\n        }\n        langs = this.params.langs.replace(\".json\", \"\");\n        if (langs === \"all\") {\n          output = self.translations;\n        } else {\n          output = {};\n          langs = langs.split(\",\");\n          for (i = 0, len = langs.length; i < len; i++) {\n            lang_tag = langs[i];\n            if (indexOf.call(self._getProjectLanguages(), lang_tag) >= 0 && lang_tag !== self._fallback_language) {\n              language_translations = self.translations[lang_tag];\n              if (language_translations != null) {\n                output[lang_tag] = language_translations;\n              }\n            }\n          }\n        }\n        return JSON.stringify(output);\n      }\n    };\n    methods[(self.conf.i18n_files_route.replace(/\\/$/, \"\")) + \"/:lang\"] = {\n      get: function() {\n        var lang_tag, language_translations;\n        if (!RegExp(\"^\" + globals.langauges_tags_regex + \".json$\").test(this.params.lang)) {\n          return this.setStatusCode(401);\n        }\n        lang_tag = this.params.lang.replace(\".json\", \"\");\n        if (indexOf.call(self._getProjectLanguages(), lang_tag) < 0 || lang_tag === self._fallback_language) {\n          return this.setStatusCode(404);\n        }\n        language_translations = self.translations[lang_tag];\n        return JSON.stringify(language_translations != null ? language_translations : {});\n      }\n    };\n    return HTTP.methods(methods);\n  },\n  _onceEnabled: function() {\n    return this._registerAllServerTranslators();\n  }\n});\n","TAPi18n = new TAPi18n()"]}