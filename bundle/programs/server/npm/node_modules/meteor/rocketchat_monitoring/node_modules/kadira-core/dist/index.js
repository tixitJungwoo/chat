'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Kadira = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _clock = require('./clock.js');

var _clock2 = _interopRequireDefault(_clock);

var _retry = require('./retry.js');

var _retry2 = _interopRequireDefault(_retry);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = (0, _debug2.default)('kadira-core:transport');

var DEFAULTS = {
  appId: '',
  appSecret: '',
  endpoint: 'https://enginex.kadira.io',
  hostname: 'localhost',
  clockSyncInterval: 1000 * 60,
  dataFlushInterval: 1000 * 10
};

// exporting this for if we need to get this as a NPM module.

var Kadira = exports.Kadira = function () {
  function Kadira(_options) {
    (0, _classCallCheck3.default)(this, Kadira);

    this._options = (0, _assign2.default)({}, DEFAULTS, _options);
    this._headers = {
      'content-type': 'application/json',
      accepts: 'application/json',
      'KADIRA-APP-ID': this._options.appId,
      'KADIRA-APP-SECRET': this._options.appSecret
    };

    this._clock = new _clock2.default({
      endpoint: this._options.endpoint + '/simplentp/sync'
    });

    this._clockSyncInterval = null;
  }

  (0, _createClass3.default)(Kadira, [{
    key: 'connect',
    value: function connect() {
      var _this = this;

      logger('connecting with', this._options);
      return this._checkAuth().then(function () {
        return _this._clock.sync();
      }).then(function () {
        _this._clockSyncInterval = setInterval(function () {
          return _this._clock.sync();
        }, _this._options.clockSyncInterval);
      });
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      logger('disconnect');
      clearInterval(this._clockSyncInterval);
    }
  }, {
    key: 'getJob',
    value: function getJob(id) {
      var body = { action: 'get', params: {} };
      (0, _assign2.default)(body.params, { id: id });

      var url = this._options.endpoint + '/jobs';
      var params = {
        body: body,
        headers: this._headers,
        json: true
      };

      logger('get job', id);
      return this._send(url, params);
    }
  }, {
    key: 'updateJob',
    value: function updateJob(id, diff) {
      var body = { action: 'set', params: {} };
      (0, _assign2.default)(body.params, diff, { id: id });

      var url = this._options.endpoint + '/jobs';
      var params = {
        body: body,
        headers: this._headers,
        json: true
      };

      logger('update job', id);
      return this._send(url, params);
    }

    // send the given payload to the server

  }, {
    key: 'sendData',
    value: function sendData(_payload) {
      var payload = (0, _extends3.default)({}, _payload, {
        host: this._options.hostname
      });

      var url = this._options.endpoint;
      var body = (0, _stringify2.default)(payload);
      var params = {
        body: body,
        headers: this._headers
      };

      logger('send data - ' + body.substr(0, 50) + '...');
      return this._send(url, params);
    }

    // ping the server to check whether appId and appSecret
    // are valid and correct. Data sent inside http headers.

  }, {
    key: '_checkAuth',
    value: function _checkAuth() {
      var uri = this._options.endpoint + '/ping';
      var params = { headers: this._headers };
      return this._send(uri, params);
    }

    // communicates with the server with http (using fetch)
    // Also handles response http status codes and  retries

  }, {
    key: '_send',
    value: function _send(url, params) {
      return (0, _retry2.default)(function () {
        return new _promise2.default(function (resolve, reject) {
          _request2.default.post(url, params, function (err, res, body) {
            if (err) {
              return reject(err);
            }

            if (res.statusCode === 200) {
              return resolve(body);
            }

            if (res.statusCode === 401) {
              logger('Error: Unauthorized');
              return reject(new _retry.ByPassRetryError('Unauthorized'));
            }

            if (res.statusCode >= 400 && res.statusCode < 500) {
              var _message = 'Agent Error: ' + res.statusCode;
              logger('Error: ' + _message);
              return reject(new _retry.ByPassRetryError(_message));
            }

            var message = 'Request failed: ' + res.statusCode;
            logger('Error: ' + message);
            reject(new Error(message));
          });
        });
      });
    }
  }]);
  return Kadira;
}();

exports.default = Kadira;