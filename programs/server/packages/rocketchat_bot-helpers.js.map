{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:bot-helpers/server/index.js","meteor://ðŸ’»app/packages/rocketchat:bot-helpers/server/settings.js"],"names":["BotHelpers","queries","online","$ne","users","$not","$all","setupCursors","fieldsSetting","userFields","split","forEach","n","trim","_allUsers","RocketChat","models","Users","find","fields","_onlineUsers","$and","request","prop","params","addUserToRole","userName","roleName","Meteor","call","removeUserFromRole","addUserToRoom","room","foundRoom","Rooms","findOneByIdOrName","_","isObject","Error","data","rid","_id","username","removeUserFromRoom","requestError","method","action","Object","keys","length","fetch","hasOwnProperty","map","user","name","botHelpers","settings","get","settingKey","settingValue","methods","botRequest","userID","userId","authz","hasRole","startup","addGroup","add","type","section","i18nLabel","i18nDescription"],"mappings":"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","file":"/packages/rocketchat_bot-helpers.js","sourcesContent":["/**\n * BotHelpers helps bots\n * \"private\" properties use meteor collection cursors, so they stay reactive\n * \"public\" properties use getters to fetch and filter collections as array\n */\nclass BotHelpers {\n\tconstructor() {\n\t\tthis.queries = {\n\t\t\tonline: { 'status': { $ne: 'offline' } },\n\t\t\tusers: { 'roles': { $not: { $all: ['bot'] } } }\n\t\t};\n\t}\n\n\t// setup collection cursors with array of fields from setting\n\tsetupCursors(fieldsSetting) {\n\t\tthis.userFields = {};\n\t\tif (typeof fieldsSetting === 'string') {\n\t\t\tfieldsSetting = fieldsSetting.split(',');\n\t\t}\n\t\tfieldsSetting.forEach((n) => {\n\t\t\tthis.userFields[n.trim()] = 1;\n\t\t});\n\t\tthis._allUsers = RocketChat.models.Users.find(this.queries.users, { fields: this.userFields });\n\t\tthis._onlineUsers = RocketChat.models.Users.find({ $and: [this.queries.users, this.queries.online] }, { fields: this.userFields });\n\t}\n\n\t// request methods or props as arguments to Meteor.call\n\trequest(prop, ...params) {\n\t\tif (typeof this[prop] === 'undefined') {\n\t\t\treturn null;\n\t\t} else if (typeof this[prop] === 'function') {\n\t\t\treturn this[prop](...params);\n\t\t} else {\n\t\t\treturn this[prop];\n\t\t}\n\t}\n\n\taddUserToRole(userName, roleName) {\n\t\tMeteor.call('authorization:addUserToRole', roleName, userName);\n\t}\n\n\tremoveUserFromRole(userName, roleName) {\n\t\tMeteor.call('authorization:removeUserFromRole', roleName, userName);\n\t}\n\n\taddUserToRoom(userName, room) {\n\t\tconst foundRoom = RocketChat.models.Rooms.findOneByIdOrName(room);\n\n\t\tif (!_.isObject(foundRoom)) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t}\n\n\t\tconst data = {};\n\t\tdata.rid = foundRoom._id;\n\t\tdata.username = userName;\n\t\tMeteor.call('addUserToRoom', data);\n\t}\n\n\tremoveUserFromRoom(userName, room) {\n\t\tconst foundRoom = RocketChat.models.Rooms.findOneByIdOrName(room);\n\n\t\tif (!_.isObject(foundRoom)) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t}\n\t\tconst data = {};\n\t\tdata.rid = foundRoom._id;\n\t\tdata.username = userName;\n\t\tMeteor.call('removeUserFromRoom', data);\n\t}\n\n\t// generic error whenever property access insufficient to fill request\n\trequestError() {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Bot request not allowed', { method: 'botRequest', action: 'bot_request' });\n\t}\n\n\t// \"public\" properties accessed by getters\n\t// allUsers / onlineUsers return whichever properties are enabled by settings\n\tget allUsers() {\n\t\tif (!Object.keys(this.userFields).length) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._allUsers.fetch();\n\t\t}\n\t}\n\tget onlineUsers() {\n\t\tif (!Object.keys(this.userFields).length) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._onlineUsers.fetch();\n\t\t}\n\t}\n\tget allUsernames() {\n\t\tif (!this.userFields.hasOwnProperty('username')) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._allUsers.fetch().map((user) => user.username);\n\t\t}\n\t}\n\tget onlineUsernames() {\n\t\tif (!this.userFields.hasOwnProperty('username')) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._onlineUsers.fetch().map((user) => user.username);\n\t\t}\n\t}\n\tget allNames() {\n\t\tif (!this.userFields.hasOwnProperty('name')) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._allUsers.fetch().map((user) => user.name);\n\t\t}\n\t}\n\tget onlineNames() {\n\t\tif (!this.userFields.hasOwnProperty('name')) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._onlineUsers.fetch().map((user) => user.name);\n\t\t}\n\t}\n\tget allIDs() {\n\t\tif (!this.userFields.hasOwnProperty('_id') || !this.userFields.hasOwnProperty('username')) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._allUsers.fetch().map((user) => {\n\t\t\t\treturn { 'id': user._id, 'name': user.username };\n\t\t\t});\n\t\t}\n\t}\n\tget onlineIDs() {\n\t\tif (!this.userFields.hasOwnProperty('_id') || !this.userFields.hasOwnProperty('username')) {\n\t\t\tthis.requestError();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this._onlineUsers.fetch().map((user) => {\n\t\t\t\treturn { 'id': user._id, 'name': user.username };\n\t\t\t});\n\t\t}\n\t}\n}\n\n// add class to meteor methods\nconst botHelpers = new BotHelpers();\n\n// init cursors with fields setting and update on setting change\nRocketChat.settings.get('BotHelpers_userFields', function(settingKey, settingValue) {\n\tbotHelpers.setupCursors(settingValue);\n});\n\nMeteor.methods({\n\tbotRequest: (...args) => {\n\t\tconst userID = Meteor.userId();\n\t\tif (userID && RocketChat.authz.hasRole(userID, 'bot')) {\n\t\t\treturn botHelpers.request(...args);\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'botRequest' });\n\t\t}\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('Bots', function() {\n\t\tthis.add('BotHelpers_userFields', '_id, name, username, emails, language, utcOffset', {\n\t\t\ttype: 'string',\n\t\t\tsection: 'Helpers',\n\t\t\ti18nLabel: 'BotHelpers_userFields',\n\t\t\ti18nDescription: 'BotHelpers_userFields_Description'\n\t\t});\n\t});\n});\n"]}