(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var RateLimiter = Package['rate-limit'].RateLimiter;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var Accounts = Package['accounts-base'].Accounts;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var check = Package.check.check;
var Match = Package.check.Match;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var _ = Package.underscore._;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;
var OAuth = Package.oauth.OAuth;
var Oauth = Package.oauth.Oauth;
var s = Package['underscorestring:underscore.string'].s;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;
var Streamer = Package['rocketchat:streamer'].Streamer;
var Logger = Package['rocketchat:logger'].Logger;
var SystemLogger = Package['rocketchat:logger'].SystemLogger;
var LoggerManager = Package['rocketchat:logger'].LoggerManager;
var CustomOAuth = Package['rocketchat:custom-oauth'].CustomOAuth;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var meteorInstall = Package.modules.meteorInstall;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime-server'].Symbol;
var Map = Package['ecmascript-runtime-server'].Map;
var Set = Package['ecmascript-runtime-server'].Set;

/* Package-scope variables */
var RocketChat, name, __coffeescriptShare, RocketChatTabBar;

var require = meteorInstall({"node_modules":{"meteor":{"rocketchat:lib":{"lib":{"core.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/core.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 2
* Kick off the global namespace for RocketChat.                                                                        //
* @namespace RocketChat                                                                                                //
*/RocketChat = {                                                                                                       //
	models: {}                                                                                                            // 7
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getURL.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getURL.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.getURL = function (path) {                                                                                  // 1
	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},                                    // 1
	    _ref$cdn = _ref.cdn,                                                                                              // 1
	    cdn = _ref$cdn === undefined ? true : _ref$cdn,                                                                   // 1
	    _ref$full = _ref.full,                                                                                            // 1
	    full = _ref$full === undefined ? false : _ref$full;                                                               // 1
                                                                                                                       //
	var cdnPrefix = _.rtrim(_.trim(RocketChat.settings.get('CDN_PREFIX') || ''), '/');                                    // 2
                                                                                                                       //
	var pathPrefix = _.rtrim(_.trim(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || ''), '/');                          // 3
                                                                                                                       //
	var basePath = void 0;                                                                                                // 5
                                                                                                                       //
	var finalPath = _.ltrim(_.trim(path), '/');                                                                           // 7
                                                                                                                       //
	if (cdn && cdnPrefix !== '') {                                                                                        // 9
		basePath = cdnPrefix + pathPrefix;                                                                                   // 10
	} else if (full || Meteor.isCordova) {                                                                                // 11
		return Meteor.absoluteUrl(finalPath);                                                                                // 12
	} else {                                                                                                              // 13
		basePath = pathPrefix;                                                                                               // 14
	}                                                                                                                     // 15
                                                                                                                       //
	return basePath + "/" + finalPath;                                                                                    // 17
};                                                                                                                     // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/settings.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 2
* RocketChat.settings holds all packages settings                                                                      //
* @namespace RocketChat.settings                                                                                       //
*/RocketChat.settings = {                                                                                              //
	callbacks: {},                                                                                                        // 7
	regexCallbacks: {},                                                                                                   // 8
	ts: new Date(),                                                                                                       // 9
	get: function (_id, callback) {                                                                                       // 10
		if (callback != null) {                                                                                              // 11
			RocketChat.settings.onload(_id, callback);                                                                          // 12
                                                                                                                       //
			if (!Meteor.settings) {                                                                                             // 13
				return;                                                                                                            // 14
			}                                                                                                                   // 15
                                                                                                                       //
			if (_id === '*') {                                                                                                  // 16
				return Object.keys(Meteor.settings).forEach(function (key) {                                                       // 17
					var value = Meteor.settings[key];                                                                                 // 18
					callback(key, value);                                                                                             // 19
				});                                                                                                                // 20
			}                                                                                                                   // 21
                                                                                                                       //
			if (_.isRegExp(_id) && Meteor.settings) {                                                                           // 22
				return Object.keys(Meteor.settings).forEach(function (key) {                                                       // 23
					if (!_id.test(key)) {                                                                                             // 24
						return;                                                                                                          // 25
					}                                                                                                                 // 26
                                                                                                                       //
					var value = Meteor.settings[key];                                                                                 // 27
					callback(key, value);                                                                                             // 28
				});                                                                                                                // 29
			}                                                                                                                   // 30
                                                                                                                       //
			return Meteor.settings[_id] != null && callback(_id, Meteor.settings[_id]);                                         // 31
		} else {                                                                                                             // 32
			if (!Meteor.settings) {                                                                                             // 33
				return;                                                                                                            // 34
			}                                                                                                                   // 35
                                                                                                                       //
			if (_.isRegExp(_id)) {                                                                                              // 36
				return Object.keys(Meteor.settings).reduce(function (items, key) {                                                 // 37
					var value = Meteor.settings[key];                                                                                 // 38
                                                                                                                       //
					if (_id.test(key)) {                                                                                              // 39
						items.push({                                                                                                     // 40
							key: key,                                                                                                       // 41
							value: value                                                                                                    // 42
						});                                                                                                              // 40
					}                                                                                                                 // 44
                                                                                                                       //
					return items;                                                                                                     // 45
				}, []);                                                                                                            // 46
			}                                                                                                                   // 47
                                                                                                                       //
			return Meteor.settings && Meteor.settings[_id];                                                                     // 48
		}                                                                                                                    // 49
	},                                                                                                                    // 50
	set: function (_id, value, callback) {                                                                                // 51
		return Meteor.call('saveSetting', _id, value, callback);                                                             // 52
	},                                                                                                                    // 53
	batchSet: function (settings, callback) {                                                                             // 54
		// async -> sync                                                                                                     // 55
		// http://daemon.co.za/2012/04/simple-async-with-only-underscore/                                                    // 56
		var save = function (setting) {                                                                                      // 57
			return function (callback) {                                                                                        // 58
				return Meteor.call('saveSetting', setting._id, setting.value, setting.editor, callback);                           // 59
			};                                                                                                                  // 60
		};                                                                                                                   // 61
                                                                                                                       //
		var actions = _.map(settings, function (setting) {                                                                   // 62
			return save(setting);                                                                                               // 62
		});                                                                                                                  // 62
                                                                                                                       //
		return _(actions).reduceRight(_.wrap, function (err, success) {                                                      // 63
			return callback(err, success);                                                                                      // 63
		})();                                                                                                                // 63
	},                                                                                                                    // 64
	load: function (key, value, initialLoad) {                                                                            // 65
		['*', key].forEach(function (item) {                                                                                 // 66
			if (RocketChat.settings.callbacks[item]) {                                                                          // 67
				RocketChat.settings.callbacks[item].forEach(function (callback) {                                                  // 68
					return callback(key, value, initialLoad);                                                                         // 68
				});                                                                                                                // 68
			}                                                                                                                   // 69
		});                                                                                                                  // 70
		Object.keys(RocketChat.settings.regexCallbacks).forEach(function (cbKey) {                                           // 71
			var cbValue = RocketChat.settings.regexCallbacks[cbKey];                                                            // 72
                                                                                                                       //
			if (!cbValue.regex.test(key)) {                                                                                     // 73
				return;                                                                                                            // 74
			}                                                                                                                   // 75
                                                                                                                       //
			cbValue.callbacks.forEach(function (callback) {                                                                     // 76
				return callback(key, value, initialLoad);                                                                          // 76
			});                                                                                                                 // 76
		});                                                                                                                  // 77
	},                                                                                                                    // 78
	onload: function (key, callback) {                                                                                    // 79
		// if key is '*'                                                                                                     // 80
		// 	for key, value in Meteor.settings                                                                                // 81
		// 		callback key, value, false                                                                                      // 82
		// else if Meteor.settings?[_id]?                                                                                    // 83
		// 	callback key, Meteor.settings[_id], false                                                                        // 84
		var keys = [].concat(key);                                                                                           // 85
		keys.forEach(function (k) {                                                                                          // 86
			if (_.isRegExp(k)) {                                                                                                // 87
				RocketChat.settings.regexCallbacks[name = k.source] = RocketChat.settings.regexCallbacks[name = k.source] || {     // 88
					regex: k,                                                                                                         // 89
					callbacks: []                                                                                                     // 90
				};                                                                                                                 // 88
				RocketChat.settings.regexCallbacks[k.source].callbacks.push(callback);                                             // 92
			} else {                                                                                                            // 93
				RocketChat.settings.callbacks[k] = RocketChat.settings.callbacks[k] || [];                                         // 94
				RocketChat.settings.callbacks[k].push(callback);                                                                   // 95
			}                                                                                                                   // 96
		});                                                                                                                  // 97
	}                                                                                                                     // 98
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"callbacks.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/callbacks.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
* Callback hooks provide an easy way to add extra steps to common operations.                                          //
* @namespace RocketChat.callbacks                                                                                      //
*/RocketChat.callbacks = {};                                                                                           //
                                                                                                                       //
if (Meteor.isServer) {                                                                                                 // 8
	RocketChat.callbacks.showTime = true;                                                                                 // 9
	RocketChat.callbacks.showTotalTime = true;                                                                            // 10
} else {                                                                                                               // 11
	RocketChat.callbacks.showTime = false;                                                                                // 12
	RocketChat.callbacks.showTotalTime = false;                                                                           // 13
} /*                                                                                                                   // 14
  * Callback priorities                                                                                                //
  */                                                                                                                   //
                                                                                                                       //
RocketChat.callbacks.priority = {                                                                                      // 21
	HIGH: -1000,                                                                                                          // 22
	MEDIUM: 0,                                                                                                            // 23
	LOW: 1000                                                                                                             // 24
}; /*                                                                                                                  // 21
   * Add a callback function to a hook                                                                                 //
   * @param {String} hook - The name of the hook                                                                       //
   * @param {Function} callback - The callback function                                                                //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.callbacks.add = function (hook, callback, priority, id) {                                                   // 34
	if (priority == null) {                                                                                               // 35
		priority = RocketChat.callbacks.priority.MEDIUM;                                                                     // 36
	}                                                                                                                     // 37
                                                                                                                       //
	if (!_.isNumber(priority)) {                                                                                          // 38
		priority = RocketChat.callbacks.priority.MEDIUM;                                                                     // 39
	}                                                                                                                     // 40
                                                                                                                       //
	callback.priority = priority;                                                                                         // 41
	callback.id = id || Random.id();                                                                                      // 42
	RocketChat.callbacks[hook] = RocketChat.callbacks[hook] || [];                                                        // 43
                                                                                                                       //
	if (RocketChat.callbacks.showTime === true) {                                                                         // 44
		var err = new Error();                                                                                               // 45
		callback.stack = err.stack;                                                                                          // 46
	}                                                                                                                     // 47
                                                                                                                       //
	if (RocketChat.callbacks[hook].find(function (cb) {                                                                   // 48
		return cb.id === callback.id;                                                                                        // 48
	})) {                                                                                                                 // 48
		return;                                                                                                              // 49
	}                                                                                                                     // 50
                                                                                                                       //
	RocketChat.callbacks[hook].push(callback);                                                                            // 51
}; /*                                                                                                                  // 52
   * Remove a callback from a hook                                                                                     //
   * @param {string} hook - The name of the hook                                                                       //
   * @param {string} id - The callback's id                                                                            //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.callbacks.remove = function (hookName, id) {                                                                // 61
	RocketChat.callbacks[hookName] = _.reject(RocketChat.callbacks[hookName], function (callback) {                       // 62
		return callback.id === id;                                                                                           // 62
	});                                                                                                                   // 62
}; /*                                                                                                                  // 63
   * Successively run all of a hook's callbacks on an item                                                             //
   * @param {String} hook - The name of the hook                                                                       //
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                            //
   * @param {Object} [constant] - An optional constant that will be passed along to each callback                      //
   * @returns {Object} Returns the item after it's been through all the callbacks for this hook                        //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.callbacks.run = function (hook, item, constant) {                                                           // 74
	var callbacks = RocketChat.callbacks[hook];                                                                           // 75
                                                                                                                       //
	if (callbacks && callbacks.length) {                                                                                  // 76
		var totalTime = 0;                                                                                                   // 77
                                                                                                                       //
		var result = _.sortBy(callbacks, function (callback) {                                                               // 78
			return callback.priority || RocketChat.callbacks.priority.MEDIUM;                                                   // 79
		}).reduce(function (result, callback) {                                                                              // 80
			var time = 0;                                                                                                       // 81
                                                                                                                       //
			if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {                        // 82
				time = Date.now();                                                                                                 // 83
			}                                                                                                                   // 84
                                                                                                                       //
			var callbackResult = callback(result, constant);                                                                    // 85
                                                                                                                       //
			if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {                        // 86
				var currentTime = Date.now() - time;                                                                               // 87
				totalTime += currentTime;                                                                                          // 88
                                                                                                                       //
				if (RocketChat.callbacks.showTime === true) {                                                                      // 89
					if (Meteor.isServer) {                                                                                            // 90
						RocketChat.statsTracker.timing('callbacks.time', currentTime, ["hook:" + hook, "callback:" + callback.id]);      // 91
					} else {                                                                                                          // 92
						var stack = callback.stack && typeof callback.stack.split === 'function' && callback.stack.split('\n');          // 93
						stack = stack && stack[2] && (stack[2].match(/\(.+\)/) || [])[0];                                                // 94
						console.log(String(currentTime), hook, callback.id, stack);                                                      // 95
					}                                                                                                                 // 96
				}                                                                                                                  // 97
			}                                                                                                                   // 98
                                                                                                                       //
			return typeof callbackResult === 'undefined' ? result : callbackResult;                                             // 99
		}, item);                                                                                                            // 100
                                                                                                                       //
		if (RocketChat.callbacks.showTotalTime === true) {                                                                   // 101
			if (Meteor.isServer) {                                                                                              // 102
				RocketChat.statsTracker.timing('callbacks.totalTime', totalTime, ["hook:" + hook]);                                // 103
			} else {                                                                                                            // 104
				console.log(hook + ":", totalTime);                                                                                // 105
			}                                                                                                                   // 106
		}                                                                                                                    // 107
                                                                                                                       //
		return result;                                                                                                       // 108
	} else {                                                                                                              // 109
		return item;                                                                                                         // 110
	}                                                                                                                     // 111
}; /*                                                                                                                  // 112
   * Successively run all of a hook's callbacks on an item, in async mode (only works on server)                       //
   * @param {String} hook - The name of the hook                                                                       //
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                            //
   * @param {Object} [constant] - An optional constant that will be passed along to each callback                      //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.callbacks.runAsync = function (hook, item, constant) {                                                      // 122
	var callbacks = RocketChat.callbacks[hook];                                                                           // 123
                                                                                                                       //
	if (Meteor.isServer && callbacks && callbacks.length) {                                                               // 124
		Meteor.defer(function () {                                                                                           // 125
			_.sortBy(callbacks, function (callback) {                                                                           // 126
				return callback.priority || RocketChat.callbacks.priority.MEDIUM;                                                  // 126
			}).forEach(function (callback) {                                                                                    // 126
				return callback(item, constant);                                                                                   // 126
			});                                                                                                                 // 126
		});                                                                                                                  // 127
	} else {                                                                                                              // 128
		return item;                                                                                                         // 129
	}                                                                                                                     // 130
};                                                                                                                     // 131
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fileUploadRestrictions.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/fileUploadRestrictions.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.fileUploadMediaWhiteList = function () {                                                                    // 1
	var mediaTypeWhiteList = RocketChat.settings.get('FileUpload_MediaTypeWhiteList');                                    // 2
                                                                                                                       //
	if (!mediaTypeWhiteList || mediaTypeWhiteList === '*') {                                                              // 4
		return;                                                                                                              // 5
	}                                                                                                                     // 6
                                                                                                                       //
	return _.map(mediaTypeWhiteList.split(','), function (item) {                                                         // 7
		return item.trim();                                                                                                  // 8
	});                                                                                                                   // 9
};                                                                                                                     // 10
                                                                                                                       //
RocketChat.fileUploadIsValidContentType = function (type) {                                                            // 12
	var list = RocketChat.fileUploadMediaWhiteList();                                                                     // 13
                                                                                                                       //
	if (!list || _.contains(list, type)) {                                                                                // 14
		return true;                                                                                                         // 15
	} else {                                                                                                              // 16
		var wildCardGlob = '/*';                                                                                             // 17
                                                                                                                       //
		var wildcards = _.filter(list, function (item) {                                                                     // 18
			return item.indexOf(wildCardGlob) > 0;                                                                              // 19
		});                                                                                                                  // 20
                                                                                                                       //
		if (_.contains(wildcards, type.replace(/(\/.*)$/, wildCardGlob))) {                                                  // 21
			return true;                                                                                                        // 22
		}                                                                                                                    // 23
	}                                                                                                                     // 24
                                                                                                                       //
	return false;                                                                                                         // 25
};                                                                                                                     // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"placeholders.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/placeholders.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.placeholders = {};                                                                                          // 1
                                                                                                                       //
RocketChat.placeholders.replace = function (str, data) {                                                               // 3
	if (!str) {                                                                                                           // 4
		return '';                                                                                                           // 5
	}                                                                                                                     // 6
                                                                                                                       //
	str = str.replace(/\[Site_Name\]/g, RocketChat.settings.get('Site_Name') || '');                                      // 8
	str = str.replace(/\[Site_URL\]/g, RocketChat.settings.get('Site_Url') || '');                                        // 9
                                                                                                                       //
	if (data) {                                                                                                           // 11
		str = str.replace(/\[name\]/g, data.name || '');                                                                     // 12
		str = str.replace(/\[fname\]/g, _.strLeft(data.name, ' ') || '');                                                    // 13
		str = str.replace(/\[lname\]/g, _.strRightBack(data.name, ' ') || '');                                               // 14
		str = str.replace(/\[email\]/g, data.email || '');                                                                   // 15
		str = str.replace(/\[password\]/g, data.password || '');                                                             // 16
                                                                                                                       //
		if (data.unsubscribe) {                                                                                              // 18
			str = str.replace(/\[unsubscribe\]/g, data.unsubscribe);                                                            // 19
		}                                                                                                                    // 20
	}                                                                                                                     // 21
                                                                                                                       //
	str = str.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + '<br>' + '$2');                                             // 23
	return str;                                                                                                           // 26
};                                                                                                                     // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"promises.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/promises.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 2
* Callback hooks provide an easy way to add extra steps to common operations.                                          //
* @namespace RocketChat.promises                                                                                       //
*/RocketChat.promises = {}; /*                                                                                         //
                            * Callback priorities                                                                      //
                            */                                                                                         //
RocketChat.promises.priority = {                                                                                       // 14
	HIGH: -1000,                                                                                                          // 15
	MEDIUM: 0,                                                                                                            // 16
	LOW: 1000                                                                                                             // 17
}; /*                                                                                                                  // 14
   * Add a callback function to a hook                                                                                 //
   * @param {String} hook - The name of the hook                                                                       //
   * @param {Function} callback - The callback function                                                                //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.promises.add = function (hook, callback) {                                                                  // 27
	var p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RocketChat.promises.priority.MEDIUM;      // 27
	var id = arguments[3];                                                                                                // 27
	var priority = !_.isNumber(p) ? RocketChat.promises.priority.MEDIUM : p;                                              // 28
	callback.priority = priority;                                                                                         // 29
	callback.id = id || Random.id();                                                                                      // 30
	RocketChat.promises[hook] = RocketChat.promises[hook] || [];                                                          // 31
                                                                                                                       //
	if (RocketChat.promises[hook].find(function (cb) {                                                                    // 32
		return cb.id === callback.id;                                                                                        // 32
	})) {                                                                                                                 // 32
		return;                                                                                                              // 33
	}                                                                                                                     // 34
                                                                                                                       //
	RocketChat.promises[hook].push(callback);                                                                             // 35
}; /*                                                                                                                  // 36
   * Remove a callback from a hook                                                                                     //
   * @param {string} hook - The name of the hook                                                                       //
   * @param {string} id - The callback's id                                                                            //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.promises.remove = function (hookName, id) {                                                                 // 45
	RocketChat.promises[hookName] = _.reject(RocketChat.promises[hookName], function (callback) {                         // 46
		return callback.id === id;                                                                                           // 46
	});                                                                                                                   // 46
}; /*                                                                                                                  // 47
   * Successively run all of a hook's callbacks on an item                                                             //
   * @param {String} hook - The name of the hook                                                                       //
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                            //
   * @param {Object} [constant] - An optional constant that will be passed along to each callback                      //
   * @returns {Object} Returns the item after it's been through all the callbacks for this hook                        //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.promises.run = function (hook, item, constant) {                                                            // 58
	var callbacks = RocketChat.promises[hook];                                                                            // 59
                                                                                                                       //
	if (callbacks == null || callbacks.length === 0) {                                                                    // 60
		return Promise.resolve(item);                                                                                        // 61
	}                                                                                                                     // 62
                                                                                                                       //
	callbacks = _.sortBy(callbacks, function (callback) {                                                                 // 63
		return callback.priority || RocketChat.promises.priority.MEDIUM;                                                     // 63
	});                                                                                                                   // 63
	return callbacks.reduce(function (previousPromise, callback) {                                                        // 64
		return new Promise(function (resolve, reject) {                                                                      // 65
			return previousPromise.then(function (result) {                                                                     // 66
				return callback(result, constant).then(resolve, reject);                                                           // 66
			});                                                                                                                 // 66
		});                                                                                                                  // 67
	}, Promise.resolve(item));                                                                                            // 68
}; /*                                                                                                                  // 69
   * Successively run all of a hook's callbacks on an item, in async mode (only works on server)                       //
   * @param {String} hook - The name of the hook                                                                       //
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                            //
   * @param {Object} [constant] - An optional constant that will be passed along to each callback                      //
   */                                                                                                                  //
                                                                                                                       //
RocketChat.promises.runAsync = function (hook, item, constant) {                                                       // 79
	var callbacks = RocketChat.promises[hook];                                                                            // 80
                                                                                                                       //
	if (!Meteor.isServer || callbacks == null || callbacks.length === 0) {                                                // 81
		return item;                                                                                                         // 82
	}                                                                                                                     // 83
                                                                                                                       //
	Meteor.defer(function () {                                                                                            // 84
		_.sortBy(callbacks, function (callback) {                                                                            // 85
			return callback.priority || RocketChat.promises.priority.MEDIUM;                                                    // 85
		}).forEach(function (callback) {                                                                                     // 85
			callback(item, constant);                                                                                           // 86
		});                                                                                                                  // 87
	});                                                                                                                   // 88
};                                                                                                                     // 89
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypesCommon.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypesCommon.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/* globals roomExit*/this.roomTypesCommon = function () {                                                              // 1
	function _class() {                                                                                                   // 3
		(0, _classCallCheck3.default)(this, _class);                                                                         // 3
		this.roomTypes = {};                                                                                                 // 4
		this.roomTypesOrder = [];                                                                                            // 5
		this.mainOrder = 1;                                                                                                  // 6
	} /* Adds a room type to app                                                                                          // 7
   @param identifier An identifier to the room type. If a real room, MUST BE the same of `db.rocketchat_room.t` field, if not, can be null
   @param order Order number of the type                                                                               //
   @param config                                                                                                       //
   template: template name to render on sideNav                                                                        //
   icon: icon class                                                                                                    //
   route:                                                                                                              //
   name: route name                                                                                                    //
   action: route action function                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
	_class.prototype.add = function () {                                                                                  // 2
		function add() {                                                                                                     // 2
			var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Random.id();                   // 20
			var order = arguments[1];                                                                                           // 20
			var config = arguments[2];                                                                                          // 20
                                                                                                                       //
			if (this.roomTypes[identifier] != null) {                                                                           // 21
				return false;                                                                                                      // 22
			}                                                                                                                   // 23
                                                                                                                       //
			if (order == null) {                                                                                                // 24
				order = this.mainOrder + 10;                                                                                       // 25
				this.mainOrder += 10;                                                                                              // 26
			}                                                                                                                   // 27
                                                                                                                       //
			this.roomTypesOrder.push({                                                                                          // 28
				identifier: identifier,                                                                                            // 29
				order: order                                                                                                       // 30
			});                                                                                                                 // 28
			this.roomTypes[identifier] = config;                                                                                // 32
                                                                                                                       //
			if (config.route && config.route.path && config.route.name && config.route.action) {                                // 33
				var routeConfig = {                                                                                                // 34
					name: config.route.name,                                                                                          // 35
					action: config.route.action                                                                                       // 36
				};                                                                                                                 // 34
                                                                                                                       //
				if (Meteor.isClient) {                                                                                             // 38
					routeConfig.triggersExit = [roomExit];                                                                            // 39
				}                                                                                                                  // 40
                                                                                                                       //
				return FlowRouter.route(config.route.path, routeConfig);                                                           // 41
			}                                                                                                                   // 42
		}                                                                                                                    // 43
                                                                                                                       //
		return add;                                                                                                          // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	_class.prototype.hasCustomLink = function () {                                                                        // 2
		function hasCustomLink(roomType) {                                                                                   // 2
			return this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link != null;   // 46
		}                                                                                                                    // 47
                                                                                                                       //
		return hasCustomLink;                                                                                                // 2
	}(); /*                                                                                                               // 2
      @param roomType: room type (e.g.: c (for channels), d (for direct channels))                                     //
      @param subData: the user's subscription data                                                                     //
      */                                                                                                               //
                                                                                                                       //
	_class.prototype.getRouteLink = function () {                                                                         // 2
		function getRouteLink(roomType, subData) {                                                                           // 2
			if (this.roomTypes[roomType] == null) {                                                                             // 55
				return false;                                                                                                      // 56
			}                                                                                                                   // 57
                                                                                                                       //
			var routeData = {};                                                                                                 // 58
                                                                                                                       //
			if (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {            // 59
				routeData = this.roomTypes[roomType].route.link(subData);                                                          // 60
			} else if (subData && subData.name) {                                                                               // 61
				routeData = {                                                                                                      // 62
					name: subData.name                                                                                                // 63
				};                                                                                                                 // 62
			}                                                                                                                   // 65
                                                                                                                       //
			return FlowRouter.path(this.roomTypes[roomType].route.name, routeData);                                             // 66
		}                                                                                                                    // 67
                                                                                                                       //
		return getRouteLink;                                                                                                 // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	_class.prototype.openRouteLink = function () {                                                                        // 2
		function openRouteLink(roomType, subData, queryParams) {                                                             // 2
			if (this.roomTypes[roomType] == null) {                                                                             // 70
				return false;                                                                                                      // 71
			}                                                                                                                   // 72
                                                                                                                       //
			var routeData = {};                                                                                                 // 73
                                                                                                                       //
			if (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {            // 74
				routeData = this.roomTypes[roomType].route.link(subData);                                                          // 75
			} else if (subData && subData.name) {                                                                               // 76
				routeData = {                                                                                                      // 77
					name: subData.name                                                                                                // 78
				};                                                                                                                 // 77
			}                                                                                                                   // 80
                                                                                                                       //
			return FlowRouter.go(this.roomTypes[roomType].route.name, routeData, queryParams);                                  // 81
		}                                                                                                                    // 82
                                                                                                                       //
		return openRouteLink;                                                                                                // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	return _class;                                                                                                        // 2
}();                                                                                                                   // 2
                                                                                                                       //
module.exportDefault(this.roomTypesCommon);                                                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"slashCommand.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/slashCommand.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.slashCommands = {                                                                                           // 1
	commands: {}                                                                                                          // 2
};                                                                                                                     // 1
                                                                                                                       //
RocketChat.slashCommands.add = function (command, callback) {                                                          // 5
	var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                                 // 5
	var result = arguments[3];                                                                                            // 5
	RocketChat.slashCommands.commands[command] = {                                                                        // 6
		command: command,                                                                                                    // 7
		callback: callback,                                                                                                  // 8
		params: options.params,                                                                                              // 9
		description: options.description,                                                                                    // 10
		clientOnly: options.clientOnly || false,                                                                             // 11
		result: result                                                                                                       // 12
	};                                                                                                                    // 6
};                                                                                                                     // 14
                                                                                                                       //
RocketChat.slashCommands.run = function (command, params, item) {                                                      // 16
	if (RocketChat.slashCommands.commands[command] && RocketChat.slashCommands.commands[command].callback) {              // 17
		return RocketChat.slashCommands.commands[command].callback(command, params, item);                                   // 18
	}                                                                                                                     // 19
};                                                                                                                     // 20
                                                                                                                       //
Meteor.methods({                                                                                                       // 22
	slashCommand: function (command) {                                                                                    // 23
		if (!Meteor.userId()) {                                                                                              // 24
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 25
				method: 'slashCommand'                                                                                             // 26
			});                                                                                                                 // 25
		}                                                                                                                    // 28
                                                                                                                       //
		return RocketChat.slashCommands.run(command.cmd, command.params, command.msg);                                       // 29
	}                                                                                                                     // 30
});                                                                                                                    // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Message.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/Message.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Message = {                                                                                                 // 1
	parse: function (msg, language) {                                                                                     // 2
		var messageType = RocketChat.MessageTypes.getType(msg);                                                              // 3
                                                                                                                       //
		if (messageType) {                                                                                                   // 4
			if (messageType.render) {                                                                                           // 5
				return messageType.render(msg);                                                                                    // 6
			} else if (messageType.template) {                                                                                  // 7
				// Render message                                                                                                  // 8
				return;                                                                                                            // 9
			} else if (messageType.message) {                                                                                   // 10
				if (!language && typeof localStorage !== 'undefined') {                                                            // 11
					language = localStorage.getItem('userLanguage');                                                                  // 12
				}                                                                                                                  // 13
                                                                                                                       //
				var data = typeof messageType.data === 'function' && messageType.data(msg) || {};                                  // 14
				return TAPi18n.__(messageType.message, data, language);                                                            // 15
			}                                                                                                                   // 16
		}                                                                                                                    // 17
                                                                                                                       //
		if (msg.u && msg.u.username === RocketChat.settings.get('Chatops_Username')) {                                       // 18
			msg.html = msg.msg;                                                                                                 // 19
			return msg.html;                                                                                                    // 20
		}                                                                                                                    // 21
                                                                                                                       //
		msg.html = msg.msg;                                                                                                  // 22
                                                                                                                       //
		if (_.trim(msg.html) !== '') {                                                                                       // 23
			msg.html = _.escapeHTML(msg.html);                                                                                  // 24
		}                                                                                                                    // 25
                                                                                                                       //
		msg.html = msg.html.replace(/\n/gm, '<br/>');                                                                        // 26
		return msg.html;                                                                                                     // 27
	}                                                                                                                     // 28
};                                                                                                                     // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MessageTypes.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/MessageTypes.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
RocketChat.MessageTypes = new (function () {                                                                           // 1
	function _class() {                                                                                                   // 2
		(0, _classCallCheck3.default)(this, _class);                                                                         // 2
		this.types = {};                                                                                                     // 3
	}                                                                                                                     // 4
                                                                                                                       //
	_class.prototype.registerType = function () {                                                                         // 1
		function registerType(options) {                                                                                     // 1
			return this.types[options.id] = options;                                                                            // 7
		}                                                                                                                    // 8
                                                                                                                       //
		return registerType;                                                                                                 // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	_class.prototype.getType = function () {                                                                              // 1
		function getType(message) {                                                                                          // 1
			return this.types[message && message.t];                                                                            // 11
		}                                                                                                                    // 12
                                                                                                                       //
		return getType;                                                                                                      // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	_class.prototype.isSystemMessage = function () {                                                                      // 1
		function isSystemMessage(message) {                                                                                  // 1
			var type = this.types[message && message.t];                                                                        // 15
			return type && type.system;                                                                                         // 16
		}                                                                                                                    // 17
                                                                                                                       //
		return isSystemMessage;                                                                                              // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	_class.prototype.isChartMessage = function () {                                                                       // 1
		function isChartMessage(message) {                                                                                   // 1
			var type = this.types[message && message.t];                                                                        // 20
			return type && type == 'chart';                                                                                     // 21
		}                                                                                                                    // 22
                                                                                                                       //
		return isChartMessage;                                                                                               // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	return _class;                                                                                                        // 1
}())();                                                                                                                // 1
Meteor.startup(function () {                                                                                           // 26
	RocketChat.MessageTypes.registerType({                                                                                // 27
		id: 'r',                                                                                                             // 28
		system: true,                                                                                                        // 29
		message: 'Room_name_changed',                                                                                        // 30
		data: function (message) {                                                                                           // 31
			return {                                                                                                            // 32
				room_name: message.msg,                                                                                            // 33
				user_by: message.u.username                                                                                        // 34
			};                                                                                                                  // 32
		}                                                                                                                    // 36
	});                                                                                                                   // 27
	RocketChat.MessageTypes.registerType({                                                                                // 38
		id: 'au',                                                                                                            // 39
		system: true,                                                                                                        // 40
		message: 'User_added_by',                                                                                            // 41
		data: function (message) {                                                                                           // 42
			return {                                                                                                            // 43
				user_added: message.msg,                                                                                           // 44
				user_by: message.u.username                                                                                        // 45
			};                                                                                                                  // 43
		}                                                                                                                    // 47
	});                                                                                                                   // 38
	RocketChat.MessageTypes.registerType({                                                                                // 49
		id: 'ru',                                                                                                            // 50
		system: true,                                                                                                        // 51
		message: 'User_removed_by',                                                                                          // 52
		data: function (message) {                                                                                           // 53
			return {                                                                                                            // 54
				user_removed: message.msg,                                                                                         // 55
				user_by: message.u.username                                                                                        // 56
			};                                                                                                                  // 54
		}                                                                                                                    // 58
	});                                                                                                                   // 49
	RocketChat.MessageTypes.registerType({                                                                                // 60
		id: 'ul',                                                                                                            // 61
		system: true,                                                                                                        // 62
		message: 'User_left',                                                                                                // 63
		data: function (message) {                                                                                           // 64
			return {                                                                                                            // 65
				user_left: message.u.username                                                                                      // 66
			};                                                                                                                  // 65
		}                                                                                                                    // 68
	});                                                                                                                   // 60
	RocketChat.MessageTypes.registerType({                                                                                // 70
		id: 'uj',                                                                                                            // 71
		system: true,                                                                                                        // 72
		message: 'User_joined_channel',                                                                                      // 73
		data: function (message) {                                                                                           // 74
			return {                                                                                                            // 75
				user: message.u.username                                                                                           // 76
			};                                                                                                                  // 75
		}                                                                                                                    // 78
	});                                                                                                                   // 70
	RocketChat.MessageTypes.registerType({                                                                                // 80
		id: 'wm',                                                                                                            // 81
		system: true,                                                                                                        // 82
		message: 'Welcome',                                                                                                  // 83
		data: function (message) {                                                                                           // 84
			return {                                                                                                            // 85
				user: message.u.username                                                                                           // 86
			};                                                                                                                  // 85
		}                                                                                                                    // 88
	});                                                                                                                   // 80
	RocketChat.MessageTypes.registerType({                                                                                // 90
		id: 'rm',                                                                                                            // 91
		system: true,                                                                                                        // 92
		message: 'Message_removed',                                                                                          // 93
		data: function (message) {                                                                                           // 94
			return {                                                                                                            // 95
				user: message.u.username                                                                                           // 96
			};                                                                                                                  // 95
		}                                                                                                                    // 98
	});                                                                                                                   // 90
	RocketChat.MessageTypes.registerType({                                                                                // 100
		id: 'rtc',                                                                                                           // 101
		render: function (message) {                                                                                         // 102
			return RocketChat.callbacks.run('renderRtcMessage', message);                                                       // 103
		}                                                                                                                    // 104
	});                                                                                                                   // 100
	RocketChat.MessageTypes.registerType({                                                                                // 106
		id: 'user-muted',                                                                                                    // 107
		system: true,                                                                                                        // 108
		message: 'User_muted_by',                                                                                            // 109
		data: function (message) {                                                                                           // 110
			return {                                                                                                            // 111
				user_muted: message.msg,                                                                                           // 112
				user_by: message.u.username                                                                                        // 113
			};                                                                                                                  // 111
		}                                                                                                                    // 115
	});                                                                                                                   // 106
	RocketChat.MessageTypes.registerType({                                                                                // 117
		id: 'user-unmuted',                                                                                                  // 118
		system: true,                                                                                                        // 119
		message: 'User_unmuted_by',                                                                                          // 120
		data: function (message) {                                                                                           // 121
			return {                                                                                                            // 122
				user_unmuted: message.msg,                                                                                         // 123
				user_by: message.u.username                                                                                        // 124
			};                                                                                                                  // 122
		}                                                                                                                    // 126
	});                                                                                                                   // 117
	RocketChat.MessageTypes.registerType({                                                                                // 128
		id: 'subscription-role-added',                                                                                       // 129
		system: true,                                                                                                        // 130
		message: '__username__was_set__role__by__user_by_',                                                                  // 131
		data: function (message) {                                                                                           // 132
			return {                                                                                                            // 133
				username: message.msg,                                                                                             // 134
				role: message.role,                                                                                                // 135
				user_by: message.u.username                                                                                        // 136
			};                                                                                                                  // 133
		}                                                                                                                    // 138
	});                                                                                                                   // 128
	RocketChat.MessageTypes.registerType({                                                                                // 140
		id: 'subscription-role-removed',                                                                                     // 141
		system: true,                                                                                                        // 142
		message: '__username__is_no_longer__role__defined_by__user_by_',                                                     // 143
		data: function (message) {                                                                                           // 144
			return {                                                                                                            // 145
				username: message.msg,                                                                                             // 146
				role: message.role,                                                                                                // 147
				user_by: message.u.username                                                                                        // 148
			};                                                                                                                  // 145
		}                                                                                                                    // 150
	});                                                                                                                   // 140
	RocketChat.MessageTypes.registerType({                                                                                // 152
		id: 'room-archived',                                                                                                 // 153
		system: true,                                                                                                        // 154
		message: 'This_room_has_been_archived_by__username_',                                                                // 155
		data: function (message) {                                                                                           // 156
			return {                                                                                                            // 157
				username: message.u.username                                                                                       // 158
			};                                                                                                                  // 157
		}                                                                                                                    // 160
	});                                                                                                                   // 152
	RocketChat.MessageTypes.registerType({                                                                                // 162
		id: 'room-unarchived',                                                                                               // 163
		system: true,                                                                                                        // 164
		message: 'This_room_has_been_unarchived_by__username_',                                                              // 165
		data: function (message) {                                                                                           // 166
			return {                                                                                                            // 167
				username: message.u.username                                                                                       // 168
			};                                                                                                                  // 167
		}                                                                                                                    // 170
	}); //TODO : 차트파입, 공지, 아이템 타입(여러 아이템을 별로도 정의)들을 정의                                                                    // 162
	//메리지 컬럼 't'에 타입을 넣으면 반영됨.                                                                                            // 174
                                                                                                                       //
	RocketChat.MessageTypes.registerType({                                                                                // 175
		id: 'chart',                                                                                                         // 176
		system: false                                                                                                        // 177
	});                                                                                                                   // 175
});                                                                                                                    // 179
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startup":{"settingsOnLoadSiteUrl.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/startup/settingsOnLoadSiteUrl.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals WebAppInternals */RocketChat.settings.get('Site_Url', function (key, value) {                               // 1
	if (value == null || value.trim() === '') {                                                                           // 3
		return;                                                                                                              // 4
	}                                                                                                                     // 5
                                                                                                                       //
	var host = value.replace(/\/$/, ''); // let prefix = '';                                                              // 6
                                                                                                                       //
	var match = value.match(/([^\/]+\/{2}[^\/]+)(\/.+)/);                                                                 // 8
                                                                                                                       //
	if (match != null) {                                                                                                  // 9
		host = match[1]; // prefix = match[2].replace(/\/$/, '');                                                            // 10
	}                                                                                                                     // 12
                                                                                                                       //
	__meteor_runtime_config__.ROOT_URL = host;                                                                            // 13
                                                                                                                       //
	if (Meteor.absoluteUrl.defaultOptions && Meteor.absoluteUrl.defaultOptions.rootUrl) {                                 // 15
		Meteor.absoluteUrl.defaultOptions.rootUrl = host;                                                                    // 16
	}                                                                                                                     // 17
                                                                                                                       //
	if (Meteor.isServer) {                                                                                                // 18
		RocketChat.hostname = host.replace(/^https?:\/\//, '');                                                              // 19
		process.env.MOBILE_ROOT_URL = host;                                                                                  // 20
		process.env.MOBILE_DDP_URL = host;                                                                                   // 21
                                                                                                                       //
		if (typeof WebAppInternals !== 'undefined' && WebAppInternals.generateBoilerplate) {                                 // 22
			return WebAppInternals.generateBoilerplate();                                                                       // 23
		}                                                                                                                    // 24
	}                                                                                                                     // 25
});                                                                                                                    // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"server":{"lib":{"debug.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/debug.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var logger = new Logger('Meteor', {                                                                                    // 1
	methods: {                                                                                                            // 2
		method: {                                                                                                            // 3
			type: 'debug'                                                                                                       // 4
		},                                                                                                                   // 3
		publish: {                                                                                                           // 6
			type: 'debug'                                                                                                       // 7
		}                                                                                                                    // 6
	}                                                                                                                     // 2
});                                                                                                                    // 1
                                                                                                                       //
var wrapMethods = function (name, originalHandler, methodsMap) {                                                       // 12
	methodsMap[name] = function () {                                                                                      // 13
		var args = name === 'ufsWrite' ? Array.prototype.slice.call(arguments, 1) : arguments;                               // 14
		logger.method(name, '-> userId:', Meteor.userId(), ', arguments: ', args);                                           // 15
		return originalHandler.apply(this, arguments);                                                                       // 17
	};                                                                                                                    // 18
};                                                                                                                     // 19
                                                                                                                       //
var originalMeteorMethods = Meteor.methods;                                                                            // 21
                                                                                                                       //
Meteor.methods = function (methodMap) {                                                                                // 23
	_.each(methodMap, function (handler, name) {                                                                          // 24
		wrapMethods(name, handler, methodMap);                                                                               // 25
	});                                                                                                                   // 26
                                                                                                                       //
	originalMeteorMethods(methodMap);                                                                                     // 27
};                                                                                                                     // 28
                                                                                                                       //
var originalMeteorPublish = Meteor.publish;                                                                            // 30
                                                                                                                       //
Meteor.publish = function (name, func) {                                                                               // 32
	return originalMeteorPublish(name, function () {                                                                      // 33
		logger.publish(name, '-> userId:', this.userId, ', arguments: ', arguments);                                         // 34
		return func.apply(this, arguments);                                                                                  // 36
	});                                                                                                                   // 37
};                                                                                                                     // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"bugsnag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/bugsnag.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var bugsnag = void 0;                                                                                                  // 1
module.watch(require("bugsnag"), {                                                                                     // 1
	"default": function (v) {                                                                                             // 1
		bugsnag = v;                                                                                                         // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
RocketChat.bugsnag = bugsnag;                                                                                          // 3
RocketChat.settings.get('Bugsnag_api_key', function (key, value) {                                                     // 5
	if (value) {                                                                                                          // 6
		bugsnag.register(value);                                                                                             // 7
	}                                                                                                                     // 8
});                                                                                                                    // 9
                                                                                                                       //
var notify = function (message, stack) {                                                                               // 11
	if (typeof stack === 'string') {                                                                                      // 12
		message += " " + stack;                                                                                              // 13
	}                                                                                                                     // 14
                                                                                                                       //
	var options = {};                                                                                                     // 15
                                                                                                                       //
	if (RocketChat.Info) {                                                                                                // 16
		options = {                                                                                                          // 17
			app: {                                                                                                              // 17
				version: RocketChat.Info.version,                                                                                  // 17
				info: RocketChat.Info                                                                                              // 17
			}                                                                                                                   // 17
		};                                                                                                                   // 17
	}                                                                                                                     // 18
                                                                                                                       //
	var error = new Error(message);                                                                                       // 19
	error.stack = stack;                                                                                                  // 20
	RocketChat.bugsnag.notify(error, options);                                                                            // 21
};                                                                                                                     // 22
                                                                                                                       //
process.on('uncaughtException', Meteor.bindEnvironment(function (error) {                                              // 24
	notify(error.message, error.stack);                                                                                   // 25
	throw error;                                                                                                          // 26
}));                                                                                                                   // 27
var originalMeteorDebug = Meteor._debug;                                                                               // 29
                                                                                                                       //
Meteor._debug = function () {                                                                                          // 30
	notify.apply(undefined, arguments);                                                                                   // 31
	return originalMeteorDebug.apply(undefined, arguments);                                                               // 32
};                                                                                                                     // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"metrics.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/metrics.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var client = require('prom-client');                                                                                   // 1
                                                                                                                       //
RocketChat.promclient = client;                                                                                        // 3
RocketChat.metrics = {}; // one sample metrics only - a counter                                                        // 5
                                                                                                                       //
RocketChat.metrics.messagesSent = new client.Counter('messages_sent', 'cumulated number of messages sent');            // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RateLimiter.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/RateLimiter.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/* globals RateLimiter */RocketChat.RateLimiter = new (function () {                                                   // 1
	function _class() {                                                                                                   // 2
		(0, _classCallCheck3.default)(this, _class);                                                                         // 2
	}                                                                                                                     // 2
                                                                                                                       //
	_class.prototype.limitFunction = function () {                                                                        // 2
		function limitFunction(fn, numRequests, timeInterval, matchers) {                                                    // 2
			if (process.env.TEST_MODE === 'true') {                                                                             // 4
				return fn;                                                                                                         // 5
			}                                                                                                                   // 6
                                                                                                                       //
			var rateLimiter = new RateLimiter();                                                                                // 7
			rateLimiter.addRule(matchers, numRequests, timeInterval);                                                           // 8
			return function () {                                                                                                // 9
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 9
					args[_key] = arguments[_key];                                                                                     // 9
				}                                                                                                                  // 9
                                                                                                                       //
				var match = {};                                                                                                    // 10
                                                                                                                       //
				_.each(matchers, function (matcher, key) {                                                                         // 11
					return match[key] = args[key];                                                                                    // 12
				});                                                                                                                // 13
                                                                                                                       //
				rateLimiter.increment(match);                                                                                      // 14
				var rateLimitResult = rateLimiter.check(match);                                                                    // 15
                                                                                                                       //
				if (rateLimitResult.allowed) {                                                                                     // 16
					return fn.apply(null, arguments);                                                                                 // 17
				} else {                                                                                                           // 18
					throw new Meteor.Error('error-too-many-requests', "Error, too many requests. Please slow down. You must wait " + Math.ceil(rateLimitResult.timeToReset / 1000) + " seconds before trying again.", {
						timeToReset: rateLimitResult.timeToReset,                                                                        // 20
						seconds: Math.ceil(rateLimitResult.timeToReset / 1000)                                                           // 21
					});                                                                                                               // 19
				}                                                                                                                  // 23
			};                                                                                                                  // 24
		}                                                                                                                    // 25
                                                                                                                       //
		return limitFunction;                                                                                                // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	_class.prototype.limitMethod = function () {                                                                          // 2
		function limitMethod(methodName, numRequests, timeInterval, matchers) {                                              // 2
			if (process.env.TEST_MODE === 'true') {                                                                             // 28
				return;                                                                                                            // 29
			}                                                                                                                   // 30
                                                                                                                       //
			var match = {                                                                                                       // 31
				type: 'method',                                                                                                    // 32
				name: methodName                                                                                                   // 33
			};                                                                                                                  // 31
                                                                                                                       //
			_.each(matchers, function (matcher, key) {                                                                          // 35
				return match[key] = matchers[key];                                                                                 // 36
			});                                                                                                                 // 37
                                                                                                                       //
			return DDPRateLimiter.addRule(match, numRequests, timeInterval);                                                    // 38
		}                                                                                                                    // 39
                                                                                                                       //
		return limitMethod;                                                                                                  // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	return _class;                                                                                                        // 2
}())();                                                                                                                // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"configLogger.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/configLogger.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals LoggerManager */RocketChat.settings.get('Log_Package', function (key, value) {                              // 1
	return LoggerManager.showPackage = value;                                                                             // 3
});                                                                                                                    // 4
RocketChat.settings.get('Log_File', function (key, value) {                                                            // 6
	return LoggerManager.showFileAndLine = value;                                                                         // 7
});                                                                                                                    // 8
RocketChat.settings.get('Log_Level', function (key, value) {                                                           // 10
	if (value != null) {                                                                                                  // 11
		LoggerManager.logLevel = parseInt(value);                                                                            // 12
		Meteor.setTimeout(function () {                                                                                      // 13
			return LoggerManager.enable(true);                                                                                  // 14
		}, 200);                                                                                                             // 15
	}                                                                                                                     // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PushNotification.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/PushNotification.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/* globals Push */var PushNotification = function () {                                                                 // 1
	function PushNotification() {                                                                                         //
		(0, _classCallCheck3.default)(this, PushNotification);                                                               //
	}                                                                                                                     //
                                                                                                                       //
	PushNotification.prototype.getNotificationId = function () {                                                          //
		function getNotificationId(roomId) {                                                                                 //
			var serverId = RocketChat.settings.get('uniqueID');                                                                 // 4
			return this.hash(serverId + "|" + roomId); // hash                                                                  // 5
		}                                                                                                                    // 6
                                                                                                                       //
		return getNotificationId;                                                                                            //
	}();                                                                                                                  //
                                                                                                                       //
	PushNotification.prototype.hash = function () {                                                                       //
		function hash(str) {                                                                                                 //
			var hash = 0;                                                                                                       // 9
			var i = str.length;                                                                                                 // 10
                                                                                                                       //
			while (i) {                                                                                                         // 12
				hash = (hash << 5) - hash + str.charCodeAt(--i);                                                                   // 13
				hash = hash & hash; // Convert to 32bit integer                                                                    // 14
			}                                                                                                                   // 15
                                                                                                                       //
			return hash;                                                                                                        // 16
		}                                                                                                                    // 17
                                                                                                                       //
		return hash;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	PushNotification.prototype.send = function () {                                                                       //
		function send(_ref) {                                                                                                //
			var roomName = _ref.roomName,                                                                                       // 19
			    roomId = _ref.roomId,                                                                                           // 19
			    username = _ref.username,                                                                                       // 19
			    message = _ref.message,                                                                                         // 19
			    usersTo = _ref.usersTo,                                                                                         // 19
			    payload = _ref.payload;                                                                                         // 19
			var title = void 0;                                                                                                 // 20
                                                                                                                       //
			if (roomName && roomName !== '') {                                                                                  // 21
				title = "" + roomName;                                                                                             // 22
				message = username + ": " + message;                                                                               // 23
			} else {                                                                                                            // 24
				title = "" + username;                                                                                             // 25
			}                                                                                                                   // 26
                                                                                                                       //
			var icon = RocketChat.settings.get('Assets_favicon_192').url || RocketChat.settings.get('Assets_favicon_192').defaultUrl;
			var config = {                                                                                                      // 28
				from: 'push',                                                                                                      // 29
				badge: 1,                                                                                                          // 30
				sound: 'default',                                                                                                  // 31
				title: title,                                                                                                      // 32
				text: message,                                                                                                     // 33
				payload: payload,                                                                                                  // 34
				query: usersTo,                                                                                                    // 35
				notId: this.getNotificationId(roomId),                                                                             // 36
				gcm: {                                                                                                             // 37
					style: 'inbox',                                                                                                   // 38
					summaryText: '%n% new messages',                                                                                  // 39
					image: RocketChat.getURL(icon, {                                                                                  // 40
						full: true                                                                                                       // 40
					})                                                                                                                // 40
				},                                                                                                                 // 37
				apn: {                                                                                                             // 42
					text: title + (title !== '' && message !== '' ? '\n' : '') + message                                              // 43
				}                                                                                                                  // 42
			};                                                                                                                  // 28
			return Push.send(config);                                                                                           // 47
		}                                                                                                                    // 48
                                                                                                                       //
		return send;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	return PushNotification;                                                                                              //
}();                                                                                                                   //
                                                                                                                       //
RocketChat.PushNotification = new PushNotification();                                                                  // 51
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"defaultBlockedDomainsList.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/defaultBlockedDomainsList.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.emailDomainDefaultBlackList = ['0-mail.com', '0815.ru', '0815.su', '0clickemail.com', '0wnd.net', '0wnd.org', '10mail.org', '10minut.com.pl', '10minutemail.co.za', '10minutemail.com', '10minutemail.de', '123-m.com', '1chuan.com', '1fsdfdsfsdf.tk', '1pad.de', '1zhuan.com', '20email.eu', '20mail.eu', '20mail.it', '20minutemail.com', '21cn.com', '2fdgdfgdfgdf.tk', '2prong.com', '30minutemail.com', '33mail.com', '3d-painting.com', '3trtretgfrfe.tk', '4gfdsgfdgfd.tk', '4warding.com', '4warding.net', '4warding.org', '5ghgfhfghfgh.tk', '60minutemail.com', '675hosting.com', '675hosting.net', '675hosting.org', '6hjgjhgkilkj.tk', '6ip.us', '6paq.com', '6url.com', '75hosting.com', '75hosting.net', '75hosting.org', '7days-printing.com', '7tags.com', '99experts.com', '9ox.net', 'a-bc.net', 'a45.in', 'abcmail.email', 'abyssmail.com', 'acentri.com', 'advantimo.com', 'afrobacon.com', 'ag.us.to', 'agedmail.com', 'ahk.jp', 'ajaxapp.net', 'alivance.com', 'ama-trade.de', 'amail.com', 'amilegit.com', 'amiri.net', 'amiriindustries.com', 'anappthat.com', 'ano-mail.net', 'anonbox.net', 'anonmails.de', 'anonymail.dk', 'anonymbox.com', 'antichef.com', 'antichef.net', 'antireg.ru', 'antispam.de', 'antispammail.de', 'appixie.com', 'armyspy.com', 'artman-conception.com', 'aver.com', 'azmeil.tk', 'baxomale.ht.cx', 'beddly.com', 'beefmilk.com', 'bigprofessor.so', 'bigstring.com', 'binkmail.com', 'bio-muesli.net', 'blogmyway.org', 'bobmail.info', 'bofthew.com', 'bootybay.de', 'boun.cr', 'bouncr.com', 'boxformail.in', 'breakthru.com', 'brefmail.com', 'brennendesreich.de', 'broadbandninja.com', 'bsnow.net', 'bspamfree.org', 'bu.mintemail.com', 'buffemail.com', 'bugmenot.com', 'bumpymail.com', 'bund.us', 'bundes-li.ga', 'burnthespam.info', 'burstmail.info', 'buymoreplays.com', 'buyusedlibrarybooks.org', 'byom.de', 'c2.hu', 'cachedot.net', 'card.zp.ua', 'casualdx.com', 'cbair.com', 'cek.pm', 'cellurl.com', 'centermail.com', 'centermail.net', 'chammy.info', 'cheatmail.de', 'childsavetrust.org', 'chogmail.com', 'choicemail1.com', 'chong-mail.com', 'chong-mail.net', 'chong-mail.org', 'clixser.com', 'cmail.com', 'cmail.net', 'cmail.org', 'coldemail.info', 'consumerriot.com', 'cool.fr.nf', 'correo.blogos.net', 'cosmorph.com', 'courriel.fr.nf', 'courrieltemporaire.com', 'crapmail.org', 'crazymailing.com', 'cubiclink.com', 'curryworld.de', 'cust.in', 'cuvox.de', 'd3p.dk', 'dacoolest.com', 'daintly.com', 'dandikmail.com', 'dayrep.com', 'dbunker.com', 'dcemail.com', 'deadaddress.com', 'deadspam.com', 'deagot.com', 'dealja.com', 'delikkt.de', 'despam.it', 'despammed.com', 'devnullmail.com', 'dfgh.net', 'digitalsanctuary.com', 'dingbone.com', 'discard.email', 'discardmail.com', 'discardmail.de', 'disposableaddress.com', 'disposableemailaddresses.com', 'disposableemailaddresses.emailmiser.com', 'disposableinbox.com', 'dispose.it', 'disposeamail.com', 'disposemail.com', 'dispostable.com', 'dlemail.ru', 'dm.w3internet.co.uk', 'dm.w3internet.co.ukexample.com', 'dodgeit.com', 'dodgit.com', 'dodgit.org', 'doiea.com', 'domozmail.com', 'donemail.ru', 'dontreg.com', 'dontsendmespam.de', 'dotmsg.com', 'drdrb.com', 'drdrb.net', 'droplar.com', 'dropmail.me', 'dt.com', 'duam.net', 'dudmail.com', 'dump-email.info', 'dumpandjunk.com', 'dumpmail.de', 'dumpyemail.com', 'duskmail.com', 'e-mail.com', 'e-mail.org', 'e4ward.com', 'easytrashmail.com', 'einmalmail.de', 'einrot.com', 'einrot.de', 'eintagsmail.de', 'email60.com', 'emaildienst.de', 'emailgo.de', 'emailias.com', 'emailigo.de', 'emailinfive.com', 'emaillime.com', 'emailmiser.com', 'emailproxsy.com', 'emailsensei.com', 'emailtemporanea.com', 'emailtemporanea.net', 'emailtemporar.ro', 'emailtemporario.com.br', 'emailthe.net', 'emailtmp.com', 'emailto.de', 'emailwarden.com', 'emailx.at.hm', 'emailxfer.com', 'emeil.in', 'emeil.ir', 'emil.com', 'emz.net', 'enterto.com', 'ephemail.net', 'ero-tube.org', 'etranquil.com', 'etranquil.net', 'etranquil.org', 'evopo.com', 'explodemail.com', 'express.net.ua', 'eyepaste.com', 'fakeinbox.com', 'fakeinformation.com', 'fakemail.fr', 'fakemailz.com', 'fammix.com', 'fansworldwide.de', 'fantasymail.de', 'fastacura.com', 'fastchevy.com', 'fastchrysler.com', 'fastkawasaki.com', 'fastmazda.com', 'fastmitsubishi.com', 'fastnissan.com', 'fastsubaru.com', 'fastsuzuki.com', 'fasttoyota.com', 'fastyamaha.com', 'fatflap.com', 'fdfdsfds.com', 'fightallspam.com', 'figjs.com', 'fiifke.de', 'filzmail.com', 'fivemail.de', 'fixmail.tk', 'fizmail.com', 'fleckens.hu', 'flemail.ru', 'flyspam.com', 'footard.com', 'forgetmail.com', 'fr33mail.info', 'frapmail.com', 'freundin.ru', 'friendlymail.co.uk', 'front14.org', 'fuckingduh.com', 'fudgerub.com', 'fux0ringduh.com', 'fyii.de', 'garliclife.com', 'gehensiemirnichtaufdensack.de', 'gelitik.in', 'get1mail.com', 'get2mail.fr', 'getairmail.com', 'getmails.eu', 'getonemail.com', 'getonemail.net', 'ghosttexter.de', 'giantmail.de', 'girlsundertheinfluence.com', 'gishpuppy.com', 'gmial.com', 'goemailgo.com', 'gorillaswithdirtyarmpits.com', 'gotmail.com', 'gotmail.net', 'gotmail.org', 'gotti.otherinbox.com', 'gowikibooks.com', 'gowikicampus.com', 'gowikicars.com', 'gowikifilms.com', 'gowikigames.com', 'gowikimusic.com', 'gowikimusic.great-host.in', 'gowikinetwork.com', 'gowikitravel.com', 'gowikitv.com', 'grandmamail.com', 'grandmasmail.com', 'great-host.in', 'greensloth.com', 'grr.la', 'gsrv.co.uk', 'guerillamail.biz', 'guerillamail.com', 'guerillamail.net', 'guerillamail.org', 'guerrillamail.biz', 'guerrillamail.com', 'guerrillamail.de', 'guerrillamail.info', 'guerrillamail.net', 'guerrillamail.org', 'guerrillamailblock.com', 'gustr.com', 'h.mintemail.com', 'h8s.org', 'hacccc.com', 'haltospam.com', 'harakirimail.com', 'hartbot.de', 'hat-geld.de', 'hatespam.org', 'hellodream.mobi', 'herp.in', 'hidemail.de', 'hidzz.com', 'hmamail.com', 'hochsitze.com', 'hopemail.biz', 'hotpop.com', 'hulapla.de', 'iaoss.com', 'ieatspam.eu', 'ieatspam.info', 'ieh-mail.de', 'ihateyoualot.info', 'iheartspam.org', 'ikbenspamvrij.nl', 'imails.info', 'imgof.com', 'imstations.com', 'inbax.tk', 'inbox.si', 'inboxalias.com', 'inboxclean.com', 'inboxclean.org', 'inboxproxy.com', 'incognitomail.com', 'incognitomail.net', 'incognitomail.org', 'infocom.zp.ua', 'inoutmail.de', 'inoutmail.eu', 'inoutmail.info', 'inoutmail.net', 'insorg-mail.info', 'instant-mail.de', 'ip6.li', 'ipoo.org', 'irish2me.com', 'iwi.net', 'jamit.com.au', 'jetable.com', 'jetable.fr.nf', 'jetable.net', 'jetable.org', 'jnxjn.com', 'jourrapide.com', 'jsrsolutions.com', 'junk1e.com', 'kasmail.com', 'kaspop.com', 'keepmymail.com', 'killmail.com', 'killmail.net', 'kimsdisk.com', 'kingsq.ga', 'kir.ch.tc', 'klassmaster.com', 'klassmaster.net', 'klzlk.com', 'kook.ml', 'koszmail.pl', 'kulturbetrieb.info', 'kurzepost.de', 'l33r.eu', 'lackmail.net', 'lags.us', 'lawlita.com', 'lazyinbox.com', 'letthemeatspam.com', 'lhsdv.com', 'lifebyfood.com', 'link2mail.net', 'litedrop.com', 'loadby.us', 'login-email.ml', 'lol.ovpn.to', 'lolfreak.net', 'lookugly.com', 'lopl.co.cc', 'lortemail.dk', 'lovemeleaveme.com', 'lr78.com', 'lroid.com', 'lukop.dk', 'm21.cc', 'm4ilweb.info', 'maboard.com', 'mail-filter.com', 'mail-temporaire.fr', 'mail.by', 'mail.mezimages.net', 'mail.zp.ua', 'mail114.net', 'mail1a.de', 'mail21.cc', 'mail2rss.org', 'mail333.com', 'mail4trash.com', 'mailbidon.com', 'mailbiz.biz', 'mailblocks.com', 'mailbucket.org', 'mailcat.biz', 'mailcatch.com', 'mailde.de', 'mailde.info', 'maildrop.cc', 'maildx.com', 'maileater.com', 'mailed.ro', 'maileimer.de', 'mailexpire.com', 'mailfa.tk', 'mailforspam.com', 'mailfreeonline.com', 'mailfs.com', 'mailguard.me', 'mailimate.com', 'mailin8r.com', 'mailinater.com', 'mailinator.com', 'mailinator.net', 'mailinator.org', 'mailinator.us', 'mailinator2.com', 'mailincubator.com', 'mailismagic.com', 'mailmate.com', 'mailme.ir', 'mailme.lv', 'mailme24.com', 'mailmetrash.com', 'mailmetrash.comilzilla.org', 'mailmoat.com', 'mailms.com', 'mailnator.com', 'mailnesia.com', 'mailnull.com', 'mailorg.org', 'mailpick.biz', 'mailproxsy.com', 'mailquack.com', 'mailrock.biz', 'mailscrap.com', 'mailshell.com', 'mailsiphon.com', 'mailslapping.com', 'mailslite.com', 'mailtemp.info', 'mailtome.de', 'mailtothis.com', 'mailtrash.net', 'mailtv.net', 'mailtv.tv', 'mailzilla.com', 'mailzilla.org', 'mailzilla.orgmbx.cc', 'makemetheking.com', 'manifestgenerator.com', 'manybrain.com', 'mbx.cc', 'mega.zik.dj', 'meinspamschutz.de', 'meltmail.com', 'messagebeamer.de', 'mezimages.net', 'mierdamail.com', 'migumail.com', 'ministry-of-silly-walks.de', 'mintemail.com', 'misterpinball.de', 'mjukglass.nu', 'mmailinater.com', 'moakt.com', 'mobi.web.id', 'mobileninja.co.uk', 'moburl.com', 'mohmal.com', 'moncourrier.fr.nf', 'monemail.fr.nf', 'monmail.fr.nf', 'monumentmail.com', 'msa.minsmail.com', 'mt2009.com', 'mt2014.com', 'mx0.wwwnew.eu', 'my10minutemail.com', 'mycard.net.ua', 'mycleaninbox.net', 'myemailboxy.com', 'mymail-in.net', 'mymailoasis.com', 'mynetstore.de', 'mypacks.net', 'mypartyclip.de', 'myphantomemail.com', 'mysamp.de', 'myspaceinc.com', 'myspaceinc.net', 'myspaceinc.org', 'myspacepimpedup.com', 'myspamless.com', 'mytemp.email', 'mytempemail.com', 'mytempmail.com', 'mytrashmail.com', 'nabuma.com', 'neomailbox.com', 'nepwk.com', 'nervmich.net', 'nervtmich.net', 'netmails.com', 'netmails.net', 'netzidiot.de', 'neverbox.com', 'nice-4u.com', 'nincsmail.com', 'nincsmail.hu', 'nnh.com', 'no-spam.ws', 'noblepioneer.com', 'nobulk.com', 'noclickemail.com', 'nogmailspam.info', 'nomail.pw', 'nomail.xl.cx', 'nomail2me.com', 'nomorespamemails.com', 'nonspam.eu', 'nonspammer.de', 'noref.in', 'nospam.ze.tc', 'nospam4.us', 'nospamfor.us', 'nospammail.net', 'nospamthanks.info', 'notmailinator.com', 'notsharingmy.info', 'nowhere.org', 'nowmymail.com', 'nurfuerspam.de', 'nus.edu.sg', 'nwldx.com', 'objectmail.com', 'obobbo.com', 'odaymail.com', 'odnorazovoe.ru', 'one-time.email', 'oneoffemail.com', 'oneoffmail.com', 'onewaymail.com', 'onlatedotcom.info', 'online.ms', 'oopi.org', 'opayq.com', 'ordinaryamerican.net', 'otherinbox.codupmyspace.com', 'otherinbox.com', 'ourklips.com', 'outlawspam.com', 'ovpn.to', 'owlpic.com', 'pancakemail.com', 'paplease.com', 'pcusers.otherinbox.com', 'pepbot.com', 'pfui.ru', 'pimpedupmyspace.com', 'pjjkp.com', 'plexolan.de', 'poczta.onet.pl', 'politikerclub.de', 'pooae.com', 'poofy.org', 'pookmail.com', 'privacy.net', 'privatdemail.net', 'privy-mail.com', 'privymail.de', 'proxymail.eu', 'prtnx.com', 'prtz.eu', 'punkass.com', 'putthisinyourspamdatabase.com', 'pwrby.com', 'quickinbox.com', 'quickmail.nl', 'rcpt.at', 'reallymymail.com', 'realtyalerts.ca', 'recode.me', 'recursor.net', 'recyclemail.dk', 'regbypass.com', 'regbypass.comsafe-mail.net', 'rejectmail.com', 'reliable-mail.com', 'rhyta.com', 'rklips.com', 'rmqkr.net', 'royal.net', 'rppkn.com', 'rtrtr.com', 's0ny.net', 'safe-mail.net', 'safersignup.de', 'safetymail.info', 'safetypost.de', 'sandelf.de', 'saynotospams.com', 'schafmail.de', 'schrott-email.de', 'secretemail.de', 'secure-mail.biz', 'selfdestructingmail.com', 'selfdestructingmail.org', 'sendspamhere.com', 'sendspamhere.com', 'senseless-entertainment.com', 'services391.com', 'sharedmailbox.org', 'sharklasers.com', 'shieldedmail.com', 'shieldemail.com', 'shiftmail.com', 'shitmail.me', 'shitmail.org', 'shitware.nl', 'shmeriously.com', 'shortmail.net', 'shotmail.ru', 'showslow.de', 'sibmail.com', 'sinnlos-mail.de', 'siteposter.net', 'skeefmail.com', 'slapsfromlastnight.com', 'slaskpost.se', 'slipry.net', 'slopsbox.com', 'slushmail.com', 'smashmail.de', 'smellfear.com', 'smellrear.com', 'snakemail.com', 'sneakemail.com', 'sneakmail.de', 'snkmail.com', 'sofimail.com', 'sofort-mail.de', 'softpls.asia', 'sogetthis.com', 'sohu.com', 'solvemail.info', 'soodonims.com', 'spa.com', 'spaereplease.com', 'spam.la', 'spam.su', 'spam4.me', 'spamail.de', 'spamarrest.com', 'spamavert.com', 'spambob.com', 'spambob.net', 'spambob.org', 'spambog.com', 'spambog.de', 'spambog.net', 'spambog.ru', 'spambox.info', 'spambox.irishspringrealty.com', 'spambox.us', 'spamcannon.com', 'spamcannon.net', 'spamcero.com', 'spamcon.org', 'spamcorptastic.com', 'spamcowboy.com', 'spamcowboy.net', 'spamcowboy.org', 'spamday.com', 'spamex.com', 'spamfree.eu', 'spamfree24.com', 'spamfree24.de', 'spamfree24.eu', 'spamfree24.info', 'spamfree24.net', 'spamfree24.org', 'spamgoes.in', 'spamgourmet.com', 'spamgourmet.net', 'spamgourmet.org', 'spamherelots.com', 'spamhereplease.com', 'spamhole.com', 'spamify.com', 'spaminator.de', 'spamkill.info', 'spaml.com', 'spaml.de', 'spammotel.com', 'spamobox.com', 'spamoff.de', 'spamsalad.in', 'spamslicer.com', 'spamspot.com', 'spamstack.net', 'spamthis.co.uk', 'spamthisplease.com', 'spamtrail.com', 'spamtroll.net', 'speed.1s.fr', 'spikio.com', 'spoofmail.de', 'squizzy.de', 'ssoia.com', 'startkeys.com', 'stinkefinger.net', 'stop-my-spam.com', 'stuffmail.de', 'super-auswahl.de', 'supergreatmail.com', 'supermailer.jp', 'superrito.com', 'superstachel.de', 'suremail.info', 'svk.jp', 'sweetxxx.de', 'tagyourself.com', 'talkinator.com', 'tapchicuoihoi.com', 'teewars.org', 'teleosaurs.xyz', 'teleworm.com', 'teleworm.us', 'temp-mail.org', 'temp-mail.ru', 'temp.emeraldwebmail.com', 'temp.headstrong.de', 'tempalias.com', 'tempe-mail.com', 'tempemail.biz', 'tempemail.co.za', 'tempemail.com', 'tempemail.net', 'tempemail.net', 'tempinbox.co.uk', 'tempinbox.com', 'tempmail.eu', 'tempmail.it', 'tempmail2.com', 'tempmaildemo.com', 'tempmailer.com', 'tempmailer.de', 'tempomail.fr', 'temporarily.de', 'temporarioemail.com.br', 'temporaryemail.net', 'temporaryemail.us', 'temporaryforwarding.com', 'temporaryinbox.com', 'temporarymailaddress.com', 'tempsky.com', 'tempthe.net', 'tempymail.com', 'thanksnospam.info', 'thankyou2010.com', 'thc.st', 'thecloudindex.com', 'thelimestones.com', 'thisisnotmyrealemail.com', 'thismail.net', 'thrma.com', 'throwawayemailaddress.com', 'tilien.com', 'tittbit.in', 'tizi.com', 'tmail.ws', 'tmailinator.com', 'toiea.com', 'toomail.biz', 'topranklist.de', 'tradermail.info', 'trash-amil.com', 'trash-mail.at', 'trash-mail.com', 'trash-mail.de', 'trash2009.com', 'trash2010.com', 'trash2011.com', 'trashdevil.com', 'trashdevil.de', 'trashemail.de', 'trashmail.at', 'trashmail.com', 'trashmail.de', 'trashmail.me', 'trashmail.net', 'trashmail.org', 'trashmail.ws', 'trashmailer.com', 'trashymail.com', 'trashymail.net', 'trbvm.com', 'trbvn.com', 'trialmail.de', 'trillianpro.com', 'tryalert.com', 'turual.com', 'twinmail.de', 'twoweirdtricks.com', 'tyldd.com', 'uggsrock.com', 'umail.net', 'upliftnow.com', 'uplipht.com', 'uroid.com', 'us.af', 'username.e4ward.com', 'venompen.com', 'veryrealemail.com', 'vidchart.com', 'viditag.com', 'viewcastmedia.com', 'viewcastmedia.net', 'viewcastmedia.org', 'viewcastmediae', 'viralplays.com', 'vkcode.ru', 'vomoto.com', 'vpn.st', 'vsimcard.com', 'vubby.com', 'walala.org', 'walkmail.net', 'walkmail.ru', 'wasteland.rfc822.org', 'webemail.me', 'webm4il.info', 'webuser.in', 'wee.my', 'weg-werf-email.de', 'wegwerf-email-addressen.de', 'wegwerf-emails.de', 'wegwerfadresse.de', 'wegwerfemail.com', 'wegwerfemail.de', 'wegwerfmail.de', 'wegwerfmail.info', 'wegwerfmail.net', 'wegwerfmail.org', 'wetrainbayarea.com', 'wetrainbayarea.org', 'wh4f.org', 'whatiaas.com', 'whatpaas.com', 'whatsaas.com', 'whopy.com', 'whtjddn.33mail.com', 'whyspam.me', 'wilemail.com', 'willhackforfood.biz', 'willselfdestruct.com', 'winemaven.info', 'wronghead.com', 'wuzup.net', 'wuzupmail.net', 'www.e4ward.com', 'www.gishpuppy.com', 'www.mailinator.com', 'wwwnew.eu', 'x.ip6.li', 'xagloo.com', 'xemaps.com', 'xents.com', 'xmaily.com', 'xoxy.net', 'xyzfree.net', 'yapped.net', 'yeah.net', 'yep.it', 'yogamaven.com', 'yomail.info', 'yopmail.com', 'yopmail.fr', 'yopmail.net', 'yourdomain.com', 'ypmail.webarnak.fr.eu.org', 'yuurok.com', 'z1p.biz', 'za.com', 'zehnminuten.de', 'zehnminutenmail.de', 'zetmail.com', 'zippymail.info', 'zoaxe.com', 'zoemail.com', 'zoemail.net', 'zoemail.org', 'zomg.info', 'zxcv.com', 'zxcvbnm.com', 'zzz.com'];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"notifyUsersOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/notifyUsersOnMessage.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var moment = void 0;                                                                                                   // 1
module.watch(require("moment"), {                                                                                      // 1
	"default": function (v) {                                                                                             // 1
		moment = v;                                                                                                          // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {                                                // 3
	// skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)     // 4
	if (message.editedAt && Math.abs(moment(message.editedAt).diff()) > 60000) {                                          // 5
		//TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback
		RocketChat.models.Rooms.incMsgCountById(message.rid, 1);                                                             // 7
		return message;                                                                                                      // 8
	} else if (message.editedAt) {                                                                                        // 9
		// skips this callback if the message was edited                                                                     // 10
		return message;                                                                                                      // 11
	}                                                                                                                     // 12
                                                                                                                       //
	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {                                                      // 14
		RocketChat.models.Rooms.incMsgCountById(message.rid, 1);                                                             // 15
		return message;                                                                                                      // 16
	} /**                                                                                                                 // 17
    * Chechs if a messages contains a user highlight                                                                   //
    *                                                                                                                  //
    * @param {string} message                                                                                          //
    * @param {array|undefined} highlights                                                                              //
    *                                                                                                                  //
    * @returns {boolean}                                                                                               //
       */                                                                                                              //
                                                                                                                       //
	function messageContainsHighlight(message, highlights) {                                                              // 27
		if (!highlights || highlights.length === 0) {                                                                        // 28
			return false;                                                                                                       // 28
		}                                                                                                                    // 28
                                                                                                                       //
		var has = false;                                                                                                     // 30
		highlights.some(function (highlight) {                                                                               // 31
			var regexp = new RegExp(s.escapeRegExp(highlight), 'i');                                                            // 32
                                                                                                                       //
			if (regexp.test(message.msg)) {                                                                                     // 33
				has = true;                                                                                                        // 34
				return true;                                                                                                       // 35
			}                                                                                                                   // 36
		});                                                                                                                  // 37
		return has;                                                                                                          // 39
	}                                                                                                                     // 40
                                                                                                                       //
	if (room.t != null && room.t === 'd') {                                                                               // 42
		// Update the other subscriptions                                                                                    // 43
		RocketChat.models.Subscriptions.incUnreadOfDirectForRoomIdExcludingUserId(message.rid, message.u._id, 1);            // 44
	} else {                                                                                                              // 45
		var toAll = false;                                                                                                   // 46
		var mentionIds = [];                                                                                                 // 47
		var highlightsIds = [];                                                                                              // 48
		var highlights = RocketChat.models.Users.findUsersByUsernamesWithHighlights(room.usernames, {                        // 49
			fields: {                                                                                                           // 49
				'_id': 1,                                                                                                          // 49
				'settings.preferences.highlights': 1                                                                               // 49
			}                                                                                                                   // 49
		}).fetch();                                                                                                          // 49
                                                                                                                       //
		if (message.mentions != null) {                                                                                      // 51
			message.mentions.forEach(function (mention) {                                                                       // 52
				if (!toAll && mention._id === 'all') {                                                                             // 53
					toAll = true;                                                                                                     // 54
				}                                                                                                                  // 55
                                                                                                                       //
				if (mention._id !== message.u._id) {                                                                               // 56
					mentionIds.push(mention._id);                                                                                     // 57
				}                                                                                                                  // 58
			});                                                                                                                 // 59
		}                                                                                                                    // 60
                                                                                                                       //
		highlights.forEach(function (user) {                                                                                 // 62
			if (user && user.settings && user.settings.preferences && messageContainsHighlight(message, user.settings.preferences.highlights)) {
				if (user._id !== message.u._id) {                                                                                  // 64
					highlightsIds.push(user._id);                                                                                     // 65
				}                                                                                                                  // 66
			}                                                                                                                   // 67
		});                                                                                                                  // 68
                                                                                                                       //
		if (toAll) {                                                                                                         // 70
			RocketChat.models.Subscriptions.incUnreadForRoomIdExcludingUserId(room._id, message.u._id);                         // 71
		} else if (mentionIds && mentionIds.length > 0 || highlightsIds && highlightsIds.length > 0) {                       // 72
			RocketChat.models.Subscriptions.incUnreadForRoomIdAndUserIds(room._id, _.compact(_.unique(mentionIds.concat(highlightsIds))));
		}                                                                                                                    // 74
	} // Update all the room activity tracker fields                                                                      // 75
                                                                                                                       //
                                                                                                                       //
	RocketChat.models.Rooms.incMsgCountAndSetLastMessageTimestampById(message.rid, 1, message.ts); // Update all other subscriptions to alert their owners but witout incrementing
	// the unread counter, as it is only for mentions and direct messages                                                 // 81
                                                                                                                       //
	RocketChat.models.Subscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id);                         // 82
	return message;                                                                                                       // 84
}, RocketChat.callbacks.priority.LOW, 'notifyUsersOnMessage');                                                         // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypes.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/roomTypes.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/* globals roomTypesCommon*/RocketChat.roomTypes = new (function (_roomTypesCommon) {                                  // 1
	(0, _inherits3.default)(roomTypesServer, _roomTypesCommon);                                                           // 2
                                                                                                                       //
	function roomTypesServer() {                                                                                          // 2
		(0, _classCallCheck3.default)(this, roomTypesServer);                                                                // 2
		return (0, _possibleConstructorReturn3.default)(this, _roomTypesCommon.apply(this, arguments));                      // 2
	}                                                                                                                     // 2
                                                                                                                       //
	/* add a publish for a room type                                                                                      // 3
 @param roomType: room type (e.g.: c (for channels), d (for direct channels))                                          //
 @param callback: function that will return the publish's data                                                         //
 */roomTypesServer.prototype.setPublish = function () {                                                                //
		function setPublish(roomType, callback) {                                                                            // 2
			if (this.roomTypes[roomType] && this.roomTypes[roomType].publish != null) {                                         // 9
				throw new Meteor.Error('route-publish-exists', 'Publish for the given type already exists');                       // 10
			}                                                                                                                   // 11
                                                                                                                       //
			if (this.roomTypes[roomType] == null) {                                                                             // 12
				this.roomTypes[roomType] = {};                                                                                     // 13
			}                                                                                                                   // 14
                                                                                                                       //
			return this.roomTypes[roomType].publish = callback;                                                                 // 15
		}                                                                                                                    // 16
                                                                                                                       //
		return setPublish;                                                                                                   // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	roomTypesServer.prototype.setRoomFind = function () {                                                                 // 2
		function setRoomFind(roomType, callback) {                                                                           // 2
			if (this.roomTypes[roomType] && this.roomTypes[roomType].roomFind != null) {                                        // 19
				throw new Meteor.Error('room-find-exists', 'Room find for the given type already exists');                         // 20
			}                                                                                                                   // 21
                                                                                                                       //
			if (this.roomTypes[roomType] == null) {                                                                             // 22
				this.roomTypes[roomType] = {};                                                                                     // 23
			}                                                                                                                   // 24
                                                                                                                       //
			return this.roomTypes[roomType].roomFind = callback;                                                                // 25
		}                                                                                                                    // 26
                                                                                                                       //
		return setRoomFind;                                                                                                  // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	roomTypesServer.prototype.getRoomFind = function () {                                                                 // 2
		function getRoomFind(roomType) {                                                                                     // 2
			return this.roomTypes[roomType] && this.roomTypes[roomType].roomFind;                                               // 28
		}                                                                                                                    // 29
                                                                                                                       //
		return getRoomFind;                                                                                                  // 2
	}(); /* run the publish for a room type                                                                               // 2
      @param scope: Meteor publish scope                                                                               //
      @param roomType: room type (e.g.: c (for channels), d (for direct channels))                                     //
      @param identifier: identifier of the room                                                                        //
      */                                                                                                               //
                                                                                                                       //
	roomTypesServer.prototype.runPublish = function () {                                                                  // 2
		function runPublish(scope, roomType, identifier) {                                                                   // 2
			return this.roomTypes[roomType] && this.roomTypes[roomType].publish && this.roomTypes[roomType].publish.call(scope, identifier);
		}                                                                                                                    // 40
                                                                                                                       //
		return runPublish;                                                                                                   // 2
	}();                                                                                                                  // 2
                                                                                                                       //
	return roomTypesServer;                                                                                               // 2
}(roomTypesCommon))();                                                                                                 // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendEmailOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendEmailOnMessage.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var moment = void 0;                                                                                                   // 1
module.watch(require("moment"), {                                                                                      // 1
	"default": function (v) {                                                                                             // 1
		moment = v;                                                                                                          // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {                                                // 3
	// skips this callback if the message was edited                                                                      // 4
	if (message.editedAt) {                                                                                               // 5
		return message;                                                                                                      // 6
	}                                                                                                                     // 7
                                                                                                                       //
	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {                                                      // 9
		return message;                                                                                                      // 10
	}                                                                                                                     // 11
                                                                                                                       //
	var emailSubject = void 0;                                                                                            // 13
	var usersToSendEmail = {};                                                                                            // 14
	var directMessage = room.t === 'd';                                                                                   // 15
                                                                                                                       //
	if (directMessage) {                                                                                                  // 17
		usersToSendEmail[message.rid.replace(message.u._id, '')] = 1;                                                        // 18
		emailSubject = TAPi18n.__('Offline_DM_Email', {                                                                      // 20
			user: message.u.username                                                                                            // 21
		});                                                                                                                  // 20
	} else {                                                                                                              // 24
		if (message.mentions) {                                                                                              // 25
			message.mentions.forEach(function (mention) {                                                                       // 26
				usersToSendEmail[mention._id] = 1;                                                                                 // 27
			});                                                                                                                 // 28
		}                                                                                                                    // 29
                                                                                                                       //
		emailSubject = TAPi18n.__('Offline_Mention_Email', {                                                                 // 31
			user: message.u.username,                                                                                           // 32
			room: room.name                                                                                                     // 33
		});                                                                                                                  // 31
	}                                                                                                                     // 35
                                                                                                                       //
	var getMessageLink = function (room, sub) {                                                                           // 37
		var roomPath = RocketChat.roomTypes.getRouteLink(room.t, sub);                                                       // 38
		var path = Meteor.absoluteUrl(roomPath ? roomPath.replace(/^\//, '') : '');                                          // 39
		var style = ['color: #fff;', 'padding: 9px 12px;', 'border-radius: 4px;', 'background-color: #04436a;', 'text-decoration: none;'].join(' ');
                                                                                                                       //
		var message = TAPi18n.__('Offline_Link_Message');                                                                    // 47
                                                                                                                       //
		return "<p style=\"text-align:center;margin-bottom:8px;\"><a style=\"" + style + "\" href=\"" + path + "\">" + message + "</a>";
	};                                                                                                                    // 49
                                                                                                                       //
	var divisorMessage = '<hr style="margin: 20px auto; border: none; border-bottom: 1px solid #dddddd;">';               // 51
	var messageHTML = s.escapeHTML(message.msg);                                                                          // 52
	message = RocketChat.callbacks.run('renderMessage', message);                                                         // 54
                                                                                                                       //
	if (message.tokens && message.tokens.length > 0) {                                                                    // 55
		message.tokens.forEach(function (token) {                                                                            // 56
			token.text = token.text.replace(/([^\$])(\$[^\$])/gm, '$1$$$2');                                                    // 57
			messageHTML = messageHTML.replace(token.token, token.text);                                                         // 58
		});                                                                                                                  // 59
	}                                                                                                                     // 60
                                                                                                                       //
	var header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                          // 62
	var footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                          // 63
	messageHTML = messageHTML.replace(/\n/gm, '<br/>');                                                                   // 64
	RocketChat.models.Subscriptions.findWithSendEmailByRoomId(room._id).forEach(function (sub) {                          // 66
		if (sub.disableNotifications) {                                                                                      // 67
			delete usersToSendEmail[sub.u._id];                                                                                 // 68
		} else {                                                                                                             // 69
			switch (sub.emailNotifications) {                                                                                   // 70
				case 'all':                                                                                                        // 71
					usersToSendEmail[sub.u._id] = 'force';                                                                            // 72
					break;                                                                                                            // 73
                                                                                                                       //
				case 'mentions':                                                                                                   // 74
					if (usersToSendEmail[sub.u._id]) {                                                                                // 75
						usersToSendEmail[sub.u._id] = 'force';                                                                           // 76
					}                                                                                                                 // 77
                                                                                                                       //
					break;                                                                                                            // 78
                                                                                                                       //
				case 'nothing':                                                                                                    // 79
					delete usersToSendEmail[sub.u._id];                                                                               // 80
					break;                                                                                                            // 81
                                                                                                                       //
				case 'default':                                                                                                    // 82
					break;                                                                                                            // 83
			}                                                                                                                   // 70
		}                                                                                                                    // 85
	});                                                                                                                   // 86
	var userIdsToSendEmail = Object.keys(usersToSendEmail);                                                               // 88
	var defaultLink = void 0;                                                                                             // 90
	var linkByUser = {};                                                                                                  // 92
                                                                                                                       //
	if (RocketChat.roomTypes.hasCustomLink(room.t)) {                                                                     // 93
		RocketChat.models.Subscriptions.findByRoomIdAndUserIds(room._id, userIdsToSendEmail).forEach(function (sub) {        // 94
			linkByUser[sub.u._id] = getMessageLink(room, sub);                                                                  // 95
		});                                                                                                                  // 96
	} else {                                                                                                              // 97
		defaultLink = getMessageLink(room, {                                                                                 // 98
			name: room.name                                                                                                     // 98
		});                                                                                                                  // 98
	}                                                                                                                     // 99
                                                                                                                       //
	if (userIdsToSendEmail.length > 0) {                                                                                  // 101
		var usersOfMention = RocketChat.models.Users.getUsersToSendOfflineEmail(userIdsToSendEmail).fetch();                 // 102
                                                                                                                       //
		if (usersOfMention && usersOfMention.length > 0) {                                                                   // 104
			var siteName = RocketChat.settings.get('Site_Name');                                                                // 105
			usersOfMention.forEach(function (user) {                                                                            // 107
				if (user.settings && user.settings.preferences && user.settings.preferences.emailNotificationMode && user.settings.preferences.emailNotificationMode === 'disabled' && usersToSendEmail[user._id] !== 'force') {
					return;                                                                                                           // 109
				} // Checks if user is in the room he/she is mentioned (unless it's public channel)                                // 110
                                                                                                                       //
                                                                                                                       //
				if (room.t !== 'c' && room.usernames.indexOf(user.username) === -1) {                                              // 113
					return;                                                                                                           // 114
				}                                                                                                                  // 115
                                                                                                                       //
				user.emails.some(function (email) {                                                                                // 117
					if (email.verified) {                                                                                             // 118
						email = {                                                                                                        // 119
							to: email.address,                                                                                              // 120
							from: RocketChat.settings.get('From_Email'),                                                                    // 121
							subject: "[" + siteName + "] " + emailSubject,                                                                  // 122
							html: header + messageHTML + divisorMessage + (linkByUser[user._id] || defaultLink) + footer                    // 123
						};                                                                                                               // 119
						Meteor.defer(function () {                                                                                       // 126
							Email.send(email);                                                                                              // 127
						});                                                                                                              // 128
						return true;                                                                                                     // 130
					}                                                                                                                 // 131
				});                                                                                                                // 132
			});                                                                                                                 // 133
		}                                                                                                                    // 134
	}                                                                                                                     // 135
                                                                                                                       //
	return message;                                                                                                       // 137
}, RocketChat.callbacks.priority.LOW, 'sendEmailOnMessage');                                                           // 139
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendNotificationsOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendNotificationsOnMessage.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var moment = void 0;                                                                                                   // 1
module.watch(require("moment"), {                                                                                      // 1
	"default": function (v) {                                                                                             // 1
		moment = v;                                                                                                          // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {                                                // 4
	// skips this callback if the message was edited                                                                      // 5
	if (message.editedAt) {                                                                                               // 6
		return message;                                                                                                      // 7
	}                                                                                                                     // 8
                                                                                                                       //
	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {                                                      // 10
		return message;                                                                                                      // 11
	}                                                                                                                     // 12
                                                                                                                       //
	var user = RocketChat.models.Users.findOneById(message.u._id); /*                                                     // 14
                                                                Increment unread couter if direct messages             //
                                                                 */                                                    //
	var settings = {}; /**                                                                                                // 19
                     * Checks if a given user can be notified                                                          //
                     *                                                                                                 //
                     * @param {string} id                                                                              //
                     * @param {string} type - mobile|desktop                                                           //
                     *                                                                                                 //
                     * @returns {boolean}                                                                              //
                        */                                                                                             //
                                                                                                                       //
	function canBeNotified(id, type) {                                                                                    // 29
		var types = {                                                                                                        // 30
			mobile: ['dontNotifyDesktopUsers', 'alwaysNotifyDesktopUsers'],                                                     // 31
			desktop: ['dontNotifyMobileUsers', 'alwaysNotifyMobileUsers']                                                       // 32
		};                                                                                                                   // 30
		return settings[types[type][0]].indexOf(id) === -1 || settings[types[type][1]].indexOf(id) !== -1;                   // 35
	} /**                                                                                                                 // 36
    * Checks if a message contains a user highlight                                                                    //
    *                                                                                                                  //
    * @param {string} message                                                                                          //
    * @param {array|undefined} highlights                                                                              //
    *                                                                                                                  //
    * @returns {boolean}                                                                                               //
    */                                                                                                                 //
                                                                                                                       //
	function messageContainsHighlight(message, highlights) {                                                              // 46
		if (!highlights || highlights.length === 0) {                                                                        // 47
			return false;                                                                                                       // 47
		}                                                                                                                    // 47
                                                                                                                       //
		var has = false;                                                                                                     // 49
		highlights.some(function (highlight) {                                                                               // 50
			var regexp = new RegExp(s.escapeRegExp(highlight), 'i');                                                            // 51
                                                                                                                       //
			if (regexp.test(message.msg)) {                                                                                     // 52
				has = true;                                                                                                        // 53
				return true;                                                                                                       // 54
			}                                                                                                                   // 55
		});                                                                                                                  // 56
		return has;                                                                                                          // 58
	}                                                                                                                     // 59
                                                                                                                       //
	settings.alwaysNotifyDesktopUsers = [];                                                                               // 61
	settings.dontNotifyDesktopUsers = [];                                                                                 // 62
	settings.alwaysNotifyMobileUsers = [];                                                                                // 63
	settings.dontNotifyMobileUsers = [];                                                                                  // 64
	settings.desktopNotificationDurations = {};                                                                           // 65
	var notificationPreferencesByRoom = RocketChat.models.Subscriptions.findNotificationPreferencesByRoom(room._id);      // 67
	notificationPreferencesByRoom.forEach(function (subscription) {                                                       // 68
		if (subscription.disableNotifications) {                                                                             // 69
			settings.dontNotifyDesktopUsers.push(subscription.u._id);                                                           // 70
			settings.dontNotifyMobileUsers.push(subscription.u._id);                                                            // 71
		} else {                                                                                                             // 72
			if (subscription.desktopNotifications === 'all') {                                                                  // 73
				settings.alwaysNotifyDesktopUsers.push(subscription.u._id);                                                        // 74
			} else if (subscription.desktopNotifications === 'nothing') {                                                       // 75
				settings.dontNotifyDesktopUsers.push(subscription.u._id);                                                          // 76
			}                                                                                                                   // 77
                                                                                                                       //
			if (subscription.mobilePushNotifications === 'all') {                                                               // 78
				settings.alwaysNotifyMobileUsers.push(subscription.u._id);                                                         // 79
			} else if (subscription.mobilePushNotifications === 'nothing') {                                                    // 80
				settings.dontNotifyMobileUsers.push(subscription.u._id);                                                           // 81
			}                                                                                                                   // 82
		}                                                                                                                    // 83
                                                                                                                       //
		settings.desktopNotificationDurations[subscription.u._id] = subscription.desktopNotificationDuration;                // 84
	});                                                                                                                   // 85
	var userIdsToNotify = [];                                                                                             // 87
	var userIdsToPushNotify = [];                                                                                         // 88
	var usersWithHighlights = [];                                                                                         // 89
	var highlights = RocketChat.models.Users.findUsersByUsernamesWithHighlights(room.usernames, {                         // 91
		fields: {                                                                                                            // 91
			'_id': 1,                                                                                                           // 91
			'settings.preferences.highlights': 1                                                                                // 91
		}                                                                                                                    // 91
	}).fetch();                                                                                                           // 91
	highlights.forEach(function (user) {                                                                                  // 93
		if (messageContainsHighlight(message, user.settings.preferences.highlights)) {                                       // 94
			usersWithHighlights.push(user);                                                                                     // 95
		}                                                                                                                    // 96
	});                                                                                                                   // 97
	var push_message = void 0; //Set variables depending on Push Notification settings                                    // 99
                                                                                                                       //
	if (RocketChat.settings.get('Push_show_message')) {                                                                   // 101
		push_message = message.msg;                                                                                          // 102
	} else {                                                                                                              // 103
		push_message = ' ';                                                                                                  // 104
	}                                                                                                                     // 105
                                                                                                                       //
	var push_username = void 0;                                                                                           // 107
	var push_room = void 0;                                                                                               // 108
                                                                                                                       //
	if (RocketChat.settings.get('Push_show_username_room')) {                                                             // 109
		push_username = user.username;                                                                                       // 110
		push_room = "#" + room.name;                                                                                         // 111
	} else {                                                                                                              // 112
		push_username = '';                                                                                                  // 113
		push_room = '';                                                                                                      // 114
	}                                                                                                                     // 115
                                                                                                                       //
	if (room.t == null || room.t === 'd') {                                                                               // 117
		var userOfMentionId = message.rid.replace(message.u._id, '');                                                        // 118
		var userOfMention = RocketChat.models.Users.findOne({                                                                // 119
			_id: userOfMentionId                                                                                                // 120
		}, {                                                                                                                 // 119
			fields: {                                                                                                           // 122
				username: 1,                                                                                                       // 123
				statusConnection: 1                                                                                                // 124
			}                                                                                                                   // 122
		}); // Always notify Sandstorm                                                                                       // 121
                                                                                                                       //
		if (userOfMention != null) {                                                                                         // 129
			RocketChat.Sandstorm.notify(message, [userOfMention._id], "@" + user.username + ": " + message.msg, 'privateMessage');
		}                                                                                                                    // 133
                                                                                                                       //
		if (userOfMention != null && canBeNotified(userOfMentionId, 'mobile')) {                                             // 134
			RocketChat.Notifications.notifyUser(userOfMention._id, 'notification', {                                            // 135
				title: RocketChat.settings.get('UI_Use_Real_Name') ? user.name : "@" + user.username,                              // 136
				text: message.msg,                                                                                                 // 137
				duration: settings.desktopNotificationDurations[userOfMention._id],                                                // 138
				payload: {                                                                                                         // 139
					_id: message._id,                                                                                                 // 140
					rid: message.rid,                                                                                                 // 141
					sender: message.u,                                                                                                // 142
					type: room.t,                                                                                                     // 143
					name: room.name                                                                                                   // 144
				}                                                                                                                  // 139
			});                                                                                                                 // 135
		}                                                                                                                    // 147
                                                                                                                       //
		if (userOfMention != null && canBeNotified(userOfMentionId, 'desktop')) {                                            // 149
			if (Push.enabled === true && userOfMention.statusConnection !== 'online') {                                         // 150
				RocketChat.PushNotification.send({                                                                                 // 151
					roomId: message.rid,                                                                                              // 152
					username: push_username,                                                                                          // 153
					message: push_message,                                                                                            // 154
					payload: {                                                                                                        // 155
						host: Meteor.absoluteUrl(),                                                                                      // 156
						rid: message.rid,                                                                                                // 157
						sender: message.u,                                                                                               // 158
						type: room.t,                                                                                                    // 159
						name: room.name                                                                                                  // 160
					},                                                                                                                // 155
					usersTo: {                                                                                                        // 162
						userId: userOfMention._id                                                                                        // 163
					}                                                                                                                 // 162
				});                                                                                                                // 151
				return message;                                                                                                    // 166
			}                                                                                                                   // 167
		}                                                                                                                    // 168
	} else {                                                                                                              // 170
		var mentionIds = [];                                                                                                 // 171
                                                                                                                       //
		if (message.mentions != null) {                                                                                      // 172
			message.mentions.forEach(function (mention) {                                                                       // 173
				return mentionIds.push(mention._id);                                                                               // 174
			});                                                                                                                 // 175
		}                                                                                                                    // 176
                                                                                                                       //
		var toAll = mentionIds.indexOf('all') > -1;                                                                          // 177
		var toHere = mentionIds.indexOf('here') > -1;                                                                        // 178
                                                                                                                       //
		if (mentionIds.length > 0 || settings.alwaysNotifyDesktopUsers.length > 0) {                                         // 179
			var desktopMentionIds = _.union(mentionIds, settings.alwaysNotifyDesktopUsers);                                     // 180
                                                                                                                       //
			desktopMentionIds = _.difference(desktopMentionIds, settings.dontNotifyDesktopUsers);                               // 181
			var usersOfDesktopMentions = RocketChat.models.Users.find({                                                         // 183
				_id: {                                                                                                             // 184
					$in: desktopMentionIds                                                                                            // 185
				}                                                                                                                  // 184
			}, {                                                                                                                // 183
				fields: {                                                                                                          // 188
					_id: 1,                                                                                                           // 189
					username: 1,                                                                                                      // 190
					active: 1                                                                                                         // 191
				}                                                                                                                  // 188
			}).fetch();                                                                                                         // 187
                                                                                                                       //
			if (room.t === 'c' && !toAll) {                                                                                     // 194
				var callJoin = function (usersOfMentionItem) {                                                                     // 195
					if (usersOfMentionItem.active) {                                                                                  // 196
						Meteor.runAsUser(usersOfMentionItem._id, function () {                                                           // 197
							return Meteor.call('joinRoom', room._id);                                                                       // 198
						});                                                                                                              // 199
					}                                                                                                                 // 200
				};                                                                                                                 // 201
                                                                                                                       //
				for (var _iterator = usersOfDesktopMentions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
					var _ref;                                                                                                         // 202
                                                                                                                       //
					if (_isArray) {                                                                                                   // 202
						if (_i >= _iterator.length) break;                                                                               // 202
						_ref = _iterator[_i++];                                                                                          // 202
					} else {                                                                                                          // 202
						_i = _iterator.next();                                                                                           // 202
						if (_i.done) break;                                                                                              // 202
						_ref = _i.value;                                                                                                 // 202
					}                                                                                                                 // 202
                                                                                                                       //
					var usersOfMentionItem = _ref;                                                                                    // 202
                                                                                                                       //
					if (room.usernames.indexOf(usersOfMentionItem.username) === -1) {                                                 // 203
						callJoin(usersOfMentionItem);                                                                                    // 204
					}                                                                                                                 // 205
				}                                                                                                                  // 206
			}                                                                                                                   // 207
                                                                                                                       //
			if (room.t !== 'c') {                                                                                               // 209
				usersOfDesktopMentions = _.reject(usersOfDesktopMentions, function (usersOfMentionItem) {                          // 210
					return room.usernames.indexOf(usersOfMentionItem.username) === -1;                                                // 211
				});                                                                                                                // 212
			}                                                                                                                   // 213
                                                                                                                       //
			userIdsToNotify = _.pluck(usersOfDesktopMentions, '_id');                                                           // 215
		}                                                                                                                    // 216
                                                                                                                       //
		if (mentionIds.length > 0 || settings.alwaysNotifyMobileUsers.length > 0) {                                          // 218
			var mobileMentionIds = _.union(mentionIds, settings.alwaysNotifyMobileUsers);                                       // 219
                                                                                                                       //
			mobileMentionIds = _.difference(mobileMentionIds, settings.dontNotifyMobileUsers);                                  // 220
			var usersOfMobileMentions = RocketChat.models.Users.find({                                                          // 222
				_id: {                                                                                                             // 223
					$in: mobileMentionIds                                                                                             // 224
				}                                                                                                                  // 223
			}, {                                                                                                                // 222
				fields: {                                                                                                          // 227
					_id: 1,                                                                                                           // 228
					username: 1,                                                                                                      // 229
					statusConnection: 1                                                                                               // 230
				}                                                                                                                  // 227
			}).fetch();                                                                                                         // 226
                                                                                                                       //
			if (room.t !== 'c') {                                                                                               // 234
				usersOfMobileMentions = _.reject(usersOfMobileMentions, function (usersOfMentionItem) {                            // 235
					return room.usernames.indexOf(usersOfMentionItem.username) === -1;                                                // 236
				});                                                                                                                // 237
			}                                                                                                                   // 238
                                                                                                                       //
			userIdsToPushNotify = _.pluck(_.filter(usersOfMobileMentions, function (user) {                                     // 240
				return user.statusConnection !== 'online';                                                                         // 241
			}), '_id');                                                                                                         // 242
		}                                                                                                                    // 243
                                                                                                                       //
		if ((toAll || toHere) && room.usernames && room.usernames.length > 0) {                                              // 245
			RocketChat.models.Users.find({                                                                                      // 246
				username: {                                                                                                        // 247
					$in: room.usernames                                                                                               // 248
				},                                                                                                                 // 247
				_id: {                                                                                                             // 250
					$ne: user._id                                                                                                     // 251
				}                                                                                                                  // 250
			}, {                                                                                                                // 246
				fields: {                                                                                                          // 254
					_id: 1,                                                                                                           // 255
					username: 1,                                                                                                      // 256
					status: 1,                                                                                                        // 257
					statusConnection: 1                                                                                               // 258
				}                                                                                                                  // 254
			}).forEach(function (user) {                                                                                        // 253
				if (['online', 'away', 'busy'].includes(user.status) && (settings.dontNotifyDesktopUsers || []).includes(user._id) === false) {
					userIdsToNotify.push(user._id);                                                                                   // 262
				}                                                                                                                  // 263
                                                                                                                       //
				if (toAll && user.statusConnection !== 'online' && (settings.dontNotifyMobileUsers || []).includes(user._id) === false) {
					return userIdsToPushNotify.push(user._id);                                                                        // 265
				}                                                                                                                  // 266
			});                                                                                                                 // 267
		}                                                                                                                    // 268
                                                                                                                       //
		if (usersWithHighlights.length > 0) {                                                                                // 270
			var highlightsIds = _.pluck(usersWithHighlights, '_id');                                                            // 271
                                                                                                                       //
			userIdsToNotify = userIdsToNotify.concat(highlightsIds);                                                            // 272
			userIdsToPushNotify = userIdsToPushNotify.concat(highlightsIds);                                                    // 273
		}                                                                                                                    // 274
                                                                                                                       //
		userIdsToNotify = _.without(_.compact(_.unique(userIdsToNotify)), message.u._id);                                    // 276
		userIdsToPushNotify = _.without(_.compact(_.unique(userIdsToPushNotify)), message.u._id);                            // 277
                                                                                                                       //
		if (userIdsToNotify.length > 0) {                                                                                    // 279
			for (var _iterator2 = userIdsToNotify, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				var _ref2;                                                                                                         // 280
                                                                                                                       //
				if (_isArray2) {                                                                                                   // 280
					if (_i2 >= _iterator2.length) break;                                                                              // 280
					_ref2 = _iterator2[_i2++];                                                                                        // 280
				} else {                                                                                                           // 280
					_i2 = _iterator2.next();                                                                                          // 280
					if (_i2.done) break;                                                                                              // 280
					_ref2 = _i2.value;                                                                                                // 280
				}                                                                                                                  // 280
                                                                                                                       //
				var usersOfMentionId = _ref2;                                                                                      // 280
				var title = "@" + user.username;                                                                                   // 281
                                                                                                                       //
				if (room.name) {                                                                                                   // 282
					title += " @ #" + room.name;                                                                                      // 283
				}                                                                                                                  // 284
                                                                                                                       //
				RocketChat.Notifications.notifyUser(usersOfMentionId, 'notification', {                                            // 285
					title: title,                                                                                                     // 286
					text: message.msg,                                                                                                // 287
					duration: settings.desktopNotificationDurations[usersOfMentionId],                                                // 288
					payload: {                                                                                                        // 289
						_id: message._id,                                                                                                // 290
						rid: message.rid,                                                                                                // 291
						sender: message.u,                                                                                               // 292
						type: room.t,                                                                                                    // 293
						name: room.name                                                                                                  // 294
					}                                                                                                                 // 289
				});                                                                                                                // 285
			}                                                                                                                   // 297
		}                                                                                                                    // 298
                                                                                                                       //
		if (userIdsToPushNotify.length > 0) {                                                                                // 300
			if (Push.enabled === true) {                                                                                        // 301
				RocketChat.PushNotification.send({                                                                                 // 302
					roomId: message.rid,                                                                                              // 303
					roomName: push_room,                                                                                              // 304
					username: push_username,                                                                                          // 305
					message: push_message,                                                                                            // 306
					payload: {                                                                                                        // 307
						host: Meteor.absoluteUrl(),                                                                                      // 308
						rid: message.rid,                                                                                                // 309
						sender: message.u,                                                                                               // 310
						type: room.t,                                                                                                    // 311
						name: room.name                                                                                                  // 312
					},                                                                                                                // 307
					usersTo: {                                                                                                        // 314
						userId: {                                                                                                        // 315
							$in: userIdsToPushNotify                                                                                        // 316
						}                                                                                                                // 315
					}                                                                                                                 // 314
				});                                                                                                                // 302
			}                                                                                                                   // 320
		}                                                                                                                    // 321
                                                                                                                       //
		var allUserIdsToNotify = _.unique(userIdsToNotify.concat(userIdsToPushNotify));                                      // 323
                                                                                                                       //
		if (room.t === 'p') {                                                                                                // 324
			RocketChat.Sandstorm.notify(message, allUserIdsToNotify, "@" + user.username + ": " + message.msg, 'privateMessage');
		} else {                                                                                                             // 327
			RocketChat.Sandstorm.notify(message, allUserIdsToNotify, "@" + user.username + ": " + message.msg, 'message');      // 328
		}                                                                                                                    // 330
	}                                                                                                                     // 331
                                                                                                                       //
	return message;                                                                                                       // 333
}, RocketChat.callbacks.priority.LOW, 'sendNotificationOnMessage');                                                    // 335
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateEmailDomain.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/validateEmailDomain.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dns = Npm.require('dns');                                                                                          // 1
                                                                                                                       //
var emailDomainBlackList = [];                                                                                         // 3
var emailDomainWhiteList = [];                                                                                         // 4
var useDefaultBlackList = false;                                                                                       // 5
var useDNSDomainCheck = false;                                                                                         // 6
RocketChat.settings.get('Accounts_BlockedDomainsList', function (key, value) {                                         // 8
	emailDomainBlackList = _.map(value.split(','), function (domain) {                                                    // 9
		return domain.trim();                                                                                                // 9
	});                                                                                                                   // 9
});                                                                                                                    // 10
RocketChat.settings.get('Accounts_AllowedDomainsList', function (key, value) {                                         // 11
	emailDomainWhiteList = _.map(value.split(','), function (domain) {                                                    // 12
		return domain.trim();                                                                                                // 12
	});                                                                                                                   // 12
});                                                                                                                    // 13
RocketChat.settings.get('Accounts_UseDefaultBlockedDomainsList', function (key, value) {                               // 14
	useDefaultBlackList = value;                                                                                          // 15
});                                                                                                                    // 16
RocketChat.settings.get('Accounts_UseDNSDomainCheck', function (key, value) {                                          // 17
	useDNSDomainCheck = value;                                                                                            // 18
});                                                                                                                    // 19
                                                                                                                       //
RocketChat.validateEmailDomain = function (email) {                                                                    // 21
	var emailValidation = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                                                                                                                       //
	if (!emailValidation.test(email)) {                                                                                   // 23
		throw new Meteor.Error('error-invalid-email', "Invalid email " + email, {                                            // 24
			"function": 'RocketChat.validateEmailDomain',                                                                       // 24
			email: email                                                                                                        // 24
		});                                                                                                                  // 24
	}                                                                                                                     // 25
                                                                                                                       //
	var emailDomain = email.substr(email.lastIndexOf('@') + 1); // if not in whitelist                                    // 27
                                                                                                                       //
	if (emailDomainWhiteList.indexOf(emailDomain) === -1) {                                                               // 30
		if (emailDomainBlackList.indexOf(emailDomain) !== -1 || useDefaultBlackList && RocketChat.emailDomainDefaultBlackList.indexOf(emailDomain) !== -1) {
			throw new Meteor.Error('error-email-domain-blacklisted', 'The email domain is blacklisted', {                       // 32
				"function": 'RocketChat.validateEmailDomain'                                                                       // 32
			});                                                                                                                 // 32
		}                                                                                                                    // 33
	}                                                                                                                     // 34
                                                                                                                       //
	if (useDNSDomainCheck) {                                                                                              // 36
		try {                                                                                                                // 37
			Meteor.wrapAsync(dns.resolveMx)(emailDomain);                                                                       // 38
		} catch (e) {                                                                                                        // 39
			throw new Meteor.Error('error-invalid-domain', 'Invalid domain', {                                                  // 40
				"function": 'RocketChat.validateEmailDomain'                                                                       // 40
			});                                                                                                                 // 40
		}                                                                                                                    // 41
	}                                                                                                                     // 42
};                                                                                                                     // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"functions":{"isDocker.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/isDocker.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var fs = void 0;                                                                                                       // 1
module.watch(require("fs"), {                                                                                          // 1
	"default": function (v) {                                                                                             // 1
		fs = v;                                                                                                              // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
function hasDockerEnv() {                                                                                              // 3
	try {                                                                                                                 // 4
		fs.statSync('/.dockerenv');                                                                                          // 5
		return true;                                                                                                         // 6
	} catch (err) {                                                                                                       // 7
		return false;                                                                                                        // 8
	}                                                                                                                     // 9
}                                                                                                                      // 10
                                                                                                                       //
function hasDockerCGroup() {                                                                                           // 12
	try {                                                                                                                 // 13
		return fs.readFileSync('/proc/self/cgroup', 'utf8').indexOf('docker') !== -1;                                        // 14
	} catch (err) {                                                                                                       // 15
		return false;                                                                                                        // 16
	}                                                                                                                     // 17
}                                                                                                                      // 18
                                                                                                                       //
function check() {                                                                                                     // 20
	return hasDockerEnv() || hasDockerCGroup();                                                                           // 21
}                                                                                                                      // 22
                                                                                                                       //
var isDocker = void 0;                                                                                                 // 24
                                                                                                                       //
RocketChat.isDocker = function () {                                                                                    // 25
	if (isDocker === undefined) {                                                                                         // 26
		isDocker = check();                                                                                                  // 27
	}                                                                                                                     // 28
                                                                                                                       //
	return isDocker;                                                                                                      // 30
};                                                                                                                     // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToDefaultChannels.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToDefaultChannels = function (user, silenced) {                                                      // 1
	RocketChat.callbacks.run('beforeJoinDefaultChannels', user);                                                          // 2
	var defaultRooms = RocketChat.models.Rooms.findByDefaultAndTypes(true, ['c', 'p'], {                                  // 3
		fields: {                                                                                                            // 3
			usernames: 0                                                                                                        // 3
		}                                                                                                                    // 3
	}).fetch();                                                                                                           // 3
	defaultRooms.forEach(function (room) {                                                                                // 4
		// put user in default rooms                                                                                         // 6
		var muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');                                   // 7
		RocketChat.models.Rooms.addUsernameById(room._id, user.username, muted);                                             // 8
                                                                                                                       //
		if (!RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, user._id)) {                                 // 10
			// Add a subscription to this user                                                                                  // 12
			RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {                                                 // 13
				ts: new Date(),                                                                                                    // 14
				open: true,                                                                                                        // 15
				alert: true,                                                                                                       // 16
				unread: 1                                                                                                          // 17
			}); // Insert user joined message                                                                                   // 13
                                                                                                                       //
			if (!silenced) {                                                                                                    // 21
				RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, user);                                        // 22
			}                                                                                                                   // 23
		}                                                                                                                    // 24
	});                                                                                                                   // 25
};                                                                                                                     // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToRoom = function (rid, user, inviter, silenced) {                                                   // 1
	var now = new Date();                                                                                                 // 2
	var room = RocketChat.models.Rooms.findOneById(rid); // Check if user is already in room                              // 3
                                                                                                                       //
	var subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, user._id);                           // 6
                                                                                                                       //
	if (subscription) {                                                                                                   // 7
		return;                                                                                                              // 8
	}                                                                                                                     // 9
                                                                                                                       //
	if (room.t === 'c' || room.t === 'p') {                                                                               // 11
		RocketChat.callbacks.run('beforeJoinRoom', user, room);                                                              // 12
	}                                                                                                                     // 13
                                                                                                                       //
	var muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');                                    // 15
	RocketChat.models.Rooms.addUsernameById(rid, user.username, muted);                                                   // 16
	RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {                                                   // 17
		ts: now,                                                                                                             // 18
		open: true,                                                                                                          // 19
		alert: true,                                                                                                         // 20
		unread: 1                                                                                                            // 21
	});                                                                                                                   // 17
                                                                                                                       //
	if (!silenced) {                                                                                                      // 24
		if (inviter) {                                                                                                       // 25
			RocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rid, user, {                                            // 26
				ts: now,                                                                                                           // 27
				u: {                                                                                                               // 28
					_id: inviter._id,                                                                                                 // 29
					username: inviter.username                                                                                        // 30
				}                                                                                                                  // 28
			});                                                                                                                 // 26
		} else {                                                                                                             // 33
			RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rid, user, {                                             // 34
				ts: now                                                                                                            // 34
			});                                                                                                                 // 34
		}                                                                                                                    // 35
	}                                                                                                                     // 36
                                                                                                                       //
	if (room.t === 'c' || room.t === 'p') {                                                                               // 38
		Meteor.defer(function () {                                                                                           // 39
			RocketChat.callbacks.run('afterJoinRoom', user, room);                                                              // 40
		});                                                                                                                  // 41
	}                                                                                                                     // 42
                                                                                                                       //
	return true;                                                                                                          // 44
};                                                                                                                     // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/archiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.archiveRoom = function (rid) {                                                                              // 1
	RocketChat.models.Rooms.archiveById(rid);                                                                             // 2
	RocketChat.models.Subscriptions.archiveByRoomId(rid);                                                                 // 3
	RocketChat.callbacks.run('afterRoomArchived', RocketChat.models.Rooms.findOneById(rid), Meteor.user());               // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkUsernameAvailability.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkUsernameAvailability.coffee.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.checkUsernameAvailability = function (username) {                                                           // 1
  var usernameBlackList;                                                                                               // 2
  usernameBlackList = [];                                                                                              // 2
  return RocketChat.settings.get('Accounts_BlockedUsernameList', function (_this) {                                    // 4
    return function (key, value) {                                                                                     // 5
      var i, len, regex, restrictedUsername;                                                                           // 4
      usernameBlackList = _.map(value.split(','), function (username) {                                                // 4
        return username.trim();                                                                                        // 8
      });                                                                                                              // 4
                                                                                                                       //
      if (usernameBlackList.length !== 0) {                                                                            // 5
        for (i = 0, len = usernameBlackList.length; i < len; i++) {                                                    // 6
          restrictedUsername = usernameBlackList[i];                                                                   // 12
          regex = new RegExp('^' + s.escapeRegExp(restrictedUsername) + '$', 'i');                                     // 7
                                                                                                                       //
          if (regex.test(s.trim(s.escapeRegExp(username)))) {                                                          // 8
            return false;                                                                                              // 8
          }                                                                                                            // 16
        }                                                                                                              // 5
      }                                                                                                                // 18
                                                                                                                       //
      return !Meteor.users.findOne({                                                                                   // 9
        username: {                                                                                                    // 9
          $regex: new RegExp("^" + s.trim(s.escapeRegExp(username)) + "$", "i")                                        // 9
        }                                                                                                              // 9
      });                                                                                                              // 9
    };                                                                                                                 // 3
  }(this));                                                                                                            // 3
};                                                                                                                     // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkEmailAvailability.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkEmailAvailability.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.checkEmailAvailability = function (email) {                                                                 // 1
	return !Meteor.users.findOne({                                                                                        // 2
		'emails.address': {                                                                                                  // 2
			$regex: new RegExp("^" + s.trim(s.escapeRegExp(email)) + "$", 'i')                                                  // 2
		}                                                                                                                    // 2
	});                                                                                                                   // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/createRoom.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals RocketChat */RocketChat.createRoom = function (type, name, owner, members, readOnly) {                      // 1
	var extraData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};                               // 2
	name = s.trim(name);                                                                                                  // 3
	owner = s.trim(owner);                                                                                                // 4
	members = [].concat(members);                                                                                         // 5
                                                                                                                       //
	if (!name) {                                                                                                          // 7
		throw new Meteor.Error('error-invalid-name', 'Invalid name', {                                                       // 8
			"function": 'RocketChat.createRoom'                                                                                 // 8
		});                                                                                                                  // 8
	}                                                                                                                     // 9
                                                                                                                       //
	owner = RocketChat.models.Users.findOneByUsername(owner, {                                                            // 11
		fields: {                                                                                                            // 11
			username: 1                                                                                                         // 11
		}                                                                                                                    // 11
	});                                                                                                                   // 11
                                                                                                                       //
	if (!owner) {                                                                                                         // 12
		throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                       // 13
			"function": 'RocketChat.createRoom'                                                                                 // 13
		});                                                                                                                  // 13
	}                                                                                                                     // 14
                                                                                                                       //
	var nameValidation = void 0;                                                                                          // 16
                                                                                                                       //
	try {                                                                                                                 // 17
		nameValidation = new RegExp("^" + RocketChat.settings.get('UTF8_Names_Validation') + "$");                           // 18
	} catch (error) {                                                                                                     // 19
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                    // 20
	}                                                                                                                     // 21
                                                                                                                       //
	if (!nameValidation.test(name)) {                                                                                     // 23
		throw new Meteor.Error('error-invalid-name', 'Invalid name', {                                                       // 24
			"function": 'RocketChat.createRoom'                                                                                 // 24
		});                                                                                                                  // 24
	}                                                                                                                     // 25
                                                                                                                       //
	var now = new Date();                                                                                                 // 27
                                                                                                                       //
	if (!_.contains(members, owner.username)) {                                                                           // 28
		members.push(owner.username);                                                                                        // 29
	} // avoid duplicate names                                                                                            // 30
                                                                                                                       //
                                                                                                                       //
	var room = RocketChat.models.Rooms.findOneByName(name);                                                               // 33
                                                                                                                       //
	if (room) {                                                                                                           // 34
		if (room.archived) {                                                                                                 // 35
			throw new Meteor.Error('error-archived-duplicate-name', "There's an archived channel with name " + name, {          // 36
				"function": 'RocketChat.createRoom',                                                                               // 36
				room_name: name                                                                                                    // 36
			});                                                                                                                 // 36
		} else {                                                                                                             // 37
			throw new Meteor.Error('error-duplicate-channel-name', "A channel with name '" + name + "' exists", {               // 38
				"function": 'RocketChat.createRoom',                                                                               // 38
				room_name: name                                                                                                    // 38
			});                                                                                                                 // 38
		}                                                                                                                    // 39
	}                                                                                                                     // 40
                                                                                                                       //
	if (type === 'c') {                                                                                                   // 42
		RocketChat.callbacks.run('beforeCreateChannel', owner, {                                                             // 43
			t: 'c',                                                                                                             // 44
			name: name,                                                                                                         // 45
			ts: now,                                                                                                            // 46
			ro: readOnly === true,                                                                                              // 47
			sysMes: readOnly !== true,                                                                                          // 48
			usernames: members,                                                                                                 // 49
			u: {                                                                                                                // 50
				_id: owner._id,                                                                                                    // 51
				username: owner.username                                                                                           // 52
			}                                                                                                                   // 50
		});                                                                                                                  // 43
	}                                                                                                                     // 55
                                                                                                                       //
	extraData = Object.assign({}, extraData, {                                                                            // 57
		ts: now,                                                                                                             // 58
		ro: readOnly === true,                                                                                               // 59
		sysMes: readOnly !== true                                                                                            // 60
	});                                                                                                                   // 57
	room = RocketChat.models.Rooms.createWithTypeNameUserAndUsernames(type, name, owner, members, extraData);             // 63
                                                                                                                       //
	for (var _iterator = members, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		var _ref;                                                                                                            // 65
                                                                                                                       //
		if (_isArray) {                                                                                                      // 65
			if (_i >= _iterator.length) break;                                                                                  // 65
			_ref = _iterator[_i++];                                                                                             // 65
		} else {                                                                                                             // 65
			_i = _iterator.next();                                                                                              // 65
			if (_i.done) break;                                                                                                 // 65
			_ref = _i.value;                                                                                                    // 65
		}                                                                                                                    // 65
                                                                                                                       //
		var username = _ref;                                                                                                 // 65
		var member = RocketChat.models.Users.findOneByUsername(username, {                                                   // 66
			fields: {                                                                                                           // 66
				username: 1                                                                                                        // 66
			}                                                                                                                   // 66
		});                                                                                                                  // 66
                                                                                                                       //
		if (!member) {                                                                                                       // 67
			continue;                                                                                                           // 68
		} // make all room members muted by default, unless they have the post-readonly permission                           // 69
                                                                                                                       //
                                                                                                                       //
		if (readOnly === true && !RocketChat.authz.hasPermission(member._id, 'post-readonly')) {                             // 72
			RocketChat.models.Rooms.muteUsernameByRoomId(room._id, username);                                                   // 73
		}                                                                                                                    // 74
                                                                                                                       //
		var extra = {                                                                                                        // 76
			open: true                                                                                                          // 76
		};                                                                                                                   // 76
                                                                                                                       //
		if (username === owner.username) {                                                                                   // 78
			extra.ls = now;                                                                                                     // 79
		}                                                                                                                    // 80
                                                                                                                       //
		RocketChat.models.Subscriptions.createWithRoomAndUser(room, member, extra);                                          // 82
	}                                                                                                                     // 83
                                                                                                                       //
	RocketChat.authz.addUserRoles(owner._id, ['owner'], room._id);                                                        // 85
                                                                                                                       //
	if (type === 'c') {                                                                                                   // 87
		Meteor.defer(function () {                                                                                           // 88
			RocketChat.callbacks.run('afterCreateChannel', owner, room);                                                        // 89
		});                                                                                                                  // 90
	} else if (type === 'p') {                                                                                            // 91
		Meteor.defer(function () {                                                                                           // 92
			RocketChat.callbacks.run('afterCreatePrivateGroup', owner, room);                                                   // 93
		});                                                                                                                  // 94
	}                                                                                                                     // 95
                                                                                                                       //
	return {                                                                                                              // 97
		rid: room._id                                                                                                        // 98
	};                                                                                                                    // 97
};                                                                                                                     // 100
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals FileUpload */RocketChat.deleteMessage = function (message, user) {                                          // 1
	var keepHistory = RocketChat.settings.get('Message_KeepHistory');                                                     // 3
	var showDeletedStatus = RocketChat.settings.get('Message_ShowDeletedStatus');                                         // 4
	var deletedMsg = void 0;                                                                                              // 5
                                                                                                                       //
	if (keepHistory) {                                                                                                    // 7
		if (showDeletedStatus) {                                                                                             // 8
			RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);                                                  // 9
		} else {                                                                                                             // 10
			RocketChat.models.Messages.setHiddenById(message._id, true);                                                        // 11
		}                                                                                                                    // 12
                                                                                                                       //
		if (message.file && message.file._id) {                                                                              // 14
			RocketChat.models.Uploads.update(message.file._id, {                                                                // 15
				$set: {                                                                                                            // 15
					_hidden: true                                                                                                     // 15
				}                                                                                                                  // 15
			});                                                                                                                 // 15
		}                                                                                                                    // 16
	} else {                                                                                                              // 17
		if (!showDeletedStatus) {                                                                                            // 18
			deletedMsg = RocketChat.models.Messages.findOneById(message._id);                                                   // 19
			RocketChat.models.Messages.removeById(message._id);                                                                 // 20
		}                                                                                                                    // 21
                                                                                                                       //
		if (message.file && message.file._id) {                                                                              // 23
			FileUpload.delete(message.file._id);                                                                                // 24
		}                                                                                                                    // 25
                                                                                                                       //
		Meteor.defer(function () {                                                                                           // 27
			RocketChat.callbacks.run('afterDeleteMessage', deletedMsg);                                                         // 28
		});                                                                                                                  // 29
	}                                                                                                                     // 30
                                                                                                                       //
	if (showDeletedStatus) {                                                                                              // 32
		RocketChat.models.Messages.setAsDeletedByIdAndUser(message._id, user);                                               // 33
	} else {                                                                                                              // 34
		RocketChat.Notifications.notifyRoom(message.rid, 'deleteMessage', {                                                  // 35
			_id: message._id                                                                                                    // 35
		});                                                                                                                  // 35
	}                                                                                                                     // 36
};                                                                                                                     // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteUser.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals RocketChat */RocketChat.deleteUser = function (userId) {                                                    // 1
	var user = RocketChat.models.Users.findOneById(userId);                                                               // 3
	RocketChat.models.Messages.removeByUserId(userId); // Remove user messages                                            // 5
                                                                                                                       //
	RocketChat.models.Subscriptions.findByUserId(userId).forEach(function (subscription) {                                // 6
		var room = RocketChat.models.Rooms.findOneById(subscription.rid);                                                    // 7
                                                                                                                       //
		if (room) {                                                                                                          // 8
			if (room.t !== 'c' && room.usernames.length === 1) {                                                                // 9
				RocketChat.models.Rooms.removeById(subscription.rid); // Remove non-channel rooms with only 1 user (the one being deleted)
			}                                                                                                                   // 11
                                                                                                                       //
			if (room.t === 'd') {                                                                                               // 12
				RocketChat.models.Subscriptions.removeByRoomId(subscription.rid);                                                  // 13
				RocketChat.models.Messages.removeByRoomId(subscription.rid);                                                       // 14
			}                                                                                                                   // 15
		}                                                                                                                    // 16
	});                                                                                                                   // 17
	RocketChat.models.Subscriptions.removeByUserId(userId); // Remove user subscriptions                                  // 19
                                                                                                                       //
	RocketChat.models.Rooms.removeByTypeContainingUsername('d', user.username); // Remove direct rooms with the user      // 20
                                                                                                                       //
	RocketChat.models.Rooms.removeUsernameFromAll(user.username); // Remove user from all other rooms                     // 21
	// removes user's avatar                                                                                              // 23
                                                                                                                       //
	if (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {                                                  // 24
		RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(user.username + ".jpg"));                                 // 25
	}                                                                                                                     // 26
                                                                                                                       //
	RocketChat.models.Integrations.disableByUserId(userId); // Disables all the integrations which rely on the user being deleted.
                                                                                                                       //
	RocketChat.models.Users.removeById(userId); // Remove user from users database                                        // 30
};                                                                                                                     // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFullUserData.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/getFullUserData.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals RocketChat */RocketChat.getFullUserData = function (_ref) {                                                 // 1
	var userId = _ref.userId,                                                                                             // 2
	    filter = _ref.filter,                                                                                             // 2
	    limit = _ref.limit;                                                                                               // 2
	var fields = {                                                                                                        // 3
		name: 1,                                                                                                             // 4
		username: 1,                                                                                                         // 5
		status: 1,                                                                                                           // 6
		utcOffset: 1,                                                                                                        // 7
		type: 1,                                                                                                             // 8
		active: 1                                                                                                            // 9
	};                                                                                                                    // 3
                                                                                                                       //
	if (RocketChat.authz.hasPermission(userId, 'view-full-other-user-info')) {                                            // 12
		fields = _.extend(fields, {                                                                                          // 13
			emails: 1,                                                                                                          // 14
			phone: 1,                                                                                                           // 15
			statusConnection: 1,                                                                                                // 16
			createdAt: 1,                                                                                                       // 17
			lastLogin: 1,                                                                                                       // 18
			services: 1,                                                                                                        // 19
			requirePasswordChange: 1,                                                                                           // 20
			requirePasswordChangeReason: 1,                                                                                     // 21
			roles: 1,                                                                                                           // 22
			customFields: 1                                                                                                     // 23
		});                                                                                                                  // 13
	} else if (limit !== 0) {                                                                                             // 25
		limit = 1;                                                                                                           // 26
	}                                                                                                                     // 27
                                                                                                                       //
	filter = s.trim(filter);                                                                                              // 29
                                                                                                                       //
	if (!filter && limit === 1) {                                                                                         // 31
		return undefined;                                                                                                    // 32
	}                                                                                                                     // 33
                                                                                                                       //
	var options = {                                                                                                       // 35
		fields: fields,                                                                                                      // 36
		limit: limit,                                                                                                        // 37
		sort: {                                                                                                              // 38
			username: 1                                                                                                         // 38
		}                                                                                                                    // 38
	};                                                                                                                    // 35
                                                                                                                       //
	if (filter) {                                                                                                         // 41
		if (limit === 1) {                                                                                                   // 42
			return RocketChat.models.Users.findByUsername(filter, options);                                                     // 43
		} else {                                                                                                             // 44
			var filterReg = new RegExp(s.escapeRegExp(filter), 'i');                                                            // 45
			return RocketChat.models.Users.findByUsernameNameOrEmailAddress(filterReg, options);                                // 46
		}                                                                                                                    // 47
	}                                                                                                                     // 48
                                                                                                                       //
	return RocketChat.models.Users.find({}, options);                                                                     // 50
};                                                                                                                     // 51
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomByNameOrIdWithOptionToJoin.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals RocketChat */RocketChat.getRoomByNameOrIdWithOptionToJoin = function () {                                   // 1
	function _getRoomByNameOrIdWithOptionToJoin(_ref) {                                                                   // 2
		var currentUserId = _ref.currentUserId,                                                                              // 2
		    nameOrId = _ref.nameOrId,                                                                                        // 2
		    _ref$type = _ref.type,                                                                                           // 2
		    type = _ref$type === undefined ? '' : _ref$type,                                                                 // 2
		    _ref$tryDirectByUserI = _ref.tryDirectByUserIdOnly,                                                              // 2
		    tryDirectByUserIdOnly = _ref$tryDirectByUserI === undefined ? false : _ref$tryDirectByUserI,                     // 2
		    _ref$joinChannel = _ref.joinChannel,                                                                             // 2
		    joinChannel = _ref$joinChannel === undefined ? true : _ref$joinChannel,                                          // 2
		    _ref$errorOnEmpty = _ref.errorOnEmpty,                                                                           // 2
		    errorOnEmpty = _ref$errorOnEmpty === undefined ? true : _ref$errorOnEmpty;                                       // 2
		var room = void 0; //If the nameOrId starts with #, then let's try to find a channel or group                        // 3
                                                                                                                       //
		if (nameOrId.startsWith('#')) {                                                                                      // 6
			nameOrId = nameOrId.substring(1);                                                                                   // 7
			room = RocketChat.models.Rooms.findOneByIdOrName(nameOrId);                                                         // 8
		} else if (nameOrId.startsWith('@') || type === 'd') {                                                               // 9
			//If the nameOrId starts with @ OR type is 'd', then let's try just a direct message                                // 10
			nameOrId = nameOrId.replace('@', '');                                                                               // 11
			var roomUser = void 0;                                                                                              // 13
                                                                                                                       //
			if (tryDirectByUserIdOnly) {                                                                                        // 14
				roomUser = RocketChat.models.Users.findOneById(nameOrId);                                                          // 15
			} else {                                                                                                            // 16
				roomUser = RocketChat.models.Users.findOne({                                                                       // 17
					$or: [{                                                                                                           // 18
						_id: nameOrId                                                                                                    // 18
					}, {                                                                                                              // 18
						username: nameOrId                                                                                               // 18
					}]                                                                                                                // 18
				});                                                                                                                // 17
			}                                                                                                                   // 20
                                                                                                                       //
			var rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;                          // 22
			room = RocketChat.models.Rooms.findOneById(rid); //If the room hasn't been found yet, let's try some more           // 23
                                                                                                                       //
			if (!_.isObject(room)) {                                                                                            // 26
				//If the roomUser wasn't found, then there's no destination to point towards                                       // 27
				//so return out based upon errorOnEmpty                                                                            // 28
				if (!_.isObject(roomUser)) {                                                                                       // 29
					if (errorOnEmpty) {                                                                                               // 30
						throw new Meteor.Error('invalid-channel');                                                                       // 31
					} else {                                                                                                          // 32
						return;                                                                                                          // 33
					}                                                                                                                 // 34
				}                                                                                                                  // 35
                                                                                                                       //
				room = Meteor.runAsUser(currentUserId, function () {                                                               // 37
					var _Meteor$call = Meteor.call('createDirectMessage', roomUser.username),                                         // 37
					    rid = _Meteor$call.rid;                                                                                       // 37
                                                                                                                       //
					return RocketChat.models.Rooms.findOneById(rid);                                                                  // 39
				});                                                                                                                // 40
			}                                                                                                                   // 41
		} else {                                                                                                             // 42
			//Otherwise, we'll treat this as a channel or group.                                                                // 43
			room = RocketChat.models.Rooms.findOneByIdOrName(nameOrId);                                                         // 44
		} //If no room was found, handle the room return based upon errorOnEmpty                                             // 45
                                                                                                                       //
                                                                                                                       //
		if (!room && errorOnEmpty) {                                                                                         // 48
			throw new Meteor.Error('invalid-channel');                                                                          // 49
		} else if (!room) {                                                                                                  // 50
			return;                                                                                                             // 51
		} //If a room was found and they provided a type to search, then check                                               // 52
		//and if the type found isn't what we're looking for then handle                                                     // 55
		//the return based upon errorOnEmpty                                                                                 // 56
                                                                                                                       //
                                                                                                                       //
		if (type && room.t !== type) {                                                                                       // 57
			if (errorOnEmpty) {                                                                                                 // 58
				throw new Meteor.Error('invalid-channel');                                                                         // 59
			} else {                                                                                                            // 60
				return;                                                                                                            // 61
			}                                                                                                                   // 62
		} //If the room type is channel and joinChannel has been passed, try to join them                                    // 63
		//if they can't join the room, this will error out!                                                                  // 66
                                                                                                                       //
                                                                                                                       //
		if (room.t === 'c' && joinChannel) {                                                                                 // 67
			var sub = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);                        // 68
                                                                                                                       //
			if (!sub) {                                                                                                         // 70
				Meteor.runAsUser(currentUserId, function () {                                                                      // 71
					return Meteor.call('joinRoom', room._id);                                                                         // 72
				});                                                                                                                // 73
			}                                                                                                                   // 74
		}                                                                                                                    // 75
                                                                                                                       //
		return room;                                                                                                         // 77
	}                                                                                                                     // 78
                                                                                                                       //
	return _getRoomByNameOrIdWithOptionToJoin;                                                                            // 2
}();                                                                                                                   // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUserFromRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/removeUserFromRoom.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.removeUserFromRoom = function (rid, user) {                                                                 // 1
	var room = RocketChat.models.Rooms.findOneById(rid);                                                                  // 2
                                                                                                                       //
	if (room) {                                                                                                           // 4
		RocketChat.callbacks.run('beforeLeaveRoom', user, room);                                                             // 5
		RocketChat.models.Rooms.removeUsernameById(rid, user.username);                                                      // 6
                                                                                                                       //
		if (room.usernames.indexOf(user.username) !== -1) {                                                                  // 8
			var removedUser = user;                                                                                             // 9
			RocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rid, removedUser);                                      // 10
		}                                                                                                                    // 11
                                                                                                                       //
		if (room.t === 'l') {                                                                                                // 13
			RocketChat.models.Messages.createCommandWithRoomIdAndUser('survey', rid, user);                                     // 14
		}                                                                                                                    // 15
                                                                                                                       //
		RocketChat.models.Subscriptions.removeByRoomIdAndUserId(rid, user._id);                                              // 17
		Meteor.defer(function () {                                                                                           // 19
			RocketChat.callbacks.run('afterLeaveRoom', user, room);                                                             // 20
		});                                                                                                                  // 21
	}                                                                                                                     // 22
};                                                                                                                     // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveUser.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals Gravatar */RocketChat.saveUser = function (userId, userData) {                                              // 1
	var user = RocketChat.models.Users.findOneById(userId);                                                               // 3
                                                                                                                       //
	var existingRoles = _.pluck(RocketChat.authz.getRoles(), '_id');                                                      // 4
                                                                                                                       //
	if (userData._id && userId !== userData._id && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {     // 6
		throw new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed', {                                  // 7
			method: 'insertOrUpdateUser',                                                                                       // 7
			action: 'Editing_user'                                                                                              // 7
		});                                                                                                                  // 7
	}                                                                                                                     // 8
                                                                                                                       //
	if (!userData._id && !RocketChat.authz.hasPermission(userId, 'create-user')) {                                        // 10
		throw new Meteor.Error('error-action-not-allowed', 'Adding user is not allowed', {                                   // 11
			method: 'insertOrUpdateUser',                                                                                       // 11
			action: 'Adding_user'                                                                                               // 11
		});                                                                                                                  // 11
	}                                                                                                                     // 12
                                                                                                                       //
	if (userData.roles && _.difference(userData.roles, existingRoles).length > 0) {                                       // 14
		throw new Meteor.Error('error-action-not-allowed', 'The field Roles consist invalid role name', {                    // 15
			method: 'insertOrUpdateUser',                                                                                       // 15
			action: 'Assign_role'                                                                                               // 15
		});                                                                                                                  // 15
	}                                                                                                                     // 16
                                                                                                                       //
	if (userData.roles && _.indexOf(userData.roles, 'admin') >= 0 && !RocketChat.authz.hasPermission(userId, 'assign-admin-role')) {
		throw new Meteor.Error('error-action-not-allowed', 'Assigning admin is not allowed', {                               // 19
			method: 'insertOrUpdateUser',                                                                                       // 19
			action: 'Assign_admin'                                                                                              // 19
		});                                                                                                                  // 19
	}                                                                                                                     // 20
                                                                                                                       //
	if (!userData._id && !s.trim(userData.name)) {                                                                        // 22
		throw new Meteor.Error('error-the-field-is-required', 'The field Name is required', {                                // 23
			method: 'insertOrUpdateUser',                                                                                       // 23
			field: 'Name'                                                                                                       // 23
		});                                                                                                                  // 23
	}                                                                                                                     // 24
                                                                                                                       //
	if (!userData._id && !s.trim(userData.username)) {                                                                    // 26
		throw new Meteor.Error('error-the-field-is-required', 'The field Username is required', {                            // 27
			method: 'insertOrUpdateUser',                                                                                       // 27
			field: 'Username'                                                                                                   // 27
		});                                                                                                                  // 27
	}                                                                                                                     // 28
                                                                                                                       //
	var nameValidation = void 0;                                                                                          // 30
                                                                                                                       //
	try {                                                                                                                 // 32
		nameValidation = new RegExp("^" + RocketChat.settings.get('UTF8_Names_Validation') + "$");                           // 33
	} catch (e) {                                                                                                         // 34
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                    // 35
	}                                                                                                                     // 36
                                                                                                                       //
	if (userData.username && !nameValidation.test(userData.username)) {                                                   // 38
		throw new Meteor.Error('error-input-is-not-a-valid-field', _.escape(userData.username) + " is not a valid username", {
			method: 'insertOrUpdateUser',                                                                                       // 39
			input: userData.username,                                                                                           // 39
			field: 'Username'                                                                                                   // 39
		});                                                                                                                  // 39
	}                                                                                                                     // 40
                                                                                                                       //
	if (!userData._id && !userData.password) {                                                                            // 42
		throw new Meteor.Error('error-the-field-is-required', 'The field Password is required', {                            // 43
			method: 'insertOrUpdateUser',                                                                                       // 43
			field: 'Password'                                                                                                   // 43
		});                                                                                                                  // 43
	}                                                                                                                     // 44
                                                                                                                       //
	if (!userData._id) {                                                                                                  // 46
		if (!RocketChat.checkUsernameAvailability(userData.username)) {                                                      // 47
			throw new Meteor.Error('error-field-unavailable', _.escape(userData.username) + " is already in use :(", {          // 48
				method: 'insertOrUpdateUser',                                                                                      // 48
				field: userData.username                                                                                           // 48
			});                                                                                                                 // 48
		}                                                                                                                    // 49
                                                                                                                       //
		if (userData.email && !RocketChat.checkEmailAvailability(userData.email)) {                                          // 51
			throw new Meteor.Error('error-field-unavailable', _.escape(userData.email) + " is already in use :(", {             // 52
				method: 'insertOrUpdateUser',                                                                                      // 52
				field: userData.email                                                                                              // 52
			});                                                                                                                 // 52
		}                                                                                                                    // 53
                                                                                                                       //
		RocketChat.validateEmailDomain(userData.email); // insert user                                                       // 55
                                                                                                                       //
		var createUser = {                                                                                                   // 58
			username: userData.username,                                                                                        // 59
			password: userData.password,                                                                                        // 60
			joinDefaultChannels: userData.joinDefaultChannels                                                                   // 61
		};                                                                                                                   // 58
                                                                                                                       //
		if (userData.email) {                                                                                                // 63
			createUser.email = userData.email;                                                                                  // 64
		}                                                                                                                    // 65
                                                                                                                       //
		var _id = Accounts.createUser(createUser);                                                                           // 67
                                                                                                                       //
		var updateUser = {                                                                                                   // 69
			$set: {                                                                                                             // 70
				name: userData.name,                                                                                               // 71
				roles: userData.roles || ['user']                                                                                  // 72
			}                                                                                                                   // 70
		};                                                                                                                   // 69
                                                                                                                       //
		if (userData.requirePasswordChange) {                                                                                // 76
			updateUser.$set.requirePasswordChange = userData.requirePasswordChange;                                             // 77
		}                                                                                                                    // 78
                                                                                                                       //
		if (userData.verified) {                                                                                             // 80
			updateUser.$set['emails.0.verified'] = true;                                                                        // 81
		}                                                                                                                    // 82
                                                                                                                       //
		Meteor.users.update({                                                                                                // 84
			_id: _id                                                                                                            // 84
		}, updateUser);                                                                                                      // 84
                                                                                                                       //
		if (userData.sendWelcomeEmail) {                                                                                     // 86
			var header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                        // 87
			var footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                        // 88
			var subject = void 0;                                                                                               // 90
			var html = void 0;                                                                                                  // 91
                                                                                                                       //
			if (RocketChat.settings.get('Accounts_UserAddedEmail_Customized')) {                                                // 93
				subject = RocketChat.settings.get('Accounts_UserAddedEmailSubject');                                               // 94
				html = RocketChat.settings.get('Accounts_UserAddedEmail');                                                         // 95
			} else {                                                                                                            // 96
				subject = TAPi18n.__('Accounts_UserAddedEmailSubject_Default', {                                                   // 97
					lng: user.language || RocketChat.settings.get('language') || 'en'                                                 // 97
				});                                                                                                                // 97
				html = TAPi18n.__('Accounts_UserAddedEmail_Default', {                                                             // 98
					lng: user.language || RocketChat.settings.get('language') || 'en'                                                 // 98
				});                                                                                                                // 98
			}                                                                                                                   // 99
                                                                                                                       //
			subject = RocketChat.placeholders.replace(subject);                                                                 // 101
			html = RocketChat.placeholders.replace(html, {                                                                      // 102
				name: userData.name,                                                                                               // 103
				email: userData.email,                                                                                             // 104
				password: userData.password                                                                                        // 105
			});                                                                                                                 // 102
			var email = {                                                                                                       // 108
				to: userData.email,                                                                                                // 109
				from: RocketChat.settings.get('From_Email'),                                                                       // 110
				subject: subject,                                                                                                  // 111
				html: header + html + footer                                                                                       // 112
			};                                                                                                                  // 108
			Meteor.defer(function () {                                                                                          // 115
				try {                                                                                                              // 116
					Email.send(email);                                                                                                // 117
				} catch (error) {                                                                                                  // 118
					throw new Meteor.Error('error-email-send-failed', "Error trying to send email: " + error.message, {               // 119
						"function": 'RocketChat.saveUser',                                                                               // 119
						message: error.message                                                                                           // 119
					});                                                                                                               // 119
				}                                                                                                                  // 120
			});                                                                                                                 // 121
		}                                                                                                                    // 122
                                                                                                                       //
		userData._id = _id;                                                                                                  // 124
                                                                                                                       //
		if (RocketChat.settings.get('Accounts_SetDefaultAvatar') === true && userData.email) {                               // 126
			var gravatarUrl = Gravatar.imageUrl(userData.email, {                                                               // 127
				"default": '404',                                                                                                  // 127
				size: 200,                                                                                                         // 127
				secure: true                                                                                                       // 127
			});                                                                                                                 // 127
                                                                                                                       //
			try {                                                                                                               // 129
				RocketChat.setUserAvatar(userData, gravatarUrl, '', 'url');                                                        // 130
			} catch (e) {//Ignore this error for now, as it not being successful isn't bad                                      // 131
			}                                                                                                                   // 133
		}                                                                                                                    // 134
                                                                                                                       //
		return _id;                                                                                                          // 136
	} else {                                                                                                              // 137
		// update user                                                                                                       // 138
		if (userData.username) {                                                                                             // 139
			RocketChat.setUsername(userData._id, userData.username);                                                            // 140
		}                                                                                                                    // 141
                                                                                                                       //
		if (userData.name) {                                                                                                 // 143
			RocketChat.setRealName(userData._id, userData.name);                                                                // 144
		}                                                                                                                    // 145
                                                                                                                       //
		if (userData.email) {                                                                                                // 147
			RocketChat.setEmail(userData._id, userData.email);                                                                  // 148
		}                                                                                                                    // 149
                                                                                                                       //
		if (userData.password && userData.password.trim() && RocketChat.authz.hasPermission(userId, 'edit-other-user-password')) {
			Accounts.setPassword(userData._id, userData.password.trim());                                                       // 152
		}                                                                                                                    // 153
                                                                                                                       //
		var _updateUser = {                                                                                                  // 155
			$set: {}                                                                                                            // 156
		};                                                                                                                   // 155
                                                                                                                       //
		if (userData.roles) {                                                                                                // 159
			_updateUser.$set.roles = userData.roles;                                                                            // 160
		}                                                                                                                    // 161
                                                                                                                       //
		if (userData.requirePasswordChange) {                                                                                // 163
			_updateUser.$set.requirePasswordChange = userData.requirePasswordChange;                                            // 164
		}                                                                                                                    // 165
                                                                                                                       //
		if (userData.verified) {                                                                                             // 167
			_updateUser.$set['emails.0.verified'] = userData.verified;                                                          // 168
		}                                                                                                                    // 169
                                                                                                                       //
		Meteor.users.update({                                                                                                // 171
			_id: userData._id                                                                                                   // 171
		}, _updateUser);                                                                                                     // 171
		return true;                                                                                                         // 173
	}                                                                                                                     // 174
};                                                                                                                     // 175
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveCustomFields.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveCustomFields.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.saveCustomFields = function (userId, formData) {                                                            // 1
	if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) !== '') {                                                // 2
		var customFieldsMeta = void 0;                                                                                       // 3
                                                                                                                       //
		try {                                                                                                                // 4
			customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));                                    // 5
		} catch (e) {                                                                                                        // 6
			throw new Meteor.Error('error-invalid-customfield-json', 'Invalid JSON for Custom Fields');                         // 7
		}                                                                                                                    // 8
                                                                                                                       //
		var customFields = {};                                                                                               // 10
		Object.keys(customFieldsMeta).forEach(function (fieldName) {                                                         // 12
			var field = customFieldsMeta[fieldName];                                                                            // 13
			customFields[fieldName] = formData[fieldName];                                                                      // 15
                                                                                                                       //
			if (field.required && !formData[fieldName]) {                                                                       // 16
				throw new Meteor.Error('error-user-registration-custom-field', "Field " + fieldName + " is required", {            // 17
					method: 'registerUser'                                                                                            // 17
				});                                                                                                                // 17
			}                                                                                                                   // 18
                                                                                                                       //
			if (field.type === 'select' && field.options.indexOf(formData[fieldName]) === -1) {                                 // 20
				throw new Meteor.Error('error-user-registration-custom-field', "Value for field " + fieldName + " is invalid", {   // 21
					method: 'registerUser'                                                                                            // 21
				});                                                                                                                // 21
			}                                                                                                                   // 22
                                                                                                                       //
			if (field.maxLength && formData[fieldName].length > field.maxLength) {                                              // 24
				throw new Meteor.Error('error-user-registration-custom-field', "Max length of field " + fieldName + " " + field.maxLength, {
					method: 'registerUser'                                                                                            // 25
				});                                                                                                                // 25
			}                                                                                                                   // 26
                                                                                                                       //
			if (field.minLength && formData[fieldName].length < field.minLength) {                                              // 28
				throw new Meteor.Error('error-user-registration-custom-field', "Min length of field " + fieldName + " " + field.minLength, {
					method: 'registerUser'                                                                                            // 29
				});                                                                                                                // 29
			}                                                                                                                   // 30
		}); // for fieldName, field of customFieldsMeta                                                                      // 31
                                                                                                                       //
		RocketChat.models.Users.setCustomFields(userId, customFields);                                                       // 34
		Object.keys(customFields).forEach(function (fieldName) {                                                             // 36
			if (!customFieldsMeta[fieldName].modifyRecordField) {                                                               // 37
				return;                                                                                                            // 38
			}                                                                                                                   // 39
                                                                                                                       //
			var modifyRecordField = customFieldsMeta[fieldName].modifyRecordField;                                              // 41
			var update = {};                                                                                                    // 42
                                                                                                                       //
			if (modifyRecordField.array) {                                                                                      // 43
				update.$addToSet = {};                                                                                             // 44
				update.$addToSet[modifyRecordField.field] = customFields[fieldName];                                               // 45
			} else {                                                                                                            // 46
				update.$set = {};                                                                                                  // 47
				update.$set[modifyRecordField.field] = customFields[fieldName];                                                    // 48
			}                                                                                                                   // 49
                                                                                                                       //
			RocketChat.models.Users.update(userId, update);                                                                     // 51
		});                                                                                                                  // 52
		return true;                                                                                                         // 54
	}                                                                                                                     // 55
};                                                                                                                     // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/sendMessage.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.sendMessage = function (user, message, room, upsert) {                                                      // 1
  var _id, sandstormSessionId, updated_room, urls;                                                                     // 2
                                                                                                                       //
  if (upsert == null) {                                                                                                // 3
    upsert = false;                                                                                                    // 1
  }                                                                                                                    // 5
                                                                                                                       //
  if (!user || !message || !room._id) {                                                                                // 2
    return false;                                                                                                      // 3
  }                                                                                                                    // 8
                                                                                                                       //
  if (message.ts == null) {                                                                                            // 5
    message.ts = new Date();                                                                                           // 6
  }                                                                                                                    // 11
                                                                                                                       //
  message.u = _.pick(user, ['_id', 'username']);                                                                       // 8
                                                                                                                       //
  if (!Match.test(message.msg, String)) {                                                                              // 10
    message.msg = '';                                                                                                  // 11
  }                                                                                                                    // 15
                                                                                                                       //
  message.rid = room._id;                                                                                              // 13
                                                                                                                       //
  if (room.usernames == null || room.usernames.length === 0) {                                                         // 15
    updated_room = RocketChat.models.Rooms.findOneById(room._id);                                                      // 16
                                                                                                                       //
    if (updated_room != null) {                                                                                        // 17
      room = updated_room;                                                                                             // 18
    } else {                                                                                                           // 17
      room.usernames = [];                                                                                             // 20
    }                                                                                                                  // 15
  }                                                                                                                    // 24
                                                                                                                       //
  if (message.parseUrls !== false) {                                                                                   // 22
    if (urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g)) {
      message.urls = urls.map(function (url) {                                                                         // 24
        return {                                                                                                       // 28
          url: url                                                                                                     // 24
        };                                                                                                             // 24
      });                                                                                                              // 24
    }                                                                                                                  // 22
  }                                                                                                                    // 33
                                                                                                                       //
  message = RocketChat.callbacks.run('beforeSaveMessage', message);                                                    // 26
  sandstormSessionId = null;                                                                                           // 29
                                                                                                                       //
  if (message.sandstormSessionId) {                                                                                    // 30
    sandstormSessionId = message.sandstormSessionId;                                                                   // 31
    delete message.sandstormSessionId;                                                                                 // 32
  }                                                                                                                    // 39
                                                                                                                       //
  if (message._id != null && upsert) {                                                                                 // 34
    _id = message._id;                                                                                                 // 35
    delete message._id;                                                                                                // 36
    RocketChat.models.Messages.upsert({                                                                                // 37
      _id: _id,                                                                                                        // 37
      'u._id': message.u._id                                                                                           // 37
    }, message);                                                                                                       // 37
    message._id = _id;                                                                                                 // 38
  } else {                                                                                                             // 34
    message._id = RocketChat.models.Messages.insert(message);                                                          // 40
  } /*                                                                                                                 // 50
    	Defer other updates as their return is not interesting to the user                                                //
     */                                                                                                                //
                                                                                                                       //
  Meteor.defer(function () {                                                                                           // 45
    message.sandstormSessionId = sandstormSessionId;                                                                   // 47
    return RocketChat.callbacks.run('afterSaveMessage', message, room);                                                // 57
  });                                                                                                                  // 45
  return message;                                                                                                      // 50
};                                                                                                                     // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/settings.coffee.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var blockedSettings, hiddenSettings, ref, ref1;                                                                        // 1
blockedSettings = {};                                                                                                  // 1
                                                                                                                       //
if ((ref = process.env.SETTINGS_BLOCKED) != null) {                                                                    // 5
  ref.split(',').forEach(function (settingId) {                                                                        // 6
    return blockedSettings[settingId] = 1;                                                                             // 7
  });                                                                                                                  // 2
}                                                                                                                      // 9
                                                                                                                       //
hiddenSettings = {};                                                                                                   // 5
                                                                                                                       //
if ((ref1 = process.env.SETTINGS_HIDDEN) != null) {                                                                    // 13
  ref1.split(',').forEach(function (settingId) {                                                                       // 14
    return hiddenSettings[settingId] = 1;                                                                              // 15
  });                                                                                                                  // 6
}                                                                                                                      // 17
                                                                                                                       //
RocketChat.settings._sorter = {}; /*                                                                                   // 9
                                   * Add a setting                                                                     //
                                   * @param {String} _id                                                               //
                                   * @param {Mixed} value                                                              //
                                   * @param {Object} setting                                                           //
                                   */                                                                                  //
                                                                                                                       //
RocketChat.settings.add = function (_id, value, options) {                                                             // 17
  var base, existantSetting, name, query, ref2, ref3, ref4, ref5, updateOperations;                                    // 20
                                                                                                                       //
  if (options == null) {                                                                                               // 31
    options = {};                                                                                                      // 17
  }                                                                                                                    // 33
                                                                                                                       //
  if (!_id || value == null && (typeof process !== "undefined" && process !== null ? (ref2 = process.env) != null ? ref2['OVERWRITE_SETTING_' + _id] : void 0 : void 0) == null) {
    return false;                                                                                                      // 22
  }                                                                                                                    // 36
                                                                                                                       //
  if ((base = RocketChat.settings._sorter)[name = options.group] == null) {                                            // 37
    base[name] = 0;                                                                                                    // 38
  }                                                                                                                    // 39
                                                                                                                       //
  options.packageValue = value;                                                                                        // 26
  options.valueSource = 'packageValue';                                                                                // 27
  options.hidden = false;                                                                                              // 28
  options.blocked = options.blocked || false;                                                                          // 29
                                                                                                                       //
  if (options.sorter == null) {                                                                                        // 44
    options.sorter = RocketChat.settings._sorter[options.group]++;                                                     // 30
  }                                                                                                                    // 46
                                                                                                                       //
  if (options.enableQuery != null) {                                                                                   // 32
    options.enableQuery = JSON.stringify(options.enableQuery);                                                         // 33
  }                                                                                                                    // 49
                                                                                                                       //
  if (options.i18nDefaultQuery != null) {                                                                              // 35
    options.i18nDefaultQuery = JSON.stringify(options.i18nDefaultQuery);                                               // 36
  }                                                                                                                    // 52
                                                                                                                       //
  if ((typeof process !== "undefined" && process !== null ? (ref3 = process.env) != null ? ref3[_id] : void 0 : void 0) != null) {
    value = process.env[_id];                                                                                          // 39
                                                                                                                       //
    if (value.toLowerCase() === "true") {                                                                              // 40
      value = true;                                                                                                    // 41
    } else if (value.toLowerCase() === "false") {                                                                      // 40
      value = false;                                                                                                   // 43
    }                                                                                                                  // 59
                                                                                                                       //
    options.processEnvValue = value;                                                                                   // 44
    options.valueSource = 'processEnvValue';                                                                           // 45
  } else if (((ref4 = Meteor.settings) != null ? ref4[_id] : void 0) != null) {                                        // 38
    value = Meteor.settings[_id];                                                                                      // 48
    options.meteorSettingsValue = value;                                                                               // 49
    options.valueSource = 'meteorSettingsValue';                                                                       // 50
  }                                                                                                                    // 66
                                                                                                                       //
  if (options.i18nLabel == null) {                                                                                     // 52
    options.i18nLabel = _id;                                                                                           // 53
  }                                                                                                                    // 69
                                                                                                                       //
  if (options.i18nDescription == null) {                                                                               // 56
    options.i18nDescription = _id + "_Description";                                                                    // 57
  }                                                                                                                    // 72
                                                                                                                       //
  if (blockedSettings[_id] != null) {                                                                                  // 59
    options.blocked = true;                                                                                            // 60
  }                                                                                                                    // 75
                                                                                                                       //
  if (hiddenSettings[_id] != null) {                                                                                   // 62
    options.hidden = true;                                                                                             // 63
  }                                                                                                                    // 78
                                                                                                                       //
  if ((typeof process !== "undefined" && process !== null ? (ref5 = process.env) != null ? ref5['OVERWRITE_SETTING_' + _id] : void 0 : void 0) != null) {
    value = process.env['OVERWRITE_SETTING_' + _id];                                                                   // 66
                                                                                                                       //
    if (value.toLowerCase() === "true") {                                                                              // 67
      value = true;                                                                                                    // 68
    } else if (value.toLowerCase() === "false") {                                                                      // 67
      value = false;                                                                                                   // 70
    }                                                                                                                  // 85
                                                                                                                       //
    options.value = value;                                                                                             // 71
    options.processEnvValue = value;                                                                                   // 72
    options.valueSource = 'processEnvValue';                                                                           // 73
  }                                                                                                                    // 89
                                                                                                                       //
  updateOperations = {                                                                                                 // 75
    $set: options,                                                                                                     // 76
    $setOnInsert: {                                                                                                    // 77
      createdAt: new Date()                                                                                            // 78
    }                                                                                                                  // 78
  };                                                                                                                   // 76
                                                                                                                       //
  if (options.editor != null) {                                                                                        // 80
    updateOperations.$setOnInsert.editor = options.editor;                                                             // 81
    delete options.editor;                                                                                             // 82
  }                                                                                                                    // 99
                                                                                                                       //
  if (options.value == null) {                                                                                         // 84
    if (options.force === true) {                                                                                      // 85
      updateOperations.$set.value = options.packageValue;                                                              // 86
    } else {                                                                                                           // 85
      updateOperations.$setOnInsert.value = value;                                                                     // 88
    }                                                                                                                  // 84
  }                                                                                                                    // 106
                                                                                                                       //
  query = _.extend({                                                                                                   // 90
    _id: _id                                                                                                           // 90
  }, updateOperations.$set);                                                                                           // 90
                                                                                                                       //
  if (options.section == null) {                                                                                       // 92
    updateOperations.$unset = {                                                                                        // 93
      section: 1                                                                                                       // 93
    };                                                                                                                 // 93
    query.section = {                                                                                                  // 94
      $exists: false                                                                                                   // 94
    };                                                                                                                 // 94
  }                                                                                                                    // 117
                                                                                                                       //
  existantSetting = RocketChat.models.Settings.db.findOne(query);                                                      // 96
                                                                                                                       //
  if (existantSetting != null) {                                                                                       // 98
    if (existantSetting.editor == null && updateOperations.$setOnInsert.editor != null) {                              // 99
      updateOperations.$set.editor = updateOperations.$setOnInsert.editor;                                             // 100
      delete updateOperations.$setOnInsert.editor;                                                                     // 101
    }                                                                                                                  // 98
  } else {                                                                                                             // 98
    updateOperations.$set.ts = new Date();                                                                             // 103
  }                                                                                                                    // 126
                                                                                                                       //
  return RocketChat.models.Settings.upsert({                                                                           // 105
    _id: _id                                                                                                           // 105
  }, updateOperations);                                                                                                // 105
}; /*                                                                                                                  // 17
    * Add a setting group                                                                                              //
    * @param {String} _id                                                                                              //
    */                                                                                                                 //
                                                                                                                       //
RocketChat.settings.addGroup = function (_id, options, cb) {                                                           // 113
  if (options == null) {                                                                                               // 139
    options = {};                                                                                                      // 113
  }                                                                                                                    // 141
                                                                                                                       //
  if (!_id) {                                                                                                          // 116
    return false;                                                                                                      // 117
  }                                                                                                                    // 144
                                                                                                                       //
  if (_.isFunction(options)) {                                                                                         // 119
    cb = options;                                                                                                      // 120
    options = {};                                                                                                      // 121
  }                                                                                                                    // 148
                                                                                                                       //
  if (options.i18nLabel == null) {                                                                                     // 123
    options.i18nLabel = _id;                                                                                           // 124
  }                                                                                                                    // 151
                                                                                                                       //
  if (options.i18nDescription == null) {                                                                               // 126
    options.i18nDescription = _id + "_Description";                                                                    // 127
  }                                                                                                                    // 154
                                                                                                                       //
  options.ts = new Date();                                                                                             // 129
  options.blocked = false;                                                                                             // 130
  options.hidden = false;                                                                                              // 131
                                                                                                                       //
  if (blockedSettings[_id] != null) {                                                                                  // 133
    options.blocked = true;                                                                                            // 134
  }                                                                                                                    // 160
                                                                                                                       //
  if (hiddenSettings[_id] != null) {                                                                                   // 136
    options.hidden = true;                                                                                             // 137
  }                                                                                                                    // 163
                                                                                                                       //
  RocketChat.models.Settings.upsert({                                                                                  // 139
    _id: _id                                                                                                           // 139
  }, {                                                                                                                 // 139
    $set: options,                                                                                                     // 140
    $setOnInsert: {                                                                                                    // 141
      type: 'group',                                                                                                   // 142
      createdAt: new Date()                                                                                            // 143
    }                                                                                                                  // 142
  });                                                                                                                  // 140
                                                                                                                       //
  if (cb != null) {                                                                                                    // 145
    cb.call({                                                                                                          // 146
      add: function (id, value, options) {                                                                             // 147
        if (options == null) {                                                                                         // 176
          options = {};                                                                                                // 147
        }                                                                                                              // 178
                                                                                                                       //
        options.group = _id;                                                                                           // 148
        return RocketChat.settings.add(id, value, options);                                                            // 180
      },                                                                                                               // 147
      section: function (section, cb) {                                                                                // 151
        return cb.call({                                                                                               // 183
          add: function (id, value, options) {                                                                         // 153
            if (options == null) {                                                                                     // 185
              options = {};                                                                                            // 153
            }                                                                                                          // 187
                                                                                                                       //
            options.group = _id;                                                                                       // 154
            options.section = section;                                                                                 // 155
            return RocketChat.settings.add(id, value, options);                                                        // 190
          }                                                                                                            // 153
        });                                                                                                            // 153
      }                                                                                                                // 147
    });                                                                                                                // 147
  }                                                                                                                    // 195
}; /*                                                                                                                  // 113
    * Remove a setting by id                                                                                           //
    * @param {String} _id                                                                                              //
    */                                                                                                                 //
                                                                                                                       //
RocketChat.settings.removeById = function (_id) {                                                                      // 165
  if (!_id) {                                                                                                          // 168
    return false;                                                                                                      // 169
  }                                                                                                                    // 207
                                                                                                                       //
  return RocketChat.models.Settings.removeById(_id);                                                                   // 171
}; /*                                                                                                                  // 165
    * Update a setting by id                                                                                           //
    * @param {String} _id                                                                                              //
    */                                                                                                                 //
                                                                                                                       //
RocketChat.settings.updateById = function (_id, value, editor) {                                                       // 178
  if (!_id || value == null) {                                                                                         // 181
    return false;                                                                                                      // 182
  }                                                                                                                    // 220
                                                                                                                       //
  if (editor != null) {                                                                                                // 184
    return RocketChat.models.Settings.updateValueAndEditorById(_id, value, editor);                                    // 185
  }                                                                                                                    // 223
                                                                                                                       //
  return RocketChat.models.Settings.updateValueById(_id, value);                                                       // 187
}; /*                                                                                                                  // 178
    * Update options of a setting by id                                                                                //
    * @param {String} _id                                                                                              //
    */                                                                                                                 //
                                                                                                                       //
RocketChat.settings.updateOptionsById = function (_id, options) {                                                      // 194
  if (!_id || options == null) {                                                                                       // 197
    return false;                                                                                                      // 198
  }                                                                                                                    // 236
                                                                                                                       //
  return RocketChat.models.Settings.updateOptionsById(_id, options);                                                   // 200
}; /*                                                                                                                  // 194
    * Update a setting by id                                                                                           //
    * @param {String} _id                                                                                              //
    */                                                                                                                 //
                                                                                                                       //
RocketChat.settings.clearById = function (_id) {                                                                       // 207
  if (_id == null) {                                                                                                   // 210
    return false;                                                                                                      // 211
  }                                                                                                                    // 249
                                                                                                                       //
  return RocketChat.models.Settings.updateValueById(_id, void 0);                                                      // 213
}; /*                                                                                                                  // 207
    * Update a setting by id                                                                                           //
    */                                                                                                                 //
                                                                                                                       //
RocketChat.settings.init = function () {                                                                               // 219
  var fn, i, len, ref2, results;                                                                                       // 220
  RocketChat.settings.initialLoad = true;                                                                              // 220
  RocketChat.models.Settings.find().observe({                                                                          // 221
    added: function (record) {                                                                                         // 222
      Meteor.settings[record._id] = record.value;                                                                      // 223
                                                                                                                       //
      if (record.env === true) {                                                                                       // 224
        process.env[record._id] = record.value;                                                                        // 225
      }                                                                                                                // 266
                                                                                                                       //
      return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);                      // 267
    },                                                                                                                 // 222
    changed: function (record) {                                                                                       // 227
      Meteor.settings[record._id] = record.value;                                                                      // 228
                                                                                                                       //
      if (record.env === true) {                                                                                       // 229
        process.env[record._id] = record.value;                                                                        // 230
      }                                                                                                                // 273
                                                                                                                       //
      return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);                      // 274
    },                                                                                                                 // 222
    removed: function (record) {                                                                                       // 232
      delete Meteor.settings[record._id];                                                                              // 233
                                                                                                                       //
      if (record.env === true) {                                                                                       // 234
        delete process.env[record._id];                                                                                // 235
      }                                                                                                                // 280
                                                                                                                       //
      return RocketChat.settings.load(record._id, void 0, RocketChat.settings.initialLoad);                            // 281
    }                                                                                                                  // 222
  });                                                                                                                  // 222
  RocketChat.settings.initialLoad = false;                                                                             // 237
  ref2 = RocketChat.settings.afterInitialLoad;                                                                         // 239
  results = [];                                                                                                        // 239
                                                                                                                       //
  for (i = 0, len = ref2.length; i < len; i++) {                                                                       // 287
    fn = ref2[i];                                                                                                      // 288
    results.push(fn(Meteor.settings));                                                                                 // 289
  }                                                                                                                    // 239
                                                                                                                       //
  return results;                                                                                                      // 291
};                                                                                                                     // 219
                                                                                                                       //
RocketChat.settings.afterInitialLoad = [];                                                                             // 243
                                                                                                                       //
RocketChat.settings.onAfterInitialLoad = function (fn) {                                                               // 245
  RocketChat.settings.afterInitialLoad.push(fn);                                                                       // 246
                                                                                                                       //
  if (RocketChat.settings.initialLoad === false) {                                                                     // 247
    return fn(Meteor.settings);                                                                                        // 299
  }                                                                                                                    // 300
};                                                                                                                     // 245
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUserAvatar.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUserAvatar.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.setUserAvatar = function (user, dataURI, contentType, service) {                                            // 1
	var encoding = void 0;                                                                                                // 2
	var image = void 0;                                                                                                   // 3
                                                                                                                       //
	if (service === 'initials') {                                                                                         // 5
		return RocketChat.models.Users.setAvatarOrigin(user._id, service);                                                   // 6
	} else if (service === 'url') {                                                                                       // 7
		var result = null;                                                                                                   // 8
                                                                                                                       //
		try {                                                                                                                // 10
			result = HTTP.get(dataURI, {                                                                                        // 11
				npmRequestOptions: {                                                                                               // 11
					encoding: 'binary'                                                                                                // 11
				}                                                                                                                  // 11
			});                                                                                                                 // 11
		} catch (error) {                                                                                                    // 12
			if (error.response.statusCode !== 404) {                                                                            // 13
				console.log("Error while handling the setting of the avatar from a url (" + dataURI + ") for " + user.username + ":", error);
				throw new Meteor.Error('error-avatar-url-handling', "Error while handling avatar setting from a URL (" + dataURI + ") for " + user.username, {
					"function": 'RocketChat.setUserAvatar',                                                                           // 15
					url: dataURI,                                                                                                     // 15
					username: user.username                                                                                           // 15
				});                                                                                                                // 15
			}                                                                                                                   // 16
		}                                                                                                                    // 17
                                                                                                                       //
		if (result.statusCode !== 200) {                                                                                     // 19
			console.log("Not a valid response, " + result.statusCode + ", from the avatar url: " + dataURI);                    // 20
			throw new Meteor.Error('error-avatar-invalid-url', "Invalid avatar URL: " + dataURI, {                              // 21
				"function": 'RocketChat.setUserAvatar',                                                                            // 21
				url: dataURI                                                                                                       // 21
			});                                                                                                                 // 21
		}                                                                                                                    // 22
                                                                                                                       //
		if (!/image\/.+/.test(result.headers['content-type'])) {                                                             // 24
			console.log("Not a valid content-type from the provided url, " + result.headers['content-type'] + ", from the avatar url: " + dataURI);
			throw new Meteor.Error('error-avatar-invalid-url', "Invalid avatar URL: " + dataURI, {                              // 26
				"function": 'RocketChat.setUserAvatar',                                                                            // 26
				url: dataURI                                                                                                       // 26
			});                                                                                                                 // 26
		}                                                                                                                    // 27
                                                                                                                       //
		encoding = 'binary';                                                                                                 // 29
		image = result.content;                                                                                              // 30
		contentType = result.headers['content-type'];                                                                        // 31
	} else if (service === 'rest') {                                                                                      // 32
		encoding = 'binary';                                                                                                 // 33
		image = dataURI;                                                                                                     // 34
	} else {                                                                                                              // 35
		var fileData = RocketChatFile.dataURIParse(dataURI);                                                                 // 36
		encoding = 'base64';                                                                                                 // 37
		image = fileData.image;                                                                                              // 38
		contentType = fileData.contentType;                                                                                  // 39
	}                                                                                                                     // 40
                                                                                                                       //
	var rs = RocketChatFile.bufferToStream(new Buffer(image, encoding));                                                  // 42
	RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(user.username + ".jpg"));                                  // 43
	var ws = RocketChatFileAvatarInstance.createWriteStream(encodeURIComponent(user.username + ".jpg"), contentType);     // 44
	ws.on('end', Meteor.bindEnvironment(function () {                                                                     // 45
		Meteor.setTimeout(function () {                                                                                      // 46
			RocketChat.models.Users.setAvatarOrigin(user._id, service);                                                         // 47
			RocketChat.Notifications.notifyLogged('updateAvatar', {                                                             // 48
				username: user.username                                                                                            // 48
			});                                                                                                                 // 48
		}, 500);                                                                                                             // 49
	}));                                                                                                                  // 50
	rs.pipe(ws);                                                                                                          // 51
};                                                                                                                     // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUsername.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat._setUsername = function (userId, username) {                                                                // 1
  var avatarData, avatarSuggestions, error, gravatar, nameValidation, previousUsername, ref, rs, service, user, ws;    // 2
  username = s.trim(username);                                                                                         // 2
                                                                                                                       //
  if (!userId || !username) {                                                                                          // 3
    return false;                                                                                                      // 4
  }                                                                                                                    // 6
                                                                                                                       //
  try {                                                                                                                // 6
    nameValidation = new RegExp('^' + RocketChat.settings.get('UTF8_Names_Validation') + '$');                         // 7
  } catch (error1) {                                                                                                   // 6
    nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                  // 9
  }                                                                                                                    // 11
                                                                                                                       //
  if (!nameValidation.test(username)) {                                                                                // 11
    return false;                                                                                                      // 12
  }                                                                                                                    // 14
                                                                                                                       //
  user = RocketChat.models.Users.findOneById(userId);                                                                  // 14
                                                                                                                       //
  if (user.username === username) {                                                                                    // 17
    return user;                                                                                                       // 18
  }                                                                                                                    // 18
                                                                                                                       //
  previousUsername = user.username;                                                                                    // 20
                                                                                                                       //
  if (!previousUsername || !(username.toLowerCase() === previousUsername.toLowerCase())) {                             // 23
    if (!RocketChat.checkUsernameAvailability(username)) {                                                             // 24
      return false;                                                                                                    // 25
    }                                                                                                                  // 23
  }                                                                                                                    // 24
                                                                                                                       //
  try {                                                                                                                // 28
    if (!previousUsername && ((ref = user.emails) != null ? ref.length : void 0) > 0 && RocketChat.settings.get('Accounts_Enrollment_Email')) {
      Accounts.sendEnrollmentEmail(user._id);                                                                          // 30
    }                                                                                                                  // 28
  } catch (error1) {                                                                                                   // 28
    error = error1;                                                                                                    // 31
  }                                                                                                                    // 31
                                                                                                                       //
  user.username = username;                                                                                            // 33
                                                                                                                       //
  if (!previousUsername && RocketChat.settings.get('Accounts_SetDefaultAvatar') === true) {                            // 36
    avatarSuggestions = getAvatarSuggestionForUser(user);                                                              // 37
                                                                                                                       //
    for (service in meteorBabelHelpers.sanitizeForInObject(avatarSuggestions)) {                                       // 38
      avatarData = avatarSuggestions[service];                                                                         // 36
                                                                                                                       //
      if (service !== 'gravatar') {                                                                                    // 39
        RocketChat.setUserAvatar(user, avatarData.blob, avatarData.contentType, service);                              // 40
        gravatar = null;                                                                                               // 41
        break;                                                                                                         // 42
      } else {                                                                                                         // 39
        gravatar = avatarData;                                                                                         // 44
      }                                                                                                                // 43
    }                                                                                                                  // 38
                                                                                                                       //
    if (gravatar != null) {                                                                                            // 45
      RocketChat.setUserAvatar(user, gravatar.blob, gravatar.contentType, 'gravatar');                                 // 46
    }                                                                                                                  // 36
  }                                                                                                                    // 48
                                                                                                                       //
  if (previousUsername) {                                                                                              // 49
    RocketChat.models.Messages.updateAllUsernamesByUserId(user._id, username);                                         // 50
    RocketChat.models.Messages.updateUsernameOfEditByUserId(user._id, username);                                       // 51
    RocketChat.models.Messages.findByMention(previousUsername).forEach(function (msg) {                                // 53
      var updatedMsg;                                                                                                  // 54
      updatedMsg = msg.msg.replace(new RegExp("@" + previousUsername, "ig"), "@" + username);                          // 54
      return RocketChat.models.Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);
    });                                                                                                                // 53
    RocketChat.models.Rooms.replaceUsername(previousUsername, username);                                               // 57
    RocketChat.models.Rooms.replaceMutedUsername(previousUsername, username);                                          // 58
    RocketChat.models.Rooms.replaceUsernameOfUserByUserId(user._id, username);                                         // 59
    RocketChat.models.Subscriptions.setUserUsernameByUserId(user._id, username);                                       // 61
    RocketChat.models.Subscriptions.setNameForDirectRoomsWithOldName(previousUsername, username);                      // 62
    rs = RocketChatFileAvatarInstance.getFileWithReadStream(encodeURIComponent(previousUsername + ".jpg"));            // 64
                                                                                                                       //
    if (rs != null) {                                                                                                  // 65
      RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(username + ".jpg"));                                  // 66
      ws = RocketChatFileAvatarInstance.createWriteStream(encodeURIComponent(username + ".jpg"), rs.contentType);      // 67
      ws.on('end', Meteor.bindEnvironment(function () {                                                                // 68
        return RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(previousUsername + ".jpg"));                 // 67
      }));                                                                                                             // 68
      rs.readStream.pipe(ws);                                                                                          // 70
    }                                                                                                                  // 49
  }                                                                                                                    // 71
                                                                                                                       //
  RocketChat.models.Users.setUsername(user._id, username);                                                             // 73
  return user;                                                                                                         // 74
};                                                                                                                     // 1
                                                                                                                       //
RocketChat.setUsername = RocketChat.RateLimiter.limitFunction(RocketChat._setUsername, 1, 60000, {                     // 76
  0: function () {                                                                                                     // 77
    return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');               // 77
  }                                                                                                                    // 77
});                                                                                                                    // 77
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setRealName.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat._setRealName = function (userId, name) {                                                                    // 1
	name = s.trim(name);                                                                                                  // 2
                                                                                                                       //
	if (!userId || !name) {                                                                                               // 3
		return false;                                                                                                        // 4
	}                                                                                                                     // 5
                                                                                                                       //
	var user = RocketChat.models.Users.findOneById(userId); // User already has desired name, return                      // 7
                                                                                                                       //
	if (user.name === name) {                                                                                             // 10
		return user;                                                                                                         // 11
	} // Set new name                                                                                                     // 12
                                                                                                                       //
                                                                                                                       //
	RocketChat.models.Users.setName(user._id, name);                                                                      // 15
	user.name = name;                                                                                                     // 16
                                                                                                                       //
	if (RocketChat.settings.get('UI_Use_Real_Name') === true) {                                                           // 18
		RocketChat.Notifications.notifyLogged('Users:NameChanged', {                                                         // 19
			_id: user._id,                                                                                                      // 20
			name: user.name,                                                                                                    // 21
			username: user.username                                                                                             // 22
		});                                                                                                                  // 19
	}                                                                                                                     // 24
                                                                                                                       //
	return user;                                                                                                          // 26
};                                                                                                                     // 27
                                                                                                                       //
RocketChat.setRealName = RocketChat.RateLimiter.limitFunction(RocketChat._setRealName, 1, 60000, {                     // 29
	0: function () {                                                                                                      // 30
		return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');                 // 30
	} // Administrators have permission to change others names, so don't limit those                                      // 30
                                                                                                                       //
});                                                                                                                    // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setEmail.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat._setEmail = function (userId, email) {                                                                      // 1
	email = s.trim(email);                                                                                                // 2
                                                                                                                       //
	if (!userId) {                                                                                                        // 3
		throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                       // 4
			"function": '_setEmail'                                                                                             // 4
		});                                                                                                                  // 4
	}                                                                                                                     // 5
                                                                                                                       //
	if (!email) {                                                                                                         // 7
		throw new Meteor.Error('error-invalid-email', 'Invalid email', {                                                     // 8
			"function": '_setEmail'                                                                                             // 8
		});                                                                                                                  // 8
	}                                                                                                                     // 9
                                                                                                                       //
	RocketChat.validateEmailDomain(email);                                                                                // 11
	var user = RocketChat.models.Users.findOneById(userId); // User already has desired username, return                  // 13
                                                                                                                       //
	if (user.emails && user.emails[0] && user.emails[0].address === email) {                                              // 16
		return user;                                                                                                         // 17
	} // Check email availability                                                                                         // 18
                                                                                                                       //
                                                                                                                       //
	if (!RocketChat.checkEmailAvailability(email)) {                                                                      // 21
		throw new Meteor.Error('error-field-unavailable', email + " is already in use :(", {                                 // 22
			"function": '_setEmail',                                                                                            // 22
			field: email                                                                                                        // 22
		});                                                                                                                  // 22
	} // Set new email                                                                                                    // 23
                                                                                                                       //
                                                                                                                       //
	RocketChat.models.Users.setEmail(user._id, email);                                                                    // 26
	user.email = email;                                                                                                   // 27
	return user;                                                                                                          // 28
};                                                                                                                     // 29
                                                                                                                       //
RocketChat.setEmail = RocketChat.RateLimiter.limitFunction(RocketChat._setEmail, 1, 60000, {                           // 31
	0: function () {                                                                                                      // 32
		return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');                 // 32
	} // Administrators have permission to change others emails, so don't limit those                                     // 32
                                                                                                                       //
});                                                                                                                    // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/unarchiveRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.unarchiveRoom = function (rid) {                                                                            // 1
	RocketChat.models.Rooms.unarchiveById(rid);                                                                           // 2
	RocketChat.models.Subscriptions.unarchiveByRoomId(rid);                                                               // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/updateMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.updateMessage = function (message, user) {                                                                  // 1
	// If we keep history of edits, insert a new message to store history information                                     // 2
	if (RocketChat.settings.get('Message_KeepHistory')) {                                                                 // 3
		RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);                                                   // 4
	}                                                                                                                     // 5
                                                                                                                       //
	message.editedAt = new Date();                                                                                        // 7
	message.editedBy = {                                                                                                  // 8
		_id: user._id,                                                                                                       // 9
		username: user.username                                                                                              // 10
	};                                                                                                                    // 8
	var urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g);
                                                                                                                       //
	if (urls) {                                                                                                           // 14
		message.urls = urls.map(function (url) {                                                                             // 15
			return {                                                                                                            // 15
				url: url                                                                                                           // 15
			};                                                                                                                  // 15
		});                                                                                                                  // 15
	}                                                                                                                     // 16
                                                                                                                       //
	message = RocketChat.callbacks.run('beforeSaveMessage', message);                                                     // 18
	var tempid = message._id;                                                                                             // 20
	delete message._id;                                                                                                   // 21
	RocketChat.models.Messages.update({                                                                                   // 23
		_id: tempid                                                                                                          // 23
	}, {                                                                                                                  // 23
		$set: message                                                                                                        // 23
	});                                                                                                                   // 23
	var room = RocketChat.models.Rooms.findOneById(message.rid);                                                          // 25
	Meteor.defer(function () {                                                                                            // 27
		RocketChat.callbacks.run('afterSaveMessage', RocketChat.models.Messages.findOneById(tempid), room);                  // 28
	});                                                                                                                   // 29
};                                                                                                                     // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Notifications.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/Notifications.coffee.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var func,                                                                                                              // 1
    slice = [].slice;                                                                                                  // 1
RocketChat.Notifications = new (function () {                                                                          // 1
  function _Class() {                                                                                                  // 2
    var self;                                                                                                          // 3
    self = this;                                                                                                       // 3
    this.debug = false;                                                                                                // 5
    this.streamAll = new Meteor.Streamer('notify-all');                                                                // 7
    this.streamLogged = new Meteor.Streamer('notify-logged');                                                          // 8
    this.streamRoom = new Meteor.Streamer('notify-room');                                                              // 9
    this.streamRoomUsers = new Meteor.Streamer('notify-room-users');                                                   // 10
    this.streamUser = new Meteor.Streamer('notify-user');                                                              // 11
    this.streamAll.allowWrite('none');                                                                                 // 14
    this.streamLogged.allowWrite('none');                                                                              // 15
    this.streamRoom.allowWrite('none');                                                                                // 16
    this.streamRoomUsers.allowWrite(function () {                                                                      // 17
      var args, e, eventName, i, len, ref, ref1, roomId, subscription, subscriptions, user;                            // 18
      eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                          // 17
      ref = eventName.split('/'), roomId = ref[0], e = ref[1];                                                         // 18
      user = Meteor.users.findOne(this.userId, {                                                                       // 20
        fields: {                                                                                                      // 20
          username: 1                                                                                                  // 20
        }                                                                                                              // 20
      });                                                                                                              // 20
                                                                                                                       //
      if (RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId) != null) {                     // 21
        subscriptions = RocketChat.models.Subscriptions.findByRoomIdAndNotUserId(roomId, this.userId).fetch();         // 22
                                                                                                                       //
        for (i = 0, len = subscriptions.length; i < len; i++) {                                                        // 23
          subscription = subscriptions[i];                                                                             // 29
          (ref1 = RocketChat.Notifications).notifyUser.apply(ref1, [subscription.u._id, e].concat(slice.call(args)));  // 24
        }                                                                                                              // 21
      }                                                                                                                // 32
                                                                                                                       //
      return false;                                                                                                    // 26
    });                                                                                                                // 17
    this.streamUser.allowWrite('logged');                                                                              // 28
    this.streamAll.allowRead('all');                                                                                   // 30
    this.streamLogged.allowRead('logged');                                                                             // 32
    this.streamRoom.allowRead(function (eventName) {                                                                   // 34
      var room, roomId, user;                                                                                          // 35
                                                                                                                       //
      if (this.userId == null) {                                                                                       // 35
        return false;                                                                                                  // 35
      }                                                                                                                // 42
                                                                                                                       //
      roomId = eventName.split('/')[0];                                                                                // 37
      user = Meteor.users.findOne(this.userId, {                                                                       // 39
        fields: {                                                                                                      // 39
          username: 1                                                                                                  // 39
        }                                                                                                              // 39
      });                                                                                                              // 39
      room = RocketChat.models.Rooms.findOneById(roomId);                                                              // 40
                                                                                                                       //
      if (room.t === 'l' && room.v._id === user._id) {                                                                 // 41
        return true;                                                                                                   // 42
      }                                                                                                                // 52
                                                                                                                       //
      return room.usernames.indexOf(user.username) > -1;                                                               // 44
    });                                                                                                                // 34
    this.streamRoomUsers.allowRead('none');                                                                            // 46
    this.streamUser.allowRead(function (eventName) {                                                                   // 48
      var userId;                                                                                                      // 49
      userId = eventName.split('/')[0];                                                                                // 49
      return this.userId != null && this.userId === userId;                                                            // 50
    });                                                                                                                // 48
  }                                                                                                                    // 2
                                                                                                                       //
  _Class.prototype.notifyAll = function () {                                                                           // 63
    var args, eventName;                                                                                               // 54
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                            // 53
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 54
      console.log('notifyAll', arguments);                                                                             // 54
    }                                                                                                                  // 68
                                                                                                                       //
    args.unshift(eventName);                                                                                           // 56
    return this.streamAll.emit.apply(this.streamAll, args);                                                            // 70
  };                                                                                                                   // 53
                                                                                                                       //
  _Class.prototype.notifyLogged = function () {                                                                        // 73
    var args, eventName;                                                                                               // 60
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                            // 59
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 60
      console.log('notifyLogged', arguments);                                                                          // 60
    }                                                                                                                  // 78
                                                                                                                       //
    args.unshift(eventName);                                                                                           // 62
    return this.streamLogged.emit.apply(this.streamLogged, args);                                                      // 80
  };                                                                                                                   // 59
                                                                                                                       //
  _Class.prototype.notifyRoom = function () {                                                                          // 83
    var args, eventName, room;                                                                                         // 66
    room = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];       // 65
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 66
      console.log('notifyRoom', arguments);                                                                            // 66
    }                                                                                                                  // 88
                                                                                                                       //
    args.unshift(room + "/" + eventName);                                                                              // 68
    return this.streamRoom.emit.apply(this.streamRoom, args);                                                          // 90
  };                                                                                                                   // 65
                                                                                                                       //
  _Class.prototype.notifyUser = function () {                                                                          // 93
    var args, eventName, userId;                                                                                       // 72
    userId = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];     // 71
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 72
      console.log('notifyUser', arguments);                                                                            // 72
    }                                                                                                                  // 98
                                                                                                                       //
    args.unshift(userId + "/" + eventName);                                                                            // 74
    return this.streamUser.emit.apply(this.streamUser, args);                                                          // 100
  };                                                                                                                   // 71
                                                                                                                       //
  _Class.prototype.notifyAllInThisInstance = function () {                                                             // 103
    var args, eventName;                                                                                               // 79
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                            // 78
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 79
      console.log('notifyAll', arguments);                                                                             // 79
    }                                                                                                                  // 108
                                                                                                                       //
    args.unshift(eventName);                                                                                           // 81
    return this.streamAll.emitWithoutBroadcast.apply(this.streamAll, args);                                            // 110
  };                                                                                                                   // 78
                                                                                                                       //
  _Class.prototype.notifyLoggedInThisInstance = function () {                                                          // 113
    var args, eventName;                                                                                               // 85
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                            // 84
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 85
      console.log('notifyLogged', arguments);                                                                          // 85
    }                                                                                                                  // 118
                                                                                                                       //
    args.unshift(eventName);                                                                                           // 87
    return this.streamLogged.emitWithoutBroadcast.apply(this.streamLogged, args);                                      // 120
  };                                                                                                                   // 84
                                                                                                                       //
  _Class.prototype.notifyRoomInThisInstance = function () {                                                            // 123
    var args, eventName, room;                                                                                         // 91
    room = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];       // 90
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 91
      console.log('notifyRoomAndBroadcast', arguments);                                                                // 91
    }                                                                                                                  // 128
                                                                                                                       //
    args.unshift(room + "/" + eventName);                                                                              // 93
    return this.streamRoom.emitWithoutBroadcast.apply(this.streamRoom, args);                                          // 130
  };                                                                                                                   // 90
                                                                                                                       //
  _Class.prototype.notifyUserInThisInstance = function () {                                                            // 133
    var args, eventName, userId;                                                                                       // 97
    userId = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];     // 96
                                                                                                                       //
    if (this.debug === true) {                                                                                         // 97
      console.log('notifyUserAndBroadcast', arguments);                                                                // 97
    }                                                                                                                  // 138
                                                                                                                       //
    args.unshift(userId + "/" + eventName);                                                                            // 99
    return this.streamUser.emitWithoutBroadcast.apply(this.streamUser, args);                                          // 140
  };                                                                                                                   // 96
                                                                                                                       //
  return _Class;                                                                                                       // 143
}())();                                                                                                                // 145
                                                                                                                       //
func = function (eventName, username) {                                                                                // 106
  var e, ref, room, user;                                                                                              // 107
  ref = eventName.split('/'), room = ref[0], e = ref[1];                                                               // 107
                                                                                                                       //
  if (e === 'webrtc') {                                                                                                // 109
    return true;                                                                                                       // 110
  }                                                                                                                    // 152
                                                                                                                       //
  if (e === 'typing') {                                                                                                // 112
    user = Meteor.users.findOne(this.userId, {                                                                         // 113
      fields: {                                                                                                        // 113
        username: 1                                                                                                    // 113
      }                                                                                                                // 113
    });                                                                                                                // 113
                                                                                                                       //
    if ((user != null ? user.username : void 0) === username) {                                                        // 114
      return true;                                                                                                     // 115
    }                                                                                                                  // 112
  }                                                                                                                    // 162
                                                                                                                       //
  return false;                                                                                                        // 117
};                                                                                                                     // 106
                                                                                                                       //
RocketChat.Notifications.streamRoom.allowWrite(func);                                                                  // 119
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"models":{"_Base.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_Base.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var ModelsBaseDb = void 0;                                                                                             // 1
module.watch(require("./_BaseDb"), {                                                                                   // 1
	"default": function (v) {                                                                                             // 1
		ModelsBaseDb = v;                                                                                                    // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
var ModelsBaseCache = void 0;                                                                                          // 1
module.watch(require("./_BaseCache"), {                                                                                // 1
	"default": function (v) {                                                                                             // 1
		ModelsBaseCache = v;                                                                                                 // 1
	}                                                                                                                     // 1
}, 1);                                                                                                                 // 1
RocketChat.models._CacheControl = new Meteor.EnvironmentVariable();                                                    // 4
                                                                                                                       //
var ModelsBase = function () {                                                                                         //
	function ModelsBase(nameOrModel, useCache) {                                                                          // 7
		(0, _classCallCheck3.default)(this, ModelsBase);                                                                     // 7
		this._db = new ModelsBaseDb(nameOrModel, this);                                                                      // 8
		this.model = this._db.model;                                                                                         // 9
		this.collectionName = this._db.collectionName;                                                                       // 10
		this.name = this._db.name;                                                                                           // 11
		this._useCache = useCache === true;                                                                                  // 13
		this.cache = new ModelsBaseCache(this); // TODO_CACHE: remove                                                        // 15
                                                                                                                       //
		this.on = this.cache.on.bind(this.cache);                                                                            // 17
		this.emit = this.cache.emit.bind(this.cache);                                                                        // 18
		this.getDynamicView = this.cache.getDynamicView.bind(this.cache);                                                    // 19
		this.processQueryOptionsOnResult = this.cache.processQueryOptionsOnResult.bind(this.cache); // END_TODO_CACHE        // 20
                                                                                                                       //
		this.db = this;                                                                                                      // 23
                                                                                                                       //
		if (this._useCache) {                                                                                                // 25
			this.db = new this.constructor(this.model, false);                                                                  // 26
		}                                                                                                                    // 27
	}                                                                                                                     // 28
                                                                                                                       //
	ModelsBase.prototype.arrayToCursor = function () {                                                                    //
		function arrayToCursor(data) {                                                                                       //
			return {                                                                                                            // 43
				fetch: function () {                                                                                               // 44
					return data;                                                                                                      // 45
				},                                                                                                                 // 46
				count: function () {                                                                                               // 47
					return data.length;                                                                                               // 48
				},                                                                                                                 // 49
				forEach: function (fn) {                                                                                           // 50
					return data.forEach(fn);                                                                                          // 51
				}                                                                                                                  // 52
			};                                                                                                                  // 43
		}                                                                                                                    // 54
                                                                                                                       //
		return arrayToCursor;                                                                                                //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.setUpdatedAt = function () {                                                                     //
		function setUpdatedAt() /*record, checkQuery, query*/{                                                               //
			var _db;                                                                                                            // 56
                                                                                                                       //
			return (_db = this._db).setUpdatedAt.apply(_db, arguments);                                                         // 57
		}                                                                                                                    // 58
                                                                                                                       //
		return setUpdatedAt;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.find = function () {                                                                             //
		function find() {                                                                                                    //
			try {                                                                                                               // 61
				var _origin;                                                                                                       // 61
                                                                                                                       //
				return (_origin = this[this.origin]).find.apply(_origin, arguments);                                               // 62
			} catch (e) {                                                                                                       // 63
				var _console;                                                                                                      // 63
                                                                                                                       //
				(_console = console).error.apply(_console, ['Exception on find', e].concat(Array.prototype.slice.call(arguments)));
			}                                                                                                                   // 65
		}                                                                                                                    // 66
                                                                                                                       //
		return find;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.findOne = function () {                                                                          //
		function findOne() {                                                                                                 //
			try {                                                                                                               // 69
				var _origin2;                                                                                                      // 69
                                                                                                                       //
				return (_origin2 = this[this.origin]).findOne.apply(_origin2, arguments);                                          // 70
			} catch (e) {                                                                                                       // 71
				var _console2;                                                                                                     // 71
                                                                                                                       //
				(_console2 = console).error.apply(_console2, ['Exception on find', e].concat(Array.prototype.slice.call(arguments)));
			}                                                                                                                   // 73
		}                                                                                                                    // 74
                                                                                                                       //
		return findOne;                                                                                                      //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.findOneById = function () {                                                                      //
		function findOneById() {                                                                                             //
			try {                                                                                                               // 77
				var _origin3;                                                                                                      // 77
                                                                                                                       //
				return (_origin3 = this[this.origin]).findOneById.apply(_origin3, arguments);                                      // 78
			} catch (e) {                                                                                                       // 79
				var _console3;                                                                                                     // 79
                                                                                                                       //
				(_console3 = console).error.apply(_console3, ['Exception on find', e].concat(Array.prototype.slice.call(arguments)));
			}                                                                                                                   // 81
		}                                                                                                                    // 82
                                                                                                                       //
		return findOneById;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.findOneByIds = function () {                                                                     //
		function findOneByIds(ids, options) {                                                                                //
			check(ids, [String]);                                                                                               // 85
                                                                                                                       //
			try {                                                                                                               // 87
				return this[this.origin].findOneByIds(ids, options);                                                               // 88
			} catch (e) {                                                                                                       // 89
				var _console4;                                                                                                     // 89
                                                                                                                       //
				(_console4 = console).error.apply(_console4, ['Exception on find', e].concat(Array.prototype.slice.call(arguments)));
			}                                                                                                                   // 91
		}                                                                                                                    // 92
                                                                                                                       //
		return findOneByIds;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.insert = function () {                                                                           //
		function insert() /*record*/{                                                                                        //
			var _db2;                                                                                                           // 94
                                                                                                                       //
			return (_db2 = this._db).insert.apply(_db2, arguments);                                                             // 95
		}                                                                                                                    // 96
                                                                                                                       //
		return insert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.update = function () {                                                                           //
		function update() /*query, update, options*/{                                                                        //
			var _db3;                                                                                                           // 98
                                                                                                                       //
			return (_db3 = this._db).update.apply(_db3, arguments);                                                             // 99
		}                                                                                                                    // 100
                                                                                                                       //
		return update;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.upsert = function () {                                                                           //
		function upsert() /*query, update*/{                                                                                 //
			var _db4;                                                                                                           // 102
                                                                                                                       //
			return (_db4 = this._db).upsert.apply(_db4, arguments);                                                             // 103
		}                                                                                                                    // 104
                                                                                                                       //
		return upsert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.remove = function () {                                                                           //
		function remove() /*query*/{                                                                                         //
			var _db5;                                                                                                           // 106
                                                                                                                       //
			return (_db5 = this._db).remove.apply(_db5, arguments);                                                             // 107
		}                                                                                                                    // 108
                                                                                                                       //
		return remove;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.insertOrUpsert = function () {                                                                   //
		function insertOrUpsert() {                                                                                          //
			var _db6;                                                                                                           // 110
                                                                                                                       //
			return (_db6 = this._db).insertOrUpsert.apply(_db6, arguments);                                                     // 111
		}                                                                                                                    // 112
                                                                                                                       //
		return insertOrUpsert;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.allow = function () {                                                                            //
		function allow() {                                                                                                   //
			var _db7;                                                                                                           // 114
                                                                                                                       //
			return (_db7 = this._db).allow.apply(_db7, arguments);                                                              // 115
		}                                                                                                                    // 116
                                                                                                                       //
		return allow;                                                                                                        //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.deny = function () {                                                                             //
		function deny() {                                                                                                    //
			var _db8;                                                                                                           // 118
                                                                                                                       //
			return (_db8 = this._db).deny.apply(_db8, arguments);                                                               // 119
		}                                                                                                                    // 120
                                                                                                                       //
		return deny;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.ensureIndex = function () {                                                                      //
		function ensureIndex() {                                                                                             //
			var _db9;                                                                                                           // 122
                                                                                                                       //
			return (_db9 = this._db).ensureIndex.apply(_db9, arguments);                                                        // 123
		}                                                                                                                    // 124
                                                                                                                       //
		return ensureIndex;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.dropIndex = function () {                                                                        //
		function dropIndex() {                                                                                               //
			var _db10;                                                                                                          // 126
                                                                                                                       //
			return (_db10 = this._db).dropIndex.apply(_db10, arguments);                                                        // 127
		}                                                                                                                    // 128
                                                                                                                       //
		return dropIndex;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.tryEnsureIndex = function () {                                                                   //
		function tryEnsureIndex() {                                                                                          //
			var _db11;                                                                                                          // 130
                                                                                                                       //
			return (_db11 = this._db).tryEnsureIndex.apply(_db11, arguments);                                                   // 131
		}                                                                                                                    // 132
                                                                                                                       //
		return tryEnsureIndex;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.tryDropIndex = function () {                                                                     //
		function tryDropIndex() {                                                                                            //
			var _db12;                                                                                                          // 134
                                                                                                                       //
			return (_db12 = this._db).tryDropIndex.apply(_db12, arguments);                                                     // 135
		}                                                                                                                    // 136
                                                                                                                       //
		return tryDropIndex;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.trashFind = function () {                                                                        //
		function trashFind() /*query, options*/{                                                                             //
			var _db13;                                                                                                          // 138
                                                                                                                       //
			return (_db13 = this._db).trashFind.apply(_db13, arguments);                                                        // 139
		}                                                                                                                    // 140
                                                                                                                       //
		return trashFind;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.trashFindDeletedAfter = function () {                                                            //
		function trashFindDeletedAfter() /*deletedAt, query, options*/{                                                      //
			var _db14;                                                                                                          // 142
                                                                                                                       //
			return (_db14 = this._db).trashFindDeletedAfter.apply(_db14, arguments);                                            // 143
		}                                                                                                                    // 144
                                                                                                                       //
		return trashFindDeletedAfter;                                                                                        //
	}(); // dinamicTrashFindAfter(method, deletedAt, ...args) {                                                           //
	// 	const scope = {                                                                                                   // 147
	// 		find: (query={}) => {                                                                                            // 148
	// 			return this.trashFindDeletedAfter(deletedAt, query, { fields: {_id: 1, _deletedAt: 1} });                       // 149
	// 		}                                                                                                                // 150
	// 	};                                                                                                                // 151
	// 	scope.model = {                                                                                                   // 153
	// 		find: scope.find                                                                                                 // 154
	// 	};                                                                                                                // 155
	// 	return this[method].apply(scope, args);                                                                           // 157
	// }                                                                                                                  // 158
	// dinamicFindAfter(method, updatedAt, ...args) {                                                                     // 160
	// 	const scope = {                                                                                                   // 161
	// 		find: (query={}, options) => {                                                                                   // 162
	// 			query._updatedAt = {                                                                                            // 163
	// 				$gt: updatedAt                                                                                                 // 164
	// 			};                                                                                                              // 165
	// 			return this.find(query, options);                                                                               // 167
	// 		}                                                                                                                // 168
	// 	};                                                                                                                // 169
	// 	scope.model = {                                                                                                   // 171
	// 		find: scope.find                                                                                                 // 172
	// 	};                                                                                                                // 173
	// 	return this[method].apply(scope, args);                                                                           // 175
	// }                                                                                                                  // 176
	// dinamicFindChangesAfter(method, updatedAt, ...args) {                                                              // 178
	// 	return {                                                                                                          // 179
	// 		update: this.dinamicFindAfter(method, updatedAt, ...args).fetch(),                                               // 180
	// 		remove: this.dinamicTrashFindAfter(method, updatedAt, ...args).fetch()                                           // 181
	// 	};                                                                                                                // 182
	// }                                                                                                                  // 183
                                                                                                                       //
                                                                                                                       //
	(0, _createClass3.default)(ModelsBase, [{                                                                             //
		key: "useCache",                                                                                                     //
		get: function () {                                                                                                   //
			if (RocketChat.models._CacheControl.get() === false) {                                                              // 31
				return false;                                                                                                      // 32
			}                                                                                                                   // 33
                                                                                                                       //
			return this._useCache;                                                                                              // 35
		}                                                                                                                    // 36
	}, {                                                                                                                  //
		key: "origin",                                                                                                       //
		get: function () {                                                                                                   //
			return this.useCache === true ? 'cache' : '_db';                                                                    // 39
		}                                                                                                                    // 40
	}]);                                                                                                                  //
	return ModelsBase;                                                                                                    //
}();                                                                                                                   //
                                                                                                                       //
RocketChat.models._Base = ModelsBase;                                                                                  // 187
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Messages.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Messages.coffee.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var extend = function (child, parent) {                                                                                // 1
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    // 1
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           // 1
  }                                                                                                                    // 1
                                                                                                                       //
  function ctor() {                                                                                                    // 1
    this.constructor = child;                                                                                          // 1
  }                                                                                                                    // 1
                                                                                                                       //
  ctor.prototype = parent.prototype;                                                                                   // 1
  child.prototype = new ctor();                                                                                        // 1
  child.__super__ = parent.prototype;                                                                                  // 1
  return child;                                                                                                        // 1
},                                                                                                                     // 1
    hasProp = {}.hasOwnProperty;                                                                                       // 1
                                                                                                                       //
RocketChat.models.Messages = new (function (superClass) {                                                              // 1
  extend(_Class, superClass);                                                                                          // 5
                                                                                                                       //
  function _Class() {                                                                                                  // 2
    _Class.__super__.constructor.call(this, 'message');                                                                // 3
                                                                                                                       //
    this.tryEnsureIndex({                                                                                              // 5
      'rid': 1,                                                                                                        // 5
      'ts': 1                                                                                                          // 5
    });                                                                                                                // 5
    this.tryEnsureIndex({                                                                                              // 6
      'ts': 1                                                                                                          // 6
    });                                                                                                                // 6
    this.tryEnsureIndex({                                                                                              // 7
      'u._id': 1                                                                                                       // 7
    });                                                                                                                // 7
    this.tryEnsureIndex({                                                                                              // 8
      'editedAt': 1                                                                                                    // 8
    }, {                                                                                                               // 8
      sparse: 1                                                                                                        // 8
    });                                                                                                                // 8
    this.tryEnsureIndex({                                                                                              // 9
      'editedBy._id': 1                                                                                                // 9
    }, {                                                                                                               // 9
      sparse: 1                                                                                                        // 9
    });                                                                                                                // 9
    this.tryEnsureIndex({                                                                                              // 10
      'rid': 1,                                                                                                        // 10
      't': 1,                                                                                                          // 10
      'u._id': 1                                                                                                       // 10
    });                                                                                                                // 10
    this.tryEnsureIndex({                                                                                              // 11
      'expireAt': 1                                                                                                    // 11
    }, {                                                                                                               // 11
      expireAfterSeconds: 0                                                                                            // 11
    });                                                                                                                // 11
    this.tryEnsureIndex({                                                                                              // 12
      'msg': 'text'                                                                                                    // 12
    });                                                                                                                // 12
    this.tryEnsureIndex({                                                                                              // 13
      'file._id': 1                                                                                                    // 13
    }, {                                                                                                               // 13
      sparse: 1                                                                                                        // 13
    });                                                                                                                // 13
    this.tryEnsureIndex({                                                                                              // 14
      'mentions.username': 1                                                                                           // 14
    }, {                                                                                                               // 14
      sparse: 1                                                                                                        // 14
    });                                                                                                                // 14
    this.tryEnsureIndex({                                                                                              // 15
      'pinned': 1                                                                                                      // 15
    }, {                                                                                                               // 15
      sparse: 1                                                                                                        // 15
    });                                                                                                                // 15
    this.tryEnsureIndex({                                                                                              // 16
      'snippeted': 1                                                                                                   // 16
    }, {                                                                                                               // 16
      sparse: 1                                                                                                        // 16
    });                                                                                                                // 16
    this.tryEnsureIndex({                                                                                              // 17
      'location': '2dsphere'                                                                                           // 17
    });                                                                                                                // 17
    this.tryEnsureIndex({                                                                                              // 18
      'slackBotId': 1,                                                                                                 // 18
      'slackTs': 1                                                                                                     // 18
    }, {                                                                                                               // 18
      sparse: 1                                                                                                        // 18
    });                                                                                                                // 18
  }                                                                                                                    // 2
                                                                                                                       //
  _Class.prototype.findByMention = function (username, options) {                                                      // 73
    var query;                                                                                                         // 22
    query = {                                                                                                          // 22
      "mentions.username": username                                                                                    // 23
    };                                                                                                                 // 23
    return this.find(query, options);                                                                                  // 25
  };                                                                                                                   // 21
                                                                                                                       //
  _Class.prototype.findVisibleByMentionAndRoomId = function (username, rid, options) {                                 // 81
    var query;                                                                                                         // 28
    query = {                                                                                                          // 28
      _hidden: {                                                                                                       // 29
        $ne: true                                                                                                      // 29
      },                                                                                                               // 29
      "mentions.username": username,                                                                                   // 30
      "rid": rid                                                                                                       // 31
    };                                                                                                                 // 29
    return this.find(query, options);                                                                                  // 33
  };                                                                                                                   // 27
                                                                                                                       //
  _Class.prototype.findVisibleByRoomId = function (roomId, options) {                                                  // 93
    var query;                                                                                                         // 36
    query = {                                                                                                          // 36
      _hidden: {                                                                                                       // 37
        $ne: true                                                                                                      // 38
      },                                                                                                               // 38
      rid: roomId                                                                                                      // 40
    };                                                                                                                 // 37
    return this.find(query, options);                                                                                  // 42
  };                                                                                                                   // 35
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdNotContainingTypes = function (roomId, types, options) {                         // 104
    var query;                                                                                                         // 45
    query = {                                                                                                          // 45
      _hidden: {                                                                                                       // 46
        $ne: true                                                                                                      // 47
      },                                                                                                               // 47
      rid: roomId                                                                                                      // 49
    };                                                                                                                 // 46
                                                                                                                       //
    if (Match.test(types, [String]) && types.length > 0) {                                                             // 51
      query.t = {                                                                                                      // 52
        $nin: types                                                                                                    // 53
      };                                                                                                               // 53
    }                                                                                                                  // 116
                                                                                                                       //
    return this.find(query, options);                                                                                  // 55
  };                                                                                                                   // 44
                                                                                                                       //
  _Class.prototype.findInvisibleByRoomId = function (roomId, options) {                                                // 120
    var query;                                                                                                         // 58
    query = {                                                                                                          // 58
      _hidden: true,                                                                                                   // 59
      rid: roomId                                                                                                      // 60
    };                                                                                                                 // 59
    return this.find(query, options);                                                                                  // 62
  };                                                                                                                   // 57
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdAfterTimestamp = function (roomId, timestamp, options) {                         // 129
    var query;                                                                                                         // 65
    query = {                                                                                                          // 65
      _hidden: {                                                                                                       // 66
        $ne: true                                                                                                      // 67
      },                                                                                                               // 67
      rid: roomId,                                                                                                     // 68
      ts: {                                                                                                            // 69
        $gt: timestamp                                                                                                 // 70
      }                                                                                                                // 70
    };                                                                                                                 // 66
    return this.find(query, options);                                                                                  // 72
  };                                                                                                                   // 64
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBeforeTimestamp = function (roomId, timestamp, options) {                        // 143
    var query;                                                                                                         // 75
    query = {                                                                                                          // 75
      _hidden: {                                                                                                       // 76
        $ne: true                                                                                                      // 77
      },                                                                                                               // 77
      rid: roomId,                                                                                                     // 78
      ts: {                                                                                                            // 79
        $lt: timestamp                                                                                                 // 80
      }                                                                                                                // 80
    };                                                                                                                 // 76
    return this.find(query, options);                                                                                  // 82
  };                                                                                                                   // 74
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBeforeTimestampInclusive = function (roomId, timestamp, options) {               // 157
    var query;                                                                                                         // 85
    query = {                                                                                                          // 85
      _hidden: {                                                                                                       // 86
        $ne: true                                                                                                      // 87
      },                                                                                                               // 87
      rid: roomId,                                                                                                     // 88
      ts: {                                                                                                            // 89
        $lte: timestamp                                                                                                // 90
      }                                                                                                                // 90
    };                                                                                                                 // 86
    return this.find(query, options);                                                                                  // 92
  };                                                                                                                   // 84
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBetweenTimestamps = function (roomId, afterTimestamp, beforeTimestamp, options) {
    var query;                                                                                                         // 95
    query = {                                                                                                          // 95
      _hidden: {                                                                                                       // 96
        $ne: true                                                                                                      // 97
      },                                                                                                               // 97
      rid: roomId,                                                                                                     // 98
      ts: {                                                                                                            // 99
        $gt: afterTimestamp,                                                                                           // 100
        $lt: beforeTimestamp                                                                                           // 101
      }                                                                                                                // 100
    };                                                                                                                 // 96
    return this.find(query, options);                                                                                  // 103
  };                                                                                                                   // 94
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBetweenTimestampsInclusive = function (roomId, afterTimestamp, beforeTimestamp, options) {
    var query;                                                                                                         // 106
    query = {                                                                                                          // 106
      _hidden: {                                                                                                       // 107
        $ne: true                                                                                                      // 108
      },                                                                                                               // 108
      rid: roomId,                                                                                                     // 109
      ts: {                                                                                                            // 110
        $gte: afterTimestamp,                                                                                          // 111
        $lte: beforeTimestamp                                                                                          // 112
      }                                                                                                                // 111
    };                                                                                                                 // 107
    return this.find(query, options);                                                                                  // 114
  };                                                                                                                   // 105
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBeforeTimestampNotContainingTypes = function (roomId, timestamp, types, options) {
    var query;                                                                                                         // 117
    query = {                                                                                                          // 117
      _hidden: {                                                                                                       // 118
        $ne: true                                                                                                      // 119
      },                                                                                                               // 119
      rid: roomId,                                                                                                     // 120
      ts: {                                                                                                            // 121
        $lt: timestamp                                                                                                 // 122
      }                                                                                                                // 122
    };                                                                                                                 // 118
                                                                                                                       //
    if (Match.test(types, [String]) && types.length > 0) {                                                             // 124
      query.t = {                                                                                                      // 125
        $nin: types                                                                                                    // 126
      };                                                                                                               // 126
    }                                                                                                                  // 216
                                                                                                                       //
    return this.find(query, options);                                                                                  // 128
  };                                                                                                                   // 116
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBetweenTimestampsNotContainingTypes = function (roomId, afterTimestamp, beforeTimestamp, types, options) {
    var query;                                                                                                         // 131
    query = {                                                                                                          // 131
      _hidden: {                                                                                                       // 132
        $ne: true                                                                                                      // 133
      },                                                                                                               // 133
      rid: roomId,                                                                                                     // 134
      ts: {                                                                                                            // 135
        $gt: afterTimestamp,                                                                                           // 136
        $lt: beforeTimestamp                                                                                           // 137
      }                                                                                                                // 136
    };                                                                                                                 // 132
                                                                                                                       //
    if (Match.test(types, [String]) && types.length > 0) {                                                             // 139
      query.t = {                                                                                                      // 140
        $nin: types                                                                                                    // 141
      };                                                                                                               // 141
    }                                                                                                                  // 236
                                                                                                                       //
    return this.find(query, options);                                                                                  // 143
  };                                                                                                                   // 130
                                                                                                                       //
  _Class.prototype.findVisibleCreatedOrEditedAfterTimestamp = function (timestamp, options) {                          // 240
    var query;                                                                                                         // 146
    query = {                                                                                                          // 146
      _hidden: {                                                                                                       // 147
        $ne: true                                                                                                      // 147
      },                                                                                                               // 147
      $or: [{                                                                                                          // 148
        ts: {                                                                                                          // 149
          $gt: timestamp                                                                                               // 150
        }                                                                                                              // 150
      }, {                                                                                                             // 149
        'editedAt': {                                                                                                  // 152
          $gt: timestamp                                                                                               // 153
        }                                                                                                              // 153
      }]                                                                                                               // 152
    };                                                                                                                 // 147
    return this.find(query, options);                                                                                  // 156
  };                                                                                                                   // 145
                                                                                                                       //
  _Class.prototype.findStarredByUserAtRoom = function (userId, roomId, options) {                                      // 261
    var query;                                                                                                         // 159
    query = {                                                                                                          // 159
      _hidden: {                                                                                                       // 160
        $ne: true                                                                                                      // 160
      },                                                                                                               // 160
      'starred._id': userId,                                                                                           // 161
      rid: roomId                                                                                                      // 162
    };                                                                                                                 // 160
    return this.find(query, options);                                                                                  // 164
  };                                                                                                                   // 158
                                                                                                                       //
  _Class.prototype.findPinnedByRoom = function (roomId, options) {                                                     // 273
    var query;                                                                                                         // 167
    query = {                                                                                                          // 167
      t: {                                                                                                             // 168
        $ne: 'rm'                                                                                                      // 168
      },                                                                                                               // 168
      _hidden: {                                                                                                       // 169
        $ne: true                                                                                                      // 169
      },                                                                                                               // 169
      pinned: true,                                                                                                    // 170
      rid: roomId                                                                                                      // 171
    };                                                                                                                 // 168
    return this.find(query, options);                                                                                  // 173
  };                                                                                                                   // 166
                                                                                                                       //
  _Class.prototype.findSnippetedByRoom = function (roomId, options) {                                                  // 288
    var query;                                                                                                         // 176
    query = {                                                                                                          // 176
      _hidden: {                                                                                                       // 177
        $ne: true                                                                                                      // 177
      },                                                                                                               // 177
      snippeted: true,                                                                                                 // 178
      rid: roomId                                                                                                      // 179
    };                                                                                                                 // 177
    return this.find(query, options);                                                                                  // 181
  };                                                                                                                   // 175
                                                                                                                       //
  _Class.prototype.getLastTimestamp = function (options) {                                                             // 300
    var query, ref, ref1, ref2;                                                                                        // 184
                                                                                                                       //
    if (options == null) {                                                                                             // 302
      options = {};                                                                                                    // 183
    }                                                                                                                  // 304
                                                                                                                       //
    query = {                                                                                                          // 184
      ts: {                                                                                                            // 184
        $exists: 1                                                                                                     // 184
      }                                                                                                                // 184
    };                                                                                                                 // 184
    options.sort = {                                                                                                   // 185
      ts: -1                                                                                                           // 185
    };                                                                                                                 // 185
    options.limit = 1;                                                                                                 // 186
    return (ref = this.find(query, options)) != null ? typeof ref.fetch === "function" ? (ref1 = ref.fetch()) != null ? (ref2 = ref1[0]) != null ? ref2.ts : void 0 : void 0 : void 0 : void 0;
  };                                                                                                                   // 183
                                                                                                                       //
  _Class.prototype.findByRoomIdAndMessageIds = function (rid, messageIds, options) {                                   // 317
    var query;                                                                                                         // 191
    query = {                                                                                                          // 191
      rid: rid,                                                                                                        // 192
      _id: {                                                                                                           // 193
        $in: messageIds                                                                                                // 194
      }                                                                                                                // 194
    };                                                                                                                 // 192
    return this.find(query, options);                                                                                  // 196
  };                                                                                                                   // 190
                                                                                                                       //
  _Class.prototype.findOneBySlackBotIdAndSlackTs = function (slackBotId, slackTs) {                                    // 328
    var query;                                                                                                         // 199
    query = {                                                                                                          // 199
      slackBotId: slackBotId,                                                                                          // 200
      slackTs: slackTs                                                                                                 // 201
    };                                                                                                                 // 200
    return this.findOne(query);                                                                                        // 203
  };                                                                                                                   // 198
                                                                                                                       //
  _Class.prototype.findOneBySlackTs = function (slackTs) {                                                             // 337
    var query;                                                                                                         // 206
    query = {                                                                                                          // 206
      slackTs: slackTs                                                                                                 // 207
    };                                                                                                                 // 207
    return this.findOne(query);                                                                                        // 209
  };                                                                                                                   // 205
                                                                                                                       //
  _Class.prototype.cloneAndSaveAsHistoryById = function (_id) {                                                        // 345
    var me, record;                                                                                                    // 212
    me = RocketChat.models.Users.findOneById(Meteor.userId());                                                         // 212
    record = this.findOneById(_id);                                                                                    // 213
    record._hidden = true;                                                                                             // 214
    record.parent = record._id;                                                                                        // 215
    record.editedAt = new Date();                                                                                      // 216
    record.editedBy = {                                                                                                // 217
      _id: Meteor.userId(),                                                                                            // 218
      username: me.username                                                                                            // 219
    };                                                                                                                 // 218
    delete record._id;                                                                                                 // 220
    return this.insert(record);                                                                                        // 221
  };                                                                                                                   // 211
                                                                                                                       //
  _Class.prototype.setHiddenById = function (_id, hidden) {                                                            // 360
    var query, update;                                                                                                 // 225
                                                                                                                       //
    if (hidden == null) {                                                                                              // 362
      hidden = true;                                                                                                   // 224
    }                                                                                                                  // 364
                                                                                                                       //
    query = {                                                                                                          // 225
      _id: _id                                                                                                         // 226
    };                                                                                                                 // 226
    update = {                                                                                                         // 228
      $set: {                                                                                                          // 229
        _hidden: hidden                                                                                                // 230
      }                                                                                                                // 230
    };                                                                                                                 // 229
    return this.update(query, update);                                                                                 // 232
  };                                                                                                                   // 224
                                                                                                                       //
  _Class.prototype.setAsDeletedByIdAndUser = function (_id, user) {                                                    // 376
    var query, update;                                                                                                 // 235
    query = {                                                                                                          // 235
      _id: _id                                                                                                         // 236
    };                                                                                                                 // 236
    update = {                                                                                                         // 238
      $set: {                                                                                                          // 239
        msg: '',                                                                                                       // 240
        t: 'rm',                                                                                                       // 241
        urls: [],                                                                                                      // 242
        mentions: [],                                                                                                  // 243
        attachments: [],                                                                                               // 244
        reactions: [],                                                                                                 // 245
        editedAt: new Date(),                                                                                          // 246
        editedBy: {                                                                                                    // 247
          _id: user._id,                                                                                               // 248
          username: user.username                                                                                      // 249
        }                                                                                                              // 248
      }                                                                                                                // 240
    };                                                                                                                 // 239
    return this.update(query, update);                                                                                 // 251
  };                                                                                                                   // 234
                                                                                                                       //
  _Class.prototype.setPinnedByIdAndUserId = function (_id, pinnedBy, pinned, pinnedAt) {                               // 399
    var query, update;                                                                                                 // 254
                                                                                                                       //
    if (pinned == null) {                                                                                              // 401
      pinned = true;                                                                                                   // 253
    }                                                                                                                  // 403
                                                                                                                       //
    if (pinnedAt == null) {                                                                                            // 404
      pinnedAt = 0;                                                                                                    // 253
    }                                                                                                                  // 406
                                                                                                                       //
    query = {                                                                                                          // 254
      _id: _id                                                                                                         // 255
    };                                                                                                                 // 255
    update = {                                                                                                         // 257
      $set: {                                                                                                          // 258
        pinned: pinned,                                                                                                // 259
        pinnedAt: pinnedAt || new Date(),                                                                              // 260
        pinnedBy: pinnedBy                                                                                             // 261
      }                                                                                                                // 259
    };                                                                                                                 // 258
    return this.update(query, update);                                                                                 // 263
  };                                                                                                                   // 253
                                                                                                                       //
  _Class.prototype.setSnippetedByIdAndUserId = function (message, snippetName, snippetedBy, snippeted, snippetedAt) {  // 420
    var msg, query, update;                                                                                            // 266
                                                                                                                       //
    if (snippeted == null) {                                                                                           // 422
      snippeted = true;                                                                                                // 265
    }                                                                                                                  // 424
                                                                                                                       //
    if (snippetedAt == null) {                                                                                         // 425
      snippetedAt = 0;                                                                                                 // 265
    }                                                                                                                  // 427
                                                                                                                       //
    query = {                                                                                                          // 266
      _id: message._id                                                                                                 // 267
    };                                                                                                                 // 267
    msg = "```" + message.msg + "```";                                                                                 // 269
    update = {                                                                                                         // 271
      $set: {                                                                                                          // 272
        msg: msg,                                                                                                      // 273
        snippeted: snippeted,                                                                                          // 274
        snippetedAt: snippetedAt || new Date(),                                                                        // 275
        snippetedBy: snippetedBy,                                                                                      // 276
        snippetName: snippetName                                                                                       // 277
      }                                                                                                                // 273
    };                                                                                                                 // 272
    return this.update(query, update);                                                                                 // 279
  };                                                                                                                   // 265
                                                                                                                       //
  _Class.prototype.setUrlsById = function (_id, urls) {                                                                // 444
    var query, update;                                                                                                 // 282
    query = {                                                                                                          // 282
      _id: _id                                                                                                         // 283
    };                                                                                                                 // 283
    update = {                                                                                                         // 285
      $set: {                                                                                                          // 286
        urls: urls                                                                                                     // 287
      }                                                                                                                // 287
    };                                                                                                                 // 286
    return this.update(query, update);                                                                                 // 289
  };                                                                                                                   // 281
                                                                                                                       //
  _Class.prototype.updateAllUsernamesByUserId = function (userId, username) {                                          // 457
    var query, update;                                                                                                 // 292
    query = {                                                                                                          // 292
      'u._id': userId                                                                                                  // 293
    };                                                                                                                 // 293
    update = {                                                                                                         // 295
      $set: {                                                                                                          // 296
        "u.username": username                                                                                         // 297
      }                                                                                                                // 297
    };                                                                                                                 // 296
    return this.update(query, update, {                                                                                // 299
      multi: true                                                                                                      // 299
    });                                                                                                                // 299
  };                                                                                                                   // 291
                                                                                                                       //
  _Class.prototype.updateUsernameOfEditByUserId = function (userId, username) {                                        // 472
    var query, update;                                                                                                 // 302
    query = {                                                                                                          // 302
      'editedBy._id': userId                                                                                           // 303
    };                                                                                                                 // 303
    update = {                                                                                                         // 305
      $set: {                                                                                                          // 306
        "editedBy.username": username                                                                                  // 307
      }                                                                                                                // 307
    };                                                                                                                 // 306
    return this.update(query, update, {                                                                                // 309
      multi: true                                                                                                      // 309
    });                                                                                                                // 309
  };                                                                                                                   // 301
                                                                                                                       //
  _Class.prototype.updateUsernameAndMessageOfMentionByIdAndOldUsername = function (_id, oldUsername, newUsername, newMessage) {
    var query, update;                                                                                                 // 312
    query = {                                                                                                          // 312
      _id: _id,                                                                                                        // 313
      "mentions.username": oldUsername                                                                                 // 314
    };                                                                                                                 // 313
    update = {                                                                                                         // 316
      $set: {                                                                                                          // 317
        "mentions.$.username": newUsername,                                                                            // 318
        "msg": newMessage                                                                                              // 319
      }                                                                                                                // 318
    };                                                                                                                 // 317
    return this.update(query, update);                                                                                 // 321
  };                                                                                                                   // 311
                                                                                                                       //
  _Class.prototype.updateUserStarById = function (_id, userId, starred) {                                              // 502
    var query, update;                                                                                                 // 324
    query = {                                                                                                          // 324
      _id: _id                                                                                                         // 325
    };                                                                                                                 // 325
                                                                                                                       //
    if (starred) {                                                                                                     // 327
      update = {                                                                                                       // 328
        $addToSet: {                                                                                                   // 329
          starred: {                                                                                                   // 330
            _id: userId                                                                                                // 330
          }                                                                                                            // 330
        }                                                                                                              // 330
      };                                                                                                               // 329
    } else {                                                                                                           // 327
      update = {                                                                                                       // 332
        $pull: {                                                                                                       // 333
          starred: {                                                                                                   // 334
            _id: Meteor.userId()                                                                                       // 334
          }                                                                                                            // 334
        }                                                                                                              // 334
      };                                                                                                               // 333
    }                                                                                                                  // 523
                                                                                                                       //
    return this.update(query, update);                                                                                 // 336
  };                                                                                                                   // 323
                                                                                                                       //
  _Class.prototype.upgradeEtsToEditAt = function () {                                                                  // 527
    var query, update;                                                                                                 // 339
    query = {                                                                                                          // 339
      ets: {                                                                                                           // 340
        $exists: 1                                                                                                     // 340
      }                                                                                                                // 340
    };                                                                                                                 // 340
    update = {                                                                                                         // 342
      $rename: {                                                                                                       // 343
        "ets": "editedAt"                                                                                              // 344
      }                                                                                                                // 344
    };                                                                                                                 // 343
    return this.update(query, update, {                                                                                // 346
      multi: true                                                                                                      // 346
    });                                                                                                                // 346
  };                                                                                                                   // 338
                                                                                                                       //
  _Class.prototype.setMessageAttachments = function (_id, attachments) {                                               // 544
    var query, update;                                                                                                 // 349
    query = {                                                                                                          // 349
      _id: _id                                                                                                         // 350
    };                                                                                                                 // 350
    update = {                                                                                                         // 352
      $set: {                                                                                                          // 353
        attachments: attachments                                                                                       // 354
      }                                                                                                                // 354
    };                                                                                                                 // 353
    return this.update(query, update);                                                                                 // 356
  };                                                                                                                   // 348
                                                                                                                       //
  _Class.prototype.setSlackBotIdAndSlackTs = function (_id, slackBotId, slackTs) {                                     // 557
    var query, update;                                                                                                 // 359
    query = {                                                                                                          // 359
      _id: _id                                                                                                         // 360
    };                                                                                                                 // 360
    update = {                                                                                                         // 362
      $set: {                                                                                                          // 363
        slackBotId: slackBotId,                                                                                        // 364
        slackTs: slackTs                                                                                               // 365
      }                                                                                                                // 364
    };                                                                                                                 // 363
    return this.update(query, update);                                                                                 // 367
  };                                                                                                                   // 358
                                                                                                                       //
  _Class.prototype.createWithTypeRoomIdMessageAndUser = function (type, roomId, message, user, extraData) {            // 571
    var record, room;                                                                                                  // 372
    room = RocketChat.models.Rooms.findOneById(roomId, {                                                               // 372
      fields: {                                                                                                        // 372
        sysMes: 1                                                                                                      // 372
      }                                                                                                                // 372
    });                                                                                                                // 372
                                                                                                                       //
    if ((room != null ? room.sysMes : void 0) === false) {                                                             // 373
      return;                                                                                                          // 374
    }                                                                                                                  // 580
                                                                                                                       //
    record = {                                                                                                         // 375
      t: type,                                                                                                         // 376
      rid: roomId,                                                                                                     // 377
      ts: new Date(),                                                                                                  // 378
      msg: message,                                                                                                    // 379
      u: {                                                                                                             // 380
        _id: user._id,                                                                                                 // 381
        username: user.username                                                                                        // 382
      },                                                                                                               // 381
      groupable: false                                                                                                 // 383
    };                                                                                                                 // 376
                                                                                                                       //
    _.extend(record, extraData);                                                                                       // 385
                                                                                                                       //
    record._id = this.insertOrUpsert(record);                                                                          // 387
    RocketChat.models.Rooms.incMsgCountById(room._id, 1);                                                              // 388
    return record;                                                                                                     // 389
  };                                                                                                                   // 371
                                                                                                                       //
  _Class.prototype.createUserJoinWithRoomIdAndUser = function (roomId, user, extraData) {                              // 598
    var message;                                                                                                       // 392
    message = user.username;                                                                                           // 392
    return this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);                            // 393
  };                                                                                                                   // 391
                                                                                                                       //
  _Class.prototype.createUserLeaveWithRoomIdAndUser = function (roomId, user, extraData) {                             // 604
    var message;                                                                                                       // 396
    message = user.username;                                                                                           // 396
    return this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);                            // 397
  };                                                                                                                   // 395
                                                                                                                       //
  _Class.prototype.createUserRemovedWithRoomIdAndUser = function (roomId, user, extraData) {                           // 610
    var message;                                                                                                       // 400
    message = user.username;                                                                                           // 400
    return this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);                            // 401
  };                                                                                                                   // 399
                                                                                                                       //
  _Class.prototype.createUserAddedWithRoomIdAndUser = function (roomId, user, extraData) {                             // 616
    var message;                                                                                                       // 404
    message = user.username;                                                                                           // 404
    return this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);                            // 405
  };                                                                                                                   // 403
                                                                                                                       //
  _Class.prototype.createCommandWithRoomIdAndUser = function (command, roomId, user, extraData) {                      // 622
    return this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);                       // 408
  };                                                                                                                   // 407
                                                                                                                       //
  _Class.prototype.createUserMutedWithRoomIdAndUser = function (roomId, user, extraData) {                             // 626
    var message;                                                                                                       // 411
    message = user.username;                                                                                           // 411
    return this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);                    // 412
  };                                                                                                                   // 410
                                                                                                                       //
  _Class.prototype.createUserUnmutedWithRoomIdAndUser = function (roomId, user, extraData) {                           // 632
    var message;                                                                                                       // 415
    message = user.username;                                                                                           // 415
    return this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);                  // 416
  };                                                                                                                   // 414
                                                                                                                       //
  _Class.prototype.createNewModeratorWithRoomIdAndUser = function (roomId, user, extraData) {                          // 638
    var message;                                                                                                       // 419
    message = user.username;                                                                                           // 419
    return this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);                 // 420
  };                                                                                                                   // 418
                                                                                                                       //
  _Class.prototype.createModeratorRemovedWithRoomIdAndUser = function (roomId, user, extraData) {                      // 644
    var message;                                                                                                       // 423
    message = user.username;                                                                                           // 423
    return this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);             // 424
  };                                                                                                                   // 422
                                                                                                                       //
  _Class.prototype.createNewOwnerWithRoomIdAndUser = function (roomId, user, extraData) {                              // 650
    var message;                                                                                                       // 427
    message = user.username;                                                                                           // 427
    return this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);                     // 428
  };                                                                                                                   // 426
                                                                                                                       //
  _Class.prototype.createOwnerRemovedWithRoomIdAndUser = function (roomId, user, extraData) {                          // 656
    var message;                                                                                                       // 431
    message = user.username;                                                                                           // 431
    return this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);                 // 432
  };                                                                                                                   // 430
                                                                                                                       //
  _Class.prototype.createSubscriptionRoleAddedWithRoomIdAndUser = function (roomId, user, extraData) {                 // 662
    var message;                                                                                                       // 435
    message = user.username;                                                                                           // 435
    return this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);       // 436
  };                                                                                                                   // 434
                                                                                                                       //
  _Class.prototype.createSubscriptionRoleRemovedWithRoomIdAndUser = function (roomId, user, extraData) {               // 668
    var message;                                                                                                       // 439
    message = user.username;                                                                                           // 439
    return this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);     // 440
  };                                                                                                                   // 438
                                                                                                                       //
  _Class.prototype.removeById = function (_id) {                                                                       // 674
    var query;                                                                                                         // 444
    query = {                                                                                                          // 444
      _id: _id                                                                                                         // 445
    };                                                                                                                 // 445
    return this.remove(query);                                                                                         // 447
  };                                                                                                                   // 443
                                                                                                                       //
  _Class.prototype.removeByRoomId = function (roomId) {                                                                // 682
    var query;                                                                                                         // 450
    query = {                                                                                                          // 450
      rid: roomId                                                                                                      // 451
    };                                                                                                                 // 451
    return this.remove(query);                                                                                         // 453
  };                                                                                                                   // 449
                                                                                                                       //
  _Class.prototype.removeByUserId = function (userId) {                                                                // 690
    var query;                                                                                                         // 456
    query = {                                                                                                          // 456
      "u._id": userId                                                                                                  // 457
    };                                                                                                                 // 457
    return this.remove(query);                                                                                         // 459
  };                                                                                                                   // 455
                                                                                                                       //
  _Class.prototype.getMessageByFileId = function (fileID) {                                                            // 698
    return this.findOne({                                                                                              // 462
      'file._id': fileID                                                                                               // 462
    });                                                                                                                // 462
  };                                                                                                                   // 461
                                                                                                                       //
  return _Class;                                                                                                       // 704
}(RocketChat.models._Base))();                                                                                         // 706
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Reports.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Reports.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
RocketChat.models.Reports = new (function (_RocketChat$models$_B) {                                                    // 1
	(0, _inherits3.default)(_class, _RocketChat$models$_B);                                                               // 1
                                                                                                                       //
	function _class() {                                                                                                   // 2
		(0, _classCallCheck3.default)(this, _class);                                                                         // 2
		return (0, _possibleConstructorReturn3.default)(this, _RocketChat$models$_B.call(this, 'reports'));                  // 2
	}                                                                                                                     // 4
                                                                                                                       //
	_class.prototype.createWithMessageDescriptionAndUserId = function () {                                                // 1
		function createWithMessageDescriptionAndUserId(message, description, userId, extraData) {                            // 1
			var record = {                                                                                                      // 6
				message: message,                                                                                                  // 7
				description: description,                                                                                          // 8
				ts: new Date(),                                                                                                    // 9
				userId: userId                                                                                                     // 10
			};                                                                                                                  // 6
                                                                                                                       //
			_.extend(record, extraData);                                                                                        // 12
                                                                                                                       //
			record._id = this.insert(record);                                                                                   // 13
			return record;                                                                                                      // 14
		}                                                                                                                    // 15
                                                                                                                       //
		return createWithMessageDescriptionAndUserId;                                                                        // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	return _class;                                                                                                        // 1
}(RocketChat.models._Base))();                                                                                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Rooms.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Rooms.coffee.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelRooms,                                                                                                        // 1
    extend = function (child, parent) {                                                                                // 1
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    // 1
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           // 1
  }                                                                                                                    // 1
                                                                                                                       //
  function ctor() {                                                                                                    // 1
    this.constructor = child;                                                                                          // 1
  }                                                                                                                    // 1
                                                                                                                       //
  ctor.prototype = parent.prototype;                                                                                   // 1
  child.prototype = new ctor();                                                                                        // 1
  child.__super__ = parent.prototype;                                                                                  // 1
  return child;                                                                                                        // 1
},                                                                                                                     // 1
    hasProp = {}.hasOwnProperty;                                                                                       // 1
                                                                                                                       //
ModelRooms = function (superClass) {                                                                                   // 1
  extend(ModelRooms, superClass);                                                                                      // 6
                                                                                                                       //
  function ModelRooms() {                                                                                              // 2
    ModelRooms.__super__.constructor.apply(this, arguments);                                                           // 3
                                                                                                                       //
    this.tryEnsureIndex({                                                                                              // 5
      'name': 1                                                                                                        // 5
    }, {                                                                                                               // 5
      unique: 1,                                                                                                       // 5
      sparse: 1                                                                                                        // 5
    });                                                                                                                // 5
    this.tryEnsureIndex({                                                                                              // 6
      'default': 1                                                                                                     // 6
    });                                                                                                                // 6
    this.tryEnsureIndex({                                                                                              // 7
      'usernames': 1                                                                                                   // 7
    });                                                                                                                // 7
    this.tryEnsureIndex({                                                                                              // 8
      't': 1                                                                                                           // 8
    });                                                                                                                // 8
    this.tryEnsureIndex({                                                                                              // 9
      'u._id': 1                                                                                                       // 9
    });                                                                                                                // 9
    this.cache.ignoreUpdatedFields.push('msgs', 'lm');                                                                 // 11
    this.cache.ensureIndex(['t', 'name'], 'unique');                                                                   // 12
    this.cache.options = {                                                                                             // 13
      fields: {                                                                                                        // 13
        usernames: 0                                                                                                   // 13
      }                                                                                                                // 13
    };                                                                                                                 // 13
  }                                                                                                                    // 2
                                                                                                                       //
  ModelRooms.prototype.findOneByIdOrName = function (_idOrName, options) {                                             // 37
    var query;                                                                                                         // 16
    query = {                                                                                                          // 16
      $or: [{                                                                                                          // 17
        _id: _idOrName                                                                                                 // 18
      }, {                                                                                                             // 17
        name: _idOrName                                                                                                // 20
      }]                                                                                                               // 19
    };                                                                                                                 // 16
    return this.findOne(query, options);                                                                               // 24
  };                                                                                                                   // 15
                                                                                                                       //
  ModelRooms.prototype.findOneByImportId = function (_id, options) {                                                   // 51
    var query;                                                                                                         // 27
    query = {                                                                                                          // 27
      importIds: _id                                                                                                   // 28
    };                                                                                                                 // 28
    return this.findOne(query, options);                                                                               // 30
  };                                                                                                                   // 26
                                                                                                                       //
  ModelRooms.prototype.findOneByName = function (name, options) {                                                      // 59
    var query;                                                                                                         // 33
    query = {                                                                                                          // 33
      name: name                                                                                                       // 34
    };                                                                                                                 // 34
    return this.findOne(query, options);                                                                               // 36
  };                                                                                                                   // 32
                                                                                                                       //
  ModelRooms.prototype.findOneByNameAndType = function (name, type, options) {                                         // 67
    var query;                                                                                                         // 39
    query = {                                                                                                          // 39
      name: name,                                                                                                      // 40
      t: type                                                                                                          // 41
    };                                                                                                                 // 40
    return this.findOne(query, options);                                                                               // 43
  };                                                                                                                   // 38
                                                                                                                       //
  ModelRooms.prototype.findOneByIdContainingUsername = function (_id, username, options) {                             // 76
    var query;                                                                                                         // 46
    query = {                                                                                                          // 46
      _id: _id,                                                                                                        // 47
      usernames: username                                                                                              // 48
    };                                                                                                                 // 47
    return this.findOne(query, options);                                                                               // 50
  };                                                                                                                   // 45
                                                                                                                       //
  ModelRooms.prototype.findOneByNameAndTypeNotContainingUsername = function (name, type, username, options) {          // 85
    var query;                                                                                                         // 53
    query = {                                                                                                          // 53
      name: name,                                                                                                      // 54
      t: type,                                                                                                         // 55
      usernames: {                                                                                                     // 56
        $ne: username                                                                                                  // 57
      }                                                                                                                // 57
    };                                                                                                                 // 54
    return this.findOne(query, options);                                                                               // 59
  };                                                                                                                   // 52
                                                                                                                       //
  ModelRooms.prototype.findById = function (roomId, options) {                                                         // 97
    return this.find({                                                                                                 // 65
      _id: roomId                                                                                                      // 65
    }, options);                                                                                                       // 65
  };                                                                                                                   // 64
                                                                                                                       //
  ModelRooms.prototype.findByIds = function (roomIds, options) {                                                       // 103
    return this.find({                                                                                                 // 68
      _id: {                                                                                                           // 68
        $in: [].concat(roomIds)                                                                                        // 68
      }                                                                                                                // 68
    }, options);                                                                                                       // 68
  };                                                                                                                   // 67
                                                                                                                       //
  ModelRooms.prototype.findByType = function (type, options) {                                                         // 111
    var query;                                                                                                         // 71
    query = {                                                                                                          // 71
      t: type                                                                                                          // 72
    };                                                                                                                 // 72
    return this.find(query, options);                                                                                  // 74
  };                                                                                                                   // 70
                                                                                                                       //
  ModelRooms.prototype.findByTypes = function (types, options) {                                                       // 119
    var query;                                                                                                         // 77
    query = {                                                                                                          // 77
      t: {                                                                                                             // 78
        $in: types                                                                                                     // 79
      }                                                                                                                // 79
    };                                                                                                                 // 78
    return this.find(query, options);                                                                                  // 81
  };                                                                                                                   // 76
                                                                                                                       //
  ModelRooms.prototype.findByUserId = function (userId, options) {                                                     // 129
    var query;                                                                                                         // 84
    query = {                                                                                                          // 84
      "u._id": userId                                                                                                  // 85
    };                                                                                                                 // 85
    return this.find(query, options);                                                                                  // 87
  };                                                                                                                   // 83
                                                                                                                       //
  ModelRooms.prototype.findBySubscriptionUserId = function (userId, options) {                                         // 137
    var data, query;                                                                                                   // 90
                                                                                                                       //
    if (this.useCache) {                                                                                               // 90
      data = RocketChat.models.Subscriptions.findByUserId(userId).fetch();                                             // 91
      data = data.map(function (item) {                                                                                // 92
        if (item._room) {                                                                                              // 93
          return item._room;                                                                                           // 94
        }                                                                                                              // 144
                                                                                                                       //
        console.log('Empty Room for Subscription', item);                                                              // 95
        return {};                                                                                                     // 96
      });                                                                                                              // 92
      return this.arrayToCursor(this.processQueryOptionsOnResult(data, options));                                      // 97
    }                                                                                                                  // 149
                                                                                                                       //
    data = RocketChat.models.Subscriptions.findByUserId(userId, {                                                      // 99
      fields: {                                                                                                        // 99
        rid: 1                                                                                                         // 99
      }                                                                                                                // 99
    }).fetch();                                                                                                        // 99
    data = data.map(function (item) {                                                                                  // 100
      return item.rid;                                                                                                 // 156
    });                                                                                                                // 100
    query = {                                                                                                          // 102
      _id: {                                                                                                           // 103
        $in: data                                                                                                      // 104
      }                                                                                                                // 104
    };                                                                                                                 // 103
    return this.find(query, options);                                                                                  // 163
  };                                                                                                                   // 89
                                                                                                                       //
  ModelRooms.prototype.findBySubscriptionUserIdUpdatedAfter = function (userId, _updatedAt, options) {                 // 166
    var data, ids, query;                                                                                              // 109
                                                                                                                       //
    if (this.useCache) {                                                                                               // 109
      data = RocketChat.models.Subscriptions.findByUserId(userId).fetch();                                             // 110
      data = data.map(function (item) {                                                                                // 111
        if (item._room) {                                                                                              // 112
          return item._room;                                                                                           // 113
        }                                                                                                              // 173
                                                                                                                       //
        console.log('Empty Room for Subscription', item);                                                              // 114
        return {};                                                                                                     // 115
      });                                                                                                              // 111
      data = data.filter(function (item) {                                                                             // 116
        return item._updatedAt > _updatedAt;                                                                           // 178
      });                                                                                                              // 116
      return this.arrayToCursor(this.processQueryOptionsOnResult(data, options));                                      // 117
    }                                                                                                                  // 181
                                                                                                                       //
    ids = RocketChat.models.Subscriptions.findByUserId(userId, {                                                       // 119
      fields: {                                                                                                        // 119
        rid: 1                                                                                                         // 119
      }                                                                                                                // 119
    }).fetch();                                                                                                        // 119
    ids = ids.map(function (item) {                                                                                    // 120
      return item.rid;                                                                                                 // 188
    });                                                                                                                // 120
    query = {                                                                                                          // 122
      _id: {                                                                                                           // 123
        $in: ids                                                                                                       // 124
      },                                                                                                               // 124
      _updatedAt: {                                                                                                    // 125
        $gt: _updatedAt                                                                                                // 126
      }                                                                                                                // 126
    };                                                                                                                 // 123
    return this.find(query, options);                                                                                  // 198
  };                                                                                                                   // 108
                                                                                                                       //
  ModelRooms.prototype.findByNameContaining = function (name, options) {                                               // 201
    var nameRegex, query;                                                                                              // 131
    nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), "i");                                                         // 131
    query = {                                                                                                          // 133
      $or: [{                                                                                                          // 134
        name: nameRegex                                                                                                // 135
      }, {                                                                                                             // 135
        t: 'd',                                                                                                        // 137
        usernames: nameRegex                                                                                           // 138
      }]                                                                                                               // 137
    };                                                                                                                 // 134
    return this.find(query, options);                                                                                  // 141
  };                                                                                                                   // 130
                                                                                                                       //
  ModelRooms.prototype.findByNameContainingTypesWithUsername = function (name, types, options) {                       // 217
    var $or, i, len, nameRegex, obj, query, type;                                                                      // 144
    nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), "i");                                                         // 144
    $or = [];                                                                                                          // 146
                                                                                                                       //
    for (i = 0, len = types.length; i < len; i++) {                                                                    // 147
      type = types[i];                                                                                                 // 222
      obj = {                                                                                                          // 148
        name: nameRegex,                                                                                               // 148
        t: type.type                                                                                                   // 148
      };                                                                                                               // 148
                                                                                                                       //
      if (type.username != null) {                                                                                     // 149
        obj.usernames = type.username;                                                                                 // 150
      }                                                                                                                // 229
                                                                                                                       //
      if (type.ids != null) {                                                                                          // 151
        obj._id = {                                                                                                    // 152
          $in: type.ids                                                                                                // 152
        };                                                                                                             // 152
      }                                                                                                                // 234
                                                                                                                       //
      $or.push(obj);                                                                                                   // 153
    }                                                                                                                  // 147
                                                                                                                       //
    query = {                                                                                                          // 155
      $or: $or                                                                                                         // 156
    };                                                                                                                 // 156
    return this.find(query, options);                                                                                  // 158
  };                                                                                                                   // 143
                                                                                                                       //
  ModelRooms.prototype.findContainingTypesWithUsername = function (types, options) {                                   // 243
    var $or, i, len, obj, query, type;                                                                                 // 162
    $or = [];                                                                                                          // 162
                                                                                                                       //
    for (i = 0, len = types.length; i < len; i++) {                                                                    // 163
      type = types[i];                                                                                                 // 247
      obj = {                                                                                                          // 164
        t: type.type                                                                                                   // 164
      };                                                                                                               // 164
                                                                                                                       //
      if (type.username != null) {                                                                                     // 165
        obj.usernames = type.username;                                                                                 // 166
      }                                                                                                                // 253
                                                                                                                       //
      if (type.ids != null) {                                                                                          // 167
        obj._id = {                                                                                                    // 168
          $in: type.ids                                                                                                // 168
        };                                                                                                             // 168
      }                                                                                                                // 258
                                                                                                                       //
      $or.push(obj);                                                                                                   // 169
    }                                                                                                                  // 163
                                                                                                                       //
    query = {                                                                                                          // 171
      $or: $or                                                                                                         // 172
    };                                                                                                                 // 172
    return this.find(query, options);                                                                                  // 174
  };                                                                                                                   // 160
                                                                                                                       //
  ModelRooms.prototype.findByNameContainingAndTypes = function (name, types, options) {                                // 267
    var nameRegex, query;                                                                                              // 177
    nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), "i");                                                         // 177
    query = {                                                                                                          // 179
      t: {                                                                                                             // 180
        $in: types                                                                                                     // 181
      },                                                                                                               // 181
      $or: [{                                                                                                          // 182
        name: nameRegex                                                                                                // 183
      }, {                                                                                                             // 183
        t: 'd',                                                                                                        // 185
        usernames: nameRegex                                                                                           // 186
      }]                                                                                                               // 185
    };                                                                                                                 // 180
    return this.find(query, options);                                                                                  // 189
  };                                                                                                                   // 176
                                                                                                                       //
  ModelRooms.prototype.findByNameAndType = function (name, type, options) {                                            // 286
    var query;                                                                                                         // 192
    query = {                                                                                                          // 192
      t: type,                                                                                                         // 193
      name: name                                                                                                       // 194
    };                                                                                                                 // 193
    return this.find(query, options);                                                                                  // 196
  };                                                                                                                   // 191
                                                                                                                       //
  ModelRooms.prototype.findByNameAndTypeNotDefault = function (name, type, options) {                                  // 295
    var query;                                                                                                         // 199
    query = {                                                                                                          // 199
      t: type,                                                                                                         // 200
      name: name,                                                                                                      // 201
      "default": {                                                                                                     // 202
        $ne: true                                                                                                      // 203
      }                                                                                                                // 203
    };                                                                                                                 // 200
    return this.find(query, options);                                                                                  // 205
  };                                                                                                                   // 198
                                                                                                                       //
  ModelRooms.prototype.findByNameAndTypeNotContainingUsername = function (name, type, username, options) {             // 307
    var query;                                                                                                         // 208
    query = {                                                                                                          // 208
      t: type,                                                                                                         // 209
      name: name,                                                                                                      // 210
      usernames: {                                                                                                     // 211
        $ne: username                                                                                                  // 212
      }                                                                                                                // 212
    };                                                                                                                 // 209
    return this.find(query, options);                                                                                  // 214
  };                                                                                                                   // 207
                                                                                                                       //
  ModelRooms.prototype.findByNameStartingAndTypes = function (name, types, options) {                                  // 319
    var nameRegex, query;                                                                                              // 217
    nameRegex = new RegExp("^" + s.trim(s.escapeRegExp(name)), "i");                                                   // 217
    query = {                                                                                                          // 219
      t: {                                                                                                             // 220
        $in: types                                                                                                     // 221
      },                                                                                                               // 221
      $or: [{                                                                                                          // 222
        name: nameRegex                                                                                                // 223
      }, {                                                                                                             // 223
        t: 'd',                                                                                                        // 225
        usernames: nameRegex                                                                                           // 226
      }]                                                                                                               // 225
    };                                                                                                                 // 220
    return this.find(query, options);                                                                                  // 229
  };                                                                                                                   // 216
                                                                                                                       //
  ModelRooms.prototype.findByDefaultAndTypes = function (defaultValue, types, options) {                               // 338
    var query;                                                                                                         // 232
    query = {                                                                                                          // 232
      "default": defaultValue,                                                                                         // 233
      t: {                                                                                                             // 234
        $in: types                                                                                                     // 235
      }                                                                                                                // 235
    };                                                                                                                 // 233
    return this.find(query, options);                                                                                  // 237
  };                                                                                                                   // 231
                                                                                                                       //
  ModelRooms.prototype.findByTypeContainingUsername = function (type, username, options) {                             // 349
    var query;                                                                                                         // 240
    query = {                                                                                                          // 240
      t: type,                                                                                                         // 241
      usernames: username                                                                                              // 242
    };                                                                                                                 // 241
    return this.find(query, options);                                                                                  // 244
  };                                                                                                                   // 239
                                                                                                                       //
  ModelRooms.prototype.findByTypeContainingUsernames = function (type, username, options) {                            // 358
    var query;                                                                                                         // 247
    query = {                                                                                                          // 247
      t: type,                                                                                                         // 248
      usernames: {                                                                                                     // 249
        $all: [].concat(username)                                                                                      // 249
      }                                                                                                                // 249
    };                                                                                                                 // 248
    return this.find(query, options);                                                                                  // 251
  };                                                                                                                   // 246
                                                                                                                       //
  ModelRooms.prototype.findByTypesAndNotUserIdContainingUsername = function (types, userId, username, options) {       // 369
    var query;                                                                                                         // 254
    query = {                                                                                                          // 254
      t: {                                                                                                             // 255
        $in: types                                                                                                     // 256
      },                                                                                                               // 256
      uid: {                                                                                                           // 257
        $ne: userId                                                                                                    // 258
      },                                                                                                               // 258
      usernames: username                                                                                              // 259
    };                                                                                                                 // 255
    return this.find(query, options);                                                                                  // 261
  };                                                                                                                   // 253
                                                                                                                       //
  ModelRooms.prototype.findByContainingUsername = function (username, options) {                                       // 383
    var query;                                                                                                         // 264
    query = {                                                                                                          // 264
      usernames: username                                                                                              // 265
    };                                                                                                                 // 265
    return this.find(query, options);                                                                                  // 267
  };                                                                                                                   // 263
                                                                                                                       //
  ModelRooms.prototype.findByTypeAndName = function (type, name, options) {                                            // 391
    var query;                                                                                                         // 270
                                                                                                                       //
    if (this.useCache) {                                                                                               // 270
      return this.cache.findByIndex('t,name', [type, name], options);                                                  // 271
    }                                                                                                                  // 395
                                                                                                                       //
    query = {                                                                                                          // 273
      name: name,                                                                                                      // 274
      t: type                                                                                                          // 275
    };                                                                                                                 // 274
    return this.find(query, options);                                                                                  // 277
  };                                                                                                                   // 269
                                                                                                                       //
  ModelRooms.prototype.findByTypeAndNameContainingUsername = function (type, name, username, options) {                // 403
    var query;                                                                                                         // 280
    query = {                                                                                                          // 280
      name: name,                                                                                                      // 281
      t: type,                                                                                                         // 282
      usernames: username                                                                                              // 283
    };                                                                                                                 // 281
    return this.find(query, options);                                                                                  // 285
  };                                                                                                                   // 279
                                                                                                                       //
  ModelRooms.prototype.findByTypeAndArchivationState = function (type, archivationstate, options) {                    // 413
    var query;                                                                                                         // 288
    query = {                                                                                                          // 288
      t: type                                                                                                          // 289
    };                                                                                                                 // 289
                                                                                                                       //
    if (archivationstate) {                                                                                            // 291
      query.archived = true;                                                                                           // 292
    } else {                                                                                                           // 291
      query.archived = {                                                                                               // 294
        $ne: true                                                                                                      // 294
      };                                                                                                               // 294
    }                                                                                                                  // 424
                                                                                                                       //
    return this.find(query, options);                                                                                  // 296
  };                                                                                                                   // 287
                                                                                                                       //
  ModelRooms.prototype.addImportIds = function (_id, importIds) {                                                      // 428
    var query, update;                                                                                                 // 300
    importIds = [].concat(importIds);                                                                                  // 300
    query = {                                                                                                          // 301
      _id: _id                                                                                                         // 302
    };                                                                                                                 // 302
    update = {                                                                                                         // 304
      $addToSet: {                                                                                                     // 305
        importIds: {                                                                                                   // 306
          $each: importIds                                                                                             // 307
        }                                                                                                              // 307
      }                                                                                                                // 306
    };                                                                                                                 // 305
    return this.update(query, update);                                                                                 // 309
  };                                                                                                                   // 299
                                                                                                                       //
  ModelRooms.prototype.archiveById = function (_id) {                                                                  // 444
    var query, update;                                                                                                 // 312
    query = {                                                                                                          // 312
      _id: _id                                                                                                         // 313
    };                                                                                                                 // 313
    update = {                                                                                                         // 315
      $set: {                                                                                                          // 316
        archived: true                                                                                                 // 317
      }                                                                                                                // 317
    };                                                                                                                 // 316
    return this.update(query, update);                                                                                 // 319
  };                                                                                                                   // 311
                                                                                                                       //
  ModelRooms.prototype.unarchiveById = function (_id) {                                                                // 457
    var query, update;                                                                                                 // 322
    query = {                                                                                                          // 322
      _id: _id                                                                                                         // 323
    };                                                                                                                 // 323
    update = {                                                                                                         // 325
      $set: {                                                                                                          // 326
        archived: false                                                                                                // 327
      }                                                                                                                // 327
    };                                                                                                                 // 326
    return this.update(query, update);                                                                                 // 329
  };                                                                                                                   // 321
                                                                                                                       //
  ModelRooms.prototype.addUsernameById = function (_id, username, muted) {                                             // 470
    var query, update;                                                                                                 // 332
    query = {                                                                                                          // 332
      _id: _id                                                                                                         // 333
    };                                                                                                                 // 333
    update = {                                                                                                         // 335
      $addToSet: {                                                                                                     // 336
        usernames: username                                                                                            // 337
      }                                                                                                                // 337
    };                                                                                                                 // 336
                                                                                                                       //
    if (muted) {                                                                                                       // 339
      update.$addToSet.muted = username;                                                                               // 340
    }                                                                                                                  // 482
                                                                                                                       //
    return this.update(query, update);                                                                                 // 342
  };                                                                                                                   // 331
                                                                                                                       //
  ModelRooms.prototype.addUsernamesById = function (_id, usernames) {                                                  // 486
    var query, update;                                                                                                 // 345
    query = {                                                                                                          // 345
      _id: _id                                                                                                         // 346
    };                                                                                                                 // 346
    update = {                                                                                                         // 348
      $addToSet: {                                                                                                     // 349
        usernames: {                                                                                                   // 350
          $each: usernames                                                                                             // 351
        }                                                                                                              // 351
      }                                                                                                                // 350
    };                                                                                                                 // 349
    return this.update(query, update);                                                                                 // 353
  };                                                                                                                   // 344
                                                                                                                       //
  ModelRooms.prototype.addUsernameByName = function (name, username) {                                                 // 501
    var query, update;                                                                                                 // 356
    query = {                                                                                                          // 356
      name: name                                                                                                       // 357
    };                                                                                                                 // 357
    update = {                                                                                                         // 359
      $addToSet: {                                                                                                     // 360
        usernames: username                                                                                            // 361
      }                                                                                                                // 361
    };                                                                                                                 // 360
    return this.update(query, update);                                                                                 // 363
  };                                                                                                                   // 355
                                                                                                                       //
  ModelRooms.prototype.removeUsernameById = function (_id, username) {                                                 // 514
    var query, update;                                                                                                 // 366
    query = {                                                                                                          // 366
      _id: _id                                                                                                         // 367
    };                                                                                                                 // 367
    update = {                                                                                                         // 369
      $pull: {                                                                                                         // 370
        usernames: username                                                                                            // 371
      }                                                                                                                // 371
    };                                                                                                                 // 370
    return this.update(query, update);                                                                                 // 373
  };                                                                                                                   // 365
                                                                                                                       //
  ModelRooms.prototype.removeUsernamesById = function (_id, usernames) {                                               // 527
    var query, update;                                                                                                 // 376
    query = {                                                                                                          // 376
      _id: _id                                                                                                         // 377
    };                                                                                                                 // 377
    update = {                                                                                                         // 379
      $pull: {                                                                                                         // 380
        usernames: {                                                                                                   // 381
          $in: usernames                                                                                               // 382
        }                                                                                                              // 382
      }                                                                                                                // 381
    };                                                                                                                 // 380
    return this.update(query, update);                                                                                 // 384
  };                                                                                                                   // 375
                                                                                                                       //
  ModelRooms.prototype.removeUsernameFromAll = function (username) {                                                   // 542
    var query, update;                                                                                                 // 387
    query = {                                                                                                          // 387
      usernames: username                                                                                              // 388
    };                                                                                                                 // 388
    update = {                                                                                                         // 390
      $pull: {                                                                                                         // 391
        usernames: username                                                                                            // 392
      }                                                                                                                // 392
    };                                                                                                                 // 391
    return this.update(query, update, {                                                                                // 394
      multi: true                                                                                                      // 394
    });                                                                                                                // 394
  };                                                                                                                   // 386
                                                                                                                       //
  ModelRooms.prototype.removeUsernameByName = function (name, username) {                                              // 557
    var query, update;                                                                                                 // 397
    query = {                                                                                                          // 397
      name: name                                                                                                       // 398
    };                                                                                                                 // 398
    update = {                                                                                                         // 400
      $pull: {                                                                                                         // 401
        usernames: username                                                                                            // 402
      }                                                                                                                // 402
    };                                                                                                                 // 401
    return this.update(query, update);                                                                                 // 404
  };                                                                                                                   // 396
                                                                                                                       //
  ModelRooms.prototype.setNameById = function (_id, name) {                                                            // 570
    var query, update;                                                                                                 // 407
    query = {                                                                                                          // 407
      _id: _id                                                                                                         // 408
    };                                                                                                                 // 408
    update = {                                                                                                         // 410
      $set: {                                                                                                          // 411
        name: name                                                                                                     // 412
      }                                                                                                                // 412
    };                                                                                                                 // 411
    return this.update(query, update);                                                                                 // 414
  };                                                                                                                   // 406
                                                                                                                       //
  ModelRooms.prototype.incMsgCountById = function (_id, inc) {                                                         // 583
    var query, update;                                                                                                 // 417
                                                                                                                       //
    if (inc == null) {                                                                                                 // 585
      inc = 1;                                                                                                         // 416
    }                                                                                                                  // 587
                                                                                                                       //
    query = {                                                                                                          // 417
      _id: _id                                                                                                         // 418
    };                                                                                                                 // 418
    update = {                                                                                                         // 420
      $inc: {                                                                                                          // 421
        msgs: inc                                                                                                      // 422
      }                                                                                                                // 422
    };                                                                                                                 // 421
    return this.update(query, update);                                                                                 // 424
  };                                                                                                                   // 416
                                                                                                                       //
  ModelRooms.prototype.incMsgCountAndSetLastMessageTimestampById = function (_id, inc, lastMessageTimestamp) {         // 599
    var query, update;                                                                                                 // 427
                                                                                                                       //
    if (inc == null) {                                                                                                 // 601
      inc = 1;                                                                                                         // 426
    }                                                                                                                  // 603
                                                                                                                       //
    query = {                                                                                                          // 427
      _id: _id                                                                                                         // 428
    };                                                                                                                 // 428
    update = {                                                                                                         // 430
      $set: {                                                                                                          // 431
        lm: lastMessageTimestamp                                                                                       // 432
      },                                                                                                               // 432
      $inc: {                                                                                                          // 433
        msgs: inc                                                                                                      // 434
      }                                                                                                                // 434
    };                                                                                                                 // 431
    return this.update(query, update);                                                                                 // 436
  };                                                                                                                   // 426
                                                                                                                       //
  ModelRooms.prototype.replaceUsername = function (previousUsername, username) {                                       // 618
    var query, update;                                                                                                 // 439
    query = {                                                                                                          // 439
      usernames: previousUsername                                                                                      // 440
    };                                                                                                                 // 440
    update = {                                                                                                         // 442
      $set: {                                                                                                          // 443
        "usernames.$": username                                                                                        // 444
      }                                                                                                                // 444
    };                                                                                                                 // 443
    return this.update(query, update, {                                                                                // 446
      multi: true                                                                                                      // 446
    });                                                                                                                // 446
  };                                                                                                                   // 438
                                                                                                                       //
  ModelRooms.prototype.replaceMutedUsername = function (previousUsername, username) {                                  // 633
    var query, update;                                                                                                 // 449
    query = {                                                                                                          // 449
      muted: previousUsername                                                                                          // 450
    };                                                                                                                 // 450
    update = {                                                                                                         // 452
      $set: {                                                                                                          // 453
        "muted.$": username                                                                                            // 454
      }                                                                                                                // 454
    };                                                                                                                 // 453
    return this.update(query, update, {                                                                                // 456
      multi: true                                                                                                      // 456
    });                                                                                                                // 456
  };                                                                                                                   // 448
                                                                                                                       //
  ModelRooms.prototype.replaceUsernameOfUserByUserId = function (userId, username) {                                   // 648
    var query, update;                                                                                                 // 459
    query = {                                                                                                          // 459
      "u._id": userId                                                                                                  // 460
    };                                                                                                                 // 460
    update = {                                                                                                         // 462
      $set: {                                                                                                          // 463
        "u.username": username                                                                                         // 464
      }                                                                                                                // 464
    };                                                                                                                 // 463
    return this.update(query, update, {                                                                                // 466
      multi: true                                                                                                      // 466
    });                                                                                                                // 466
  };                                                                                                                   // 458
                                                                                                                       //
  ModelRooms.prototype.setJoinCodeById = function (_id, joinCode) {                                                    // 663
    var query, update;                                                                                                 // 469
    query = {                                                                                                          // 469
      _id: _id                                                                                                         // 470
    };                                                                                                                 // 470
                                                                                                                       //
    if ((joinCode != null ? joinCode.trim() : void 0) !== '') {                                                        // 472
      update = {                                                                                                       // 473
        $set: {                                                                                                        // 474
          joinCodeRequired: true,                                                                                      // 475
          joinCode: joinCode                                                                                           // 476
        }                                                                                                              // 475
      };                                                                                                               // 474
    } else {                                                                                                           // 472
      update = {                                                                                                       // 478
        $set: {                                                                                                        // 479
          joinCodeRequired: false                                                                                      // 480
        },                                                                                                             // 480
        $unset: {                                                                                                      // 481
          joinCode: 1                                                                                                  // 482
        }                                                                                                              // 482
      };                                                                                                               // 479
    }                                                                                                                  // 684
                                                                                                                       //
    return this.update(query, update);                                                                                 // 484
  };                                                                                                                   // 468
                                                                                                                       //
  ModelRooms.prototype.setUserById = function (_id, user) {                                                            // 688
    var query, update;                                                                                                 // 487
    query = {                                                                                                          // 487
      _id: _id                                                                                                         // 488
    };                                                                                                                 // 488
    update = {                                                                                                         // 490
      $set: {                                                                                                          // 491
        u: {                                                                                                           // 492
          _id: user._id,                                                                                               // 493
          username: user.username                                                                                      // 494
        }                                                                                                              // 493
      }                                                                                                                // 492
    };                                                                                                                 // 491
    return this.update(query, update);                                                                                 // 496
  };                                                                                                                   // 486
                                                                                                                       //
  ModelRooms.prototype.setTypeById = function (_id, type) {                                                            // 704
    var query, update;                                                                                                 // 499
    query = {                                                                                                          // 499
      _id: _id                                                                                                         // 500
    };                                                                                                                 // 500
    update = {                                                                                                         // 501
      $set: {                                                                                                          // 502
        t: type                                                                                                        // 503
      }                                                                                                                // 503
    };                                                                                                                 // 502
                                                                                                                       //
    if (type === 'p') {                                                                                                // 504
      update.$unset = {                                                                                                // 505
        "default": ''                                                                                                  // 505
      };                                                                                                               // 505
    }                                                                                                                  // 718
                                                                                                                       //
    return this.update(query, update);                                                                                 // 507
  };                                                                                                                   // 498
                                                                                                                       //
  ModelRooms.prototype.setTopicById = function (_id, topic) {                                                          // 722
    var query, update;                                                                                                 // 510
    query = {                                                                                                          // 510
      _id: _id                                                                                                         // 511
    };                                                                                                                 // 511
    update = {                                                                                                         // 513
      $set: {                                                                                                          // 514
        topic: topic                                                                                                   // 515
      }                                                                                                                // 515
    };                                                                                                                 // 514
    return this.update(query, update);                                                                                 // 517
  };                                                                                                                   // 509
                                                                                                                       //
  ModelRooms.prototype.setAnnouncementById = function (_id, announcement) {                                            // 735
    var query, update;                                                                                                 // 520
    query = {                                                                                                          // 520
      _id: _id                                                                                                         // 521
    };                                                                                                                 // 521
    update = {                                                                                                         // 523
      $set: {                                                                                                          // 524
        announcement: announcement                                                                                     // 525
      }                                                                                                                // 525
    };                                                                                                                 // 524
    return this.update(query, update);                                                                                 // 527
  };                                                                                                                   // 519
                                                                                                                       //
  ModelRooms.prototype.muteUsernameByRoomId = function (_id, username) {                                               // 748
    var query, update;                                                                                                 // 530
    query = {                                                                                                          // 530
      _id: _id                                                                                                         // 531
    };                                                                                                                 // 531
    update = {                                                                                                         // 533
      $addToSet: {                                                                                                     // 534
        muted: username                                                                                                // 535
      }                                                                                                                // 535
    };                                                                                                                 // 534
    return this.update(query, update);                                                                                 // 537
  };                                                                                                                   // 529
                                                                                                                       //
  ModelRooms.prototype.unmuteUsernameByRoomId = function (_id, username) {                                             // 761
    var query, update;                                                                                                 // 540
    query = {                                                                                                          // 540
      _id: _id                                                                                                         // 541
    };                                                                                                                 // 541
    update = {                                                                                                         // 543
      $pull: {                                                                                                         // 544
        muted: username                                                                                                // 545
      }                                                                                                                // 545
    };                                                                                                                 // 544
    return this.update(query, update);                                                                                 // 547
  };                                                                                                                   // 539
                                                                                                                       //
  ModelRooms.prototype.saveDefaultById = function (_id, defaultValue) {                                                // 774
    var query, update;                                                                                                 // 550
    query = {                                                                                                          // 550
      _id: _id                                                                                                         // 551
    };                                                                                                                 // 551
    update = {                                                                                                         // 553
      $set: {                                                                                                          // 554
        "default": defaultValue === 'true'                                                                             // 555
      }                                                                                                                // 555
    };                                                                                                                 // 554
    return this.update(query, update);                                                                                 // 557
  };                                                                                                                   // 549
                                                                                                                       //
  ModelRooms.prototype.setTopicAndTagsById = function (_id, topic, tags) {                                             // 787
    var setData, unsetData, update;                                                                                    // 560
    setData = {};                                                                                                      // 560
    unsetData = {};                                                                                                    // 561
                                                                                                                       //
    if (topic != null) {                                                                                               // 563
      if (!_.isEmpty(s.trim(topic))) {                                                                                 // 564
        setData.topic = s.trim(topic);                                                                                 // 565
      } else {                                                                                                         // 564
        unsetData.topic = 1;                                                                                           // 567
      }                                                                                                                // 563
    }                                                                                                                  // 797
                                                                                                                       //
    if (tags != null) {                                                                                                // 569
      if (!_.isEmpty(s.trim(tags))) {                                                                                  // 570
        setData.tags = s.trim(tags).split(',').map(function (_this) {                                                  // 571
          return function (tag) {                                                                                      // 801
            return s.trim(tag);                                                                                        // 571
          };                                                                                                           // 571
        }(this));                                                                                                      // 571
      } else {                                                                                                         // 570
        unsetData.tags = 1;                                                                                            // 573
      }                                                                                                                // 569
    }                                                                                                                  // 808
                                                                                                                       //
    update = {};                                                                                                       // 575
                                                                                                                       //
    if (!_.isEmpty(setData)) {                                                                                         // 577
      update.$set = setData;                                                                                           // 578
    }                                                                                                                  // 812
                                                                                                                       //
    if (!_.isEmpty(unsetData)) {                                                                                       // 580
      update.$unset = unsetData;                                                                                       // 581
    }                                                                                                                  // 815
                                                                                                                       //
    if (_.isEmpty(update)) {                                                                                           // 583
      return;                                                                                                          // 584
    }                                                                                                                  // 818
                                                                                                                       //
    return this.update({                                                                                               // 586
      _id: _id                                                                                                         // 586
    }, update);                                                                                                        // 586
  };                                                                                                                   // 559
                                                                                                                       //
  ModelRooms.prototype.createWithTypeNameUserAndUsernames = function (type, name, user, usernames, extraData) {        // 824
    var room;                                                                                                          // 590
    room = {                                                                                                           // 590
      name: name,                                                                                                      // 591
      t: type,                                                                                                         // 592
      usernames: usernames,                                                                                            // 593
      msgs: 0,                                                                                                         // 594
      u: {                                                                                                             // 595
        _id: user._id,                                                                                                 // 596
        username: user.username                                                                                        // 597
      }                                                                                                                // 596
    };                                                                                                                 // 591
                                                                                                                       //
    _.extend(room, extraData);                                                                                         // 599
                                                                                                                       //
    room._id = this.insert(room);                                                                                      // 601
    return room;                                                                                                       // 602
  };                                                                                                                   // 589
                                                                                                                       //
  ModelRooms.prototype.createWithIdTypeAndName = function (_id, type, name, extraData) {                               // 841
    var room;                                                                                                          // 605
    room = {                                                                                                           // 605
      _id: _id,                                                                                                        // 606
      ts: new Date(),                                                                                                  // 607
      t: type,                                                                                                         // 608
      name: name,                                                                                                      // 609
      usernames: [],                                                                                                   // 610
      msgs: 0                                                                                                          // 611
    };                                                                                                                 // 606
                                                                                                                       //
    _.extend(room, extraData);                                                                                         // 613
                                                                                                                       //
    this.insert(room);                                                                                                 // 615
    return room;                                                                                                       // 616
  };                                                                                                                   // 604
                                                                                                                       //
  ModelRooms.prototype.removeById = function (_id) {                                                                   // 856
    var query;                                                                                                         // 621
    query = {                                                                                                          // 621
      _id: _id                                                                                                         // 622
    };                                                                                                                 // 622
    return this.remove(query);                                                                                         // 624
  };                                                                                                                   // 620
                                                                                                                       //
  ModelRooms.prototype.removeByTypeContainingUsername = function (type, username) {                                    // 864
    var query;                                                                                                         // 627
    query = {                                                                                                          // 627
      t: type,                                                                                                         // 628
      usernames: username                                                                                              // 629
    };                                                                                                                 // 628
    return this.remove(query);                                                                                         // 631
  };                                                                                                                   // 626
                                                                                                                       //
  return ModelRooms;                                                                                                   // 873
}(RocketChat.models._Base);                                                                                            // 875
                                                                                                                       //
RocketChat.models.Rooms = new ModelRooms('room', true);                                                                // 633
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Settings.coffee.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelSettings,                                                                                                     // 1
    extend = function (child, parent) {                                                                                // 1
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    // 1
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           // 1
  }                                                                                                                    // 1
                                                                                                                       //
  function ctor() {                                                                                                    // 1
    this.constructor = child;                                                                                          // 1
  }                                                                                                                    // 1
                                                                                                                       //
  ctor.prototype = parent.prototype;                                                                                   // 1
  child.prototype = new ctor();                                                                                        // 1
  child.__super__ = parent.prototype;                                                                                  // 1
  return child;                                                                                                        // 1
},                                                                                                                     // 1
    hasProp = {}.hasOwnProperty;                                                                                       // 1
                                                                                                                       //
ModelSettings = function (superClass) {                                                                                // 1
  extend(ModelSettings, superClass);                                                                                   // 6
                                                                                                                       //
  function ModelSettings() {                                                                                           // 2
    ModelSettings.__super__.constructor.apply(this, arguments);                                                        // 3
                                                                                                                       //
    this.tryEnsureIndex({                                                                                              // 5
      'blocked': 1                                                                                                     // 5
    }, {                                                                                                               // 5
      sparse: 1                                                                                                        // 5
    });                                                                                                                // 5
    this.tryEnsureIndex({                                                                                              // 6
      'hidden': 1                                                                                                      // 6
    }, {                                                                                                               // 6
      sparse: 1                                                                                                        // 6
    });                                                                                                                // 6
  }                                                                                                                    // 2
                                                                                                                       //
  ModelSettings.prototype.findById = function (_id) {                                                                  // 22
    var query;                                                                                                         // 10
    query = {                                                                                                          // 10
      _id: _id                                                                                                         // 11
    };                                                                                                                 // 11
    return this.find(query);                                                                                           // 13
  };                                                                                                                   // 9
                                                                                                                       //
  ModelSettings.prototype.findOneNotHiddenById = function (_id) {                                                      // 30
    var query;                                                                                                         // 16
    query = {                                                                                                          // 16
      _id: _id,                                                                                                        // 17
      hidden: {                                                                                                        // 18
        $ne: true                                                                                                      // 18
      }                                                                                                                // 18
    };                                                                                                                 // 17
    return this.findOne(query);                                                                                        // 20
  };                                                                                                                   // 15
                                                                                                                       //
  ModelSettings.prototype.findByIds = function (_id) {                                                                 // 41
    var query;                                                                                                         // 23
                                                                                                                       //
    if (_id == null) {                                                                                                 // 43
      _id = [];                                                                                                        // 22
    }                                                                                                                  // 45
                                                                                                                       //
    _id = [].concat(_id);                                                                                              // 23
    query = {                                                                                                          // 25
      _id: {                                                                                                           // 26
        $in: _id                                                                                                       // 27
      }                                                                                                                // 27
    };                                                                                                                 // 26
    return this.find(query);                                                                                           // 29
  };                                                                                                                   // 22
                                                                                                                       //
  ModelSettings.prototype.findByRole = function (role, options) {                                                      // 55
    var query;                                                                                                         // 32
    query = {                                                                                                          // 32
      role: role                                                                                                       // 33
    };                                                                                                                 // 33
    return this.find(query, options);                                                                                  // 35
  };                                                                                                                   // 31
                                                                                                                       //
  ModelSettings.prototype.findPublic = function (options) {                                                            // 63
    var query;                                                                                                         // 38
    query = {                                                                                                          // 38
      "public": true                                                                                                   // 39
    };                                                                                                                 // 39
    return this.find(query, options);                                                                                  // 41
  };                                                                                                                   // 37
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenPublic = function (ids) {                                                       // 71
    var filter;                                                                                                        // 44
                                                                                                                       //
    if (ids == null) {                                                                                                 // 73
      ids = [];                                                                                                        // 43
    }                                                                                                                  // 75
                                                                                                                       //
    filter = {                                                                                                         // 44
      hidden: {                                                                                                        // 45
        $ne: true                                                                                                      // 45
      },                                                                                                               // 45
      "public": true                                                                                                   // 46
    };                                                                                                                 // 45
                                                                                                                       //
    if (ids.length > 0) {                                                                                              // 48
      filter._id = {                                                                                                   // 49
        $in: ids                                                                                                       // 50
      };                                                                                                               // 50
    }                                                                                                                  // 86
                                                                                                                       //
    return this.find(filter, {                                                                                         // 52
      fields: {                                                                                                        // 52
        _id: 1,                                                                                                        // 52
        value: 1                                                                                                       // 52
      }                                                                                                                // 52
    });                                                                                                                // 52
  };                                                                                                                   // 43
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenPublicUpdatedAfter = function (updatedAt) {                                     // 95
    var filter;                                                                                                        // 55
    filter = {                                                                                                         // 55
      hidden: {                                                                                                        // 56
        $ne: true                                                                                                      // 56
      },                                                                                                               // 56
      "public": true,                                                                                                  // 57
      _updatedAt: {                                                                                                    // 58
        $gt: updatedAt                                                                                                 // 59
      }                                                                                                                // 59
    };                                                                                                                 // 56
    return this.find(filter, {                                                                                         // 61
      fields: {                                                                                                        // 61
        _id: 1,                                                                                                        // 61
        value: 1                                                                                                       // 61
      }                                                                                                                // 61
    });                                                                                                                // 61
  };                                                                                                                   // 54
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenPrivate = function () {                                                         // 114
    return this.find({                                                                                                 // 64
      hidden: {                                                                                                        // 65
        $ne: true                                                                                                      // 65
      },                                                                                                               // 65
      "public": {                                                                                                      // 66
        $ne: true                                                                                                      // 66
      }                                                                                                                // 66
    });                                                                                                                // 64
  };                                                                                                                   // 63
                                                                                                                       //
  ModelSettings.prototype.findNotHidden = function (options) {                                                         // 125
    return this.find({                                                                                                 // 70
      hidden: {                                                                                                        // 70
        $ne: true                                                                                                      // 70
      }                                                                                                                // 70
    }, options);                                                                                                       // 70
  };                                                                                                                   // 69
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenUpdatedAfter = function (updatedAt) {                                           // 133
    return this.find({                                                                                                 // 73
      hidden: {                                                                                                        // 74
        $ne: true                                                                                                      // 74
      },                                                                                                               // 74
      _updatedAt: {                                                                                                    // 75
        $gt: updatedAt                                                                                                 // 76
      }                                                                                                                // 76
    });                                                                                                                // 73
  };                                                                                                                   // 72
                                                                                                                       //
  ModelSettings.prototype.updateValueById = function (_id, value) {                                                    // 144
    var query, update;                                                                                                 // 81
    query = {                                                                                                          // 81
      blocked: {                                                                                                       // 82
        $ne: true                                                                                                      // 82
      },                                                                                                               // 82
      value: {                                                                                                         // 83
        $ne: value                                                                                                     // 83
      },                                                                                                               // 83
      _id: _id                                                                                                         // 84
    };                                                                                                                 // 82
    update = {                                                                                                         // 86
      $set: {                                                                                                          // 87
        value: value                                                                                                   // 88
      }                                                                                                                // 88
    };                                                                                                                 // 87
    return this.update(query, update);                                                                                 // 90
  };                                                                                                                   // 80
                                                                                                                       //
  ModelSettings.prototype.updateValueAndEditorById = function (_id, value, editor) {                                   // 163
    var query, update;                                                                                                 // 93
    query = {                                                                                                          // 93
      blocked: {                                                                                                       // 94
        $ne: true                                                                                                      // 94
      },                                                                                                               // 94
      value: {                                                                                                         // 95
        $ne: value                                                                                                     // 95
      },                                                                                                               // 95
      _id: _id                                                                                                         // 96
    };                                                                                                                 // 94
    update = {                                                                                                         // 98
      $set: {                                                                                                          // 99
        value: value,                                                                                                  // 100
        editor: editor                                                                                                 // 101
      }                                                                                                                // 100
    };                                                                                                                 // 99
    return this.update(query, update);                                                                                 // 103
  };                                                                                                                   // 92
                                                                                                                       //
  ModelSettings.prototype.updateValueNotHiddenById = function (_id, value) {                                           // 183
    var query, update;                                                                                                 // 106
    query = {                                                                                                          // 106
      _id: _id,                                                                                                        // 107
      hidden: {                                                                                                        // 108
        $ne: true                                                                                                      // 108
      },                                                                                                               // 108
      blocked: {                                                                                                       // 109
        $ne: true                                                                                                      // 109
      }                                                                                                                // 109
    };                                                                                                                 // 107
    update = {                                                                                                         // 111
      $set: {                                                                                                          // 112
        value: value                                                                                                   // 113
      }                                                                                                                // 113
    };                                                                                                                 // 112
    return this.update(query, update);                                                                                 // 115
  };                                                                                                                   // 105
                                                                                                                       //
  ModelSettings.prototype.updateOptionsById = function (_id, options) {                                                // 202
    var query, update;                                                                                                 // 118
    query = {                                                                                                          // 118
      blocked: {                                                                                                       // 119
        $ne: true                                                                                                      // 119
      },                                                                                                               // 119
      _id: _id                                                                                                         // 120
    };                                                                                                                 // 119
    update = {                                                                                                         // 122
      $set: options                                                                                                    // 123
    };                                                                                                                 // 123
    return this.update(query, update);                                                                                 // 125
  };                                                                                                                   // 117
                                                                                                                       //
  ModelSettings.prototype.createWithIdAndValue = function (_id, value) {                                               // 216
    var record;                                                                                                        // 129
    record = {                                                                                                         // 129
      _id: _id,                                                                                                        // 130
      value: value,                                                                                                    // 131
      _createdAt: new Date()                                                                                           // 132
    };                                                                                                                 // 130
    return this.insert(record);                                                                                        // 134
  };                                                                                                                   // 128
                                                                                                                       //
  ModelSettings.prototype.removeById = function (_id) {                                                                // 226
    var query;                                                                                                         // 138
    query = {                                                                                                          // 138
      blocked: {                                                                                                       // 139
        $ne: true                                                                                                      // 139
      },                                                                                                               // 139
      _id: _id                                                                                                         // 140
    };                                                                                                                 // 139
    return this.remove(query);                                                                                         // 142
  };                                                                                                                   // 137
                                                                                                                       //
  return ModelSettings;                                                                                                // 237
}(RocketChat.models._Base);                                                                                            // 239
                                                                                                                       //
RocketChat.models.Settings = new ModelSettings('settings', true);                                                      // 144
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Subscriptions.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Subscriptions.coffee.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelSubscriptions,                                                                                                // 1
    extend = function (child, parent) {                                                                                // 1
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    // 1
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           // 1
  }                                                                                                                    // 1
                                                                                                                       //
  function ctor() {                                                                                                    // 1
    this.constructor = child;                                                                                          // 1
  }                                                                                                                    // 1
                                                                                                                       //
  ctor.prototype = parent.prototype;                                                                                   // 1
  child.prototype = new ctor();                                                                                        // 1
  child.__super__ = parent.prototype;                                                                                  // 1
  return child;                                                                                                        // 1
},                                                                                                                     // 1
    hasProp = {}.hasOwnProperty;                                                                                       // 1
                                                                                                                       //
ModelSubscriptions = function (superClass) {                                                                           // 1
  extend(ModelSubscriptions, superClass);                                                                              // 6
                                                                                                                       //
  function ModelSubscriptions() {                                                                                      // 2
    ModelSubscriptions.__super__.constructor.apply(this, arguments);                                                   // 3
                                                                                                                       //
    this.tryEnsureIndex({                                                                                              // 5
      'rid': 1,                                                                                                        // 5
      'u._id': 1                                                                                                       // 5
    }, {                                                                                                               // 5
      unique: 1                                                                                                        // 5
    });                                                                                                                // 5
    this.tryEnsureIndex({                                                                                              // 6
      'rid': 1,                                                                                                        // 6
      'alert': 1,                                                                                                      // 6
      'u._id': 1                                                                                                       // 6
    });                                                                                                                // 6
    this.tryEnsureIndex({                                                                                              // 7
      'rid': 1,                                                                                                        // 7
      'roles': 1                                                                                                       // 7
    });                                                                                                                // 7
    this.tryEnsureIndex({                                                                                              // 8
      'u._id': 1,                                                                                                      // 8
      'name': 1,                                                                                                       // 8
      't': 1                                                                                                           // 8
    });                                                                                                                // 8
    this.tryEnsureIndex({                                                                                              // 9
      'u._id': 1,                                                                                                      // 9
      'name': 1,                                                                                                       // 9
      't': 1,                                                                                                          // 9
      'code': 1                                                                                                        // 9
    }, {                                                                                                               // 9
      unique: 1                                                                                                        // 9
    });                                                                                                                // 9
    this.tryEnsureIndex({                                                                                              // 10
      'open': 1                                                                                                        // 10
    });                                                                                                                // 10
    this.tryEnsureIndex({                                                                                              // 11
      'alert': 1                                                                                                       // 11
    });                                                                                                                // 11
    this.tryEnsureIndex({                                                                                              // 12
      'unread': 1                                                                                                      // 12
    });                                                                                                                // 12
    this.tryEnsureIndex({                                                                                              // 13
      'ts': 1                                                                                                          // 13
    });                                                                                                                // 13
    this.tryEnsureIndex({                                                                                              // 14
      'ls': 1                                                                                                          // 14
    });                                                                                                                // 14
    this.tryEnsureIndex({                                                                                              // 15
      'audioNotification': 1                                                                                           // 15
    }, {                                                                                                               // 15
      sparse: 1                                                                                                        // 15
    });                                                                                                                // 15
    this.tryEnsureIndex({                                                                                              // 16
      'desktopNotifications': 1                                                                                        // 16
    }, {                                                                                                               // 16
      sparse: 1                                                                                                        // 16
    });                                                                                                                // 16
    this.tryEnsureIndex({                                                                                              // 17
      'mobilePushNotifications': 1                                                                                     // 17
    }, {                                                                                                               // 17
      sparse: 1                                                                                                        // 17
    });                                                                                                                // 17
    this.tryEnsureIndex({                                                                                              // 18
      'emailNotifications': 1                                                                                          // 18
    }, {                                                                                                               // 18
      sparse: 1                                                                                                        // 18
    });                                                                                                                // 18
    this.tryEnsureIndex({                                                                                              // 19
      'autoTranslate': 1                                                                                               // 19
    }, {                                                                                                               // 19
      sparse: 1                                                                                                        // 19
    });                                                                                                                // 19
    this.tryEnsureIndex({                                                                                              // 20
      'autoTranslateLanguage': 1                                                                                       // 20
    }, {                                                                                                               // 20
      sparse: 1                                                                                                        // 20
    });                                                                                                                // 20
    this.cache.ensureIndex('rid', 'array');                                                                            // 22
    this.cache.ensureIndex('u._id', 'array');                                                                          // 23
    this.cache.ensureIndex('name', 'array');                                                                           // 24
    this.cache.ensureIndex(['rid', 'u._id'], 'unique');                                                                // 25
    this.cache.ensureIndex(['name', 'u._id'], 'unique');                                                               // 26
  }                                                                                                                    // 2
                                                                                                                       //
  ModelSubscriptions.prototype.findOneByRoomIdAndUserId = function (roomId, userId) {                                  // 90
    var query;                                                                                                         // 31
                                                                                                                       //
    if (this.useCache) {                                                                                               // 31
      return this.cache.findByIndex('rid,u._id', [roomId, userId]).fetch();                                            // 32
    }                                                                                                                  // 94
                                                                                                                       //
    query = {                                                                                                          // 33
      rid: roomId,                                                                                                     // 34
      "u._id": userId                                                                                                  // 35
    };                                                                                                                 // 34
    return this.findOne(query);                                                                                        // 37
  };                                                                                                                   // 30
                                                                                                                       //
  ModelSubscriptions.prototype.findOneByRoomNameAndUserId = function (roomName, userId) {                              // 102
    var query;                                                                                                         // 40
                                                                                                                       //
    if (this.useCache) {                                                                                               // 40
      return this.cache.findByIndex('name,u._id', [roomName, userId]).fetch();                                         // 41
    }                                                                                                                  // 106
                                                                                                                       //
    query = {                                                                                                          // 42
      name: roomName,                                                                                                  // 43
      "u._id": userId                                                                                                  // 44
    };                                                                                                                 // 43
    return this.findOne(query);                                                                                        // 46
  };                                                                                                                   // 39
                                                                                                                       //
  ModelSubscriptions.prototype.findByUserId = function (userId, options) {                                             // 114
    var query;                                                                                                         // 50
                                                                                                                       //
    if (this.useCache) {                                                                                               // 50
      return this.cache.findByIndex('u._id', userId, options);                                                         // 51
    }                                                                                                                  // 118
                                                                                                                       //
    query = {                                                                                                          // 53
      "u._id": userId                                                                                                  // 54
    };                                                                                                                 // 54
    return this.find(query, options);                                                                                  // 56
  };                                                                                                                   // 49
                                                                                                                       //
  ModelSubscriptions.prototype.findByUserIdUpdatedAfter = function (userId, updatedAt, options) {                      // 125
    var query;                                                                                                         // 59
    query = {                                                                                                          // 59
      "u._id": userId,                                                                                                 // 60
      _updatedAt: {                                                                                                    // 61
        $gt: updatedAt                                                                                                 // 62
      }                                                                                                                // 62
    };                                                                                                                 // 60
    return this.find(query, options);                                                                                  // 64
  };                                                                                                                   // 58
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomIdAndRoles = function (roomId, roles, options) {                              // 136
    var query;                                                                                                         // 68
    roles = [].concat(roles);                                                                                          // 68
    query = {                                                                                                          // 69
      "rid": roomId,                                                                                                   // 70
      "roles": {                                                                                                       // 71
        $in: roles                                                                                                     // 71
      }                                                                                                                // 71
    };                                                                                                                 // 70
    return this.find(query, options);                                                                                  // 73
  };                                                                                                                   // 67
                                                                                                                       //
  ModelSubscriptions.prototype.findByType = function (types, options) {                                                // 148
    var query;                                                                                                         // 76
    query = {                                                                                                          // 76
      t: {                                                                                                             // 77
        $in: types                                                                                                     // 78
      }                                                                                                                // 78
    };                                                                                                                 // 77
    return this.find(query, options);                                                                                  // 80
  };                                                                                                                   // 75
                                                                                                                       //
  ModelSubscriptions.prototype.findByTypeAndUserId = function (type, userId, options) {                                // 158
    var query;                                                                                                         // 83
    query = {                                                                                                          // 83
      t: type,                                                                                                         // 84
      'u._id': userId                                                                                                  // 85
    };                                                                                                                 // 84
    return this.find(query, options);                                                                                  // 87
  };                                                                                                                   // 82
                                                                                                                       //
  ModelSubscriptions.prototype.findByTypeNameAndUserId = function (type, name, userId, options) {                      // 167
    var query;                                                                                                         // 90
    query = {                                                                                                          // 90
      t: type,                                                                                                         // 91
      name: name,                                                                                                      // 92
      'u._id': userId                                                                                                  // 93
    };                                                                                                                 // 91
    return this.find(query, options);                                                                                  // 95
  };                                                                                                                   // 89
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomId = function (roomId, options) {                                             // 177
    var query;                                                                                                         // 98
                                                                                                                       //
    if (this.useCache) {                                                                                               // 98
      return this.cache.findByIndex('rid', roomId, options);                                                           // 99
    }                                                                                                                  // 181
                                                                                                                       //
    query = {                                                                                                          // 101
      rid: roomId                                                                                                      // 102
    };                                                                                                                 // 102
    return this.find(query, options);                                                                                  // 104
  };                                                                                                                   // 97
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomIdAndNotUserId = function (roomId, userId, options) {                         // 188
    var query;                                                                                                         // 107
    query = {                                                                                                          // 107
      rid: roomId,                                                                                                     // 108
      'u._id': {                                                                                                       // 109
        $ne: userId                                                                                                    // 110
      }                                                                                                                // 110
    };                                                                                                                 // 108
    return this.find(query, options);                                                                                  // 112
  };                                                                                                                   // 106
                                                                                                                       //
  ModelSubscriptions.prototype.getLastSeen = function (options) {                                                      // 199
    var query, ref, ref1, ref2;                                                                                        // 115
                                                                                                                       //
    if (options == null) {                                                                                             // 201
      options = {};                                                                                                    // 114
    }                                                                                                                  // 203
                                                                                                                       //
    query = {                                                                                                          // 115
      ls: {                                                                                                            // 115
        $exists: 1                                                                                                     // 115
      }                                                                                                                // 115
    };                                                                                                                 // 115
    options.sort = {                                                                                                   // 116
      ls: -1                                                                                                           // 116
    };                                                                                                                 // 116
    options.limit = 1;                                                                                                 // 117
    return (ref = this.find(query, options)) != null ? typeof ref.fetch === "function" ? (ref1 = ref.fetch()) != null ? (ref2 = ref1[0]) != null ? ref2.ls : void 0 : void 0 : void 0 : void 0;
  };                                                                                                                   // 114
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomIdAndUserIds = function (roomId, userIds) {                                   // 216
    var query;                                                                                                         // 122
    query = {                                                                                                          // 122
      rid: roomId,                                                                                                     // 123
      'u._id': {                                                                                                       // 124
        $in: userIds                                                                                                   // 125
      }                                                                                                                // 125
    };                                                                                                                 // 123
    return this.find(query);                                                                                           // 127
  };                                                                                                                   // 121
                                                                                                                       //
  ModelSubscriptions.prototype.archiveByRoomId = function (roomId) {                                                   // 227
    var query, update;                                                                                                 // 131
    query = {                                                                                                          // 131
      rid: roomId                                                                                                      // 132
    };                                                                                                                 // 132
    update = {                                                                                                         // 134
      $set: {                                                                                                          // 135
        alert: false,                                                                                                  // 136
        open: false,                                                                                                   // 137
        archived: true                                                                                                 // 138
      }                                                                                                                // 136
    };                                                                                                                 // 135
    return this.update(query, update, {                                                                                // 140
      multi: true                                                                                                      // 140
    });                                                                                                                // 140
  };                                                                                                                   // 130
                                                                                                                       //
  ModelSubscriptions.prototype.unarchiveByRoomId = function (roomId) {                                                 // 244
    var query, update;                                                                                                 // 143
    query = {                                                                                                          // 143
      rid: roomId                                                                                                      // 144
    };                                                                                                                 // 144
    update = {                                                                                                         // 146
      $set: {                                                                                                          // 147
        alert: false,                                                                                                  // 148
        open: true,                                                                                                    // 149
        archived: false                                                                                                // 150
      }                                                                                                                // 148
    };                                                                                                                 // 147
    return this.update(query, update, {                                                                                // 152
      multi: true                                                                                                      // 152
    });                                                                                                                // 152
  };                                                                                                                   // 142
                                                                                                                       //
  ModelSubscriptions.prototype.hideByRoomIdAndUserId = function (roomId, userId) {                                     // 261
    var query, update;                                                                                                 // 155
    query = {                                                                                                          // 155
      rid: roomId,                                                                                                     // 156
      'u._id': userId                                                                                                  // 157
    };                                                                                                                 // 156
    update = {                                                                                                         // 159
      $set: {                                                                                                          // 160
        alert: false,                                                                                                  // 161
        open: false                                                                                                    // 162
      }                                                                                                                // 161
    };                                                                                                                 // 160
    return this.update(query, update);                                                                                 // 164
  };                                                                                                                   // 154
                                                                                                                       //
  ModelSubscriptions.prototype.openByRoomIdAndUserId = function (roomId, userId) {                                     // 276
    var query, update;                                                                                                 // 167
    query = {                                                                                                          // 167
      rid: roomId,                                                                                                     // 168
      'u._id': userId                                                                                                  // 169
    };                                                                                                                 // 168
    update = {                                                                                                         // 171
      $set: {                                                                                                          // 172
        open: true                                                                                                     // 173
      }                                                                                                                // 173
    };                                                                                                                 // 172
    return this.update(query, update);                                                                                 // 175
  };                                                                                                                   // 166
                                                                                                                       //
  ModelSubscriptions.prototype.setAsReadByRoomIdAndUserId = function (roomId, userId) {                                // 290
    var query, update;                                                                                                 // 178
    query = {                                                                                                          // 178
      rid: roomId,                                                                                                     // 179
      'u._id': userId                                                                                                  // 180
    };                                                                                                                 // 179
    update = {                                                                                                         // 182
      $set: {                                                                                                          // 183
        open: true,                                                                                                    // 184
        alert: false,                                                                                                  // 185
        unread: 0,                                                                                                     // 186
        ls: new Date()                                                                                                 // 187
      }                                                                                                                // 184
    };                                                                                                                 // 183
    return this.update(query, update);                                                                                 // 189
  };                                                                                                                   // 177
                                                                                                                       //
  ModelSubscriptions.prototype.setAsUnreadByRoomIdAndUserId = function (roomId, userId, firstMessageUnreadTimestamp) {
    var query, update;                                                                                                 // 192
    query = {                                                                                                          // 192
      rid: roomId,                                                                                                     // 193
      'u._id': userId                                                                                                  // 194
    };                                                                                                                 // 193
    update = {                                                                                                         // 196
      $set: {                                                                                                          // 197
        open: true,                                                                                                    // 198
        alert: true,                                                                                                   // 199
        ls: firstMessageUnreadTimestamp                                                                                // 200
      }                                                                                                                // 198
    };                                                                                                                 // 197
    return this.update(query, update);                                                                                 // 202
  };                                                                                                                   // 191
                                                                                                                       //
  ModelSubscriptions.prototype.setFavoriteByRoomIdAndUserId = function (roomId, userId, favorite) {                    // 323
    var query, update;                                                                                                 // 205
                                                                                                                       //
    if (favorite == null) {                                                                                            // 325
      favorite = true;                                                                                                 // 204
    }                                                                                                                  // 327
                                                                                                                       //
    query = {                                                                                                          // 205
      rid: roomId,                                                                                                     // 206
      'u._id': userId                                                                                                  // 207
    };                                                                                                                 // 206
    update = {                                                                                                         // 209
      $set: {                                                                                                          // 210
        f: favorite                                                                                                    // 211
      }                                                                                                                // 211
    };                                                                                                                 // 210
    return this.update(query, update);                                                                                 // 213
  };                                                                                                                   // 204
                                                                                                                       //
  ModelSubscriptions.prototype.updateNameAndAlertByRoomId = function (roomId, name) {                                  // 340
    var query, update;                                                                                                 // 216
    query = {                                                                                                          // 216
      rid: roomId                                                                                                      // 217
    };                                                                                                                 // 217
    update = {                                                                                                         // 219
      $set: {                                                                                                          // 220
        name: name,                                                                                                    // 221
        alert: true                                                                                                    // 222
      }                                                                                                                // 221
    };                                                                                                                 // 220
    return this.update(query, update, {                                                                                // 224
      multi: true                                                                                                      // 224
    });                                                                                                                // 224
  };                                                                                                                   // 215
                                                                                                                       //
  ModelSubscriptions.prototype.updateNameByRoomId = function (roomId, name) {                                          // 356
    var query, update;                                                                                                 // 227
    query = {                                                                                                          // 227
      rid: roomId                                                                                                      // 228
    };                                                                                                                 // 228
    update = {                                                                                                         // 230
      $set: {                                                                                                          // 231
        name: name                                                                                                     // 232
      }                                                                                                                // 232
    };                                                                                                                 // 231
    return this.update(query, update, {                                                                                // 234
      multi: true                                                                                                      // 234
    });                                                                                                                // 234
  };                                                                                                                   // 226
                                                                                                                       //
  ModelSubscriptions.prototype.setUserUsernameByUserId = function (userId, username) {                                 // 371
    var query, update;                                                                                                 // 237
    query = {                                                                                                          // 237
      "u._id": userId                                                                                                  // 238
    };                                                                                                                 // 238
    update = {                                                                                                         // 240
      $set: {                                                                                                          // 241
        "u.username": username                                                                                         // 242
      }                                                                                                                // 242
    };                                                                                                                 // 241
    return this.update(query, update, {                                                                                // 244
      multi: true                                                                                                      // 244
    });                                                                                                                // 244
  };                                                                                                                   // 236
                                                                                                                       //
  ModelSubscriptions.prototype.setNameForDirectRoomsWithOldName = function (oldName, name) {                           // 386
    var query, update;                                                                                                 // 247
    query = {                                                                                                          // 247
      name: oldName,                                                                                                   // 248
      t: "d"                                                                                                           // 249
    };                                                                                                                 // 248
    update = {                                                                                                         // 251
      $set: {                                                                                                          // 252
        name: name                                                                                                     // 253
      }                                                                                                                // 253
    };                                                                                                                 // 252
    return this.update(query, update, {                                                                                // 255
      multi: true                                                                                                      // 255
    });                                                                                                                // 255
  };                                                                                                                   // 246
                                                                                                                       //
  ModelSubscriptions.prototype.incUnreadOfDirectForRoomIdExcludingUserId = function (roomId, userId, inc) {            // 402
    var query, update;                                                                                                 // 258
                                                                                                                       //
    if (inc == null) {                                                                                                 // 404
      inc = 1;                                                                                                         // 257
    }                                                                                                                  // 406
                                                                                                                       //
    query = {                                                                                                          // 258
      rid: roomId,                                                                                                     // 259
      t: 'd',                                                                                                          // 260
      'u._id': {                                                                                                       // 261
        $ne: userId                                                                                                    // 262
      }                                                                                                                // 262
    };                                                                                                                 // 259
    update = {                                                                                                         // 264
      $set: {                                                                                                          // 265
        alert: true,                                                                                                   // 266
        open: true                                                                                                     // 267
      },                                                                                                               // 266
      $inc: {                                                                                                          // 268
        unread: inc                                                                                                    // 269
      }                                                                                                                // 269
    };                                                                                                                 // 265
    return this.update(query, update, {                                                                                // 271
      multi: true                                                                                                      // 271
    });                                                                                                                // 271
  };                                                                                                                   // 257
                                                                                                                       //
  ModelSubscriptions.prototype.incUnreadForRoomIdExcludingUserId = function (roomId, userId, inc) {                    // 428
    var query, update;                                                                                                 // 274
                                                                                                                       //
    if (inc == null) {                                                                                                 // 430
      inc = 1;                                                                                                         // 273
    }                                                                                                                  // 432
                                                                                                                       //
    query = {                                                                                                          // 274
      rid: roomId,                                                                                                     // 275
      'u._id': {                                                                                                       // 276
        $ne: userId                                                                                                    // 277
      }                                                                                                                // 277
    };                                                                                                                 // 275
    update = {                                                                                                         // 279
      $set: {                                                                                                          // 280
        alert: true,                                                                                                   // 281
        open: true                                                                                                     // 282
      },                                                                                                               // 281
      $inc: {                                                                                                          // 283
        unread: inc                                                                                                    // 284
      }                                                                                                                // 284
    };                                                                                                                 // 280
    return this.update(query, update, {                                                                                // 286
      multi: true                                                                                                      // 286
    });                                                                                                                // 286
  };                                                                                                                   // 273
                                                                                                                       //
  ModelSubscriptions.prototype.incUnreadForRoomIdAndUserIds = function (roomId, userIds, inc) {                        // 453
    var query, update;                                                                                                 // 289
                                                                                                                       //
    if (inc == null) {                                                                                                 // 455
      inc = 1;                                                                                                         // 288
    }                                                                                                                  // 457
                                                                                                                       //
    query = {                                                                                                          // 289
      rid: roomId,                                                                                                     // 290
      'u._id': {                                                                                                       // 291
        $in: userIds                                                                                                   // 292
      }                                                                                                                // 292
    };                                                                                                                 // 290
    update = {                                                                                                         // 294
      $set: {                                                                                                          // 295
        alert: true,                                                                                                   // 296
        open: true                                                                                                     // 297
      },                                                                                                               // 296
      $inc: {                                                                                                          // 298
        unread: inc                                                                                                    // 299
      }                                                                                                                // 299
    };                                                                                                                 // 295
    return this.update(query, update, {                                                                                // 301
      multi: true                                                                                                      // 301
    });                                                                                                                // 301
  };                                                                                                                   // 288
                                                                                                                       //
  ModelSubscriptions.prototype.setAlertForRoomIdExcludingUserId = function (roomId, userId) {                          // 478
    var query, update;                                                                                                 // 304
    query = {                                                                                                          // 304
      rid: roomId,                                                                                                     // 305
      'u._id': {                                                                                                       // 306
        $ne: userId                                                                                                    // 307
      },                                                                                                               // 307
      $or: [{                                                                                                          // 308
        alert: {                                                                                                       // 309
          $ne: true                                                                                                    // 309
        }                                                                                                              // 309
      }, {                                                                                                             // 309
        open: {                                                                                                        // 310
          $ne: true                                                                                                    // 310
        }                                                                                                              // 310
      }]                                                                                                               // 310
    };                                                                                                                 // 305
    update = {                                                                                                         // 313
      $set: {                                                                                                          // 314
        alert: true,                                                                                                   // 315
        open: true                                                                                                     // 316
      }                                                                                                                // 315
    };                                                                                                                 // 314
    return this.update(query, update, {                                                                                // 318
      multi: true                                                                                                      // 318
    });                                                                                                                // 318
  };                                                                                                                   // 303
                                                                                                                       //
  ModelSubscriptions.prototype.setBlockedByRoomId = function (rid, blocked, blocker) {                                 // 508
    var query, query2, update, update2;                                                                                // 321
    query = {                                                                                                          // 321
      rid: rid,                                                                                                        // 322
      'u._id': blocked                                                                                                 // 323
    };                                                                                                                 // 322
    update = {                                                                                                         // 325
      $set: {                                                                                                          // 326
        blocked: true                                                                                                  // 327
      }                                                                                                                // 327
    };                                                                                                                 // 326
    query2 = {                                                                                                         // 329
      rid: rid,                                                                                                        // 330
      'u._id': blocker                                                                                                 // 331
    };                                                                                                                 // 330
    update2 = {                                                                                                        // 333
      $set: {                                                                                                          // 334
        blocker: true                                                                                                  // 335
      }                                                                                                                // 335
    };                                                                                                                 // 334
    return this.update(query, update) && this.update(query2, update2);                                                 // 337
  };                                                                                                                   // 320
                                                                                                                       //
  ModelSubscriptions.prototype.unsetBlockedByRoomId = function (rid, blocked, blocker) {                               // 531
    var query, query2, update, update2;                                                                                // 340
    query = {                                                                                                          // 340
      rid: rid,                                                                                                        // 341
      'u._id': blocked                                                                                                 // 342
    };                                                                                                                 // 341
    update = {                                                                                                         // 344
      $unset: {                                                                                                        // 345
        blocked: 1                                                                                                     // 346
      }                                                                                                                // 346
    };                                                                                                                 // 345
    query2 = {                                                                                                         // 348
      rid: rid,                                                                                                        // 349
      'u._id': blocker                                                                                                 // 350
    };                                                                                                                 // 349
    update2 = {                                                                                                        // 352
      $unset: {                                                                                                        // 353
        blocker: 1                                                                                                     // 354
      }                                                                                                                // 354
    };                                                                                                                 // 353
    return this.update(query, update) && this.update(query2, update2);                                                 // 356
  };                                                                                                                   // 339
                                                                                                                       //
  ModelSubscriptions.prototype.updateTypeByRoomId = function (roomId, type) {                                          // 554
    var query, update;                                                                                                 // 359
    query = {                                                                                                          // 359
      rid: roomId                                                                                                      // 360
    };                                                                                                                 // 360
    update = {                                                                                                         // 362
      $set: {                                                                                                          // 363
        t: type                                                                                                        // 364
      }                                                                                                                // 364
    };                                                                                                                 // 363
    return this.update(query, update, {                                                                                // 366
      multi: true                                                                                                      // 366
    });                                                                                                                // 366
  };                                                                                                                   // 358
                                                                                                                       //
  ModelSubscriptions.prototype.addRoleById = function (_id, role) {                                                    // 569
    var query, update;                                                                                                 // 369
    query = {                                                                                                          // 369
      _id: _id                                                                                                         // 370
    };                                                                                                                 // 370
    update = {                                                                                                         // 372
      $addToSet: {                                                                                                     // 373
        roles: role                                                                                                    // 374
      }                                                                                                                // 374
    };                                                                                                                 // 373
    return this.update(query, update);                                                                                 // 376
  };                                                                                                                   // 368
                                                                                                                       //
  ModelSubscriptions.prototype.removeRoleById = function (_id, role) {                                                 // 582
    var query, update;                                                                                                 // 379
    query = {                                                                                                          // 379
      _id: _id                                                                                                         // 380
    };                                                                                                                 // 380
    update = {                                                                                                         // 382
      $pull: {                                                                                                         // 383
        roles: role                                                                                                    // 384
      }                                                                                                                // 384
    };                                                                                                                 // 383
    return this.update(query, update);                                                                                 // 386
  };                                                                                                                   // 378
                                                                                                                       //
  ModelSubscriptions.prototype.setArchivedByUsername = function (username, archived) {                                 // 595
    var query, update;                                                                                                 // 389
    query = {                                                                                                          // 389
      t: 'd',                                                                                                          // 390
      name: username                                                                                                   // 391
    };                                                                                                                 // 390
    update = {                                                                                                         // 393
      $set: {                                                                                                          // 394
        archived: archived                                                                                             // 395
      }                                                                                                                // 395
    };                                                                                                                 // 394
    return this.update(query, update, {                                                                                // 397
      multi: true                                                                                                      // 397
    });                                                                                                                // 397
  };                                                                                                                   // 388
                                                                                                                       //
  ModelSubscriptions.prototype.createWithRoomAndUser = function (room, user, extraData) {                              // 611
    var subscription;                                                                                                  // 401
    subscription = {                                                                                                   // 401
      open: false,                                                                                                     // 402
      alert: false,                                                                                                    // 403
      unread: 0,                                                                                                       // 404
      ts: room.ts,                                                                                                     // 405
      rid: room._id,                                                                                                   // 406
      name: room.name,                                                                                                 // 407
      t: room.t,                                                                                                       // 408
      u: {                                                                                                             // 409
        _id: user._id,                                                                                                 // 410
        username: user.username                                                                                        // 411
      }                                                                                                                // 410
    };                                                                                                                 // 402
                                                                                                                       //
    _.extend(subscription, extraData);                                                                                 // 413
                                                                                                                       //
    return this.insert(subscription);                                                                                  // 415
  };                                                                                                                   // 400
                                                                                                                       //
  ModelSubscriptions.prototype.removeByUserId = function (userId) {                                                    // 630
    var query;                                                                                                         // 420
    query = {                                                                                                          // 420
      "u._id": userId                                                                                                  // 421
    };                                                                                                                 // 421
    return this.remove(query);                                                                                         // 423
  };                                                                                                                   // 419
                                                                                                                       //
  ModelSubscriptions.prototype.removeByRoomId = function (roomId) {                                                    // 638
    var query;                                                                                                         // 426
    query = {                                                                                                          // 426
      rid: roomId                                                                                                      // 427
    };                                                                                                                 // 427
    return this.remove(query);                                                                                         // 429
  };                                                                                                                   // 425
                                                                                                                       //
  ModelSubscriptions.prototype.removeByRoomIdAndUserId = function (roomId, userId) {                                   // 646
    var query;                                                                                                         // 432
    query = {                                                                                                          // 432
      rid: roomId,                                                                                                     // 433
      "u._id": userId                                                                                                  // 434
    };                                                                                                                 // 433
    return this.remove(query);                                                                                         // 436
  };                                                                                                                   // 431
                                                                                                                       //
  return ModelSubscriptions;                                                                                           // 655
}(RocketChat.models._Base);                                                                                            // 657
                                                                                                                       //
RocketChat.models.Subscriptions = new ModelSubscriptions('subscription', true);                                        // 438
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Uploads.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Uploads.coffee.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var extend = function (child, parent) {                                                                                // 1
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    // 1
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           // 1
  }                                                                                                                    // 1
                                                                                                                       //
  function ctor() {                                                                                                    // 1
    this.constructor = child;                                                                                          // 1
  }                                                                                                                    // 1
                                                                                                                       //
  ctor.prototype = parent.prototype;                                                                                   // 1
  child.prototype = new ctor();                                                                                        // 1
  child.__super__ = parent.prototype;                                                                                  // 1
  return child;                                                                                                        // 1
},                                                                                                                     // 1
    hasProp = {}.hasOwnProperty;                                                                                       // 1
                                                                                                                       //
RocketChat.models.Uploads = new (function (superClass) {                                                               // 1
  extend(_Class, superClass);                                                                                          // 5
                                                                                                                       //
  function _Class() {                                                                                                  // 2
    _Class.__super__.constructor.call(this, 'uploads');                                                                // 3
                                                                                                                       //
    this.tryEnsureIndex({                                                                                              // 5
      'rid': 1                                                                                                         // 5
    });                                                                                                                // 5
    this.tryEnsureIndex({                                                                                              // 6
      'uploadedAt': 1                                                                                                  // 6
    });                                                                                                                // 6
  }                                                                                                                    // 2
                                                                                                                       //
  _Class.prototype.findNotHiddenFilesOfRoom = function (roomId, limit) {                                               // 17
    var fileOptions, fileQuery;                                                                                        // 9
    fileQuery = {                                                                                                      // 9
      rid: roomId,                                                                                                     // 10
      complete: true,                                                                                                  // 11
      uploading: false,                                                                                                // 12
      _hidden: {                                                                                                       // 13
        $ne: true                                                                                                      // 14
      }                                                                                                                // 14
    };                                                                                                                 // 10
    fileOptions = {                                                                                                    // 16
      limit: limit,                                                                                                    // 17
      sort: {                                                                                                          // 18
        uploadedAt: -1                                                                                                 // 19
      },                                                                                                               // 19
      fields: {                                                                                                        // 20
        _id: 1,                                                                                                        // 21
        userId: 1,                                                                                                     // 22
        rid: 1,                                                                                                        // 23
        name: 1,                                                                                                       // 24
        description: 1,                                                                                                // 25
        type: 1,                                                                                                       // 26
        url: 1,                                                                                                        // 27
        uploadedAt: 1                                                                                                  // 28
      }                                                                                                                // 21
    };                                                                                                                 // 17
    return this.find(fileQuery, fileOptions);                                                                          // 30
  };                                                                                                                   // 8
                                                                                                                       //
  _Class.prototype.insertFileInit = function (roomId, userId, store, file, extra) {                                    // 46
    var fileData, ref;                                                                                                 // 33
    fileData = {                                                                                                       // 33
      rid: roomId,                                                                                                     // 34
      userId: userId,                                                                                                  // 35
      store: store,                                                                                                    // 36
      complete: false,                                                                                                 // 37
      uploading: true,                                                                                                 // 38
      progress: 0,                                                                                                     // 39
      extension: s.strRightBack(file.name, '.'),                                                                       // 40
      uploadedAt: new Date()                                                                                           // 41
    };                                                                                                                 // 34
                                                                                                                       //
    _.extend(fileData, file, extra);                                                                                   // 43
                                                                                                                       //
    if (((ref = this.model.direct) != null ? ref.insert : void 0) != null) {                                           // 45
      file = this.model.direct.insert(fileData);                                                                       // 46
    } else {                                                                                                           // 45
      file = this.insert(fileData);                                                                                    // 48
    }                                                                                                                  // 63
                                                                                                                       //
    return file;                                                                                                       // 50
  };                                                                                                                   // 32
                                                                                                                       //
  _Class.prototype.updateFileComplete = function (fileId, userId, file) {                                              // 67
    var filter, ref, result, update;                                                                                   // 53
                                                                                                                       //
    if (!fileId) {                                                                                                     // 53
      return;                                                                                                          // 54
    }                                                                                                                  // 71
                                                                                                                       //
    filter = {                                                                                                         // 56
      _id: fileId,                                                                                                     // 57
      userId: userId                                                                                                   // 58
    };                                                                                                                 // 57
    update = {                                                                                                         // 60
      $set: {                                                                                                          // 61
        complete: true,                                                                                                // 62
        uploading: false,                                                                                              // 63
        progress: 1                                                                                                    // 64
      }                                                                                                                // 62
    };                                                                                                                 // 61
    update.$set = _.extend(file, update.$set);                                                                         // 66
                                                                                                                       //
    if (((ref = this.model.direct) != null ? ref.insert : void 0) != null) {                                           // 68
      result = this.model.direct.update(filter, update);                                                               // 69
    } else {                                                                                                           // 68
      result = this.update(filter, update);                                                                            // 71
    }                                                                                                                  // 88
                                                                                                                       //
    return result;                                                                                                     // 73
  };                                                                                                                   // 52
                                                                                                                       //
  return _Class;                                                                                                       // 92
}(RocketChat.models._Base))();                                                                                         // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Users.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Users.coffee.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelUsers,                                                                                                        // 1
    extend = function (child, parent) {                                                                                // 1
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    // 1
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           // 1
  }                                                                                                                    // 1
                                                                                                                       //
  function ctor() {                                                                                                    // 1
    this.constructor = child;                                                                                          // 1
  }                                                                                                                    // 1
                                                                                                                       //
  ctor.prototype = parent.prototype;                                                                                   // 1
  child.prototype = new ctor();                                                                                        // 1
  child.__super__ = parent.prototype;                                                                                  // 1
  return child;                                                                                                        // 1
},                                                                                                                     // 1
    hasProp = {}.hasOwnProperty;                                                                                       // 1
                                                                                                                       //
ModelUsers = function (superClass) {                                                                                   // 1
  extend(ModelUsers, superClass);                                                                                      // 6
                                                                                                                       //
  function ModelUsers() {                                                                                              // 2
    ModelUsers.__super__.constructor.apply(this, arguments);                                                           // 3
                                                                                                                       //
    this.tryEnsureIndex({                                                                                              // 5
      'roles': 1                                                                                                       // 5
    }, {                                                                                                               // 5
      sparse: 1                                                                                                        // 5
    });                                                                                                                // 5
    this.tryEnsureIndex({                                                                                              // 6
      'name': 1                                                                                                        // 6
    });                                                                                                                // 6
    this.tryEnsureIndex({                                                                                              // 7
      'lastLogin': 1                                                                                                   // 7
    });                                                                                                                // 7
    this.tryEnsureIndex({                                                                                              // 8
      'status': 1                                                                                                      // 8
    });                                                                                                                // 8
    this.tryEnsureIndex({                                                                                              // 9
      'active': 1                                                                                                      // 9
    }, {                                                                                                               // 9
      sparse: 1                                                                                                        // 9
    });                                                                                                                // 9
    this.tryEnsureIndex({                                                                                              // 10
      'statusConnection': 1                                                                                            // 10
    }, {                                                                                                               // 10
      sparse: 1                                                                                                        // 10
    });                                                                                                                // 10
    this.tryEnsureIndex({                                                                                              // 11
      'type': 1                                                                                                        // 11
    });                                                                                                                // 11
    this.cache.ensureIndex('username', 'unique');                                                                      // 13
  }                                                                                                                    // 2
                                                                                                                       //
  ModelUsers.prototype.findOneByImportId = function (_id, options) {                                                   // 40
    return this.findOne({                                                                                              // 16
      importIds: _id                                                                                                   // 16
    }, options);                                                                                                       // 16
  };                                                                                                                   // 15
                                                                                                                       //
  ModelUsers.prototype.findOneByUsername = function (username, options) {                                              // 46
    var query;                                                                                                         // 19
    query = {                                                                                                          // 19
      username: username                                                                                               // 20
    };                                                                                                                 // 20
    return this.findOne(query, options);                                                                               // 22
  };                                                                                                                   // 18
                                                                                                                       //
  ModelUsers.prototype.findOneByEmailAddress = function (emailAddress, options) {                                      // 54
    var query;                                                                                                         // 25
    query = {                                                                                                          // 25
      'emails.address': new RegExp("^" + s.escapeRegExp(emailAddress) + "$", 'i')                                      // 26
    };                                                                                                                 // 26
    return this.findOne(query, options);                                                                               // 28
  };                                                                                                                   // 24
                                                                                                                       //
  ModelUsers.prototype.findOneAdmin = function (admin, options) {                                                      // 62
    var query;                                                                                                         // 31
    query = {                                                                                                          // 31
      admin: admin                                                                                                     // 32
    };                                                                                                                 // 32
    return this.findOne(query, options);                                                                               // 34
  };                                                                                                                   // 30
                                                                                                                       //
  ModelUsers.prototype.findOneByIdAndLoginToken = function (_id, token, options) {                                     // 70
    var query;                                                                                                         // 37
    query = {                                                                                                          // 37
      _id: _id,                                                                                                        // 38
      'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token)                                       // 39
    };                                                                                                                 // 38
    return this.findOne(query, options);                                                                               // 41
  };                                                                                                                   // 36
                                                                                                                       //
  ModelUsers.prototype.findById = function (userId) {                                                                  // 79
    var query;                                                                                                         // 46
    query = {                                                                                                          // 46
      _id: userId                                                                                                      // 47
    };                                                                                                                 // 47
    return this.find(query);                                                                                           // 49
  };                                                                                                                   // 45
                                                                                                                       //
  ModelUsers.prototype.findUsersNotOffline = function (options) {                                                      // 87
    var query;                                                                                                         // 52
    query = {                                                                                                          // 52
      username: {                                                                                                      // 53
        $exists: 1                                                                                                     // 54
      },                                                                                                               // 54
      status: {                                                                                                        // 55
        $in: ['online', 'away', 'busy']                                                                                // 56
      }                                                                                                                // 56
    };                                                                                                                 // 53
    return this.find(query, options);                                                                                  // 58
  };                                                                                                                   // 51
                                                                                                                       //
  ModelUsers.prototype.findByUsername = function (username, options) {                                                 // 100
    var query;                                                                                                         // 62
    query = {                                                                                                          // 62
      username: username                                                                                               // 63
    };                                                                                                                 // 63
    return this.find(query, options);                                                                                  // 65
  };                                                                                                                   // 61
                                                                                                                       //
  ModelUsers.prototype.findUsersByUsernamesWithHighlights = function (usernames, options) {                            // 108
    var query, result;                                                                                                 // 68
                                                                                                                       //
    if (this.useCache) {                                                                                               // 68
      result = {                                                                                                       // 69
        fetch: function () {                                                                                           // 70
          return RocketChat.models.Users.getDynamicView('highlights').data().filter(function (record) {                // 71
            return usernames.indexOf(record.username) > -1;                                                            // 72
          });                                                                                                          // 71
        },                                                                                                             // 70
        count: function () {                                                                                           // 73
          return result.fetch().length;                                                                                // 74
        },                                                                                                             // 70
        forEach: function (fn) {                                                                                       // 75
          return result.fetch().forEach(fn);                                                                           // 76
        }                                                                                                              // 70
      };                                                                                                               // 70
      return result;                                                                                                   // 77
    }                                                                                                                  // 125
                                                                                                                       //
    query = {                                                                                                          // 79
      username: {                                                                                                      // 80
        $in: usernames                                                                                                 // 80
      },                                                                                                               // 80
      'settings.preferences.highlights.0': {                                                                           // 81
        $exists: true                                                                                                  // 82
      }                                                                                                                // 82
    };                                                                                                                 // 80
    return this.find(query, options);                                                                                  // 84
  };                                                                                                                   // 67
                                                                                                                       //
  ModelUsers.prototype.findActiveByUsernameOrNameRegexWithExceptions = function (searchTerm, exceptions, options) {    // 137
    var query, termRegex;                                                                                              // 87
                                                                                                                       //
    if (exceptions == null) {                                                                                          // 139
      exceptions = [];                                                                                                 // 86
    }                                                                                                                  // 141
                                                                                                                       //
    if (options == null) {                                                                                             // 142
      options = {};                                                                                                    // 86
    }                                                                                                                  // 144
                                                                                                                       //
    if (!_.isArray(exceptions)) {                                                                                      // 87
      exceptions = [exceptions];                                                                                       // 88
    }                                                                                                                  // 147
                                                                                                                       //
    termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');                                                           // 90
    query = {                                                                                                          // 91
      $or: [{                                                                                                          // 92
        username: termRegex                                                                                            // 93
      }, {                                                                                                             // 92
        name: termRegex                                                                                                // 95
      }],                                                                                                              // 94
      active: true,                                                                                                    // 97
      type: {                                                                                                          // 98
        $in: ['user', 'bot']                                                                                           // 99
      },                                                                                                               // 98
      $and: [{                                                                                                         // 101
        username: {                                                                                                    // 102
          $exists: true                                                                                                // 103
        }                                                                                                              // 102
      }, {                                                                                                             // 101
        username: {                                                                                                    // 106
          $nin: exceptions                                                                                             // 107
        }                                                                                                              // 106
      }]                                                                                                               // 105
    };                                                                                                                 // 91
    return this.find(query, options);                                                                                  // 112
  };                                                                                                                   // 86
                                                                                                                       //
  ModelUsers.prototype.findByActiveUsersExcept = function (searchTerm, exceptions, options) {                          // 176
    var query, termRegex;                                                                                              // 115
                                                                                                                       //
    if (exceptions == null) {                                                                                          // 178
      exceptions = [];                                                                                                 // 114
    }                                                                                                                  // 180
                                                                                                                       //
    if (options == null) {                                                                                             // 181
      options = {};                                                                                                    // 114
    }                                                                                                                  // 183
                                                                                                                       //
    if (!_.isArray(exceptions)) {                                                                                      // 115
      exceptions = [exceptions];                                                                                       // 116
    }                                                                                                                  // 186
                                                                                                                       //
    termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');                                                           // 118
    query = {                                                                                                          // 119
      $and: [{                                                                                                         // 120
        active: true,                                                                                                  // 122
        $or: [{                                                                                                        // 123
          username: termRegex                                                                                          // 125
        }, {                                                                                                           // 124
          name: termRegex                                                                                              // 128
        }]                                                                                                             // 127
      }, {                                                                                                             // 121
        username: {                                                                                                    // 133
          $exists: true,                                                                                               // 133
          $nin: exceptions                                                                                             // 133
        }                                                                                                              // 133
      }]                                                                                                               // 132
    };                                                                                                                 // 120
    return this.find(query, options);                                                                                  // 137
  };                                                                                                                   // 114
                                                                                                                       //
  ModelUsers.prototype.findUsersByNameOrUsername = function (nameOrUsername, options) {                                // 210
    var query;                                                                                                         // 140
    query = {                                                                                                          // 140
      username: {                                                                                                      // 141
        $exists: 1                                                                                                     // 142
      },                                                                                                               // 142
      $or: [{                                                                                                          // 144
        name: nameOrUsername                                                                                           // 145
      }, {                                                                                                             // 145
        username: nameOrUsername                                                                                       // 146
      }],                                                                                                              // 146
      type: {                                                                                                          // 149
        $in: ['user']                                                                                                  // 150
      }                                                                                                                // 150
    };                                                                                                                 // 141
    return this.find(query, options);                                                                                  // 152
  };                                                                                                                   // 139
                                                                                                                       //
  ModelUsers.prototype.findByUsernameNameOrEmailAddress = function (usernameNameOrEmailAddress, options) {             // 230
    var query;                                                                                                         // 155
    query = {                                                                                                          // 155
      $or: [{                                                                                                          // 156
        name: usernameNameOrEmailAddress                                                                               // 157
      }, {                                                                                                             // 157
        username: usernameNameOrEmailAddress                                                                           // 158
      }, {                                                                                                             // 158
        'emails.address': usernameNameOrEmailAddress                                                                   // 159
      }],                                                                                                              // 159
      type: {                                                                                                          // 161
        $in: ['user', 'bot']                                                                                           // 162
      }                                                                                                                // 162
    };                                                                                                                 // 156
    return this.find(query, options);                                                                                  // 164
  };                                                                                                                   // 154
                                                                                                                       //
  ModelUsers.prototype.findLDAPUsers = function (options) {                                                            // 249
    var query;                                                                                                         // 167
    query = {                                                                                                          // 167
      ldap: true                                                                                                       // 168
    };                                                                                                                 // 168
    return this.find(query, options);                                                                                  // 170
  };                                                                                                                   // 166
                                                                                                                       //
  ModelUsers.prototype.findCrowdUsers = function (options) {                                                           // 257
    var query;                                                                                                         // 173
    query = {                                                                                                          // 173
      crowd: true                                                                                                      // 174
    };                                                                                                                 // 174
    return this.find(query, options);                                                                                  // 176
  };                                                                                                                   // 172
                                                                                                                       //
  ModelUsers.prototype.getLastLogin = function (options) {                                                             // 265
    var query, ref, ref1, ref2;                                                                                        // 179
                                                                                                                       //
    if (options == null) {                                                                                             // 267
      options = {};                                                                                                    // 178
    }                                                                                                                  // 269
                                                                                                                       //
    query = {                                                                                                          // 179
      lastLogin: {                                                                                                     // 179
        $exists: 1                                                                                                     // 179
      }                                                                                                                // 179
    };                                                                                                                 // 179
    options.sort = {                                                                                                   // 180
      lastLogin: -1                                                                                                    // 180
    };                                                                                                                 // 180
    options.limit = 1;                                                                                                 // 181
    return (ref = this.find(query, options)) != null ? typeof ref.fetch === "function" ? (ref1 = ref.fetch()) != null ? (ref2 = ref1[0]) != null ? ref2.lastLogin : void 0 : void 0 : void 0 : void 0;
  };                                                                                                                   // 178
                                                                                                                       //
  ModelUsers.prototype.findUsersByUsernames = function (usernames, options) {                                          // 282
    var query;                                                                                                         // 186
    query = {                                                                                                          // 186
      username: {                                                                                                      // 187
        $in: usernames                                                                                                 // 188
      }                                                                                                                // 188
    };                                                                                                                 // 187
    return this.find(query, options);                                                                                  // 190
  };                                                                                                                   // 185
                                                                                                                       //
  ModelUsers.prototype.addImportIds = function (_id, importIds) {                                                      // 292
    var query, update;                                                                                                 // 194
    importIds = [].concat(importIds);                                                                                  // 194
    query = {                                                                                                          // 196
      _id: _id                                                                                                         // 197
    };                                                                                                                 // 197
    update = {                                                                                                         // 199
      $addToSet: {                                                                                                     // 200
        importIds: {                                                                                                   // 201
          $each: importIds                                                                                             // 202
        }                                                                                                              // 202
      }                                                                                                                // 201
    };                                                                                                                 // 200
    return this.update(query, update);                                                                                 // 204
  };                                                                                                                   // 193
                                                                                                                       //
  ModelUsers.prototype.updateLastLoginById = function (_id) {                                                          // 308
    var update;                                                                                                        // 207
    update = {                                                                                                         // 207
      $set: {                                                                                                          // 208
        lastLogin: new Date()                                                                                          // 209
      }                                                                                                                // 209
    };                                                                                                                 // 208
    return this.update(_id, update);                                                                                   // 211
  };                                                                                                                   // 206
                                                                                                                       //
  ModelUsers.prototype.setServiceId = function (_id, serviceName, serviceId) {                                         // 318
    var serviceIdKey, update;                                                                                          // 214
    update = {                                                                                                         // 214
      $set: {}                                                                                                         // 215
    };                                                                                                                 // 215
    serviceIdKey = "services." + serviceName + ".id";                                                                  // 217
    update.$set[serviceIdKey] = serviceId;                                                                             // 218
    return this.update(_id, update);                                                                                   // 220
  };                                                                                                                   // 213
                                                                                                                       //
  ModelUsers.prototype.setUsername = function (_id, username) {                                                        // 328
    var update;                                                                                                        // 223
    update = {                                                                                                         // 223
      $set: {                                                                                                          // 224
        username: username                                                                                             // 224
      }                                                                                                                // 224
    };                                                                                                                 // 224
    return this.update(_id, update);                                                                                   // 226
  };                                                                                                                   // 222
                                                                                                                       //
  ModelUsers.prototype.setEmail = function (_id, email) {                                                              // 338
    var update;                                                                                                        // 229
    update = {                                                                                                         // 229
      $set: {                                                                                                          // 230
        emails: [{                                                                                                     // 231
          address: email,                                                                                              // 232
          verified: false                                                                                              // 233
        }]                                                                                                             // 232
      }                                                                                                                // 231
    };                                                                                                                 // 230
    return this.update(_id, update);                                                                                   // 236
  };                                                                                                                   // 228
                                                                                                                       //
  ModelUsers.prototype.setEmailVerified = function (_id, email) {                                                      // 353
    var query, update;                                                                                                 // 239
    query = {                                                                                                          // 239
      _id: _id,                                                                                                        // 240
      emails: {                                                                                                        // 241
        $elemMatch: {                                                                                                  // 242
          address: email,                                                                                              // 243
          verified: false                                                                                              // 244
        }                                                                                                              // 243
      }                                                                                                                // 242
    };                                                                                                                 // 240
    update = {                                                                                                         // 246
      $set: {                                                                                                          // 247
        'emails.$.verified': true                                                                                      // 248
      }                                                                                                                // 248
    };                                                                                                                 // 247
    return this.update(query, update);                                                                                 // 250
  };                                                                                                                   // 238
                                                                                                                       //
  ModelUsers.prototype.setName = function (_id, name) {                                                                // 372
    var update;                                                                                                        // 253
    update = {                                                                                                         // 253
      $set: {                                                                                                          // 254
        name: name                                                                                                     // 255
      }                                                                                                                // 255
    };                                                                                                                 // 254
    return this.update(_id, update);                                                                                   // 257
  };                                                                                                                   // 252
                                                                                                                       //
  ModelUsers.prototype.setCustomFields = function (_id, fields) {                                                      // 382
    var key, update, value, values;                                                                                    // 260
    values = {};                                                                                                       // 260
                                                                                                                       //
    for (key in meteorBabelHelpers.sanitizeForInObject(fields)) {                                                      // 261
      value = fields[key];                                                                                             // 386
      values["customFields." + key] = value;                                                                           // 262
    }                                                                                                                  // 261
                                                                                                                       //
    update = {                                                                                                         // 264
      $set: values                                                                                                     // 265
    };                                                                                                                 // 265
    return this.update(_id, update);                                                                                   // 267
  };                                                                                                                   // 259
                                                                                                                       //
  ModelUsers.prototype.setAvatarOrigin = function (_id, origin) {                                                      // 395
    var update;                                                                                                        // 270
    update = {                                                                                                         // 270
      $set: {                                                                                                          // 271
        avatarOrigin: origin                                                                                           // 272
      }                                                                                                                // 272
    };                                                                                                                 // 271
    return this.update(_id, update);                                                                                   // 274
  };                                                                                                                   // 269
                                                                                                                       //
  ModelUsers.prototype.unsetAvatarOrigin = function (_id) {                                                            // 405
    var update;                                                                                                        // 277
    update = {                                                                                                         // 277
      $unset: {                                                                                                        // 278
        avatarOrigin: 1                                                                                                // 279
      }                                                                                                                // 279
    };                                                                                                                 // 278
    return this.update(_id, update);                                                                                   // 281
  };                                                                                                                   // 276
                                                                                                                       //
  ModelUsers.prototype.setUserActive = function (_id, active) {                                                        // 415
    var update;                                                                                                        // 284
                                                                                                                       //
    if (active == null) {                                                                                              // 417
      active = true;                                                                                                   // 283
    }                                                                                                                  // 419
                                                                                                                       //
    update = {                                                                                                         // 284
      $set: {                                                                                                          // 285
        active: active                                                                                                 // 286
      }                                                                                                                // 286
    };                                                                                                                 // 285
    return this.update(_id, update);                                                                                   // 288
  };                                                                                                                   // 283
                                                                                                                       //
  ModelUsers.prototype.setAllUsersActive = function (active) {                                                         // 428
    var update;                                                                                                        // 291
    update = {                                                                                                         // 291
      $set: {                                                                                                          // 292
        active: active                                                                                                 // 293
      }                                                                                                                // 293
    };                                                                                                                 // 292
    return this.update({}, update, {                                                                                   // 295
      multi: true                                                                                                      // 295
    });                                                                                                                // 295
  };                                                                                                                   // 290
                                                                                                                       //
  ModelUsers.prototype.unsetLoginTokens = function (_id) {                                                             // 440
    var update;                                                                                                        // 298
    update = {                                                                                                         // 298
      $set: {                                                                                                          // 299
        "services.resume.loginTokens": []                                                                              // 300
      }                                                                                                                // 300
    };                                                                                                                 // 299
    return this.update(_id, update);                                                                                   // 302
  };                                                                                                                   // 297
                                                                                                                       //
  ModelUsers.prototype.unsetRequirePasswordChange = function (_id) {                                                   // 450
    var update;                                                                                                        // 305
    update = {                                                                                                         // 305
      $unset: {                                                                                                        // 306
        "requirePasswordChange": true,                                                                                 // 307
        "requirePasswordChangeReason": true                                                                            // 308
      }                                                                                                                // 307
    };                                                                                                                 // 306
    return this.update(_id, update);                                                                                   // 310
  };                                                                                                                   // 304
                                                                                                                       //
  ModelUsers.prototype.resetPasswordAndSetRequirePasswordChange = function (_id, requirePasswordChange, requirePasswordChangeReason) {
    var update;                                                                                                        // 313
    update = {                                                                                                         // 313
      $unset: {                                                                                                        // 314
        "services.password": 1                                                                                         // 315
      },                                                                                                               // 315
      $set: {                                                                                                          // 316
        "requirePasswordChange": requirePasswordChange,                                                                // 317
        "requirePasswordChangeReason": requirePasswordChangeReason                                                     // 318
      }                                                                                                                // 317
    };                                                                                                                 // 314
    return this.update(_id, update);                                                                                   // 320
  };                                                                                                                   // 312
                                                                                                                       //
  ModelUsers.prototype.setLanguage = function (_id, language) {                                                        // 475
    var update;                                                                                                        // 323
    update = {                                                                                                         // 323
      $set: {                                                                                                          // 324
        language: language                                                                                             // 325
      }                                                                                                                // 325
    };                                                                                                                 // 324
    return this.update(_id, update);                                                                                   // 327
  };                                                                                                                   // 322
                                                                                                                       //
  ModelUsers.prototype.setProfile = function (_id, profile) {                                                          // 485
    var update;                                                                                                        // 330
    update = {                                                                                                         // 330
      $set: {                                                                                                          // 331
        "settings.profile": profile                                                                                    // 332
      }                                                                                                                // 332
    };                                                                                                                 // 331
    return this.update(_id, update);                                                                                   // 334
  };                                                                                                                   // 329
                                                                                                                       //
  ModelUsers.prototype.setPreferences = function (_id, preferences) {                                                  // 495
    var update;                                                                                                        // 337
    update = {                                                                                                         // 337
      $set: {                                                                                                          // 338
        "settings.preferences": preferences                                                                            // 339
      }                                                                                                                // 339
    };                                                                                                                 // 338
    return this.update(_id, update);                                                                                   // 341
  };                                                                                                                   // 336
                                                                                                                       //
  ModelUsers.prototype.setUtcOffset = function (_id, utcOffset) {                                                      // 505
    var query, update;                                                                                                 // 344
    query = {                                                                                                          // 344
      _id: _id,                                                                                                        // 345
      utcOffset: {                                                                                                     // 346
        $ne: utcOffset                                                                                                 // 347
      }                                                                                                                // 347
    };                                                                                                                 // 345
    update = {                                                                                                         // 349
      $set: {                                                                                                          // 350
        utcOffset: utcOffset                                                                                           // 351
      }                                                                                                                // 351
    };                                                                                                                 // 350
    return this.update(query, update);                                                                                 // 353
  };                                                                                                                   // 343
                                                                                                                       //
  ModelUsers.prototype.saveUserById = function (_id, data) {                                                           // 521
    var setData, unsetData, update;                                                                                    // 356
    setData = {};                                                                                                      // 356
    unsetData = {};                                                                                                    // 357
                                                                                                                       //
    if (data.name != null) {                                                                                           // 359
      if (!_.isEmpty(s.trim(data.name))) {                                                                             // 360
        setData.name = s.trim(data.name);                                                                              // 361
      } else {                                                                                                         // 360
        unsetData.name = 1;                                                                                            // 363
      }                                                                                                                // 359
    }                                                                                                                  // 531
                                                                                                                       //
    if (data.email != null) {                                                                                          // 365
      if (!_.isEmpty(s.trim(data.email))) {                                                                            // 366
        setData.emails = [{                                                                                            // 367
          address: s.trim(data.email)                                                                                  // 368
        }];                                                                                                            // 368
      } else {                                                                                                         // 366
        unsetData.emails = 1;                                                                                          // 371
      }                                                                                                                // 365
    }                                                                                                                  // 542
                                                                                                                       //
    if (data.phone != null) {                                                                                          // 373
      if (!_.isEmpty(s.trim(data.phone))) {                                                                            // 374
        setData.phone = [{                                                                                             // 375
          phoneNumber: s.trim(data.phone)                                                                              // 376
        }];                                                                                                            // 376
      } else {                                                                                                         // 374
        unsetData.phone = 1;                                                                                           // 379
      }                                                                                                                // 373
    }                                                                                                                  // 553
                                                                                                                       //
    update = {};                                                                                                       // 381
                                                                                                                       //
    if (!_.isEmpty(setData)) {                                                                                         // 383
      update.$set = setData;                                                                                           // 384
    }                                                                                                                  // 557
                                                                                                                       //
    if (!_.isEmpty(unsetData)) {                                                                                       // 386
      update.$unset = unsetData;                                                                                       // 387
    }                                                                                                                  // 560
                                                                                                                       //
    if (_.isEmpty(update)) {                                                                                           // 389
      return true;                                                                                                     // 390
    }                                                                                                                  // 563
                                                                                                                       //
    return this.update({                                                                                               // 392
      _id: _id                                                                                                         // 392
    }, update);                                                                                                        // 392
  };                                                                                                                   // 355
                                                                                                                       //
  ModelUsers.prototype.create = function (data) {                                                                      // 569
    var user;                                                                                                          // 396
    user = {                                                                                                           // 396
      createdAt: new Date(),                                                                                           // 397
      avatarOrigin: 'none'                                                                                             // 398
    };                                                                                                                 // 397
                                                                                                                       //
    _.extend(user, data);                                                                                              // 400
                                                                                                                       //
    return this.insert(user);                                                                                          // 402
  };                                                                                                                   // 395
                                                                                                                       //
  ModelUsers.prototype.removeById = function (_id) {                                                                   // 579
    return this.remove(_id);                                                                                           // 407
  }; /*                                                                                                                // 406
     	Find users to send a message by email if:                                                                        //
     	- he is not online                                                                                               //
     	- has a verified email                                                                                           //
     	- has not disabled email notifications                                                                           //
     	- `active` is equal to true (false means they were deactivated and can't login)                                  //
      */                                                                                                               //
                                                                                                                       //
  ModelUsers.prototype.getUsersToSendOfflineEmail = function (usersIds) {                                              // 592
    var query;                                                                                                         // 417
    query = {                                                                                                          // 417
      _id: {                                                                                                           // 418
        $in: usersIds                                                                                                  // 419
      },                                                                                                               // 419
      active: true,                                                                                                    // 420
      status: 'offline',                                                                                               // 421
      statusConnection: {                                                                                              // 422
        $ne: 'online'                                                                                                  // 423
      },                                                                                                               // 423
      'emails.verified': true                                                                                          // 424
    };                                                                                                                 // 418
    return this.find(query, {                                                                                          // 426
      fields: {                                                                                                        // 426
        name: 1,                                                                                                       // 426
        username: 1,                                                                                                   // 426
        emails: 1,                                                                                                     // 426
        'settings.preferences.emailNotificationMode': 1                                                                // 426
      }                                                                                                                // 426
    });                                                                                                                // 426
  };                                                                                                                   // 416
                                                                                                                       //
  return ModelUsers;                                                                                                   // 615
}(RocketChat.models._Base);                                                                                            // 617
                                                                                                                       //
RocketChat.models.Users = new ModelUsers(Meteor.users, true);                                                          // 428
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_BaseCache.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_BaseCache.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");                                          //
                                                                                                                       //
var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var loki = void 0;                                                                                                     // 1
module.watch(require("lokijs"), {                                                                                      // 1
	"default": function (v) {                                                                                             // 1
		loki = v;                                                                                                            // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
var EventEmitter = void 0;                                                                                             // 1
module.watch(require("events"), {                                                                                      // 1
	EventEmitter: function (v) {                                                                                          // 1
		EventEmitter = v;                                                                                                    // 1
	}                                                                                                                     // 1
}, 1);                                                                                                                 // 1
var objectPath = void 0;                                                                                               // 1
module.watch(require("object-path"), {                                                                                 // 1
	"default": function (v) {                                                                                             // 1
		objectPath = v;                                                                                                      // 1
	}                                                                                                                     // 1
}, 2);                                                                                                                 // 1
var logger = new Logger('BaseCache');                                                                                  // 7
var lokiEq = loki.LokiOps.$eq;                                                                                         // 9
var lokiNe = loki.LokiOps.$ne;                                                                                         // 10
                                                                                                                       //
loki.LokiOps.$eq = function (a, b) {                                                                                   // 12
	if (Array.isArray(a)) {                                                                                               // 13
		return a.indexOf(b) !== -1;                                                                                          // 14
	}                                                                                                                     // 15
                                                                                                                       //
	return lokiEq(a, b);                                                                                                  // 16
};                                                                                                                     // 17
                                                                                                                       //
loki.LokiOps.$ne = function (a, b) {                                                                                   // 19
	if (Array.isArray(a)) {                                                                                               // 20
		return a.indexOf(b) === -1;                                                                                          // 21
	}                                                                                                                     // 22
                                                                                                                       //
	return lokiNe(a, b);                                                                                                  // 23
};                                                                                                                     // 24
                                                                                                                       //
var lokiIn = loki.LokiOps.$in;                                                                                         // 26
                                                                                                                       //
loki.LokiOps.$in = function (a, b) {                                                                                   // 27
	if (Array.isArray(a)) {                                                                                               // 28
		return a.some(function (subA) {                                                                                      // 29
			return lokiIn(subA, b);                                                                                             // 29
		});                                                                                                                  // 29
	}                                                                                                                     // 30
                                                                                                                       //
	return lokiIn(a, b);                                                                                                  // 31
};                                                                                                                     // 32
                                                                                                                       //
loki.LokiOps.$nin = function (a, b) {                                                                                  // 34
	return !loki.LokiOps.$in(a, b);                                                                                       // 35
};                                                                                                                     // 36
                                                                                                                       //
loki.LokiOps.$all = function (a, b) {                                                                                  // 38
	return b.every(function (subB) {                                                                                      // 39
		return a.includes(subB);                                                                                             // 39
	});                                                                                                                   // 39
};                                                                                                                     // 40
                                                                                                                       //
loki.LokiOps.$exists = function (a, b) {                                                                               // 42
	if (b) {                                                                                                              // 43
		return loki.LokiOps.$ne(a, undefined);                                                                               // 44
	}                                                                                                                     // 45
                                                                                                                       //
	return loki.LokiOps.$eq(a, undefined);                                                                                // 47
};                                                                                                                     // 48
                                                                                                                       //
loki.LokiOps.$elemMatch = function (a, b) {                                                                            // 50
	return _.findWhere(a, b);                                                                                             // 51
};                                                                                                                     // 52
                                                                                                                       //
var ignore = ['emit', 'load', 'on', 'addToAllIndexes'];                                                                // 54
                                                                                                                       //
function traceMethodCalls(target) {                                                                                    // 61
	target._stats = {};                                                                                                   // 62
                                                                                                                       //
	var _loop = function (property) {                                                                                     // 61
		if (typeof target[property] === 'function' && ignore.indexOf(property) === -1) {                                     // 65
			target._stats[property] = {                                                                                         // 66
				calls: 0,                                                                                                          // 67
				time: 0,                                                                                                           // 68
				avg: 0                                                                                                             // 69
			};                                                                                                                  // 66
			var origMethod = target[property];                                                                                  // 71
                                                                                                                       //
			target[property] = function () {                                                                                    // 72
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 72
					args[_key] = arguments[_key];                                                                                     // 72
				}                                                                                                                  // 72
                                                                                                                       //
				if (target.loaded !== true) {                                                                                      // 74
					return origMethod.apply(target, args);                                                                            // 75
				}                                                                                                                  // 76
                                                                                                                       //
				var startTime = RocketChat.statsTracker.now();                                                                     // 78
				var result = origMethod.apply(target, args);                                                                       // 79
				var time = Math.round(RocketChat.statsTracker.now() - startTime) / 1000;                                           // 80
				target._stats[property].time += time;                                                                              // 81
				target._stats[property].calls++;                                                                                   // 82
				target._stats[property].avg = target._stats[property].time / target._stats[property].calls;                        // 83
				return result;                                                                                                     // 85
			};                                                                                                                  // 86
		}                                                                                                                    // 87
	};                                                                                                                    // 61
                                                                                                                       //
	for (var property in meteorBabelHelpers.sanitizeForInObject(target)) {                                                // 64
		_loop(property);                                                                                                     // 64
	}                                                                                                                     // 88
                                                                                                                       //
	setInterval(function () {                                                                                             // 90
		for (var property in meteorBabelHelpers.sanitizeForInObject(target._stats)) {                                        // 91
			if (target._stats.hasOwnProperty(property) && target._stats[property].time > 0) {                                   // 92
				var tags = ["property:" + property, "collection:" + target.collectionName];                                        // 93
				RocketChat.statsTracker.timing('cache.methods.time', target._stats[property].avg, tags);                           // 94
				RocketChat.statsTracker.increment('cache.methods.totalTime', target._stats[property].time, tags);                  // 95
				RocketChat.statsTracker.increment('cache.methods.count', target._stats[property].calls, tags);                     // 96
				target._stats[property].avg = 0;                                                                                   // 97
				target._stats[property].time = 0;                                                                                  // 98
				target._stats[property].calls = 0;                                                                                 // 99
			}                                                                                                                   // 100
		}                                                                                                                    // 101
	}, 10000);                                                                                                            // 102
                                                                                                                       //
	target._getStatsAvg = function () {                                                                                   // 104
		var stats = [];                                                                                                      // 105
                                                                                                                       //
		for (var property in meteorBabelHelpers.sanitizeForInObject(target._stats)) {                                        // 106
			if (target._stats.hasOwnProperty(property)) {                                                                       // 107
				stats.push([Math.round(target._stats[property].avg * 100) / 100, property]);                                       // 108
			}                                                                                                                   // 109
		}                                                                                                                    // 110
                                                                                                                       //
		return _.sortBy(stats, function (record) {                                                                           // 111
			return record[0];                                                                                                   // 112
		});                                                                                                                  // 113
	};                                                                                                                    // 114
}                                                                                                                      // 115
                                                                                                                       //
var Adapter = function () {                                                                                            //
	function Adapter() {                                                                                                  //
		(0, _classCallCheck3.default)(this, Adapter);                                                                        //
	}                                                                                                                     //
                                                                                                                       //
	Adapter.prototype.loadDatabase = function () {                                                                        //
		function loadDatabase() /*dbname, callback*/{}                                                                       //
                                                                                                                       //
		return loadDatabase;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	Adapter.prototype.saveDatabase = function () {                                                                        //
		function saveDatabase() /*dbname, dbstring, callback*/{}                                                             //
                                                                                                                       //
		return saveDatabase;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	Adapter.prototype.deleteDatabase = function () {                                                                      //
		function deleteDatabase() /*dbname, callback*/{}                                                                     //
                                                                                                                       //
		return deleteDatabase;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	return Adapter;                                                                                                       //
}();                                                                                                                   //
                                                                                                                       //
var db = new loki('rocket.chat.json', {                                                                                // 123
	adapter: Adapter                                                                                                      // 123
});                                                                                                                    // 123
                                                                                                                       //
var ModelsBaseCache = function (_EventEmitter) {                                                                       //
	(0, _inherits3.default)(ModelsBaseCache, _EventEmitter);                                                              //
                                                                                                                       //
	function ModelsBaseCache(model) {                                                                                     // 126
		(0, _classCallCheck3.default)(this, ModelsBaseCache);                                                                // 126
                                                                                                                       //
		var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));                                // 126
                                                                                                                       //
		traceMethodCalls(_this);                                                                                             // 129
		_this.indexes = {};                                                                                                  // 131
		_this.ignoreUpdatedFields = ['_updatedAt'];                                                                          // 132
		_this.query = {};                                                                                                    // 134
		_this.options = {};                                                                                                  // 135
                                                                                                                       //
		_this.ensureIndex('_id', 'unique');                                                                                  // 137
                                                                                                                       //
		_this.joins = {};                                                                                                    // 139
                                                                                                                       //
		_this.on('inserted', function () {                                                                                   // 141
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {                        // 141
				args[_key2] = arguments[_key2];                                                                                    // 141
			}                                                                                                                   // 141
                                                                                                                       //
			_this.emit.apply(_this, ['changed', 'inserted'].concat(args));                                                      // 141
		});                                                                                                                  // 141
                                                                                                                       //
		_this.on('removed', function () {                                                                                    // 142
			for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {                        // 142
				args[_key3] = arguments[_key3];                                                                                    // 142
			}                                                                                                                   // 142
                                                                                                                       //
			_this.emit.apply(_this, ['changed', 'removed'].concat(args));                                                       // 142
		});                                                                                                                  // 142
                                                                                                                       //
		_this.on('updated', function () {                                                                                    // 143
			for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {                        // 143
				args[_key4] = arguments[_key4];                                                                                    // 143
			}                                                                                                                   // 143
                                                                                                                       //
			_this.emit.apply(_this, ['changed', 'updated'].concat(args));                                                       // 143
		});                                                                                                                  // 143
                                                                                                                       //
		_this.on('beforeinsert', function () {                                                                               // 145
			for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {                        // 145
				args[_key5] = arguments[_key5];                                                                                    // 145
			}                                                                                                                   // 145
                                                                                                                       //
			_this.emit.apply(_this, ['beforechange', 'inserted'].concat(args));                                                 // 145
		});                                                                                                                  // 145
                                                                                                                       //
		_this.on('beforeremove', function () {                                                                               // 146
			for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {                        // 146
				args[_key6] = arguments[_key6];                                                                                    // 146
			}                                                                                                                   // 146
                                                                                                                       //
			_this.emit.apply(_this, ['beforechange', 'removed'].concat(args));                                                  // 146
		});                                                                                                                  // 146
                                                                                                                       //
		_this.on('beforeupdate', function () {                                                                               // 147
			for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {                        // 147
				args[_key7] = arguments[_key7];                                                                                    // 147
			}                                                                                                                   // 147
                                                                                                                       //
			_this.emit.apply(_this, ['beforechange', 'updated'].concat(args));                                                  // 147
		});                                                                                                                  // 147
                                                                                                                       //
		_this.on('inserted', function () {                                                                                   // 149
			for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {                        // 149
				args[_key8] = arguments[_key8];                                                                                    // 149
			}                                                                                                                   // 149
                                                                                                                       //
			_this.emit.apply(_this, ['sync', 'inserted'].concat(args));                                                         // 149
		});                                                                                                                  // 149
                                                                                                                       //
		_this.on('updated', function () {                                                                                    // 150
			for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {                        // 150
				args[_key9] = arguments[_key9];                                                                                    // 150
			}                                                                                                                   // 150
                                                                                                                       //
			_this.emit.apply(_this, ['sync', 'updated'].concat(args));                                                          // 150
		});                                                                                                                  // 150
                                                                                                                       //
		_this.on('beforeremove', function () {                                                                               // 151
			for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {                  // 151
				args[_key10] = arguments[_key10];                                                                                  // 151
			}                                                                                                                   // 151
                                                                                                                       //
			_this.emit.apply(_this, ['sync', 'removed'].concat(args));                                                          // 151
		});                                                                                                                  // 151
                                                                                                                       //
		_this.db = db;                                                                                                       // 153
		_this.model = model;                                                                                                 // 155
		_this.collectionName = _this.model._db.collectionName;                                                               // 157
		_this.collection = _this.db.addCollection(_this.collectionName);                                                     // 158
		return _this;                                                                                                        // 126
	}                                                                                                                     // 159
                                                                                                                       //
	ModelsBaseCache.prototype.hasOne = function () {                                                                      //
		function hasOne(join, _ref) {                                                                                        //
			var field = _ref.field,                                                                                             // 161
			    link = _ref.link;                                                                                               // 161
			this.join({                                                                                                         // 162
				join: join,                                                                                                        // 162
				field: field,                                                                                                      // 162
				link: link,                                                                                                        // 162
				multi: false                                                                                                       // 162
			});                                                                                                                 // 162
		}                                                                                                                    // 163
                                                                                                                       //
		return hasOne;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.hasMany = function () {                                                                     //
		function hasMany(join, _ref2) {                                                                                      //
			var field = _ref2.field,                                                                                            // 165
			    link = _ref2.link;                                                                                              // 165
			this.join({                                                                                                         // 166
				join: join,                                                                                                        // 166
				field: field,                                                                                                      // 166
				link: link,                                                                                                        // 166
				multi: true                                                                                                        // 166
			});                                                                                                                 // 166
		}                                                                                                                    // 167
                                                                                                                       //
		return hasMany;                                                                                                      //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.join = function () {                                                                        //
		function join(_ref3) {                                                                                               //
			var _this2 = this;                                                                                                  // 169
                                                                                                                       //
			var _join = _ref3.join,                                                                                             // 169
			    field = _ref3.field,                                                                                            // 169
			    link = _ref3.link,                                                                                              // 169
			    multi = _ref3.multi;                                                                                            // 169
                                                                                                                       //
			if (!RocketChat.models[_join]) {                                                                                    // 170
				console.log("Invalid cache model " + _join);                                                                       // 171
				return;                                                                                                            // 172
			}                                                                                                                   // 173
                                                                                                                       //
			RocketChat.models[_join].cache.on('inserted', function (record) {                                                   // 175
				_this2.processRemoteJoinInserted({                                                                                 // 176
					join: _join,                                                                                                      // 176
					field: field,                                                                                                     // 176
					link: link,                                                                                                       // 176
					multi: multi,                                                                                                     // 176
					record: record                                                                                                    // 176
				});                                                                                                                // 176
			});                                                                                                                 // 177
                                                                                                                       //
			RocketChat.models[_join].cache.on('beforeupdate', function (record, diff) {                                         // 179
				if (diff[link.remote]) {                                                                                           // 180
					_this2.processRemoteJoinRemoved({                                                                                 // 181
						join: _join,                                                                                                     // 181
						field: field,                                                                                                    // 181
						link: link,                                                                                                      // 181
						multi: multi,                                                                                                    // 181
						record: record                                                                                                   // 181
					});                                                                                                               // 181
				}                                                                                                                  // 182
			});                                                                                                                 // 183
                                                                                                                       //
			RocketChat.models[_join].cache.on('updated', function (record, diff) {                                              // 185
				if (diff[link.remote]) {                                                                                           // 186
					_this2.processRemoteJoinInserted({                                                                                // 187
						join: _join,                                                                                                     // 187
						field: field,                                                                                                    // 187
						link: link,                                                                                                      // 187
						multi: multi,                                                                                                    // 187
						record: record                                                                                                   // 187
					});                                                                                                               // 187
				}                                                                                                                  // 188
			});                                                                                                                 // 189
                                                                                                                       //
			RocketChat.models[_join].cache.on('removed', function (record) {                                                    // 191
				_this2.processRemoteJoinRemoved({                                                                                  // 192
					join: _join,                                                                                                      // 192
					field: field,                                                                                                     // 192
					link: link,                                                                                                       // 192
					multi: multi,                                                                                                     // 192
					record: record                                                                                                    // 192
				});                                                                                                                // 192
			});                                                                                                                 // 193
                                                                                                                       //
			this.on('inserted', function (localRecord) {                                                                        // 195
				_this2.processLocalJoinInserted({                                                                                  // 196
					join: _join,                                                                                                      // 196
					field: field,                                                                                                     // 196
					link: link,                                                                                                       // 196
					multi: multi,                                                                                                     // 196
					localRecord: localRecord                                                                                          // 196
				});                                                                                                                // 196
			});                                                                                                                 // 197
			this.on('beforeupdate', function (localRecord, diff) {                                                              // 199
				if (diff[link.local]) {                                                                                            // 200
					if (multi === true) {                                                                                             // 201
						localRecord[field] = [];                                                                                         // 202
					} else {                                                                                                          // 203
						localRecord[field] = undefined;                                                                                  // 204
					}                                                                                                                 // 205
				}                                                                                                                  // 206
			});                                                                                                                 // 207
			this.on('updated', function (localRecord, diff) {                                                                   // 209
				if (diff[link.local]) {                                                                                            // 210
					_this2.processLocalJoinInserted({                                                                                 // 211
						join: _join,                                                                                                     // 211
						field: field,                                                                                                    // 211
						link: link,                                                                                                      // 211
						multi: multi,                                                                                                    // 211
						localRecord: localRecord                                                                                         // 211
					});                                                                                                               // 211
				}                                                                                                                  // 212
			});                                                                                                                 // 213
		}                                                                                                                    // 214
                                                                                                                       //
		return join;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.processRemoteJoinInserted = function () {                                                   //
		function processRemoteJoinInserted(_ref4) {                                                                          //
			var field = _ref4.field,                                                                                            // 216
			    link = _ref4.link,                                                                                              // 216
			    multi = _ref4.multi,                                                                                            // 216
			    record = _ref4.record;                                                                                          // 216
                                                                                                                       //
			var localRecords = this._findByIndex(link.local, objectPath.get(record, link.remote));                              // 217
                                                                                                                       //
			if (!localRecords) {                                                                                                // 219
				return;                                                                                                            // 220
			}                                                                                                                   // 221
                                                                                                                       //
			if (!Array.isArray(localRecords)) {                                                                                 // 223
				localRecords = [localRecords];                                                                                     // 224
			}                                                                                                                   // 225
                                                                                                                       //
			for (var i = 0; i < localRecords.length; i++) {                                                                     // 227
				var localRecord = localRecords[i];                                                                                 // 228
                                                                                                                       //
				if (multi === true && !localRecord[field]) {                                                                       // 229
					localRecord[field] = [];                                                                                          // 230
				}                                                                                                                  // 231
                                                                                                                       //
				if (typeof link.where === 'function' && link.where(localRecord, record) === false) {                               // 233
					continue;                                                                                                         // 234
				}                                                                                                                  // 235
                                                                                                                       //
				var mutableRecord = record;                                                                                        // 237
                                                                                                                       //
				if (typeof link.transform === 'function') {                                                                        // 239
					mutableRecord = link.transform(localRecord, mutableRecord);                                                       // 240
				}                                                                                                                  // 241
                                                                                                                       //
				if (multi === true) {                                                                                              // 243
					localRecord[field].push(mutableRecord);                                                                           // 244
				} else {                                                                                                           // 245
					localRecord[field] = mutableRecord;                                                                               // 246
				}                                                                                                                  // 247
                                                                                                                       //
				this.emit("join:" + field + ":inserted", localRecord, mutableRecord);                                              // 249
				this.emit("join:" + field + ":changed", 'inserted', localRecord, mutableRecord);                                   // 250
			}                                                                                                                   // 251
		}                                                                                                                    // 252
                                                                                                                       //
		return processRemoteJoinInserted;                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.processLocalJoinInserted = function () {                                                    //
		function processLocalJoinInserted(_ref5) {                                                                           //
			var join = _ref5.join,                                                                                              // 254
			    field = _ref5.field,                                                                                            // 254
			    link = _ref5.link,                                                                                              // 254
			    multi = _ref5.multi,                                                                                            // 254
			    localRecord = _ref5.localRecord;                                                                                // 254
                                                                                                                       //
			var records = RocketChat.models[join].cache._findByIndex(link.remote, objectPath.get(localRecord, link.local));     // 255
                                                                                                                       //
			if (!Array.isArray(records)) {                                                                                      // 257
				records = [records];                                                                                               // 258
			}                                                                                                                   // 259
                                                                                                                       //
			for (var i = 0; i < records.length; i++) {                                                                          // 261
				var record = records[i];                                                                                           // 262
                                                                                                                       //
				if (typeof link.where === 'function' && link.where(localRecord, record) === false) {                               // 264
					continue;                                                                                                         // 265
				}                                                                                                                  // 266
                                                                                                                       //
				if (typeof link.transform === 'function') {                                                                        // 268
					record = link.transform(localRecord, record);                                                                     // 269
				}                                                                                                                  // 270
                                                                                                                       //
				if (multi === true) {                                                                                              // 272
					localRecord[field].push(record);                                                                                  // 273
				} else {                                                                                                           // 274
					localRecord[field] = record;                                                                                      // 275
				}                                                                                                                  // 276
                                                                                                                       //
				this.emit("join:" + field + ":inserted", localRecord, record);                                                     // 278
				this.emit("join:" + field + ":changed", 'inserted', localRecord, record);                                          // 279
			}                                                                                                                   // 280
		}                                                                                                                    // 281
                                                                                                                       //
		return processLocalJoinInserted;                                                                                     //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.processRemoteJoinRemoved = function () {                                                    //
		function processRemoteJoinRemoved(_ref6) {                                                                           //
			var field = _ref6.field,                                                                                            // 283
			    link = _ref6.link,                                                                                              // 283
			    multi = _ref6.multi,                                                                                            // 283
			    record = _ref6.record;                                                                                          // 283
                                                                                                                       //
			var localRecords = this._findByIndex(link.local, objectPath.get(record, link.remote));                              // 284
                                                                                                                       //
			if (!localRecords) {                                                                                                // 286
				return;                                                                                                            // 287
			}                                                                                                                   // 288
                                                                                                                       //
			if (!Array.isArray(localRecords)) {                                                                                 // 290
				localRecords = [localRecords];                                                                                     // 291
			}                                                                                                                   // 292
                                                                                                                       //
			for (var i = 0; i < localRecords.length; i++) {                                                                     // 294
				var localRecord = localRecords[i];                                                                                 // 295
                                                                                                                       //
				if (multi === true) {                                                                                              // 297
					if (Array.isArray(localRecord[field])) {                                                                          // 298
						if (typeof link.remove === 'function') {                                                                         // 299
							link.remove(localRecord[field], record);                                                                        // 300
						} else if (localRecord[field].indexOf(record) > -1) {                                                            // 301
							localRecord[field].splice(localRecord[field].indexOf(record), 1);                                               // 302
						}                                                                                                                // 303
					}                                                                                                                 // 304
				} else {                                                                                                           // 305
					localRecord[field] = undefined;                                                                                   // 306
				}                                                                                                                  // 307
                                                                                                                       //
				this.emit("join:" + field + ":removed", localRecord, record);                                                      // 309
				this.emit("join:" + field + ":changed", 'removed', localRecord, record);                                           // 310
			}                                                                                                                   // 311
		}                                                                                                                    // 312
                                                                                                                       //
		return processRemoteJoinRemoved;                                                                                     //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.ensureIndex = function () {                                                                 //
		function ensureIndex(fields) {                                                                                       //
			var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'array';                             // 314
                                                                                                                       //
			if (!Array.isArray(fields)) {                                                                                       // 315
				fields = [fields];                                                                                                 // 316
			}                                                                                                                   // 317
                                                                                                                       //
			this.indexes[fields.join(',')] = {                                                                                  // 319
				type: type,                                                                                                        // 320
				fields: fields,                                                                                                    // 321
				data: {}                                                                                                           // 322
			};                                                                                                                  // 319
		}                                                                                                                    // 324
                                                                                                                       //
		return ensureIndex;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.addToAllIndexes = function () {                                                             //
		function addToAllIndexes(record) {                                                                                   //
			for (var indexName in meteorBabelHelpers.sanitizeForInObject(this.indexes)) {                                       // 327
				if (this.indexes.hasOwnProperty(indexName)) {                                                                      // 328
					this.addToIndex(indexName, record);                                                                               // 329
				}                                                                                                                  // 330
			}                                                                                                                   // 331
		}                                                                                                                    // 332
                                                                                                                       //
		return addToAllIndexes;                                                                                              //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.addToIndex = function () {                                                                  //
		function addToIndex(indexName, record) {                                                                             //
			var index = this.indexes[indexName];                                                                                // 335
                                                                                                                       //
			if (!index) {                                                                                                       // 336
				console.error("Index not defined " + indexName);                                                                   // 337
				return;                                                                                                            // 338
			}                                                                                                                   // 339
                                                                                                                       //
			var keys = [];                                                                                                      // 341
                                                                                                                       //
			for (var _iterator = index.fields, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref7;                                                                                                         // 342
                                                                                                                       //
				if (_isArray) {                                                                                                    // 342
					if (_i >= _iterator.length) break;                                                                                // 342
					_ref7 = _iterator[_i++];                                                                                          // 342
				} else {                                                                                                           // 342
					_i = _iterator.next();                                                                                            // 342
					if (_i.done) break;                                                                                               // 342
					_ref7 = _i.value;                                                                                                 // 342
				}                                                                                                                  // 342
                                                                                                                       //
				var field = _ref7;                                                                                                 // 342
				keys.push(objectPath.get(record, field));                                                                          // 343
			}                                                                                                                   // 344
                                                                                                                       //
			var key = keys.join('|');                                                                                           // 345
                                                                                                                       //
			if (index.type === 'unique') {                                                                                      // 347
				index.data[key] = record;                                                                                          // 348
				return;                                                                                                            // 349
			}                                                                                                                   // 350
                                                                                                                       //
			if (index.type === 'array') {                                                                                       // 352
				if (!index.data[key]) {                                                                                            // 353
					index.data[key] = [];                                                                                             // 354
				}                                                                                                                  // 355
                                                                                                                       //
				index.data[key].push(record);                                                                                      // 356
				return;                                                                                                            // 357
			}                                                                                                                   // 358
		}                                                                                                                    // 359
                                                                                                                       //
		return addToIndex;                                                                                                   //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.removeFromAllIndexes = function () {                                                        //
		function removeFromAllIndexes(record) {                                                                              //
			for (var indexName in meteorBabelHelpers.sanitizeForInObject(this.indexes)) {                                       // 362
				if (this.indexes.hasOwnProperty(indexName)) {                                                                      // 363
					this.removeFromIndex(indexName, record);                                                                          // 364
				}                                                                                                                  // 365
			}                                                                                                                   // 366
		}                                                                                                                    // 367
                                                                                                                       //
		return removeFromAllIndexes;                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.removeFromIndex = function () {                                                             //
		function removeFromIndex(indexName, record) {                                                                        //
			var index = this.indexes[indexName];                                                                                // 370
                                                                                                                       //
			if (!this.indexes[indexName]) {                                                                                     // 371
				console.error("Index not defined " + indexName);                                                                   // 372
				return;                                                                                                            // 373
			}                                                                                                                   // 374
                                                                                                                       //
			if (!index.data) {                                                                                                  // 376
				return;                                                                                                            // 377
			}                                                                                                                   // 378
                                                                                                                       //
			var key = [];                                                                                                       // 380
                                                                                                                       //
			for (var _iterator2 = index.fields, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				var _ref8;                                                                                                         // 381
                                                                                                                       //
				if (_isArray2) {                                                                                                   // 381
					if (_i2 >= _iterator2.length) break;                                                                              // 381
					_ref8 = _iterator2[_i2++];                                                                                        // 381
				} else {                                                                                                           // 381
					_i2 = _iterator2.next();                                                                                          // 381
					if (_i2.done) break;                                                                                              // 381
					_ref8 = _i2.value;                                                                                                // 381
				}                                                                                                                  // 381
                                                                                                                       //
				var field = _ref8;                                                                                                 // 381
				key.push(objectPath.get(record, field));                                                                           // 382
			}                                                                                                                   // 383
                                                                                                                       //
			key = key.join('|');                                                                                                // 384
                                                                                                                       //
			if (index.type === 'unique') {                                                                                      // 386
				index.data[key] = undefined;                                                                                       // 387
				return;                                                                                                            // 388
			}                                                                                                                   // 389
                                                                                                                       //
			if (index.type === 'array') {                                                                                       // 391
				if (!index.data[key]) {                                                                                            // 392
					return;                                                                                                           // 393
				}                                                                                                                  // 394
                                                                                                                       //
				var i = index.data[key].indexOf(record);                                                                           // 395
                                                                                                                       //
				if (i > -1) {                                                                                                      // 396
					index.data[key].splice(i, 1);                                                                                     // 397
				}                                                                                                                  // 398
                                                                                                                       //
				return;                                                                                                            // 399
			}                                                                                                                   // 400
		}                                                                                                                    // 401
                                                                                                                       //
		return removeFromIndex;                                                                                              //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype._findByIndex = function () {                                                                //
		function _findByIndex(index, keys) {                                                                                 //
			var key = [].concat(keys).join('|');                                                                                // 404
                                                                                                                       //
			if (!this.indexes[index]) {                                                                                         // 405
				return;                                                                                                            // 406
			}                                                                                                                   // 407
                                                                                                                       //
			if (this.indexes[index].data) {                                                                                     // 409
				var result = this.indexes[index].data[key];                                                                        // 410
                                                                                                                       //
				if (result) {                                                                                                      // 411
					return result;                                                                                                    // 412
				}                                                                                                                  // 413
			}                                                                                                                   // 414
                                                                                                                       //
			if (this.indexes[index].type === 'array') {                                                                         // 416
				return [];                                                                                                         // 417
			}                                                                                                                   // 418
		}                                                                                                                    // 419
                                                                                                                       //
		return _findByIndex;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.findByIndex = function () {                                                                 //
		function findByIndex(index, keys) {                                                                                  //
			var _this3 = this;                                                                                                  // 421
                                                                                                                       //
			var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 421
			return {                                                                                                            // 422
				fetch: function () {                                                                                               // 423
					return _this3.processQueryOptionsOnResult(_this3._findByIndex(index, keys), options);                             // 424
				},                                                                                                                 // 425
				count: function () {                                                                                               // 427
					var records = _this3.findByIndex(index, keys, options).fetch();                                                   // 428
                                                                                                                       //
					if (Array.isArray(records)) {                                                                                     // 429
						return records.length;                                                                                           // 430
					}                                                                                                                 // 431
                                                                                                                       //
					return !records ? 0 : 1;                                                                                          // 432
				},                                                                                                                 // 433
				forEach: function (fn) {                                                                                           // 435
					var records = _this3.findByIndex(index, keys, options).fetch();                                                   // 436
                                                                                                                       //
					if (Array.isArray(records)) {                                                                                     // 437
						return records.forEach(fn);                                                                                      // 438
					}                                                                                                                 // 439
                                                                                                                       //
					if (records) {                                                                                                    // 440
						return fn(records);                                                                                              // 441
					}                                                                                                                 // 442
				}                                                                                                                  // 443
			};                                                                                                                  // 422
		}                                                                                                                    // 445
                                                                                                                       //
		return findByIndex;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.load = function () {                                                                        //
		function load() {                                                                                                    //
			if (this.model._useCache === false) {                                                                               // 448
				return;                                                                                                            // 449
			}                                                                                                                   // 450
                                                                                                                       //
			console.log('Will load cache for', this.collectionName);                                                            // 452
			this.emit('beforeload');                                                                                            // 453
			this.loaded = false;                                                                                                // 454
			var time = RocketChat.statsTracker.now();                                                                           // 455
			var data = this.model.db.find(this.query, this.options).fetch();                                                    // 456
                                                                                                                       //
			for (var i = 0; i < data.length; i++) {                                                                             // 457
				this.insert(data[i]);                                                                                              // 458
			}                                                                                                                   // 459
                                                                                                                       //
			console.log(String(data.length), 'records load from', this.collectionName);                                         // 460
			RocketChat.statsTracker.timing('cache.load', RocketChat.statsTracker.now() - time, ["collection:" + this.collectionName]);
			this.startSync();                                                                                                   // 463
			this.loaded = true;                                                                                                 // 464
			this.emit('afterload');                                                                                             // 465
		}                                                                                                                    // 466
                                                                                                                       //
		return load;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.startSync = function () {                                                                   //
		function startSync() {                                                                                               //
			var _this4 = this;                                                                                                  // 468
                                                                                                                       //
			if (this.model._useCache === false) {                                                                               // 469
				return;                                                                                                            // 470
			}                                                                                                                   // 471
                                                                                                                       //
			this.model._db.on('change', function (_ref9) {                                                                      // 473
				var action = _ref9.action,                                                                                         // 473
				    id = _ref9.id,                                                                                                 // 473
				    data = _ref9.data;                                                                                             // 473
                                                                                                                       //
				switch (action) {                                                                                                  // 474
					case 'insert':                                                                                                    // 475
						data._id = id;                                                                                                   // 476
                                                                                                                       //
						_this4.insert(data);                                                                                             // 477
                                                                                                                       //
						break;                                                                                                           // 478
                                                                                                                       //
					case 'remove':                                                                                                    // 480
						_this4.removeById(id);                                                                                           // 481
                                                                                                                       //
						break;                                                                                                           // 482
                                                                                                                       //
					case 'update:record':                                                                                             // 484
						_this4.updateDiffById(id, data);                                                                                 // 485
                                                                                                                       //
						break;                                                                                                           // 486
                                                                                                                       //
					case 'update:diff':                                                                                               // 488
						_this4.updateDiffById(id, data);                                                                                 // 489
                                                                                                                       //
						break;                                                                                                           // 490
                                                                                                                       //
					case 'update:query':                                                                                              // 492
						_this4.update(data.query, data.update, data.options);                                                            // 493
                                                                                                                       //
						break;                                                                                                           // 494
				}                                                                                                                  // 474
			});                                                                                                                 // 496
		}                                                                                                                    // 497
                                                                                                                       //
		return startSync;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.processQueryOptionsOnResult = function () {                                                 //
		function processQueryOptionsOnResult(result) {                                                                       //
			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                               // 499
                                                                                                                       //
			if (result === undefined || result === null) {                                                                      // 500
				return undefined;                                                                                                  // 501
			}                                                                                                                   // 502
                                                                                                                       //
			if (Array.isArray(result)) {                                                                                        // 504
				if (options.sort) {                                                                                                // 505
					result = result.sort(function (a, b) {                                                                            // 506
						var r = 0;                                                                                                       // 507
                                                                                                                       //
						for (var field in meteorBabelHelpers.sanitizeForInObject(options.sort)) {                                        // 508
							if (options.sort.hasOwnProperty(field)) {                                                                       // 509
								var direction = options.sort[field];                                                                           // 510
								var valueA = void 0;                                                                                           // 511
								var valueB = void 0;                                                                                           // 512
                                                                                                                       //
								if (field.indexOf('.') > -1) {                                                                                 // 513
									valueA = objectPath.get(a, field);                                                                            // 514
									valueB = objectPath.get(b, field);                                                                            // 515
								} else {                                                                                                       // 516
									valueA = a[field];                                                                                            // 517
									valueB = b[field];                                                                                            // 518
								}                                                                                                              // 519
                                                                                                                       //
								if (valueA > valueB) {                                                                                         // 520
									r = direction;                                                                                                // 521
									break;                                                                                                        // 522
								}                                                                                                              // 523
                                                                                                                       //
								if (valueA < valueB) {                                                                                         // 524
									r = -direction;                                                                                               // 525
									break;                                                                                                        // 526
								}                                                                                                              // 527
							}                                                                                                               // 528
						}                                                                                                                // 529
                                                                                                                       //
						return r;                                                                                                        // 530
					});                                                                                                               // 531
				}                                                                                                                  // 532
                                                                                                                       //
				if (typeof options.skip === 'number') {                                                                            // 534
					result.splice(0, options.skip);                                                                                   // 535
				}                                                                                                                  // 536
                                                                                                                       //
				if (typeof options.limit === 'number' && options.limit !== 0) {                                                    // 538
					result.splice(options.limit);                                                                                     // 539
				}                                                                                                                  // 540
			}                                                                                                                   // 541
                                                                                                                       //
			if (!options.fields) {                                                                                              // 543
				options.fields = {};                                                                                               // 544
			}                                                                                                                   // 545
                                                                                                                       //
			var fieldsToRemove = [];                                                                                            // 547
			var fieldsToGet = [];                                                                                               // 548
                                                                                                                       //
			for (var field in meteorBabelHelpers.sanitizeForInObject(options.fields)) {                                         // 550
				if (options.fields.hasOwnProperty(field)) {                                                                        // 551
					if (options.fields[field] === 0) {                                                                                // 552
						fieldsToRemove.push(field);                                                                                      // 553
					} else if (options.fields[field] === 1) {                                                                         // 554
						fieldsToGet.push(field);                                                                                         // 555
					}                                                                                                                 // 556
				}                                                                                                                  // 557
			}                                                                                                                   // 558
                                                                                                                       //
			if (fieldsToRemove.length > 0 && fieldsToGet.length > 0) {                                                          // 560
				console.warn('Can\'t mix remove and get fields');                                                                  // 561
				fieldsToRemove.splice(0, fieldsToRemove.length);                                                                   // 562
			}                                                                                                                   // 563
                                                                                                                       //
			if (fieldsToGet.length > 0 && fieldsToGet.indexOf('_id') === -1) {                                                  // 565
				fieldsToGet.push('_id');                                                                                           // 566
			}                                                                                                                   // 567
                                                                                                                       //
			var pickFields = function (obj, fields) {                                                                           // 569
				var picked = {};                                                                                                   // 570
				fields.forEach(function (field) {                                                                                  // 571
					if (field.indexOf('.') !== -1) {                                                                                  // 572
						objectPath.set(picked, field, objectPath.get(obj, field));                                                       // 573
					} else {                                                                                                          // 574
						picked[field] = obj[field];                                                                                      // 575
					}                                                                                                                 // 576
				});                                                                                                                // 577
				return picked;                                                                                                     // 578
			};                                                                                                                  // 579
                                                                                                                       //
			if (fieldsToRemove.length > 0 || fieldsToGet.length > 0) {                                                          // 581
				if (Array.isArray(result)) {                                                                                       // 582
					result = result.map(function (record) {                                                                           // 583
						if (fieldsToRemove.length > 0) {                                                                                 // 584
							var _ref10;                                                                                                     // 584
                                                                                                                       //
							return (_ref10 = _).omit.apply(_ref10, [record].concat(fieldsToRemove));                                        // 585
						}                                                                                                                // 586
                                                                                                                       //
						if (fieldsToGet.length > 0) {                                                                                    // 588
							return pickFields(record, fieldsToGet);                                                                         // 589
						}                                                                                                                // 590
					});                                                                                                               // 591
				} else {                                                                                                           // 592
					if (fieldsToRemove.length > 0) {                                                                                  // 593
						var _ref11;                                                                                                      // 593
                                                                                                                       //
						return (_ref11 = _).omit.apply(_ref11, [result].concat(fieldsToRemove));                                         // 594
					}                                                                                                                 // 595
                                                                                                                       //
					if (fieldsToGet.length > 0) {                                                                                     // 597
						return pickFields(result, fieldsToGet);                                                                          // 598
					}                                                                                                                 // 599
				}                                                                                                                  // 600
			}                                                                                                                   // 601
                                                                                                                       //
			return result;                                                                                                      // 603
		}                                                                                                                    // 604
                                                                                                                       //
		return processQueryOptionsOnResult;                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.processQuery = function () {                                                                //
		function processQuery(query, parentField) {                                                                          //
			var _this5 = this;                                                                                                  // 606
                                                                                                                       //
			if (!query) {                                                                                                       // 607
				return query;                                                                                                      // 608
			}                                                                                                                   // 609
                                                                                                                       //
			if (Match.test(query, String)) {                                                                                    // 611
				return {                                                                                                           // 612
					_id: query                                                                                                        // 613
				};                                                                                                                 // 612
			}                                                                                                                   // 615
                                                                                                                       //
			if (Object.keys(query).length > 1 && parentField !== '$elemMatch') {                                                // 617
				var and = [];                                                                                                      // 618
                                                                                                                       //
				for (var field in meteorBabelHelpers.sanitizeForInObject(query)) {                                                 // 619
					if (query.hasOwnProperty(field)) {                                                                                // 620
						var _and$push;                                                                                                   // 620
                                                                                                                       //
						and.push((_and$push = {}, _and$push[field] = query[field], _and$push));                                          // 621
					}                                                                                                                 // 624
				}                                                                                                                  // 625
                                                                                                                       //
				query = {                                                                                                          // 626
					$and: and                                                                                                         // 626
				};                                                                                                                 // 626
			}                                                                                                                   // 627
                                                                                                                       //
			var _loop2 = function (_field) {                                                                                    // 606
				if (query.hasOwnProperty(_field)) {                                                                                // 630
					var value = query[_field];                                                                                        // 631
                                                                                                                       //
					if (value instanceof RegExp && _field !== '$regex') {                                                             // 632
						query[_field] = {                                                                                                // 633
							$regex: value                                                                                                   // 634
						};                                                                                                               // 633
					}                                                                                                                 // 636
                                                                                                                       //
					if (_field === '$and' || _field === '$or') {                                                                      // 638
						query[_field] = value.map(function (subValue) {                                                                  // 639
							return _this5.processQuery(subValue, _field);                                                                   // 640
						});                                                                                                              // 641
					}                                                                                                                 // 642
                                                                                                                       //
					if (Match.test(value, Object) && Object.keys(value).length > 0) {                                                 // 644
						query[_field] = _this5.processQuery(value, _field);                                                              // 645
					}                                                                                                                 // 646
				}                                                                                                                  // 647
			};                                                                                                                  // 606
                                                                                                                       //
			for (var _field in meteorBabelHelpers.sanitizeForInObject(query)) {                                                 // 629
				_loop2(_field);                                                                                                    // 629
			}                                                                                                                   // 648
                                                                                                                       //
			return query;                                                                                                       // 650
		}                                                                                                                    // 651
                                                                                                                       //
		return processQuery;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.find = function () {                                                                        //
		function find(query) {                                                                                               //
			var _this6 = this,                                                                                                  // 653
			    _arguments = arguments;                                                                                         // 653
                                                                                                                       //
			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                               // 653
			return {                                                                                                            // 654
				fetch: function () {                                                                                               // 655
					try {                                                                                                             // 656
						query = _this6.processQuery(query);                                                                              // 657
						return _this6.processQueryOptionsOnResult(_this6.collection.find(query), options);                               // 658
					} catch (e) {                                                                                                     // 659
						console.error('Exception on cache find for', _this6.collectionName);                                             // 660
						console.error('Query:', JSON.stringify(query, null, 2));                                                         // 661
						console.error('Options:', JSON.stringify(options, null, 2));                                                     // 662
						console.error(e.stack);                                                                                          // 663
						throw e;                                                                                                         // 664
					}                                                                                                                 // 665
				},                                                                                                                 // 666
				count: function () {                                                                                               // 668
					try {                                                                                                             // 669
						query = _this6.processQuery(query);                                                                              // 670
						var limit = options.limit,                                                                                       // 669
						    skip = options.skip;                                                                                         // 669
						return _this6.processQueryOptionsOnResult(_this6.collection.find(query), {                                       // 672
							limit: limit,                                                                                                   // 672
							skip: skip                                                                                                      // 672
						}).length;                                                                                                       // 672
					} catch (e) {                                                                                                     // 673
						console.error('Exception on cache find for', _this6.collectionName);                                             // 674
						console.error('Query:', JSON.stringify(query, null, 2));                                                         // 675
						console.error('Options:', JSON.stringify(options, null, 2));                                                     // 676
						console.error(e.stack);                                                                                          // 677
						throw e;                                                                                                         // 678
					}                                                                                                                 // 679
				},                                                                                                                 // 680
				forEach: function (fn) {                                                                                           // 682
					return _this6.find(query, options).fetch().forEach(fn);                                                           // 683
				},                                                                                                                 // 684
				observe: function (obj) {                                                                                          // 686
					var _model$db;                                                                                                    // 686
                                                                                                                       //
					logger.debug(_this6.collectionName, 'Falling back observe to model with query:', query);                          // 687
					return (_model$db = _this6.model.db).find.apply(_model$db, _arguments).observe(obj);                              // 688
				},                                                                                                                 // 689
				observeChanges: function (obj) {                                                                                   // 691
					var _model$db2;                                                                                                   // 691
                                                                                                                       //
					logger.debug(_this6.collectionName, 'Falling back observeChanges to model with query:', query);                   // 692
					return (_model$db2 = _this6.model.db).find.apply(_model$db2, _arguments).observeChanges(obj);                     // 693
				},                                                                                                                 // 694
				_publishCursor: function (cursor, sub, collection) {                                                               // 696
					var _model$db3;                                                                                                   // 696
                                                                                                                       //
					logger.debug(_this6.collectionName, 'Falling back _publishCursor to model with query:', query);                   // 697
					return (_model$db3 = _this6.model.db).find.apply(_model$db3, _arguments)._publishCursor(cursor, sub, collection);
				}                                                                                                                  // 699
			};                                                                                                                  // 654
		}                                                                                                                    // 701
                                                                                                                       //
		return find;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.findOne = function () {                                                                     //
		function findOne(query, options) {                                                                                   //
			try {                                                                                                               // 704
				query = this.processQuery(query);                                                                                  // 705
				return this.processQueryOptionsOnResult(this.collection.findOne(query), options);                                  // 706
			} catch (e) {                                                                                                       // 707
				console.error('Exception on cache findOne for', this.collectionName);                                              // 708
				console.error('Query:', JSON.stringify(query, null, 2));                                                           // 709
				console.error('Options:', JSON.stringify(options, null, 2));                                                       // 710
				console.error(e.stack);                                                                                            // 711
				throw e;                                                                                                           // 712
			}                                                                                                                   // 713
		}                                                                                                                    // 714
                                                                                                                       //
		return findOne;                                                                                                      //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.findOneById = function () {                                                                 //
		function findOneById(_id, options) {                                                                                 //
			return this.findByIndex('_id', _id, options).fetch();                                                               // 717
		}                                                                                                                    // 718
                                                                                                                       //
		return findOneById;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.findOneByIds = function () {                                                                //
		function findOneByIds(ids, options) {                                                                                //
			var query = this.processQuery({                                                                                     // 721
				_id: {                                                                                                             // 721
					$in: ids                                                                                                          // 721
				}                                                                                                                  // 721
			});                                                                                                                 // 721
			return this.processQueryOptionsOnResult(this.collection.findOne(query), options);                                   // 722
		}                                                                                                                    // 723
                                                                                                                       //
		return findOneByIds;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.findWhere = function () {                                                                   //
		function findWhere(query, options) {                                                                                 //
			query = this.processQuery(query);                                                                                   // 726
			return this.processQueryOptionsOnResult(this.collection.findWhere(query), options);                                 // 727
		}                                                                                                                    // 728
                                                                                                                       //
		return findWhere;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.addDynamicView = function () {                                                              //
		function addDynamicView() {                                                                                          //
			var _collection;                                                                                                    // 730
                                                                                                                       //
			return (_collection = this.collection).addDynamicView.apply(_collection, arguments);                                // 731
		}                                                                                                                    // 732
                                                                                                                       //
		return addDynamicView;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.getDynamicView = function () {                                                              //
		function getDynamicView() {                                                                                          //
			var _collection2;                                                                                                   // 734
                                                                                                                       //
			return (_collection2 = this.collection).getDynamicView.apply(_collection2, arguments);                              // 735
		}                                                                                                                    // 736
                                                                                                                       //
		return getDynamicView;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.insert = function () {                                                                      //
		function insert(record) {                                                                                            //
			if (Array.isArray(record)) {                                                                                        // 739
				for (var _iterator3 = record, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
					var _ref12;                                                                                                       // 740
                                                                                                                       //
					if (_isArray3) {                                                                                                  // 740
						if (_i3 >= _iterator3.length) break;                                                                             // 740
						_ref12 = _iterator3[_i3++];                                                                                      // 740
					} else {                                                                                                          // 740
						_i3 = _iterator3.next();                                                                                         // 740
						if (_i3.done) break;                                                                                             // 740
						_ref12 = _i3.value;                                                                                              // 740
					}                                                                                                                 // 740
                                                                                                                       //
					var item = _ref12;                                                                                                // 740
					this.insert(item);                                                                                                // 741
				}                                                                                                                  // 742
			} else {                                                                                                            // 743
				// TODO remove - ignore updates in room.usernames                                                                  // 744
				if (this.collectionName === 'rocketchat_room' && record.usernames) {                                               // 745
					delete record.usernames;                                                                                          // 746
				}                                                                                                                  // 747
                                                                                                                       //
				this.emit('beforeinsert', record);                                                                                 // 748
				this.addToAllIndexes(record);                                                                                      // 749
				this.collection.insert(record);                                                                                    // 750
				this.emit('inserted', record);                                                                                     // 751
			}                                                                                                                   // 752
		}                                                                                                                    // 753
                                                                                                                       //
		return insert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.updateDiffById = function () {                                                              //
		function updateDiffById(id, diff) {                                                                                  //
			var _ref13;                                                                                                         // 755
                                                                                                                       //
			// TODO remove - ignore updates in room.usernames                                                                   // 756
			if (this.collectionName === 'rocketchat_room' && diff.usernames) {                                                  // 757
				delete diff.usernames;                                                                                             // 758
			}                                                                                                                   // 759
                                                                                                                       //
			var record = this._findByIndex('_id', id);                                                                          // 761
                                                                                                                       //
			if (!record) {                                                                                                      // 762
				console.error('Cache.updateDiffById: No record', this.collectionName, id, diff);                                   // 763
				return;                                                                                                            // 764
			}                                                                                                                   // 765
                                                                                                                       //
			this.removeFromAllIndexes(record);                                                                                  // 766
                                                                                                                       //
			var updatedFields = (_ref13 = _).without.apply(_ref13, [Object.keys(diff)].concat((0, _toConsumableArray3.default)(this.ignoreUpdatedFields)));
                                                                                                                       //
			if (updatedFields.length > 0) {                                                                                     // 770
				this.emit('beforeupdate', record, diff);                                                                           // 771
			}                                                                                                                   // 772
                                                                                                                       //
			for (var key in meteorBabelHelpers.sanitizeForInObject(diff)) {                                                     // 774
				if (diff.hasOwnProperty(key)) {                                                                                    // 775
					objectPath.set(record, key, diff[key]);                                                                           // 776
				}                                                                                                                  // 777
			}                                                                                                                   // 778
                                                                                                                       //
			this.collection.update(record);                                                                                     // 780
			this.addToAllIndexes(record);                                                                                       // 781
                                                                                                                       //
			if (updatedFields.length > 0) {                                                                                     // 783
				this.emit('updated', record, diff);                                                                                // 784
			}                                                                                                                   // 785
		}                                                                                                                    // 786
                                                                                                                       //
		return updateDiffById;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.updateRecord = function () {                                                                //
		function updateRecord(record, update) {                                                                              //
			var _ref14;                                                                                                         // 788
                                                                                                                       //
			// TODO remove - ignore updates in room.usernames                                                                   // 789
			if (this.collectionName === 'rocketchat_room' && (record.usernames || record.$set && record.$set.usernames)) {      // 790
				delete record.usernames;                                                                                           // 791
                                                                                                                       //
				if (record.$set && record.$set.usernames) {                                                                        // 792
					delete record.$set.usernames;                                                                                     // 793
				}                                                                                                                  // 794
			}                                                                                                                   // 795
                                                                                                                       //
			this.removeFromAllIndexes(record);                                                                                  // 797
			var topLevelFields = Object.keys(update).map(function (field) {                                                     // 799
				return field.split('.')[0];                                                                                        // 799
			});                                                                                                                 // 799
                                                                                                                       //
			var updatedFields = (_ref14 = _).without.apply(_ref14, [topLevelFields].concat((0, _toConsumableArray3.default)(this.ignoreUpdatedFields)));
                                                                                                                       //
			if (updatedFields.length > 0) {                                                                                     // 802
				this.emit('beforeupdate', record, record);                                                                         // 803
			}                                                                                                                   // 804
                                                                                                                       //
			if (update.$set) {                                                                                                  // 806
				_.each(update.$set, function (value, field) {                                                                      // 807
					objectPath.set(record, field, value);                                                                             // 808
				});                                                                                                                // 809
			}                                                                                                                   // 810
                                                                                                                       //
			if (update.$unset) {                                                                                                // 812
				_.each(update.$unset, function (value, field) {                                                                    // 813
					objectPath.del(record, field);                                                                                    // 814
				});                                                                                                                // 815
			}                                                                                                                   // 816
                                                                                                                       //
			if (update.$min) {                                                                                                  // 818
				_.each(update.$min, function (value, field) {                                                                      // 819
					var curValue = objectPath.get(record, field);                                                                     // 820
                                                                                                                       //
					if (curValue === undefined || value < curValue) {                                                                 // 821
						objectPath.set(record, field, value);                                                                            // 822
					}                                                                                                                 // 823
				});                                                                                                                // 824
			}                                                                                                                   // 825
                                                                                                                       //
			if (update.$max) {                                                                                                  // 827
				_.each(update.$max, function (value, field) {                                                                      // 828
					var curValue = objectPath.get(record, field);                                                                     // 829
                                                                                                                       //
					if (curValue === undefined || value > curValue) {                                                                 // 830
						objectPath.set(record, field, value);                                                                            // 831
					}                                                                                                                 // 832
				});                                                                                                                // 833
			}                                                                                                                   // 834
                                                                                                                       //
			if (update.$inc) {                                                                                                  // 836
				_.each(update.$inc, function (value, field) {                                                                      // 837
					var curValue = objectPath.get(record, field);                                                                     // 838
                                                                                                                       //
					if (curValue === undefined) {                                                                                     // 839
						curValue = value;                                                                                                // 840
					} else {                                                                                                          // 841
						curValue += value;                                                                                               // 842
					}                                                                                                                 // 843
                                                                                                                       //
					objectPath.set(record, field, curValue);                                                                          // 844
				});                                                                                                                // 845
			}                                                                                                                   // 846
                                                                                                                       //
			if (update.$mul) {                                                                                                  // 848
				_.each(update.$mul, function (value, field) {                                                                      // 849
					var curValue = objectPath.get(record, field);                                                                     // 850
                                                                                                                       //
					if (curValue === undefined) {                                                                                     // 851
						curValue = 0;                                                                                                    // 852
					} else {                                                                                                          // 853
						curValue *= value;                                                                                               // 854
					}                                                                                                                 // 855
                                                                                                                       //
					objectPath.set(record, field, curValue);                                                                          // 856
				});                                                                                                                // 857
			}                                                                                                                   // 858
                                                                                                                       //
			if (update.$rename) {                                                                                               // 860
				_.each(update.$rename, function (value, field) {                                                                   // 861
					var curValue = objectPath.get(record, field);                                                                     // 862
                                                                                                                       //
					if (curValue !== undefined) {                                                                                     // 863
						objectPath.set(record, value, curValue);                                                                         // 864
						objectPath.del(record, field);                                                                                   // 865
					}                                                                                                                 // 866
				});                                                                                                                // 867
			}                                                                                                                   // 868
                                                                                                                       //
			if (update.$pullAll) {                                                                                              // 870
				_.each(update.$pullAll, function (value, field) {                                                                  // 871
					var curValue = objectPath.get(record, field);                                                                     // 872
                                                                                                                       //
					if (Array.isArray(curValue)) {                                                                                    // 873
						curValue = _.difference(curValue, value);                                                                        // 874
						objectPath.set(record, field, curValue);                                                                         // 875
					}                                                                                                                 // 876
				});                                                                                                                // 877
			}                                                                                                                   // 878
                                                                                                                       //
			if (update.$pop) {                                                                                                  // 880
				_.each(update.$pop, function (value, field) {                                                                      // 881
					var curValue = objectPath.get(record, field);                                                                     // 882
                                                                                                                       //
					if (Array.isArray(curValue)) {                                                                                    // 883
						if (value === -1) {                                                                                              // 884
							curValue.shift();                                                                                               // 885
						} else {                                                                                                         // 886
							curValue.pop();                                                                                                 // 887
						}                                                                                                                // 888
                                                                                                                       //
						objectPath.set(record, field, curValue);                                                                         // 889
					}                                                                                                                 // 890
				});                                                                                                                // 891
			}                                                                                                                   // 892
                                                                                                                       //
			if (update.$addToSet) {                                                                                             // 894
				_.each(update.$addToSet, function (value, field) {                                                                 // 895
					var curValue = objectPath.get(record, field);                                                                     // 896
                                                                                                                       //
					if (curValue === undefined) {                                                                                     // 897
						curValue = [];                                                                                                   // 898
					}                                                                                                                 // 899
                                                                                                                       //
					if (Array.isArray(curValue)) {                                                                                    // 900
						var length = curValue.length;                                                                                    // 901
                                                                                                                       //
						if (value && value.$each && Array.isArray(value.$each)) {                                                        // 903
							for (var _iterator4 = value.$each, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
								var _ref15;                                                                                                    // 904
                                                                                                                       //
								if (_isArray4) {                                                                                               // 904
									if (_i4 >= _iterator4.length) break;                                                                          // 904
									_ref15 = _iterator4[_i4++];                                                                                   // 904
								} else {                                                                                                       // 904
									_i4 = _iterator4.next();                                                                                      // 904
									if (_i4.done) break;                                                                                          // 904
									_ref15 = _i4.value;                                                                                           // 904
								}                                                                                                              // 904
                                                                                                                       //
								var valueItem = _ref15;                                                                                        // 904
                                                                                                                       //
								if (curValue.indexOf(valueItem) === -1) {                                                                      // 905
									curValue.push(valueItem);                                                                                     // 906
								}                                                                                                              // 907
							}                                                                                                               // 908
						} else if (curValue.indexOf(value) === -1) {                                                                     // 909
							curValue.push(value);                                                                                           // 910
						}                                                                                                                // 911
                                                                                                                       //
						if (curValue.length > length) {                                                                                  // 913
							objectPath.set(record, field, curValue);                                                                        // 914
						}                                                                                                                // 915
					}                                                                                                                 // 916
				});                                                                                                                // 917
			}                                                                                                                   // 918
                                                                                                                       //
			this.collection.update(record);                                                                                     // 920
			this.addToAllIndexes(record);                                                                                       // 921
                                                                                                                       //
			if (updatedFields.length > 0) {                                                                                     // 923
				this.emit('updated', record, record);                                                                              // 924
			}                                                                                                                   // 925
		}                                                                                                                    // 926
                                                                                                                       //
		return updateRecord;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.update = function () {                                                                      //
		function update(query, _update) {                                                                                    //
			var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 928
			var records = options.multi ? this.find(query).fetch() : this.findOne(query) || [];                                 // 929
                                                                                                                       //
			if (!Array.isArray(records)) {                                                                                      // 930
				records = [records];                                                                                               // 931
			}                                                                                                                   // 932
                                                                                                                       //
			for (var _iterator5 = records, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
				var _ref16;                                                                                                        // 934
                                                                                                                       //
				if (_isArray5) {                                                                                                   // 934
					if (_i5 >= _iterator5.length) break;                                                                              // 934
					_ref16 = _iterator5[_i5++];                                                                                       // 934
				} else {                                                                                                           // 934
					_i5 = _iterator5.next();                                                                                          // 934
					if (_i5.done) break;                                                                                              // 934
					_ref16 = _i5.value;                                                                                               // 934
				}                                                                                                                  // 934
                                                                                                                       //
				var record = _ref16;                                                                                               // 934
				this.updateRecord(record, _update);                                                                                // 935
			}                                                                                                                   // 936
		}                                                                                                                    // 937
                                                                                                                       //
		return update;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseCache.prototype.removeById = function () {                                                                  //
		function removeById(id) {                                                                                            //
			var record = this._findByIndex('_id', id);                                                                          // 940
                                                                                                                       //
			if (record) {                                                                                                       // 941
				this.emit('beforeremove', record);                                                                                 // 942
				this.collection.removeWhere({                                                                                      // 943
					_id: id                                                                                                           // 943
				});                                                                                                                // 943
				this.removeFromAllIndexes(record);                                                                                 // 944
				this.emit('removed', record);                                                                                      // 945
			}                                                                                                                   // 946
		}                                                                                                                    // 947
                                                                                                                       //
		return removeById;                                                                                                   //
	}();                                                                                                                  //
                                                                                                                       //
	return ModelsBaseCache;                                                                                               //
}(EventEmitter);                                                                                                       //
                                                                                                                       //
module.exportDefault(ModelsBaseCache);                                                                                 // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_BaseDb.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_BaseDb.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _createClass2 = require("babel-runtime/helpers/createClass");                                                      //
                                                                                                                       //
var _createClass3 = _interopRequireDefault(_createClass2);                                                             //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var EventEmitter = void 0;                                                                                             // 1
module.watch(require("events"), {                                                                                      // 1
	EventEmitter: function (v) {                                                                                          // 1
		EventEmitter = v;                                                                                                    // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
/* globals MongoInternals */var baseName = 'rocketchat_';                                                              // 1
var trash = new Mongo.Collection(baseName + "_trash");                                                                 // 6
                                                                                                                       //
try {                                                                                                                  // 7
	trash._ensureIndex({                                                                                                  // 8
		collection: 1                                                                                                        // 8
	});                                                                                                                   // 8
                                                                                                                       //
	trash._ensureIndex({                                                                                                  // 9
		_deletedAt: 1                                                                                                        // 9
	}, {                                                                                                                  // 9
		expireAfterSeconds: 60 * 60 * 24 * 30                                                                                // 9
	});                                                                                                                   // 9
} catch (e) {                                                                                                          // 10
	console.log(e);                                                                                                       // 11
}                                                                                                                      // 12
                                                                                                                       //
var isOplogAvailable = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle && !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onOplogEntry;
var isOplogEnabled = isOplogAvailable;                                                                                 // 15
RocketChat.settings.get('Force_Disable_OpLog_For_Cache', function (key, value) {                                       // 16
	isOplogEnabled = isOplogAvailable && value === false;                                                                 // 17
});                                                                                                                    // 18
                                                                                                                       //
var ModelsBaseDb = function (_EventEmitter) {                                                                          //
	(0, _inherits3.default)(ModelsBaseDb, _EventEmitter);                                                                 //
                                                                                                                       //
	function ModelsBaseDb(model, baseModel) {                                                                             // 21
		(0, _classCallCheck3.default)(this, ModelsBaseDb);                                                                   // 21
                                                                                                                       //
		var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));                                // 21
                                                                                                                       //
		if (Match.test(model, String)) {                                                                                     // 24
			_this.name = model;                                                                                                 // 25
			_this.collectionName = _this.baseName + _this.name;                                                                 // 26
			_this.model = new Mongo.Collection(_this.collectionName);                                                           // 27
		} else {                                                                                                             // 28
			_this.name = model._name;                                                                                           // 29
			_this.collectionName = _this.name;                                                                                  // 30
			_this.model = model;                                                                                                // 31
		}                                                                                                                    // 32
                                                                                                                       //
		_this.baseModel = baseModel;                                                                                         // 34
                                                                                                                       //
		_this.wrapModel(); // When someone start listening for changes we start oplog if available                           // 36
                                                                                                                       //
                                                                                                                       //
		_this.once('newListener', function (event /*, listener*/) {                                                          // 39
			if (event === 'change') {                                                                                           // 40
				if (isOplogEnabled) {                                                                                              // 41
					var query = {                                                                                                     // 42
						collection: _this.collectionName                                                                                 // 43
					};                                                                                                                // 42
                                                                                                                       //
					MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onOplogEntry(query, _this.processOplogRecord.bind(_this));
                                                                                                                       //
					MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle._defineTooFarBehind(Number.MAX_SAFE_INTEGER);   // 47
				}                                                                                                                  // 48
			}                                                                                                                   // 49
		});                                                                                                                  // 50
                                                                                                                       //
		_this.tryEnsureIndex({                                                                                               // 52
			'_updatedAt': 1                                                                                                     // 52
		});                                                                                                                  // 52
                                                                                                                       //
		return _this;                                                                                                        // 21
	}                                                                                                                     // 53
                                                                                                                       //
	ModelsBaseDb.prototype.setUpdatedAt = function () {                                                                   //
		function setUpdatedAt() {                                                                                            //
			var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                // 59
                                                                                                                       //
			// TODO: Check if this can be deleted, Rodrigo does not rememebr WHY he added it. So he removed it to fix issue #5541
			// setUpdatedAt(record = {}, checkQuery = false, query) {                                                           // 62
			// if (checkQuery === true) {                                                                                       // 63
			// 	if (!query || Object.keys(query).length === 0) {                                                                // 64
			// 		throw new Meteor.Error('Models._Base: Empty query');                                                           // 65
			// 	}                                                                                                               // 66
			// }                                                                                                                // 67
			if (/(^|,)\$/.test(Object.keys(record).join(','))) {                                                                // 69
				record.$set = record.$set || {};                                                                                   // 70
				record.$set._updatedAt = new Date();                                                                               // 71
			} else {                                                                                                            // 72
				record._updatedAt = new Date();                                                                                    // 73
			}                                                                                                                   // 74
                                                                                                                       //
			return record;                                                                                                      // 76
		}                                                                                                                    // 77
                                                                                                                       //
		return setUpdatedAt;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.wrapModel = function () {                                                                      //
		function wrapModel() {                                                                                               //
			this.originals = {                                                                                                  // 80
				insert: this.model.insert.bind(this.model),                                                                        // 81
				update: this.model.update.bind(this.model),                                                                        // 82
				remove: this.model.remove.bind(this.model)                                                                         // 83
			};                                                                                                                  // 80
			var self = this;                                                                                                    // 85
                                                                                                                       //
			this.model.insert = function () {                                                                                   // 87
				return self.insert.apply(self, arguments);                                                                         // 88
			};                                                                                                                  // 89
                                                                                                                       //
			this.model.update = function () {                                                                                   // 91
				return self.update.apply(self, arguments);                                                                         // 92
			};                                                                                                                  // 93
                                                                                                                       //
			this.model.remove = function () {                                                                                   // 95
				return self.remove.apply(self, arguments);                                                                         // 96
			};                                                                                                                  // 97
		}                                                                                                                    // 98
                                                                                                                       //
		return wrapModel;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.find = function () {                                                                           //
		function find() {                                                                                                    //
			var _model;                                                                                                         // 100
                                                                                                                       //
			return (_model = this.model).find.apply(_model, arguments);                                                         // 101
		}                                                                                                                    // 102
                                                                                                                       //
		return find;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.findOne = function () {                                                                        //
		function findOne() {                                                                                                 //
			var _model2;                                                                                                        // 104
                                                                                                                       //
			return (_model2 = this.model).findOne.apply(_model2, arguments);                                                    // 105
		}                                                                                                                    // 106
                                                                                                                       //
		return findOne;                                                                                                      //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.findOneById = function () {                                                                    //
		function findOneById(_id, options) {                                                                                 //
			return this.model.findOne({                                                                                         // 109
				_id: _id                                                                                                           // 109
			}, options);                                                                                                        // 109
		}                                                                                                                    // 110
                                                                                                                       //
		return findOneById;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.findOneByIds = function () {                                                                   //
		function findOneByIds(ids, options) {                                                                                //
			return this.model.findOne({                                                                                         // 113
				_id: {                                                                                                             // 113
					$in: ids                                                                                                          // 113
				}                                                                                                                  // 113
			}, options);                                                                                                        // 113
		}                                                                                                                    // 114
                                                                                                                       //
		return findOneByIds;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.defineSyncStrategy = function () {                                                             //
		function defineSyncStrategy(query, modifier, options) {                                                              //
			if (this.baseModel.useCache === false) {                                                                            // 117
				return 'db';                                                                                                       // 118
			}                                                                                                                   // 119
                                                                                                                       //
			if (options.upsert === true) {                                                                                      // 121
				return 'db';                                                                                                       // 122
			} // const dbModifiers = [                                                                                          // 123
			// 	'$currentDate',                                                                                                 // 126
			// 	'$bit',                                                                                                         // 127
			// 	'$pull',                                                                                                        // 128
			// 	'$pushAll',                                                                                                     // 129
			// 	'$push',                                                                                                        // 130
			// 	'$setOnInsert'                                                                                                  // 131
			// ];                                                                                                               // 132
                                                                                                                       //
                                                                                                                       //
			var cacheAllowedModifiers = ['$set', '$unset', '$min', '$max', '$inc', '$mul', '$rename', '$pullAll', '$pop', '$addToSet'];
			var notAllowedModifiers = Object.keys(modifier).filter(function (i) {                                               // 147
				return i.startsWith('$') && cacheAllowedModifiers.includes(i) === false;                                           // 147
			});                                                                                                                 // 147
                                                                                                                       //
			if (notAllowedModifiers.length > 0) {                                                                               // 149
				return 'db';                                                                                                       // 150
			}                                                                                                                   // 151
                                                                                                                       //
			var placeholderFields = Object.keys(query).filter(function (item) {                                                 // 153
				return item.indexOf('$') > -1;                                                                                     // 153
			});                                                                                                                 // 153
                                                                                                                       //
			if (placeholderFields.length > 0) {                                                                                 // 154
				return 'db';                                                                                                       // 155
			}                                                                                                                   // 156
                                                                                                                       //
			return 'cache';                                                                                                     // 158
		}                                                                                                                    // 159
                                                                                                                       //
		return defineSyncStrategy;                                                                                           //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.updateHasPositionalOperator = function () {                                                    //
		function updateHasPositionalOperator(update) {                                                                       //
			for (var key in meteorBabelHelpers.sanitizeForInObject(update)) {                                                   // 162
				if (key.includes('.$')) {                                                                                          // 163
					return true;                                                                                                      // 164
				}                                                                                                                  // 165
                                                                                                                       //
				var value = update[key];                                                                                           // 167
                                                                                                                       //
				if (Match.test(value, Object)) {                                                                                   // 169
					if (this.updateHasPositionalOperator(value) === true) {                                                           // 170
						return true;                                                                                                     // 171
					}                                                                                                                 // 172
				}                                                                                                                  // 173
			}                                                                                                                   // 174
                                                                                                                       //
			return false;                                                                                                       // 176
		}                                                                                                                    // 177
                                                                                                                       //
		return updateHasPositionalOperator;                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.processOplogRecord = function () {                                                             //
		function processOplogRecord(action) {                                                                                //
			if (isOplogEnabled === false) {                                                                                     // 180
				return;                                                                                                            // 181
			}                                                                                                                   // 182
                                                                                                                       //
			if (action.op.op === 'i') {                                                                                         // 184
				this.emit('change', {                                                                                              // 185
					action: 'insert',                                                                                                 // 186
					id: action.op.o._id,                                                                                              // 187
					data: action.op.o,                                                                                                // 188
					oplog: true                                                                                                       // 189
				});                                                                                                                // 185
				return;                                                                                                            // 191
			}                                                                                                                   // 192
                                                                                                                       //
			if (action.op.op === 'u') {                                                                                         // 194
				if (!action.op.o.$set && !action.op.o.$unset) {                                                                    // 195
					this.emit('change', {                                                                                             // 196
						action: 'update:record',                                                                                         // 197
						id: action.id,                                                                                                   // 198
						data: action.op.o,                                                                                               // 199
						oplog: true                                                                                                      // 200
					});                                                                                                               // 196
					return;                                                                                                           // 202
				}                                                                                                                  // 203
                                                                                                                       //
				var diff = {};                                                                                                     // 205
                                                                                                                       //
				if (action.op.o.$set) {                                                                                            // 206
					for (var key in meteorBabelHelpers.sanitizeForInObject(action.op.o.$set)) {                                       // 207
						if (action.op.o.$set.hasOwnProperty(key)) {                                                                      // 208
							diff[key] = action.op.o.$set[key];                                                                              // 209
						}                                                                                                                // 210
					}                                                                                                                 // 211
				}                                                                                                                  // 212
                                                                                                                       //
				if (action.op.o.$unset) {                                                                                          // 214
					for (var _key in meteorBabelHelpers.sanitizeForInObject(action.op.o.$unset)) {                                    // 215
						if (action.op.o.$unset.hasOwnProperty(_key)) {                                                                   // 216
							diff[_key] = undefined;                                                                                         // 217
						}                                                                                                                // 218
					}                                                                                                                 // 219
				}                                                                                                                  // 220
                                                                                                                       //
				this.emit('change', {                                                                                              // 222
					action: 'update:diff',                                                                                            // 223
					id: action.id,                                                                                                    // 224
					data: diff,                                                                                                       // 225
					oplog: true                                                                                                       // 226
				});                                                                                                                // 222
				return;                                                                                                            // 228
			}                                                                                                                   // 229
                                                                                                                       //
			if (action.op.op === 'd') {                                                                                         // 231
				this.emit('change', {                                                                                              // 232
					action: 'remove',                                                                                                 // 233
					id: action.id,                                                                                                    // 234
					oplog: true                                                                                                       // 235
				});                                                                                                                // 232
				return;                                                                                                            // 237
			}                                                                                                                   // 238
		}                                                                                                                    // 239
                                                                                                                       //
		return processOplogRecord;                                                                                           //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.insert = function () {                                                                         //
		function insert(record) {                                                                                            //
			var _originals;                                                                                                     // 241
                                                                                                                       //
			this.setUpdatedAt(record);                                                                                          // 242
                                                                                                                       //
			var result = (_originals = this.originals).insert.apply(_originals, arguments);                                     // 244
                                                                                                                       //
			if (!isOplogEnabled && this.listenerCount('change') > 0) {                                                          // 245
				this.emit('change', {                                                                                              // 246
					action: 'insert',                                                                                                 // 247
					id: result,                                                                                                       // 248
					data: _.extend({}, record),                                                                                       // 249
					oplog: false                                                                                                      // 250
				});                                                                                                                // 246
			}                                                                                                                   // 252
                                                                                                                       //
			record._id = result;                                                                                                // 254
			return result;                                                                                                      // 256
		}                                                                                                                    // 257
                                                                                                                       //
		return insert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.update = function () {                                                                         //
		function update(query, _update) {                                                                                    //
			var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 259
			this.setUpdatedAt(_update, true, query);                                                                            // 260
			var strategy = this.defineSyncStrategy(query, _update, options);                                                    // 262
			var ids = [];                                                                                                       // 263
                                                                                                                       //
			if (!isOplogEnabled && this.listenerCount('change') > 0 && strategy === 'db') {                                     // 264
				var findOptions = {                                                                                                // 265
					fields: {                                                                                                         // 265
						_id: 1                                                                                                           // 265
					}                                                                                                                 // 265
				};                                                                                                                 // 265
				var records = options.multi ? this.find(query, findOptions).fetch() : this.findOne(query, findOptions) || [];      // 266
                                                                                                                       //
				if (!Array.isArray(records)) {                                                                                     // 267
					records = [records];                                                                                              // 268
				}                                                                                                                  // 269
                                                                                                                       //
				ids = records.map(function (item) {                                                                                // 271
					return item._id;                                                                                                  // 271
				});                                                                                                                // 271
                                                                                                                       //
				if (options.upsert !== true && this.updateHasPositionalOperator(_update) === false) {                              // 272
					query = {                                                                                                         // 273
						_id: {                                                                                                           // 274
							$in: ids                                                                                                        // 275
						}                                                                                                                // 274
					};                                                                                                                // 273
				}                                                                                                                  // 278
			}                                                                                                                   // 279
                                                                                                                       //
			var result = this.originals.update(query, _update, options);                                                        // 281
                                                                                                                       //
			if (!isOplogEnabled && this.listenerCount('change') > 0) {                                                          // 283
				if (strategy === 'db') {                                                                                           // 284
					if (options.upsert === true) {                                                                                    // 285
						if (result.insertedId) {                                                                                         // 286
							this.emit('change', {                                                                                           // 287
								action: 'insert',                                                                                              // 288
								id: result.insertedId,                                                                                         // 289
								data: this.findOne({                                                                                           // 290
									_id: result.insertedId                                                                                        // 290
								}),                                                                                                            // 290
								oplog: false                                                                                                   // 291
							});                                                                                                             // 287
							return;                                                                                                         // 293
						}                                                                                                                // 294
                                                                                                                       //
						query = {                                                                                                        // 296
							_id: {                                                                                                          // 297
								$in: ids                                                                                                       // 298
							}                                                                                                               // 297
						};                                                                                                               // 296
					}                                                                                                                 // 301
                                                                                                                       //
					var _records = options.multi ? this.find(query).fetch() : this.findOne(query) || [];                              // 303
                                                                                                                       //
					if (!Array.isArray(_records)) {                                                                                   // 304
						_records = [_records];                                                                                           // 305
					}                                                                                                                 // 306
                                                                                                                       //
					for (var _iterator = _records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
						var _ref;                                                                                                        // 307
                                                                                                                       //
						if (_isArray) {                                                                                                  // 307
							if (_i >= _iterator.length) break;                                                                              // 307
							_ref = _iterator[_i++];                                                                                         // 307
						} else {                                                                                                         // 307
							_i = _iterator.next();                                                                                          // 307
							if (_i.done) break;                                                                                             // 307
							_ref = _i.value;                                                                                                // 307
						}                                                                                                                // 307
                                                                                                                       //
						var record = _ref;                                                                                               // 307
						this.emit('change', {                                                                                            // 308
							action: 'update:record',                                                                                        // 309
							id: record._id,                                                                                                 // 310
							data: record,                                                                                                   // 311
							oplog: false                                                                                                    // 312
						});                                                                                                              // 308
					}                                                                                                                 // 314
				} else {                                                                                                           // 315
					this.emit('change', {                                                                                             // 316
						action: 'update:query',                                                                                          // 317
						id: undefined,                                                                                                   // 318
						data: {                                                                                                          // 319
							query: query,                                                                                                   // 320
							update: _update,                                                                                                // 321
							options: options                                                                                                // 322
						},                                                                                                               // 319
						oplog: false                                                                                                     // 324
					});                                                                                                               // 316
				}                                                                                                                  // 326
			}                                                                                                                   // 327
                                                                                                                       //
			return result;                                                                                                      // 328
		}                                                                                                                    // 329
                                                                                                                       //
		return update;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.upsert = function () {                                                                         //
		function upsert(query, update) {                                                                                     //
			var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 331
			options.upsert = true;                                                                                              // 332
			options._returnObject = true;                                                                                       // 333
			return this.update(query, update, options);                                                                         // 334
		}                                                                                                                    // 335
                                                                                                                       //
		return upsert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.remove = function () {                                                                         //
		function remove(query) {                                                                                             //
			var records = this.model.find(query).fetch();                                                                       // 338
			var ids = [];                                                                                                       // 340
                                                                                                                       //
			for (var _iterator2 = records, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				var _ref2;                                                                                                         // 341
                                                                                                                       //
				if (_isArray2) {                                                                                                   // 341
					if (_i2 >= _iterator2.length) break;                                                                              // 341
					_ref2 = _iterator2[_i2++];                                                                                        // 341
				} else {                                                                                                           // 341
					_i2 = _iterator2.next();                                                                                          // 341
					if (_i2.done) break;                                                                                              // 341
					_ref2 = _i2.value;                                                                                                // 341
				}                                                                                                                  // 341
                                                                                                                       //
				var record = _ref2;                                                                                                // 341
				ids.push(record._id);                                                                                              // 342
				record._deletedAt = new Date();                                                                                    // 344
				record.__collection__ = this.name;                                                                                 // 345
				trash.upsert({                                                                                                     // 347
					_id: record._id                                                                                                   // 347
				}, _.omit(record, '_id'));                                                                                         // 347
			}                                                                                                                   // 348
                                                                                                                       //
			query = {                                                                                                           // 350
				_id: {                                                                                                             // 350
					$in: ids                                                                                                          // 350
				}                                                                                                                  // 350
			};                                                                                                                  // 350
			var result = this.originals.remove(query);                                                                          // 352
                                                                                                                       //
			if (!isOplogEnabled && this.listenerCount('change') > 0) {                                                          // 354
				for (var _iterator3 = records, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
					var _ref3;                                                                                                        // 355
                                                                                                                       //
					if (_isArray3) {                                                                                                  // 355
						if (_i3 >= _iterator3.length) break;                                                                             // 355
						_ref3 = _iterator3[_i3++];                                                                                       // 355
					} else {                                                                                                          // 355
						_i3 = _iterator3.next();                                                                                         // 355
						if (_i3.done) break;                                                                                             // 355
						_ref3 = _i3.value;                                                                                               // 355
					}                                                                                                                 // 355
                                                                                                                       //
					var _record = _ref3;                                                                                              // 355
					this.emit('change', {                                                                                             // 356
						action: 'remove',                                                                                                // 357
						id: _record._id,                                                                                                 // 358
						data: _.extend({}, _record),                                                                                     // 359
						oplog: false                                                                                                     // 360
					});                                                                                                               // 356
				}                                                                                                                  // 362
			}                                                                                                                   // 363
                                                                                                                       //
			return result;                                                                                                      // 365
		}                                                                                                                    // 366
                                                                                                                       //
		return remove;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.insertOrUpsert = function () {                                                                 //
		function insertOrUpsert() {                                                                                          //
			for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {                           // 368
				args[_key2] = arguments[_key2];                                                                                    // 368
			}                                                                                                                   // 368
                                                                                                                       //
			if (args[0] && args[0]._id) {                                                                                       // 369
				var _id = args[0]._id;                                                                                             // 370
				delete args[0]._id;                                                                                                // 371
				args.unshift({                                                                                                     // 372
					_id: _id                                                                                                          // 373
				});                                                                                                                // 372
				this.upsert.apply(this, args);                                                                                     // 376
				return _id;                                                                                                        // 377
			} else {                                                                                                            // 378
				return this.insert.apply(this, args);                                                                              // 379
			}                                                                                                                   // 380
		}                                                                                                                    // 381
                                                                                                                       //
		return insertOrUpsert;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.allow = function () {                                                                          //
		function allow() {                                                                                                   //
			var _model3;                                                                                                        // 383
                                                                                                                       //
			return (_model3 = this.model).allow.apply(_model3, arguments);                                                      // 384
		}                                                                                                                    // 385
                                                                                                                       //
		return allow;                                                                                                        //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.deny = function () {                                                                           //
		function deny() {                                                                                                    //
			var _model4;                                                                                                        // 387
                                                                                                                       //
			return (_model4 = this.model).deny.apply(_model4, arguments);                                                       // 388
		}                                                                                                                    // 389
                                                                                                                       //
		return deny;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.ensureIndex = function () {                                                                    //
		function ensureIndex() {                                                                                             //
			var _model5;                                                                                                        // 391
                                                                                                                       //
			return (_model5 = this.model)._ensureIndex.apply(_model5, arguments);                                               // 392
		}                                                                                                                    // 393
                                                                                                                       //
		return ensureIndex;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.dropIndex = function () {                                                                      //
		function dropIndex() {                                                                                               //
			var _model6;                                                                                                        // 395
                                                                                                                       //
			return (_model6 = this.model)._dropIndex.apply(_model6, arguments);                                                 // 396
		}                                                                                                                    // 397
                                                                                                                       //
		return dropIndex;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.tryEnsureIndex = function () {                                                                 //
		function tryEnsureIndex() {                                                                                          //
			try {                                                                                                               // 400
				return this.ensureIndex.apply(this, arguments);                                                                    // 401
			} catch (e) {                                                                                                       // 402
				var _console;                                                                                                      // 402
                                                                                                                       //
				(_console = console).error.apply(_console, ['Error creating index:', this.name, '->'].concat(Array.prototype.slice.call(arguments), [e]));
			}                                                                                                                   // 404
		}                                                                                                                    // 405
                                                                                                                       //
		return tryEnsureIndex;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.tryDropIndex = function () {                                                                   //
		function tryDropIndex() {                                                                                            //
			try {                                                                                                               // 408
				return this.dropIndex.apply(this, arguments);                                                                      // 409
			} catch (e) {                                                                                                       // 410
				var _console2;                                                                                                     // 410
                                                                                                                       //
				(_console2 = console).error.apply(_console2, ['Error dropping index:', this.name, '->'].concat(Array.prototype.slice.call(arguments), [e]));
			}                                                                                                                   // 412
		}                                                                                                                    // 413
                                                                                                                       //
		return tryDropIndex;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.trashFind = function () {                                                                      //
		function trashFind(query, options) {                                                                                 //
			query.__collection__ = this.name;                                                                                   // 416
			return trash.find(query, options);                                                                                  // 418
		}                                                                                                                    // 419
                                                                                                                       //
		return trashFind;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBaseDb.prototype.trashFindDeletedAfter = function () {                                                          //
		function trashFindDeletedAfter(deletedAt) {                                                                          //
			var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                 // 421
			var options = arguments[2];                                                                                         // 421
			query.__collection__ = this.name;                                                                                   // 422
			query._deletedAt = {                                                                                                // 423
				$gt: deletedAt                                                                                                     // 424
			};                                                                                                                  // 423
			return trash.find(query, options);                                                                                  // 427
		}                                                                                                                    // 428
                                                                                                                       //
		return trashFindDeletedAfter;                                                                                        //
	}();                                                                                                                  //
                                                                                                                       //
	(0, _createClass3.default)(ModelsBaseDb, [{                                                                           //
		key: "baseName",                                                                                                     //
		get: function () {                                                                                                   //
			return baseName;                                                                                                    // 56
		}                                                                                                                    // 57
	}]);                                                                                                                  //
	return ModelsBaseDb;                                                                                                  //
}(EventEmitter);                                                                                                       //
                                                                                                                       //
module.exportDefault(ModelsBaseDb);                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"oauth":{"oauth.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/oauth.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var AccessTokenServices = {};                                                                                          // 1
                                                                                                                       //
RocketChat.registerAccessTokenService = function (serviceName, handleAccessTokenRequest) {                             // 3
	AccessTokenServices[serviceName] = {                                                                                  // 4
		serviceName: serviceName,                                                                                            // 5
		handleAccessTokenRequest: handleAccessTokenRequest                                                                   // 6
	};                                                                                                                    // 4
}; // Listen to calls to `login` with an oauth option set. This is where                                               // 8
// users actually get logged in to meteor via oauth.                                                                   // 11
                                                                                                                       //
                                                                                                                       //
Accounts.registerLoginHandler(function (options) {                                                                     // 12
	if (!options.accessToken) {                                                                                           // 13
		return undefined; // don't handle                                                                                    // 14
	}                                                                                                                     // 15
                                                                                                                       //
	check(options, Match.ObjectIncluding({                                                                                // 17
		serviceName: String                                                                                                  // 18
	}));                                                                                                                  // 17
	var service = AccessTokenServices[options.serviceName]; // Skip everything if there's no service set by the oauth middleware
                                                                                                                       //
	if (!service) {                                                                                                       // 24
		throw new Error("Unexpected AccessToken service " + options.serviceName);                                            // 25
	} // Make sure we're configured                                                                                       // 26
                                                                                                                       //
                                                                                                                       //
	if (!ServiceConfiguration.configurations.findOne({                                                                    // 29
		service: service.serviceName                                                                                         // 29
	})) {                                                                                                                 // 29
		throw new ServiceConfiguration.ConfigError();                                                                        // 30
	}                                                                                                                     // 31
                                                                                                                       //
	if (!_.contains(Accounts.oauth.serviceNames(), service.serviceName)) {                                                // 33
		// serviceName was not found in the registered services list.                                                        // 34
		// This could happen because the service never registered itself or                                                  // 35
		// unregisterService was called on it.                                                                               // 36
		return {                                                                                                             // 37
			type: 'oauth',                                                                                                      // 38
			error: new Meteor.Error(Accounts.LoginCancelledError.numericError, "No registered oauth service found for: " + service.serviceName)
		};                                                                                                                   // 37
	}                                                                                                                     // 44
                                                                                                                       //
	var oauthResult = service.handleAccessTokenRequest(options);                                                          // 46
	return Accounts.updateOrCreateUserFromExternalService(service.serviceName, oauthResult.serviceData, oauthResult.options);
});                                                                                                                    // 49
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"google.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/google.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals Google */function getIdentity(accessToken) {                                                                // 1
	try {                                                                                                                 // 4
		return HTTP.get('https://www.googleapis.com/oauth2/v1/userinfo', {                                                   // 5
			params: {                                                                                                           // 7
				access_token: accessToken                                                                                          // 7
			}                                                                                                                   // 7
		}).data;                                                                                                             // 7
	} catch (err) {                                                                                                       // 8
		throw _.extend(new Error("Failed to fetch identity from Google. " + err.message), {                                  // 9
			response: err.response                                                                                              // 9
		});                                                                                                                  // 9
	}                                                                                                                     // 10
}                                                                                                                      // 11
                                                                                                                       //
function getScopes(accessToken) {                                                                                      // 13
	try {                                                                                                                 // 14
		return HTTP.get('https://www.googleapis.com/oauth2/v1/tokeninfo', {                                                  // 15
			params: {                                                                                                           // 17
				access_token: accessToken                                                                                          // 17
			}                                                                                                                   // 17
		}).data.scope.split(' ');                                                                                            // 17
	} catch (err) {                                                                                                       // 18
		throw _.extend(new Error("Failed to fetch tokeninfo from Google. " + err.message), {                                 // 19
			response: err.response                                                                                              // 19
		});                                                                                                                  // 19
	}                                                                                                                     // 20
}                                                                                                                      // 21
                                                                                                                       //
RocketChat.registerAccessTokenService('google', function (options) {                                                   // 24
	check(options, Match.ObjectIncluding({                                                                                // 25
		accessToken: String,                                                                                                 // 26
		idToken: String,                                                                                                     // 27
		expiresIn: Match.Integer,                                                                                            // 28
		scope: Match.Maybe(String),                                                                                          // 29
		identity: Match.Maybe(Object)                                                                                        // 30
	}));                                                                                                                  // 25
	var identity = options.identity || getIdentity(options.accessToken);                                                  // 33
	var serviceData = {                                                                                                   // 35
		accessToken: options.accessToken,                                                                                    // 36
		idToken: options.idToken,                                                                                            // 37
		expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10),                                                     // 38
		scope: options.scopes || getScopes(options.accessToken)                                                              // 39
	};                                                                                                                    // 35
                                                                                                                       //
	var fields = _.pick(identity, Google.whitelistedFields);                                                              // 42
                                                                                                                       //
	_.extend(serviceData, fields); // only set the token in serviceData if it's there. this ensures                       // 43
	// that we don't lose old ones (since we only get this on the first                                                   // 46
	// log in attempt)                                                                                                    // 47
                                                                                                                       //
                                                                                                                       //
	if (options.refreshToken) {                                                                                           // 48
		serviceData.refreshToken = options.refreshToken;                                                                     // 49
	}                                                                                                                     // 50
                                                                                                                       //
	return {                                                                                                              // 52
		serviceData: serviceData,                                                                                            // 53
		options: {                                                                                                           // 54
			profile: {                                                                                                          // 55
				name: identity.name                                                                                                // 56
			}                                                                                                                   // 55
		}                                                                                                                    // 54
	};                                                                                                                    // 52
});                                                                                                                    // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"proxy.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/proxy.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals OAuth */OAuth._redirectUri = _.wrap(OAuth._redirectUri, function (func, serviceName) {                      // 1
	var proxy = RocketChat.settings.get('Accounts_OAuth_Proxy_services').replace(/\s/g, '').split(',');                   // 4
                                                                                                                       //
	if (proxy.includes(serviceName)) {                                                                                    // 5
		return RocketChat.settings.get('Accounts_OAuth_Proxy_host') + "/oauth_redirect";                                     // 6
	} else {                                                                                                              // 7
		for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {            // 7
			args[_key - 2] = arguments[_key];                                                                                   // 3
		}                                                                                                                    // 7
                                                                                                                       //
		return func.apply(undefined, [serviceName].concat(args));                                                            // 8
	}                                                                                                                     // 9
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup":{"statsTracker.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/statsTracker.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
RocketChat.statsTracker = new (function () {                                                                           // 1
	function StatsTracker() {                                                                                             // 2
		(0, _classCallCheck3.default)(this, StatsTracker);                                                                   // 2
		this.StatsD = Npm.require('node-dogstatsd').StatsD;                                                                  // 3
		this.dogstatsd = new this.StatsD();                                                                                  // 4
	}                                                                                                                     // 5
                                                                                                                       //
	StatsTracker.prototype.track = function () {                                                                          // 1
		function track(type, stats) {                                                                                        // 1
			var _dogstatsd;                                                                                                     // 7
                                                                                                                       //
			for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {           // 7
				args[_key - 2] = arguments[_key];                                                                                  // 7
			}                                                                                                                   // 7
                                                                                                                       //
			(_dogstatsd = this.dogstatsd)[type].apply(_dogstatsd, ["RocketChat." + stats].concat(args));                        // 8
		}                                                                                                                    // 9
                                                                                                                       //
		return track;                                                                                                        // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.now = function () {                                                                            // 1
		function now() {                                                                                                     // 1
			var hrtime = process.hrtime();                                                                                      // 12
			return hrtime[0] * 1000000 + hrtime[1] / 1000;                                                                      // 13
		}                                                                                                                    // 14
                                                                                                                       //
		return now;                                                                                                          // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.timing = function () {                                                                         // 1
		function timing(stats, time, tags) {                                                                                 // 1
			this.track('timing', stats, time, tags);                                                                            // 17
		}                                                                                                                    // 18
                                                                                                                       //
		return timing;                                                                                                       // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.increment = function () {                                                                      // 1
		function increment(stats, time, tags) {                                                                              // 1
			this.track('increment', stats, time, tags);                                                                         // 21
		}                                                                                                                    // 22
                                                                                                                       //
		return increment;                                                                                                    // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.decrement = function () {                                                                      // 1
		function decrement(stats, time, tags) {                                                                              // 1
			this.track('decrement', stats, time, tags);                                                                         // 25
		}                                                                                                                    // 26
                                                                                                                       //
		return decrement;                                                                                                    // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.histogram = function () {                                                                      // 1
		function histogram(stats, time, tags) {                                                                              // 1
			this.track('histogram', stats, time, tags);                                                                         // 29
		}                                                                                                                    // 30
                                                                                                                       //
		return histogram;                                                                                                    // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.gauge = function () {                                                                          // 1
		function gauge(stats, time, tags) {                                                                                  // 1
			this.track('gauge', stats, time, tags);                                                                             // 33
		}                                                                                                                    // 34
                                                                                                                       //
		return gauge;                                                                                                        // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.unique = function () {                                                                         // 1
		function unique(stats, time, tags) {                                                                                 // 1
			this.track('unique', stats, time, tags);                                                                            // 37
		}                                                                                                                    // 38
                                                                                                                       //
		return unique;                                                                                                       // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.set = function () {                                                                            // 1
		function set(stats, time, tags) {                                                                                    // 1
			this.track('set', stats, time, tags);                                                                               // 41
		}                                                                                                                    // 42
                                                                                                                       //
		return set;                                                                                                          // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	return StatsTracker;                                                                                                  // 1
}())();                                                                                                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cache":{"CacheLoad.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/cache/CacheLoad.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.models.Rooms.cache.hasMany('Subscriptions', {                                                               // 1
	field: 'usernames',                                                                                                   // 2
	link: {                                                                                                               // 3
		local: '_id',                                                                                                        // 4
		remote: 'rid',                                                                                                       // 5
		transform: function (room, subscription) {                                                                           // 6
			return subscription.u.username;                                                                                     // 7
		},                                                                                                                   // 8
		remove: function (arr, subscription) {                                                                               // 9
			if (arr.indexOf(subscription.u.username) > -1) {                                                                    // 10
				arr.splice(arr.indexOf(subscription.u.username), 1);                                                               // 11
			}                                                                                                                   // 12
		}                                                                                                                    // 13
	}                                                                                                                     // 3
});                                                                                                                    // 1
RocketChat.models.Subscriptions.cache.hasOne('Rooms', {                                                                // 18
	field: '_room',                                                                                                       // 19
	link: {                                                                                                               // 20
		local: 'rid',                                                                                                        // 21
		remote: '_id'                                                                                                        // 22
	}                                                                                                                     // 20
});                                                                                                                    // 18
RocketChat.models.Subscriptions.cache.hasOne('Users', {                                                                // 27
	field: '_user',                                                                                                       // 28
	link: {                                                                                                               // 29
		local: 'u._id',                                                                                                      // 30
		remote: '_id'                                                                                                        // 31
	}                                                                                                                     // 29
});                                                                                                                    // 27
RocketChat.models.Subscriptions.cache.hasOne('Users', {                                                                // 35
	field: 'fname',                                                                                                       // 36
	link: {                                                                                                               // 37
		local: 'name',                                                                                                       // 38
		remote: 'username',                                                                                                  // 39
		where: function (subscription /*, user*/) {                                                                          // 40
			return subscription.t === 'd';                                                                                      // 41
		},                                                                                                                   // 42
		transform: function (subscription, user) {                                                                           // 43
			if (user == null || subscription == null) {                                                                         // 44
				return undefined;                                                                                                  // 45
			} // Prevent client cache for old subscriptions with new names                                                      // 46
			// Cuz when a user change his name, the subscription's _updateAt                                                    // 48
			// will not change                                                                                                  // 49
                                                                                                                       //
                                                                                                                       //
			if (subscription._updatedAt < user._updatedAt) {                                                                    // 50
				subscription._updatedAt = user._updatedAt;                                                                         // 51
			}                                                                                                                   // 52
                                                                                                                       //
			return user.name;                                                                                                   // 53
		}                                                                                                                    // 54
	}                                                                                                                     // 37
});                                                                                                                    // 35
RocketChat.models.Users.cache.load();                                                                                  // 58
RocketChat.models.Rooms.cache.load();                                                                                  // 59
RocketChat.models.Subscriptions.cache.load();                                                                          // 60
RocketChat.models.Settings.cache.load();                                                                               // 61
RocketChat.models.Users.cache.addDynamicView('highlights').applyFind({                                                 // 64
	'settings.preferences.highlights': {                                                                                  // 65
		$size: {                                                                                                             // 65
			$gt: 0                                                                                                              // 65
		}                                                                                                                    // 65
	}                                                                                                                     // 65
});                                                                                                                    // 64
RocketChat.models.Subscriptions.cache.addDynamicView('notifications').applyFind({                                      // 68
	$or: [{                                                                                                               // 69
		desktopNotifications: {                                                                                              // 70
			$in: ['all', 'nothing']                                                                                             // 70
		}                                                                                                                    // 70
	}, {                                                                                                                  // 70
		mobilePushNotifications: {                                                                                           // 71
			$in: ['all', 'nothing']                                                                                             // 71
		}                                                                                                                    // 71
	}]                                                                                                                    // 71
});                                                                                                                    // 68
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"settingsOnLoadCdnPrefix.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadCdnPrefix.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals WebAppInternals*/function testWebAppInternals(fn) {                                                         // 1
	typeof WebAppInternals !== 'undefined' && fn(WebAppInternals);                                                        // 3
}                                                                                                                      // 4
                                                                                                                       //
RocketChat.settings.onload('CDN_PREFIX', function (key, value) {                                                       // 5
	if (_.isString(value) && value.trim()) {                                                                              // 6
		return testWebAppInternals(function (WebAppInternals) {                                                              // 7
			return WebAppInternals.setBundledJsCssPrefix(value);                                                                // 7
		});                                                                                                                  // 7
	}                                                                                                                     // 8
});                                                                                                                    // 9
Meteor.startup(function () {                                                                                           // 11
	var value = RocketChat.settings.get('CDN_PREFIX');                                                                    // 12
                                                                                                                       //
	if (_.isString(value) && value.trim()) {                                                                              // 13
		return testWebAppInternals(function (WebAppInternals) {                                                              // 14
			return WebAppInternals.setBundledJsCssPrefix(value);                                                                // 14
		});                                                                                                                  // 14
	}                                                                                                                     // 15
});                                                                                                                    // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadSMTP.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadSMTP.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var buildMailURL = _.debounce(function () {                                                                            // 1
	console.log('Updating process.env.MAIL_URL');                                                                         // 2
                                                                                                                       //
	if (RocketChat.settings.get('SMTP_Host')) {                                                                           // 4
		process.env.MAIL_URL = RocketChat.settings.get('SMTP_Protocol') + "://";                                             // 5
                                                                                                                       //
		if (RocketChat.settings.get('SMTP_Username') && RocketChat.settings.get('SMTP_Password')) {                          // 7
			process.env.MAIL_URL += encodeURIComponent(RocketChat.settings.get('SMTP_Username')) + ":" + encodeURIComponent(RocketChat.settings.get('SMTP_Password')) + "@";
		}                                                                                                                    // 9
                                                                                                                       //
		process.env.MAIL_URL += encodeURIComponent(RocketChat.settings.get('SMTP_Host'));                                    // 11
                                                                                                                       //
		if (RocketChat.settings.get('SMTP_Port')) {                                                                          // 13
			process.env.MAIL_URL += ":" + parseInt(RocketChat.settings.get('SMTP_Port'));                                       // 14
		}                                                                                                                    // 15
                                                                                                                       //
		process.env.MAIL_URL += "?pool=" + RocketChat.settings.get('SMTP_Pool');                                             // 17
		return process.env.MAIL_URL;                                                                                         // 19
	}                                                                                                                     // 20
}, 500);                                                                                                               // 21
                                                                                                                       //
RocketChat.settings.onload('SMTP_Host', function (key, value) {                                                        // 23
	if (_.isString(value)) {                                                                                              // 24
		return buildMailURL();                                                                                               // 25
	}                                                                                                                     // 26
});                                                                                                                    // 27
RocketChat.settings.onload('SMTP_Port', function () {                                                                  // 29
	return buildMailURL();                                                                                                // 30
});                                                                                                                    // 31
RocketChat.settings.onload('SMTP_Username', function (key, value) {                                                    // 33
	if (_.isString(value)) {                                                                                              // 34
		return buildMailURL();                                                                                               // 35
	}                                                                                                                     // 36
});                                                                                                                    // 37
RocketChat.settings.onload('SMTP_Password', function (key, value) {                                                    // 39
	if (_.isString(value)) {                                                                                              // 40
		return buildMailURL();                                                                                               // 41
	}                                                                                                                     // 42
});                                                                                                                    // 43
RocketChat.settings.onload('SMTP_Protocol', function () {                                                              // 45
	return buildMailURL();                                                                                                // 46
});                                                                                                                    // 47
RocketChat.settings.onload('SMTP_Pool', function () {                                                                  // 49
	return buildMailURL();                                                                                                // 50
});                                                                                                                    // 51
Meteor.startup(function () {                                                                                           // 53
	return buildMailURL();                                                                                                // 54
});                                                                                                                    // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"oAuthServicesUpdate.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/oAuthServicesUpdate.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals CustomOAuth */var logger = new Logger('rocketchat:lib', {                                                   // 1
	methods: {                                                                                                            // 3
		oauth_updated: {                                                                                                     // 4
			type: 'info'                                                                                                        // 5
		}                                                                                                                    // 4
	}                                                                                                                     // 3
});                                                                                                                    // 2
                                                                                                                       //
function _OAuthServicesUpdate() {                                                                                      // 10
	var services = RocketChat.settings.get(/^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i);                      // 11
	services.forEach(function (service) {                                                                                 // 12
		logger.oauth_updated(service.key);                                                                                   // 13
		var serviceName = service.key.replace('Accounts_OAuth_', '');                                                        // 14
                                                                                                                       //
		if (serviceName === 'Meteor') {                                                                                      // 15
			serviceName = 'meteor-developer';                                                                                   // 16
		}                                                                                                                    // 17
                                                                                                                       //
		if (/Accounts_OAuth_Custom-/.test(service.key)) {                                                                    // 18
			serviceName = service.key.replace('Accounts_OAuth_Custom-', '');                                                    // 19
		}                                                                                                                    // 20
                                                                                                                       //
		if (service.value === true) {                                                                                        // 21
			var data = {                                                                                                        // 22
				clientId: RocketChat.settings.get(service.key + "_id"),                                                            // 23
				secret: RocketChat.settings.get(service.key + "_secret")                                                           // 24
			};                                                                                                                  // 22
                                                                                                                       //
			if (/Accounts_OAuth_Custom-/.test(service.key)) {                                                                   // 26
				data.custom = true;                                                                                                // 27
				data.clientId = RocketChat.settings.get(service.key + "-id");                                                      // 28
				data.secret = RocketChat.settings.get(service.key + "-secret");                                                    // 29
				data.serverURL = RocketChat.settings.get(service.key + "-url");                                                    // 30
				data.tokenPath = RocketChat.settings.get(service.key + "-token_path");                                             // 31
				data.identityPath = RocketChat.settings.get(service.key + "-identity_path");                                       // 32
				data.authorizePath = RocketChat.settings.get(service.key + "-authorize_path");                                     // 33
				data.scope = RocketChat.settings.get(service.key + "-scope");                                                      // 34
				data.buttonLabelText = RocketChat.settings.get(service.key + "-button_label_text");                                // 35
				data.buttonLabelColor = RocketChat.settings.get(service.key + "-button_label_color");                              // 36
				data.loginStyle = RocketChat.settings.get(service.key + "-login_style");                                           // 37
				data.buttonColor = RocketChat.settings.get(service.key + "-button_color");                                         // 38
				data.tokenSentVia = RocketChat.settings.get(service.key + "-token_sent_via");                                      // 39
				data.usernameField = RocketChat.settings.get(service.key + "-username_field");                                     // 40
				data.mergeUsers = RocketChat.settings.get(service.key + "-merge_users");                                           // 41
				new CustomOAuth(serviceName.toLowerCase(), {                                                                       // 42
					serverURL: data.serverURL,                                                                                        // 43
					tokenPath: data.tokenPath,                                                                                        // 44
					identityPath: data.identityPath,                                                                                  // 45
					authorizePath: data.authorizePath,                                                                                // 46
					scope: data.scope,                                                                                                // 47
					loginStyle: data.loginStyle,                                                                                      // 48
					tokenSentVia: data.tokenSentVia,                                                                                  // 49
					usernameField: data.usernameField,                                                                                // 50
					mergeUsers: data.mergeUsers                                                                                       // 51
				});                                                                                                                // 42
			}                                                                                                                   // 53
                                                                                                                       //
			if (serviceName === 'Facebook') {                                                                                   // 54
				data.appId = data.clientId;                                                                                        // 55
				delete data.clientId;                                                                                              // 56
			}                                                                                                                   // 57
                                                                                                                       //
			if (serviceName === 'Twitter') {                                                                                    // 58
				data.consumerKey = data.clientId;                                                                                  // 59
				delete data.clientId;                                                                                              // 60
			}                                                                                                                   // 61
                                                                                                                       //
			ServiceConfiguration.configurations.upsert({                                                                        // 62
				service: serviceName.toLowerCase()                                                                                 // 63
			}, {                                                                                                                // 62
				$set: data                                                                                                         // 65
			});                                                                                                                 // 64
		} else {                                                                                                             // 67
			ServiceConfiguration.configurations.remove({                                                                        // 68
				service: serviceName.toLowerCase()                                                                                 // 69
			});                                                                                                                 // 68
		}                                                                                                                    // 71
	});                                                                                                                   // 72
}                                                                                                                      // 73
                                                                                                                       //
var OAuthServicesUpdate = _.debounce(Meteor.bindEnvironment(_OAuthServicesUpdate), 2000);                              // 75
                                                                                                                       //
function OAuthServicesRemove(_id) {                                                                                    // 77
	var serviceName = _id.replace('Accounts_OAuth_Custom-', '');                                                          // 78
                                                                                                                       //
	return ServiceConfiguration.configurations.remove({                                                                   // 79
		service: serviceName.toLowerCase()                                                                                   // 80
	});                                                                                                                   // 79
}                                                                                                                      // 82
                                                                                                                       //
RocketChat.settings.get(/^Accounts_OAuth_.+/, function () {                                                            // 84
	return OAuthServicesUpdate(); // eslint-disable-line new-cap                                                          // 85
});                                                                                                                    // 86
RocketChat.settings.get(/^Accounts_OAuth_Custom-[a-z0-9_]+/, function (key, value) {                                   // 88
	if (!value) {                                                                                                         // 89
		return OAuthServicesRemove(key); // eslint-disable-line new-cap                                                      // 90
	}                                                                                                                     // 91
});                                                                                                                    // 92
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settings.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Insert server unique id if it doesn't exist                                                                         // 1
RocketChat.settings.add('uniqueID', process.env.DEPLOYMENT_ID || Random.id(), {                                        // 2
	'public': true,                                                                                                       // 3
	hidden: true                                                                                                          // 4
}); // When you define a setting and want to add a description, you don't need to automatically define the i18nDescription
// if you add a node to the i18n.json with the same setting name but with `_Description` it will automatically work.   // 8
                                                                                                                       //
RocketChat.settings.addGroup('Accounts', function () {                                                                 // 10
	this.add('Accounts_AllowAnonymousRead', false, {                                                                      // 11
		type: 'boolean',                                                                                                     // 12
		"public": true                                                                                                       // 13
	});                                                                                                                   // 11
	this.add('Accounts_AllowAnonymousWrite', false, {                                                                     // 15
		type: 'boolean',                                                                                                     // 16
		"public": true,                                                                                                      // 17
		enableQuery: {                                                                                                       // 18
			_id: 'Accounts_AllowAnonymousRead',                                                                                 // 19
			value: true                                                                                                         // 20
		}                                                                                                                    // 18
	});                                                                                                                   // 15
	this.add('Accounts_AllowDeleteOwnAccount', false, {                                                                   // 23
		type: 'boolean',                                                                                                     // 24
		'public': true,                                                                                                      // 25
		enableQuery: {                                                                                                       // 26
			_id: 'Accounts_AllowUserProfileChange',                                                                             // 27
			value: true                                                                                                         // 28
		}                                                                                                                    // 26
	});                                                                                                                   // 23
	this.add('Accounts_AllowUserProfileChange', true, {                                                                   // 31
		type: 'boolean',                                                                                                     // 32
		'public': true                                                                                                       // 33
	});                                                                                                                   // 31
	this.add('Accounts_AllowUserAvatarChange', true, {                                                                    // 35
		type: 'boolean',                                                                                                     // 36
		'public': true                                                                                                       // 37
	});                                                                                                                   // 35
	this.add('Accounts_AllowUsernameChange', true, {                                                                      // 39
		type: 'boolean',                                                                                                     // 40
		'public': true                                                                                                       // 41
	});                                                                                                                   // 39
	this.add('Accounts_AllowEmailChange', true, {                                                                         // 43
		type: 'boolean',                                                                                                     // 44
		'public': true                                                                                                       // 45
	});                                                                                                                   // 43
	this.add('Accounts_AllowPasswordChange', true, {                                                                      // 47
		type: 'boolean',                                                                                                     // 48
		'public': true                                                                                                       // 49
	});                                                                                                                   // 47
	this.add('Accounts_LoginExpiration', 90, {                                                                            // 51
		type: 'int',                                                                                                         // 52
		'public': true                                                                                                       // 53
	});                                                                                                                   // 51
	this.add('Accounts_ShowFormLogin', true, {                                                                            // 55
		type: 'boolean',                                                                                                     // 56
		'public': true                                                                                                       // 57
	});                                                                                                                   // 55
	this.add('Accounts_EmailOrUsernamePlaceholder', '', {                                                                 // 59
		type: 'string',                                                                                                      // 60
		'public': true,                                                                                                      // 61
		i18nLabel: 'Placeholder_for_email_or_username_login_field'                                                           // 62
	});                                                                                                                   // 59
	this.add('Accounts_PasswordPlaceholder', '', {                                                                        // 64
		type: 'string',                                                                                                      // 65
		'public': true,                                                                                                      // 66
		i18nLabel: 'Placeholder_for_password_login_field'                                                                    // 67
	});                                                                                                                   // 64
	this.add('Accounts_ForgetUserSessionOnWindowClose', false, {                                                          // 69
		type: 'boolean',                                                                                                     // 70
		'public': true                                                                                                       // 71
	});                                                                                                                   // 69
	this.section('Registration', function () {                                                                            // 74
		this.add('Accounts_DefaultUsernamePrefixSuggestion', 'user', {                                                       // 75
			type: 'string'                                                                                                      // 76
		});                                                                                                                  // 75
		this.add('Accounts_RequireNameForSignUp', true, {                                                                    // 78
			type: 'boolean',                                                                                                    // 79
			'public': true                                                                                                      // 80
		});                                                                                                                  // 78
		this.add('Accounts_RequirePasswordConfirmation', true, {                                                             // 82
			type: 'boolean',                                                                                                    // 83
			'public': true                                                                                                      // 84
		});                                                                                                                  // 82
		this.add('Accounts_EmailVerification', false, {                                                                      // 86
			type: 'boolean',                                                                                                    // 87
			'public': true,                                                                                                     // 88
			enableQuery: {                                                                                                      // 89
				_id: 'SMTP_Host',                                                                                                  // 90
				value: {                                                                                                           // 91
					$exists: 1,                                                                                                       // 92
					$ne: ''                                                                                                           // 93
				}                                                                                                                  // 91
			}                                                                                                                   // 89
		});                                                                                                                  // 86
		this.add('Accounts_ManuallyApproveNewUsers', false, {                                                                // 97
			type: 'boolean'                                                                                                     // 98
		});                                                                                                                  // 97
		this.add('Accounts_AllowedDomainsList', '', {                                                                        // 100
			type: 'string',                                                                                                     // 101
			'public': true                                                                                                      // 102
		});                                                                                                                  // 100
		this.add('Accounts_BlockedDomainsList', '', {                                                                        // 104
			type: 'string'                                                                                                      // 105
		});                                                                                                                  // 104
		this.add('Accounts_BlockedUsernameList', '', {                                                                       // 107
			type: 'string'                                                                                                      // 108
		});                                                                                                                  // 107
		this.add('Accounts_UseDefaultBlockedDomainsList', true, {                                                            // 110
			type: 'boolean'                                                                                                     // 111
		});                                                                                                                  // 110
		this.add('Accounts_UseDNSDomainCheck', false, {                                                                      // 113
			type: 'boolean'                                                                                                     // 114
		});                                                                                                                  // 113
		this.add('Accounts_RegistrationForm', 'Public', {                                                                    // 116
			type: 'select',                                                                                                     // 117
			'public': true,                                                                                                     // 118
			values: [{                                                                                                          // 119
				key: 'Public',                                                                                                     // 121
				i18nLabel: 'Accounts_RegistrationForm_Public'                                                                      // 122
			}, {                                                                                                                // 120
				key: 'Disabled',                                                                                                   // 124
				i18nLabel: 'Accounts_RegistrationForm_Disabled'                                                                    // 125
			}, {                                                                                                                // 123
				key: 'Secret URL',                                                                                                 // 127
				i18nLabel: 'Accounts_RegistrationForm_Secret_URL'                                                                  // 128
			}]                                                                                                                  // 126
		});                                                                                                                  // 116
		this.add('Accounts_RegistrationForm_SecretURL', Random.id(), {                                                       // 132
			type: 'string'                                                                                                      // 133
		});                                                                                                                  // 132
		this.add('Accounts_RegistrationForm_LinkReplacementText', 'New user registration is currently disabled', {           // 135
			type: 'string',                                                                                                     // 136
			'public': true                                                                                                      // 137
		});                                                                                                                  // 135
		this.add('Accounts_Registration_AuthenticationServices_Enabled', true, {                                             // 139
			type: 'boolean',                                                                                                    // 140
			'public': true                                                                                                      // 141
		});                                                                                                                  // 139
		this.add('Accounts_Registration_AuthenticationServices_Default_Roles', 'user', {                                     // 143
			type: 'string',                                                                                                     // 144
			enableQuery: {                                                                                                      // 145
				_id: 'Accounts_Registration_AuthenticationServices_Enabled',                                                       // 146
				value: true                                                                                                        // 147
			}                                                                                                                   // 145
		});                                                                                                                  // 143
		this.add('Accounts_PasswordReset', true, {                                                                           // 150
			type: 'boolean',                                                                                                    // 151
			'public': true                                                                                                      // 152
		});                                                                                                                  // 150
		this.add('Accounts_CustomFields', '', {                                                                              // 154
			type: 'code',                                                                                                       // 155
			'public': true,                                                                                                     // 156
			i18nLabel: 'Custom_Fields'                                                                                          // 157
		});                                                                                                                  // 154
	});                                                                                                                   // 159
	this.section('Avatar', function () {                                                                                  // 161
		this.add('Accounts_AvatarResize', true, {                                                                            // 162
			type: 'boolean'                                                                                                     // 163
		});                                                                                                                  // 162
		this.add('Accounts_AvatarSize', 200, {                                                                               // 165
			type: 'int',                                                                                                        // 166
			enableQuery: {                                                                                                      // 167
				_id: 'Accounts_AvatarResize',                                                                                      // 168
				value: true                                                                                                        // 169
			}                                                                                                                   // 167
		});                                                                                                                  // 165
		this.add('Accounts_AvatarStoreType', 'GridFS', {                                                                     // 172
			type: 'select',                                                                                                     // 173
			values: [{                                                                                                          // 174
				key: 'GridFS',                                                                                                     // 176
				i18nLabel: 'GridFS'                                                                                                // 177
			}, {                                                                                                                // 175
				key: 'FileSystem',                                                                                                 // 179
				i18nLabel: 'FileSystem'                                                                                            // 180
			}]                                                                                                                  // 178
		});                                                                                                                  // 172
		this.add('Accounts_AvatarStorePath', '', {                                                                           // 184
			type: 'string',                                                                                                     // 185
			enableQuery: {                                                                                                      // 186
				_id: 'Accounts_AvatarStoreType',                                                                                   // 187
				value: 'FileSystem'                                                                                                // 188
			}                                                                                                                   // 186
		});                                                                                                                  // 184
		return this.add('Accounts_SetDefaultAvatar', true, {                                                                 // 191
			type: 'boolean'                                                                                                     // 192
		});                                                                                                                  // 191
	});                                                                                                                   // 194
});                                                                                                                    // 195
RocketChat.settings.addGroup('OAuth', function () {                                                                    // 197
	this.section('Facebook', function () {                                                                                // 198
		var enableQuery = {                                                                                                  // 199
			_id: 'Accounts_OAuth_Facebook',                                                                                     // 200
			value: true                                                                                                         // 201
		};                                                                                                                   // 199
		this.add('Accounts_OAuth_Facebook', false, {                                                                         // 203
			type: 'boolean',                                                                                                    // 204
			'public': true                                                                                                      // 205
		});                                                                                                                  // 203
		this.add('Accounts_OAuth_Facebook_id', '', {                                                                         // 207
			type: 'string',                                                                                                     // 208
			enableQuery: enableQuery                                                                                            // 209
		});                                                                                                                  // 207
		this.add('Accounts_OAuth_Facebook_secret', '', {                                                                     // 211
			type: 'string',                                                                                                     // 212
			enableQuery: enableQuery                                                                                            // 213
		});                                                                                                                  // 211
		return this.add('Accounts_OAuth_Facebook_callback_url', '_oauth/facebook', {                                         // 215
			type: 'relativeUrl',                                                                                                // 216
			readonly: true,                                                                                                     // 217
			force: true,                                                                                                        // 218
			enableQuery: enableQuery                                                                                            // 219
		});                                                                                                                  // 215
	});                                                                                                                   // 221
	this.section('Google', function () {                                                                                  // 222
		var enableQuery = {                                                                                                  // 223
			_id: 'Accounts_OAuth_Google',                                                                                       // 224
			value: true                                                                                                         // 225
		};                                                                                                                   // 223
		this.add('Accounts_OAuth_Google', false, {                                                                           // 227
			type: 'boolean',                                                                                                    // 228
			'public': true                                                                                                      // 229
		});                                                                                                                  // 227
		this.add('Accounts_OAuth_Google_id', '', {                                                                           // 231
			type: 'string',                                                                                                     // 232
			enableQuery: enableQuery                                                                                            // 233
		});                                                                                                                  // 231
		this.add('Accounts_OAuth_Google_secret', '', {                                                                       // 235
			type: 'string',                                                                                                     // 236
			enableQuery: enableQuery                                                                                            // 237
		});                                                                                                                  // 235
		return this.add('Accounts_OAuth_Google_callback_url', '_oauth/google', {                                             // 239
			type: 'relativeUrl',                                                                                                // 240
			readonly: true,                                                                                                     // 241
			force: true,                                                                                                        // 242
			enableQuery: enableQuery                                                                                            // 243
		});                                                                                                                  // 239
	});                                                                                                                   // 245
	this.section('GitHub', function () {                                                                                  // 246
		var enableQuery = {                                                                                                  // 247
			_id: 'Accounts_OAuth_Github',                                                                                       // 248
			value: true                                                                                                         // 249
		};                                                                                                                   // 247
		this.add('Accounts_OAuth_Github', false, {                                                                           // 251
			type: 'boolean',                                                                                                    // 252
			'public': true                                                                                                      // 253
		});                                                                                                                  // 251
		this.add('Accounts_OAuth_Github_id', '', {                                                                           // 255
			type: 'string',                                                                                                     // 256
			enableQuery: enableQuery                                                                                            // 257
		});                                                                                                                  // 255
		this.add('Accounts_OAuth_Github_secret', '', {                                                                       // 259
			type: 'string',                                                                                                     // 260
			enableQuery: enableQuery                                                                                            // 261
		});                                                                                                                  // 259
		return this.add('Accounts_OAuth_Github_callback_url', '_oauth/github', {                                             // 263
			type: 'relativeUrl',                                                                                                // 264
			readonly: true,                                                                                                     // 265
			force: true,                                                                                                        // 266
			enableQuery: enableQuery                                                                                            // 267
		});                                                                                                                  // 263
	});                                                                                                                   // 269
	this.section('Linkedin', function () {                                                                                // 270
		var enableQuery = {                                                                                                  // 271
			_id: 'Accounts_OAuth_Linkedin',                                                                                     // 272
			value: true                                                                                                         // 273
		};                                                                                                                   // 271
		this.add('Accounts_OAuth_Linkedin', false, {                                                                         // 275
			type: 'boolean',                                                                                                    // 276
			'public': true                                                                                                      // 277
		});                                                                                                                  // 275
		this.add('Accounts_OAuth_Linkedin_id', '', {                                                                         // 279
			type: 'string',                                                                                                     // 280
			enableQuery: enableQuery                                                                                            // 281
		});                                                                                                                  // 279
		this.add('Accounts_OAuth_Linkedin_secret', '', {                                                                     // 283
			type: 'string',                                                                                                     // 284
			enableQuery: enableQuery                                                                                            // 285
		});                                                                                                                  // 283
		return this.add('Accounts_OAuth_Linkedin_callback_url', '_oauth/linkedin', {                                         // 287
			type: 'relativeUrl',                                                                                                // 288
			readonly: true,                                                                                                     // 289
			force: true,                                                                                                        // 290
			enableQuery: enableQuery                                                                                            // 291
		});                                                                                                                  // 287
	});                                                                                                                   // 293
	this.section('Meteor', function () {                                                                                  // 294
		var enableQuery = {                                                                                                  // 295
			_id: 'Accounts_OAuth_Meteor',                                                                                       // 296
			value: true                                                                                                         // 297
		};                                                                                                                   // 295
		this.add('Accounts_OAuth_Meteor', false, {                                                                           // 299
			type: 'boolean',                                                                                                    // 300
			'public': true                                                                                                      // 301
		});                                                                                                                  // 299
		this.add('Accounts_OAuth_Meteor_id', '', {                                                                           // 303
			type: 'string',                                                                                                     // 304
			enableQuery: enableQuery                                                                                            // 305
		});                                                                                                                  // 303
		this.add('Accounts_OAuth_Meteor_secret', '', {                                                                       // 307
			type: 'string',                                                                                                     // 308
			enableQuery: enableQuery                                                                                            // 309
		});                                                                                                                  // 307
		return this.add('Accounts_OAuth_Meteor_callback_url', '_oauth/meteor', {                                             // 311
			type: 'relativeUrl',                                                                                                // 312
			readonly: true,                                                                                                     // 313
			force: true,                                                                                                        // 314
			enableQuery: enableQuery                                                                                            // 315
		});                                                                                                                  // 311
	});                                                                                                                   // 317
	this.section('Twitter', function () {                                                                                 // 318
		var enableQuery = {                                                                                                  // 319
			_id: 'Accounts_OAuth_Twitter',                                                                                      // 320
			value: true                                                                                                         // 321
		};                                                                                                                   // 319
		this.add('Accounts_OAuth_Twitter', false, {                                                                          // 323
			type: 'boolean',                                                                                                    // 324
			'public': true                                                                                                      // 325
		});                                                                                                                  // 323
		this.add('Accounts_OAuth_Twitter_id', '', {                                                                          // 327
			type: 'string',                                                                                                     // 328
			enableQuery: enableQuery                                                                                            // 329
		});                                                                                                                  // 327
		this.add('Accounts_OAuth_Twitter_secret', '', {                                                                      // 331
			type: 'string',                                                                                                     // 332
			enableQuery: enableQuery                                                                                            // 333
		});                                                                                                                  // 331
		return this.add('Accounts_OAuth_Twitter_callback_url', '_oauth/twitter', {                                           // 335
			type: 'relativeUrl',                                                                                                // 336
			readonly: true,                                                                                                     // 337
			force: true,                                                                                                        // 338
			enableQuery: enableQuery                                                                                            // 339
		});                                                                                                                  // 335
	});                                                                                                                   // 341
	return this.section('Proxy', function () {                                                                            // 342
		this.add('Accounts_OAuth_Proxy_host', 'https://oauth-proxy.rocket.chat', {                                           // 343
			type: 'string',                                                                                                     // 344
			'public': true                                                                                                      // 345
		});                                                                                                                  // 343
		return this.add('Accounts_OAuth_Proxy_services', '', {                                                               // 347
			type: 'string',                                                                                                     // 348
			'public': true                                                                                                      // 349
		});                                                                                                                  // 347
	});                                                                                                                   // 351
});                                                                                                                    // 352
RocketChat.settings.addGroup('General', function () {                                                                  // 354
	this.add('Site_Url', typeof __meteor_runtime_config__ !== 'undefined' && __meteor_runtime_config__ !== null ? __meteor_runtime_config__.ROOT_URL : null, {
		type: 'string',                                                                                                      // 356
		i18nDescription: 'Site_Url_Description',                                                                             // 357
		'public': true                                                                                                       // 358
	});                                                                                                                   // 355
	this.add('Site_Name', 'Rocket.Chat', {                                                                                // 360
		type: 'string',                                                                                                      // 361
		'public': true                                                                                                       // 362
	});                                                                                                                   // 360
	this.add('Language', '', {                                                                                            // 364
		type: 'language',                                                                                                    // 365
		'public': true                                                                                                       // 366
	});                                                                                                                   // 364
	this.add('Allow_Invalid_SelfSigned_Certs', false, {                                                                   // 368
		type: 'boolean'                                                                                                      // 369
	});                                                                                                                   // 368
	this.add('Favorite_Rooms', true, {                                                                                    // 371
		type: 'boolean',                                                                                                     // 372
		'public': true                                                                                                       // 373
	});                                                                                                                   // 371
	this.add('CDN_PREFIX', '', {                                                                                          // 375
		type: 'string',                                                                                                      // 376
		'public': true                                                                                                       // 377
	});                                                                                                                   // 375
	this.add('Force_SSL', false, {                                                                                        // 379
		type: 'boolean',                                                                                                     // 380
		'public': true                                                                                                       // 381
	});                                                                                                                   // 379
	this.add('GoogleTagManager_id', '', {                                                                                 // 383
		type: 'string',                                                                                                      // 384
		'public': true                                                                                                       // 385
	});                                                                                                                   // 383
	this.add('Bugsnag_api_key', '', {                                                                                     // 387
		type: 'string',                                                                                                      // 388
		'public': false                                                                                                      // 389
	});                                                                                                                   // 387
	this.add('Force_Disable_OpLog_For_Cache', false, {                                                                    // 391
		type: 'boolean',                                                                                                     // 392
		'public': false                                                                                                      // 393
	});                                                                                                                   // 391
	this.add('Restart', 'restart_server', {                                                                               // 395
		type: 'action',                                                                                                      // 396
		actionText: 'Restart_the_server'                                                                                     // 397
	});                                                                                                                   // 395
	this.section('UTF8', function () {                                                                                    // 399
		this.add('UTF8_Names_Validation', '[0-9a-zA-Z-_.]+', {                                                               // 400
			type: 'string',                                                                                                     // 401
			'public': true,                                                                                                     // 402
			i18nDescription: 'UTF8_Names_Validation_Description'                                                                // 403
		});                                                                                                                  // 400
		return this.add('UTF8_Names_Slugify', true, {                                                                        // 405
			type: 'boolean',                                                                                                    // 406
			'public': true                                                                                                      // 407
		});                                                                                                                  // 405
	});                                                                                                                   // 409
	this.section('Reporting', function () {                                                                               // 410
		return this.add('Statistics_reporting', true, {                                                                      // 411
			type: 'boolean'                                                                                                     // 412
		});                                                                                                                  // 411
	});                                                                                                                   // 414
	this.section('Notifications', function () {                                                                           // 415
		return this.add('Desktop_Notifications_Duration', 0, {                                                               // 416
			type: 'int',                                                                                                        // 417
			'public': true,                                                                                                     // 418
			i18nDescription: 'Desktop_Notification_Durations_Description'                                                       // 419
		});                                                                                                                  // 416
	});                                                                                                                   // 421
	this.section('REST API', function () {                                                                                // 422
		return this.add('API_User_Limit', 500, {                                                                             // 423
			type: 'int',                                                                                                        // 424
			'public': true,                                                                                                     // 425
			i18nDescription: 'API_User_Limit'                                                                                   // 426
		});                                                                                                                  // 423
	});                                                                                                                   // 428
	this.section('Iframe_Integration', function () {                                                                      // 429
		this.add('Iframe_Integration_send_enable', false, {                                                                  // 430
			type: 'boolean',                                                                                                    // 431
			'public': true                                                                                                      // 432
		});                                                                                                                  // 430
		this.add('Iframe_Integration_send_target_origin', '*', {                                                             // 434
			type: 'string',                                                                                                     // 435
			'public': true,                                                                                                     // 436
			enableQuery: {                                                                                                      // 437
				_id: 'Iframe_Integration_send_enable',                                                                             // 438
				value: true                                                                                                        // 439
			}                                                                                                                   // 437
		});                                                                                                                  // 434
		this.add('Iframe_Integration_receive_enable', false, {                                                               // 442
			type: 'boolean',                                                                                                    // 443
			'public': true                                                                                                      // 444
		});                                                                                                                  // 442
		return this.add('Iframe_Integration_receive_origin', '*', {                                                          // 446
			type: 'string',                                                                                                     // 447
			'public': true,                                                                                                     // 448
			enableQuery: {                                                                                                      // 449
				_id: 'Iframe_Integration_receive_enable',                                                                          // 450
				value: true                                                                                                        // 451
			}                                                                                                                   // 449
		});                                                                                                                  // 446
	});                                                                                                                   // 454
	this.section('Translations', function () {                                                                            // 455
		return this.add('Custom_Translations', '', {                                                                         // 456
			type: 'code',                                                                                                       // 457
			'public': true                                                                                                      // 458
		});                                                                                                                  // 456
	});                                                                                                                   // 460
	return this.section('Stream_Cast', function () {                                                                      // 461
		return this.add('Stream_Cast_Address', '', {                                                                         // 462
			type: 'string'                                                                                                      // 463
		});                                                                                                                  // 462
	});                                                                                                                   // 465
});                                                                                                                    // 466
RocketChat.settings.addGroup('Email', function () {                                                                    // 468
	this.section('Header_and_Footer', function () {                                                                       // 469
		this.add('Email_Header', '<table border="0" cellspacing="0" cellpadding="0" width="100%" bgcolor="#f3f3f3" style="color:#4a4a4a;font-family: Helvetica,Arial,sans-serif;font-size:14px;line-height:20px;border-collapse:callapse;border-spacing:0;margin:0 auto"><tr><td style="padding:1em"><table border="0" cellspacing="0" cellpadding="0" align="center" width="100%" style="width:100%;margin:0 auto;max-width:800px"><tr><td bgcolor="#ffffff" style="background-color:#ffffff; border: 1px solid #DDD; font-size: 10pt; font-family: Helvetica,Arial,sans-serif;"><table width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td style="background-color: #04436a;"><h1 style="font-family: Helvetica,Arial,sans-serif; padding: 0 1em; margin: 0; line-height: 70px; color: #FFF;">[Site_Name]</h1></td></tr><tr><td style="padding: 1em; font-size: 10pt; font-family: Helvetica,Arial,sans-serif;">', {
			type: 'code',                                                                                                       // 471
			code: 'text/html',                                                                                                  // 472
			multiline: true,                                                                                                    // 473
			i18nLabel: 'Header'                                                                                                 // 474
		});                                                                                                                  // 470
		return this.add('Email_Footer', '</td></tr></table></td></tr><tr><td border="0" cellspacing="0" cellpadding="0" width="100%" style="font-family: Helvetica,Arial,sans-serif; max-width: 800px; margin: 0 auto; padding: 1.5em; text-align: center; font-size: 8pt; color: #999;">Powered by <a href="https://rocket.chat" target="_blank">Rocket.Chat</a></td></tr></table></td></tr></table>', {
			type: 'code',                                                                                                       // 477
			code: 'text/html',                                                                                                  // 478
			multiline: true,                                                                                                    // 479
			i18nLabel: 'Footer'                                                                                                 // 480
		});                                                                                                                  // 476
	});                                                                                                                   // 482
	this.section('SMTP', function () {                                                                                    // 483
		this.add('SMTP_Protocol', 'smtp', {                                                                                  // 484
			type: 'select',                                                                                                     // 485
			values: [{                                                                                                          // 486
				key: 'smtp',                                                                                                       // 488
				i18nLabel: 'smtp'                                                                                                  // 489
			}, {                                                                                                                // 487
				key: 'smtps',                                                                                                      // 491
				i18nLabel: 'smtps'                                                                                                 // 492
			}],                                                                                                                 // 490
			env: true,                                                                                                          // 495
			i18nLabel: 'Protocol'                                                                                               // 496
		});                                                                                                                  // 484
		this.add('SMTP_Host', '', {                                                                                          // 498
			type: 'string',                                                                                                     // 499
			env: true,                                                                                                          // 500
			i18nLabel: 'Host'                                                                                                   // 501
		});                                                                                                                  // 498
		this.add('SMTP_Port', '', {                                                                                          // 503
			type: 'string',                                                                                                     // 504
			env: true,                                                                                                          // 505
			i18nLabel: 'Port'                                                                                                   // 506
		});                                                                                                                  // 503
		this.add('SMTP_Pool', true, {                                                                                        // 508
			type: 'boolean',                                                                                                    // 509
			env: true,                                                                                                          // 510
			i18nLabel: 'Pool'                                                                                                   // 511
		});                                                                                                                  // 508
		this.add('SMTP_Username', '', {                                                                                      // 513
			type: 'string',                                                                                                     // 514
			env: true,                                                                                                          // 515
			i18nLabel: 'Username'                                                                                               // 516
		});                                                                                                                  // 513
		this.add('SMTP_Password', '', {                                                                                      // 518
			type: 'password',                                                                                                   // 519
			env: true,                                                                                                          // 520
			i18nLabel: 'Password'                                                                                               // 521
		});                                                                                                                  // 518
		this.add('From_Email', '', {                                                                                         // 523
			type: 'string',                                                                                                     // 524
			placeholder: 'email@domain'                                                                                         // 525
		});                                                                                                                  // 523
		return this.add('SMTP_Test_Button', 'sendSMTPTestEmail', {                                                           // 527
			type: 'action',                                                                                                     // 528
			actionText: 'Send_a_test_mail_to_my_user'                                                                           // 529
		});                                                                                                                  // 527
	});                                                                                                                   // 531
	this.section('Invitation', function () {                                                                              // 532
		this.add('Invitation_Customized', false, {                                                                           // 533
			type: 'boolean',                                                                                                    // 534
			i18nLabel: 'Custom'                                                                                                 // 535
		});                                                                                                                  // 533
		this.add('Invitation_Subject', '', {                                                                                 // 537
			type: 'string',                                                                                                     // 538
			i18nLabel: 'Subject',                                                                                               // 539
			enableQuery: {                                                                                                      // 540
				_id: 'Invitation_Customized',                                                                                      // 541
				value: true                                                                                                        // 542
			},                                                                                                                  // 540
			i18nDefaultQuery: {                                                                                                 // 544
				_id: 'Invitation_Customized',                                                                                      // 545
				value: false                                                                                                       // 546
			}                                                                                                                   // 544
		});                                                                                                                  // 537
		return this.add('Invitation_HTML', '', {                                                                             // 549
			type: 'code',                                                                                                       // 550
			code: 'text/html',                                                                                                  // 551
			multiline: true,                                                                                                    // 552
			i18nLabel: 'Body',                                                                                                  // 553
			i18nDescription: 'Invitation_HTML_Description',                                                                     // 554
			enableQuery: {                                                                                                      // 555
				_id: 'Invitation_Customized',                                                                                      // 556
				value: true                                                                                                        // 557
			},                                                                                                                  // 555
			i18nDefaultQuery: {                                                                                                 // 559
				_id: 'Invitation_Customized',                                                                                      // 560
				value: false                                                                                                       // 561
			}                                                                                                                   // 559
		});                                                                                                                  // 549
	});                                                                                                                   // 564
	this.section('Registration', function () {                                                                            // 565
		this.add('Accounts_Enrollment_Customized', false, {                                                                  // 566
			type: 'boolean',                                                                                                    // 567
			i18nLabel: 'Custom'                                                                                                 // 568
		});                                                                                                                  // 566
		this.add('Accounts_Enrollment_Email_Subject', '', {                                                                  // 570
			type: 'string',                                                                                                     // 571
			i18nLabel: 'Subject',                                                                                               // 572
			enableQuery: {                                                                                                      // 573
				_id: 'Accounts_Enrollment_Customized',                                                                             // 574
				value: true                                                                                                        // 575
			},                                                                                                                  // 573
			i18nDefaultQuery: {                                                                                                 // 577
				_id: 'Accounts_Enrollment_Customized',                                                                             // 578
				value: false                                                                                                       // 579
			}                                                                                                                   // 577
		});                                                                                                                  // 570
		return this.add('Accounts_Enrollment_Email', '', {                                                                   // 582
			type: 'code',                                                                                                       // 583
			code: 'text/html',                                                                                                  // 584
			multiline: true,                                                                                                    // 585
			i18nLabel: 'Body',                                                                                                  // 586
			enableQuery: {                                                                                                      // 587
				_id: 'Accounts_Enrollment_Customized',                                                                             // 588
				value: true                                                                                                        // 589
			},                                                                                                                  // 587
			i18nDefaultQuery: {                                                                                                 // 591
				_id: 'Accounts_Enrollment_Customized',                                                                             // 592
				value: false                                                                                                       // 593
			}                                                                                                                   // 591
		});                                                                                                                  // 582
	});                                                                                                                   // 596
	this.section('Registration_via_Admin', function () {                                                                  // 597
		this.add('Accounts_UserAddedEmail_Customized', false, {                                                              // 598
			type: 'boolean',                                                                                                    // 599
			i18nLabel: 'Custom'                                                                                                 // 600
		});                                                                                                                  // 598
		this.add('Accounts_UserAddedEmailSubject', '', {                                                                     // 602
			type: 'string',                                                                                                     // 603
			i18nLabel: 'Subject',                                                                                               // 604
			enableQuery: {                                                                                                      // 605
				_id: 'Accounts_UserAddedEmail_Customized',                                                                         // 606
				value: true                                                                                                        // 607
			},                                                                                                                  // 605
			i18nDefaultQuery: {                                                                                                 // 609
				_id: 'Accounts_UserAddedEmail_Customized',                                                                         // 610
				value: false                                                                                                       // 611
			}                                                                                                                   // 609
		});                                                                                                                  // 602
		return this.add('Accounts_UserAddedEmail', '', {                                                                     // 614
			type: 'code',                                                                                                       // 615
			code: 'text/html',                                                                                                  // 616
			multiline: true,                                                                                                    // 617
			i18nLabel: 'Body',                                                                                                  // 618
			i18nDescription: 'Accounts_UserAddedEmail_Description',                                                             // 619
			enableQuery: {                                                                                                      // 620
				_id: 'Accounts_UserAddedEmail_Customized',                                                                         // 621
				value: true                                                                                                        // 622
			},                                                                                                                  // 620
			i18nDefaultQuery: {                                                                                                 // 624
				_id: 'Accounts_UserAddedEmail_Customized',                                                                         // 625
				value: false                                                                                                       // 626
			}                                                                                                                   // 624
		});                                                                                                                  // 614
	});                                                                                                                   // 629
	this.section('Forgot_password_section', function () {                                                                 // 630
		this.add('Forgot_Password_Customized', false, {                                                                      // 631
			type: 'boolean',                                                                                                    // 632
			i18nLabel: 'Custom'                                                                                                 // 633
		});                                                                                                                  // 631
		this.add('Forgot_Password_Email_Subject', '', {                                                                      // 635
			type: 'string',                                                                                                     // 636
			i18nLabel: 'Subject',                                                                                               // 637
			enableQuery: {                                                                                                      // 638
				_id: 'Forgot_Password_Customized',                                                                                 // 639
				value: true                                                                                                        // 640
			},                                                                                                                  // 638
			i18nDefaultQuery: {                                                                                                 // 642
				_id: 'Forgot_Password_Customized',                                                                                 // 643
				value: false                                                                                                       // 644
			}                                                                                                                   // 642
		});                                                                                                                  // 635
		return this.add('Forgot_Password_Email', '', {                                                                       // 647
			type: 'code',                                                                                                       // 648
			code: 'text/html',                                                                                                  // 649
			multiline: true,                                                                                                    // 650
			i18nLabel: 'Body',                                                                                                  // 651
			i18nDescription: 'Forgot_Password_Description',                                                                     // 652
			enableQuery: {                                                                                                      // 653
				_id: 'Forgot_Password_Customized',                                                                                 // 654
				value: true                                                                                                        // 655
			},                                                                                                                  // 653
			i18nDefaultQuery: {                                                                                                 // 657
				_id: 'Forgot_Password_Customized',                                                                                 // 658
				value: false                                                                                                       // 659
			}                                                                                                                   // 657
		});                                                                                                                  // 647
	});                                                                                                                   // 662
	return this.section('Verification', function () {                                                                     // 663
		this.add('Verification_Customized', false, {                                                                         // 664
			type: 'boolean',                                                                                                    // 665
			i18nLabel: 'Custom'                                                                                                 // 666
		});                                                                                                                  // 664
		this.add('Verification_Email_Subject', '', {                                                                         // 668
			type: 'string',                                                                                                     // 669
			i18nLabel: 'Subject',                                                                                               // 670
			enableQuery: {                                                                                                      // 671
				_id: 'Verification_Customized',                                                                                    // 672
				value: true                                                                                                        // 673
			},                                                                                                                  // 671
			i18nDefaultQuery: {                                                                                                 // 675
				_id: 'Verification_Customized',                                                                                    // 676
				value: false                                                                                                       // 677
			}                                                                                                                   // 675
		});                                                                                                                  // 668
		return this.add('Verification_Email', '', {                                                                          // 680
			type: 'code',                                                                                                       // 681
			code: 'text/html',                                                                                                  // 682
			multiline: true,                                                                                                    // 683
			i18nLabel: 'Body',                                                                                                  // 684
			i18nDescription: 'Verification_Description',                                                                        // 685
			enableQuery: {                                                                                                      // 686
				_id: 'Verification_Customized',                                                                                    // 687
				value: true                                                                                                        // 688
			},                                                                                                                  // 686
			i18nDefaultQuery: {                                                                                                 // 690
				_id: 'Verification_Customized',                                                                                    // 691
				value: false                                                                                                       // 692
			}                                                                                                                   // 690
		});                                                                                                                  // 680
	});                                                                                                                   // 695
});                                                                                                                    // 696
RocketChat.settings.addGroup('Message', function () {                                                                  // 698
	this.section('Message_Attachments', function () {                                                                     // 699
		this.add('Message_Attachments_GroupAttach', false, {                                                                 // 700
			type: 'boolean',                                                                                                    // 701
			'public': true,                                                                                                     // 702
			i18nDescription: 'Message_Attachments_GroupAttachDescription'                                                       // 703
		});                                                                                                                  // 700
		this.add('Message_AudioRecorderEnabled', true, {                                                                     // 705
			type: 'boolean',                                                                                                    // 706
			'public': true,                                                                                                     // 707
			i18nDescription: 'Message_AudioRecorderEnabledDescription'                                                          // 708
		});                                                                                                                  // 705
	});                                                                                                                   // 710
	this.add('Message_AllowEditing', true, {                                                                              // 711
		type: 'boolean',                                                                                                     // 712
		'public': true                                                                                                       // 713
	});                                                                                                                   // 711
	this.add('Message_AllowEditing_BlockEditInMinutes', 0, {                                                              // 715
		type: 'int',                                                                                                         // 716
		'public': true,                                                                                                      // 717
		i18nDescription: 'Message_AllowEditing_BlockEditInMinutesDescription'                                                // 718
	});                                                                                                                   // 715
	this.add('Message_AllowDeleting', true, {                                                                             // 720
		type: 'boolean',                                                                                                     // 721
		'public': true                                                                                                       // 722
	});                                                                                                                   // 720
	this.add('Message_AllowDeleting_BlockDeleteInMinutes', 0, {                                                           // 724
		type: 'int',                                                                                                         // 725
		'public': true,                                                                                                      // 726
		i18nDescription: 'Message_AllowDeleting_BlockDeleteInMinutes'                                                        // 727
	});                                                                                                                   // 724
	this.add('Message_AllowUnrecognizedSlashCommand', false, {                                                            // 729
		type: 'boolean',                                                                                                     // 730
		'public': true                                                                                                       // 731
	});                                                                                                                   // 729
	this.add('Message_AlwaysSearchRegExp', false, {                                                                       // 733
		type: 'boolean'                                                                                                      // 734
	});                                                                                                                   // 733
	this.add('Message_ShowEditedStatus', true, {                                                                          // 736
		type: 'boolean',                                                                                                     // 737
		'public': true                                                                                                       // 738
	});                                                                                                                   // 736
	this.add('Message_ShowDeletedStatus', false, {                                                                        // 740
		type: 'boolean',                                                                                                     // 741
		'public': true                                                                                                       // 742
	});                                                                                                                   // 740
	this.add('Message_AllowBadWordsFilter', false, {                                                                      // 744
		type: 'boolean',                                                                                                     // 745
		'public': true                                                                                                       // 746
	});                                                                                                                   // 744
	this.add('Message_BadWordsFilterList', '', {                                                                          // 748
		type: 'string',                                                                                                      // 749
		'public': true                                                                                                       // 750
	});                                                                                                                   // 748
	this.add('Message_KeepHistory', false, {                                                                              // 752
		type: 'boolean',                                                                                                     // 753
		'public': true                                                                                                       // 754
	});                                                                                                                   // 752
	this.add('Message_MaxAll', 0, {                                                                                       // 756
		type: 'int',                                                                                                         // 757
		'public': true                                                                                                       // 758
	});                                                                                                                   // 756
	this.add('Message_MaxAllowedSize', 5000, {                                                                            // 760
		type: 'int',                                                                                                         // 761
		'public': true                                                                                                       // 762
	});                                                                                                                   // 760
	this.add('Message_ShowFormattingTips', true, {                                                                        // 764
		type: 'boolean',                                                                                                     // 765
		'public': true                                                                                                       // 766
	});                                                                                                                   // 764
	this.add('Message_SetNameToAliasEnabled', false, {                                                                    // 768
		type: 'boolean',                                                                                                     // 769
		'public': false,                                                                                                     // 770
		i18nDescription: 'Message_SetNameToAliasEnabled_Description'                                                         // 771
	});                                                                                                                   // 768
	this.add('Message_GroupingPeriod', 300, {                                                                             // 773
		type: 'int',                                                                                                         // 774
		'public': true,                                                                                                      // 775
		i18nDescription: 'Message_GroupingPeriodDescription'                                                                 // 776
	});                                                                                                                   // 773
	this.add('API_Embed', true, {                                                                                         // 778
		type: 'boolean',                                                                                                     // 779
		'public': true                                                                                                       // 780
	});                                                                                                                   // 778
	this.add('API_EmbedCacheExpirationDays', 30, {                                                                        // 782
		type: 'int',                                                                                                         // 783
		'public': false                                                                                                      // 784
	});                                                                                                                   // 782
	this.add('API_Embed_clear_cache_now', 'OEmbedCacheCleanup', {                                                         // 786
		type: 'action',                                                                                                      // 787
		actionText: 'clear',                                                                                                 // 788
		i18nLabel: 'clear_cache_now'                                                                                         // 789
	});                                                                                                                   // 786
	this.add('API_EmbedDisabledFor', '', {                                                                                // 791
		type: 'string',                                                                                                      // 792
		'public': true,                                                                                                      // 793
		i18nDescription: 'API_EmbedDisabledFor_Description'                                                                  // 794
	});                                                                                                                   // 791
	this.add('API_EmbedIgnoredHosts', 'localhost, 127.0.0.1, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16', {                // 796
		type: 'string',                                                                                                      // 797
		i18nDescription: 'API_EmbedIgnoredHosts_Description'                                                                 // 798
	});                                                                                                                   // 796
	this.add('API_EmbedSafePorts', '80, 443', {                                                                           // 800
		type: 'string'                                                                                                       // 801
	});                                                                                                                   // 800
	this.add('Message_TimeFormat', 'LT', {                                                                                // 803
		type: 'string',                                                                                                      // 804
		'public': true,                                                                                                      // 805
		i18nDescription: 'Message_TimeFormat_Description'                                                                    // 806
	});                                                                                                                   // 803
	this.add('Message_DateFormat', 'LL', {                                                                                // 808
		type: 'string',                                                                                                      // 809
		'public': true,                                                                                                      // 810
		i18nDescription: 'Message_DateFormat_Description'                                                                    // 811
	});                                                                                                                   // 808
	this.add('Message_TimeAndDateFormat', 'LLL', {                                                                        // 813
		type: 'string',                                                                                                      // 814
		'public': true,                                                                                                      // 815
		i18nDescription: 'Message_TimeAndDateFormat_Description'                                                             // 816
	});                                                                                                                   // 813
	this.add('Message_HideType_uj', false, {                                                                              // 818
		type: 'boolean',                                                                                                     // 819
		'public': true                                                                                                       // 820
	});                                                                                                                   // 818
	this.add('Message_HideType_ul', false, {                                                                              // 822
		type: 'boolean',                                                                                                     // 823
		'public': true                                                                                                       // 824
	});                                                                                                                   // 822
	this.add('Message_HideType_ru', false, {                                                                              // 826
		type: 'boolean',                                                                                                     // 827
		'public': true                                                                                                       // 828
	});                                                                                                                   // 826
	this.add('Message_HideType_au', false, {                                                                              // 830
		type: 'boolean',                                                                                                     // 831
		'public': true                                                                                                       // 832
	});                                                                                                                   // 830
	return this.add('Message_HideType_mute_unmute', false, {                                                              // 834
		type: 'boolean',                                                                                                     // 835
		'public': true                                                                                                       // 836
	});                                                                                                                   // 834
});                                                                                                                    // 838
RocketChat.settings.addGroup('Meta', function () {                                                                     // 840
	this.add('Meta_language', '', {                                                                                       // 841
		type: 'string'                                                                                                       // 842
	});                                                                                                                   // 841
	this.add('Meta_fb_app_id', '', {                                                                                      // 844
		type: 'string'                                                                                                       // 845
	});                                                                                                                   // 844
	this.add('Meta_robots', 'INDEX,FOLLOW', {                                                                             // 847
		type: 'string'                                                                                                       // 848
	});                                                                                                                   // 847
	this.add('Meta_google-site-verification', '', {                                                                       // 850
		type: 'string'                                                                                                       // 851
	});                                                                                                                   // 850
	this.add('Meta_msvalidate01', '', {                                                                                   // 853
		type: 'string'                                                                                                       // 854
	});                                                                                                                   // 853
	return this.add('Meta_custom', '', {                                                                                  // 856
		type: 'code',                                                                                                        // 857
		code: 'text/html',                                                                                                   // 858
		multiline: true                                                                                                      // 859
	});                                                                                                                   // 856
});                                                                                                                    // 861
RocketChat.settings.addGroup('Push', function () {                                                                     // 863
	this.add('Push_enable', true, {                                                                                       // 864
		type: 'boolean',                                                                                                     // 865
		'public': true                                                                                                       // 866
	});                                                                                                                   // 864
	this.add('Push_debug', false, {                                                                                       // 868
		type: 'boolean',                                                                                                     // 869
		'public': true,                                                                                                      // 870
		enableQuery: {                                                                                                       // 871
			_id: 'Push_enable',                                                                                                 // 872
			value: true                                                                                                         // 873
		}                                                                                                                    // 871
	});                                                                                                                   // 868
	this.add('Push_enable_gateway', true, {                                                                               // 876
		type: 'boolean',                                                                                                     // 877
		enableQuery: {                                                                                                       // 878
			_id: 'Push_enable',                                                                                                 // 879
			value: true                                                                                                         // 880
		}                                                                                                                    // 878
	});                                                                                                                   // 876
	this.add('Push_gateway', 'https://gateway.rocket.chat', {                                                             // 883
		type: 'string',                                                                                                      // 884
		enableQuery: [{                                                                                                      // 885
			_id: 'Push_enable',                                                                                                 // 887
			value: true                                                                                                         // 888
		}, {                                                                                                                 // 886
			_id: 'Push_enable_gateway',                                                                                         // 890
			value: true                                                                                                         // 891
		}]                                                                                                                   // 889
	});                                                                                                                   // 883
	this.add('Push_production', true, {                                                                                   // 895
		type: 'boolean',                                                                                                     // 896
		'public': true,                                                                                                      // 897
		enableQuery: [{                                                                                                      // 898
			_id: 'Push_enable',                                                                                                 // 900
			value: true                                                                                                         // 901
		}, {                                                                                                                 // 899
			_id: 'Push_enable_gateway',                                                                                         // 903
			value: false                                                                                                        // 904
		}]                                                                                                                   // 902
	});                                                                                                                   // 895
	this.add('Push_test_push', 'push_test', {                                                                             // 908
		type: 'action',                                                                                                      // 909
		actionText: 'Send_a_test_push_to_my_user',                                                                           // 910
		enableQuery: {                                                                                                       // 911
			_id: 'Push_enable',                                                                                                 // 912
			value: true                                                                                                         // 913
		}                                                                                                                    // 911
	});                                                                                                                   // 908
	this.section('Certificates_and_Keys', function () {                                                                   // 916
		this.add('Push_apn_passphrase', '', {                                                                                // 917
			type: 'string'                                                                                                      // 918
		});                                                                                                                  // 917
		this.add('Push_apn_key', '', {                                                                                       // 920
			type: 'string',                                                                                                     // 921
			multiline: true                                                                                                     // 922
		});                                                                                                                  // 920
		this.add('Push_apn_cert', '', {                                                                                      // 924
			type: 'string',                                                                                                     // 925
			multiline: true                                                                                                     // 926
		});                                                                                                                  // 924
		this.add('Push_apn_dev_passphrase', '', {                                                                            // 928
			type: 'string'                                                                                                      // 929
		});                                                                                                                  // 928
		this.add('Push_apn_dev_key', '', {                                                                                   // 931
			type: 'string',                                                                                                     // 932
			multiline: true                                                                                                     // 933
		});                                                                                                                  // 931
		this.add('Push_apn_dev_cert', '', {                                                                                  // 935
			type: 'string',                                                                                                     // 936
			multiline: true                                                                                                     // 937
		});                                                                                                                  // 935
		this.add('Push_gcm_api_key', '', {                                                                                   // 939
			type: 'string'                                                                                                      // 940
		});                                                                                                                  // 939
		return this.add('Push_gcm_project_number', '', {                                                                     // 942
			type: 'string',                                                                                                     // 943
			'public': true                                                                                                      // 944
		});                                                                                                                  // 942
	});                                                                                                                   // 946
	return this.section('Privacy', function () {                                                                          // 947
		this.add('Push_show_username_room', true, {                                                                          // 948
			type: 'boolean',                                                                                                    // 949
			'public': true                                                                                                      // 950
		});                                                                                                                  // 948
		return this.add('Push_show_message', true, {                                                                         // 952
			type: 'boolean',                                                                                                    // 953
			'public': true                                                                                                      // 954
		});                                                                                                                  // 952
	});                                                                                                                   // 956
});                                                                                                                    // 957
RocketChat.settings.addGroup('Layout', function () {                                                                   // 959
	this.section('Content', function () {                                                                                 // 960
		this.add('Layout_Home_Title', 'Home', {                                                                              // 961
			type: 'string',                                                                                                     // 962
			'public': true                                                                                                      // 963
		});                                                                                                                  // 961
		this.add('Layout_Home_Body', 'Welcome to Rocket.Chat <br> Go to APP SETTINGS -> Layout to customize this intro.', {  // 965
			type: 'code',                                                                                                       // 966
			code: 'text/html',                                                                                                  // 967
			multiline: true,                                                                                                    // 968
			'public': true                                                                                                      // 969
		});                                                                                                                  // 965
		this.add('Layout_Terms_of_Service', 'Terms of Service <br> Go to APP SETTINGS -> Layout to customize this page.', {  // 971
			type: 'code',                                                                                                       // 972
			code: 'text/html',                                                                                                  // 973
			multiline: true,                                                                                                    // 974
			'public': true                                                                                                      // 975
		});                                                                                                                  // 971
		this.add('Layout_Login_Terms', 'By proceeding you are agreeing to our <a href="/terms-of-service">Terms of Service</a> and <a href="/privacy-policy">Privacy Policy</a>.', {
			type: 'string',                                                                                                     // 978
			multiline: true,                                                                                                    // 979
			'public': true                                                                                                      // 980
		});                                                                                                                  // 977
		this.add('Layout_Privacy_Policy', 'Privacy Policy <br> Go to APP SETTINGS -> Layout to customize this page.', {      // 982
			type: 'code',                                                                                                       // 983
			code: 'text/html',                                                                                                  // 984
			multiline: true,                                                                                                    // 985
			'public': true                                                                                                      // 986
		});                                                                                                                  // 982
		return this.add('Layout_Sidenav_Footer', '<img src="assets/logo" />', {                                              // 988
			type: 'code',                                                                                                       // 989
			code: 'text/html',                                                                                                  // 990
			'public': true,                                                                                                     // 991
			i18nDescription: 'Layout_Sidenav_Footer_description'                                                                // 992
		});                                                                                                                  // 988
	});                                                                                                                   // 994
	this.section('Custom_Scripts', function () {                                                                          // 995
		this.add('Custom_Script_Logged_Out', '//Add your script', {                                                          // 996
			type: 'code',                                                                                                       // 997
			multiline: true,                                                                                                    // 998
			'public': true                                                                                                      // 999
		});                                                                                                                  // 996
		return this.add('Custom_Script_Logged_In', '//Add your script', {                                                    // 1001
			type: 'code',                                                                                                       // 1002
			multiline: true,                                                                                                    // 1003
			'public': true                                                                                                      // 1004
		});                                                                                                                  // 1001
	});                                                                                                                   // 1006
	return this.section('User_Interface', function () {                                                                   // 1007
		this.add('UI_DisplayRoles', true, {                                                                                  // 1008
			type: 'boolean',                                                                                                    // 1009
			'public': true                                                                                                      // 1010
		});                                                                                                                  // 1008
		this.add('UI_Merge_Channels_Groups', true, {                                                                         // 1012
			type: 'boolean',                                                                                                    // 1013
			'public': true                                                                                                      // 1014
		});                                                                                                                  // 1012
		this.add('UI_Use_Name_Avatar', false, {                                                                              // 1016
			type: 'boolean',                                                                                                    // 1017
			'public': true                                                                                                      // 1018
		});                                                                                                                  // 1016
		this.add('UI_Use_Real_Name', false, {                                                                                // 1020
			type: 'boolean',                                                                                                    // 1021
			'public': true                                                                                                      // 1022
		});                                                                                                                  // 1020
	});                                                                                                                   // 1024
});                                                                                                                    // 1025
RocketChat.settings.addGroup('Logs', function () {                                                                     // 1027
	this.add('Log_Level', '0', {                                                                                          // 1028
		type: 'select',                                                                                                      // 1029
		values: [{                                                                                                           // 1030
			key: '0',                                                                                                           // 1032
			i18nLabel: '0_Errors_Only'                                                                                          // 1033
		}, {                                                                                                                 // 1031
			key: '1',                                                                                                           // 1035
			i18nLabel: '1_Errors_and_Information'                                                                               // 1036
		}, {                                                                                                                 // 1034
			key: '2',                                                                                                           // 1038
			i18nLabel: '2_Erros_Information_and_Debug'                                                                          // 1039
		}],                                                                                                                  // 1037
		'public': true                                                                                                       // 1042
	});                                                                                                                   // 1028
	this.add('Log_Package', false, {                                                                                      // 1044
		type: 'boolean',                                                                                                     // 1045
		'public': true                                                                                                       // 1046
	});                                                                                                                   // 1044
	this.add('Log_File', false, {                                                                                         // 1048
		type: 'boolean',                                                                                                     // 1049
		'public': true                                                                                                       // 1050
	});                                                                                                                   // 1048
	return this.add('Log_View_Limit', 1000, {                                                                             // 1052
		type: 'int'                                                                                                          // 1053
	});                                                                                                                   // 1052
});                                                                                                                    // 1055
RocketChat.settings.init();                                                                                            // 1057
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/publications/settings.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	'public-settings/get': function (updatedAt) {                                                                         // 2
		this.unblock();                                                                                                      // 3
		var records = RocketChat.models.Settings.find().fetch().filter(function (record) {                                   // 4
			return record.hidden !== true && record['public'] === true;                                                         // 5
		});                                                                                                                  // 6
                                                                                                                       //
		if (updatedAt instanceof Date) {                                                                                     // 7
			return {                                                                                                            // 8
				update: records.filter(function (record) {                                                                         // 9
					return record._updatedAt > updatedAt;                                                                             // 10
				}),                                                                                                                // 11
				remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {                                              // 12
					hidden: {                                                                                                         // 13
						$ne: true                                                                                                        // 14
					},                                                                                                                // 13
					'public': true                                                                                                    // 16
				}, {                                                                                                               // 12
					fields: {                                                                                                         // 18
						_id: 1,                                                                                                          // 19
						_deletedAt: 1                                                                                                    // 20
					}                                                                                                                 // 18
				}).fetch()                                                                                                         // 17
			};                                                                                                                  // 8
		}                                                                                                                    // 24
                                                                                                                       //
		return records;                                                                                                      // 25
	},                                                                                                                    // 26
	'private-settings/get': function (updatedAt) {                                                                        // 27
		if (!Meteor.userId()) {                                                                                              // 28
			return [];                                                                                                          // 29
		}                                                                                                                    // 30
                                                                                                                       //
		this.unblock();                                                                                                      // 31
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'view-privileged-setting')) {                                   // 32
			return [];                                                                                                          // 33
		}                                                                                                                    // 34
                                                                                                                       //
		var records = RocketChat.models.Settings.find().fetch().filter(function (record) {                                   // 35
			return record.hidden !== true;                                                                                      // 36
		});                                                                                                                  // 37
                                                                                                                       //
		if (updatedAt instanceof Date) {                                                                                     // 38
			return {                                                                                                            // 39
				update: records.filter(function (record) {                                                                         // 40
					return record._updatedAt > updatedAt;                                                                             // 41
				}),                                                                                                                // 42
				remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {                                              // 43
					hidden: {                                                                                                         // 44
						$ne: true                                                                                                        // 45
					}                                                                                                                 // 44
				}, {                                                                                                               // 43
					fields: {                                                                                                         // 48
						_id: 1,                                                                                                          // 49
						_deletedAt: 1                                                                                                    // 50
					}                                                                                                                 // 48
				}).fetch()                                                                                                         // 47
			};                                                                                                                  // 39
		}                                                                                                                    // 54
                                                                                                                       //
		return records;                                                                                                      // 55
	}                                                                                                                     // 56
});                                                                                                                    // 1
RocketChat.models.Settings.cache.on('changed', function (type, setting) {                                              // 59
	if (setting['public'] === true) {                                                                                     // 60
		RocketChat.Notifications.notifyAllInThisInstance('public-settings-changed', type, _.pick(setting, '_id', 'value'));  // 61
	}                                                                                                                     // 62
                                                                                                                       //
	return RocketChat.Notifications.notifyLoggedInThisInstance('private-settings-changed', type, setting);                // 63
});                                                                                                                    // 64
RocketChat.Notifications.streamAll.allowRead('private-settings-changed', function () {                                 // 66
	if (this.userId == null) {                                                                                            // 67
		return false;                                                                                                        // 68
	}                                                                                                                     // 69
                                                                                                                       //
	return RocketChat.authz.hasPermission(this.userId, 'view-privileged-setting');                                        // 70
});                                                                                                                    // 71
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addOAuthService.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addOAuthService.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* eslint no-multi-spaces: 0 */ /* eslint comma-spacing: 0 */Meteor.methods({                                          // 1
	addOAuthService: function (name) {                                                                                    // 5
		check(name, String);                                                                                                 // 7
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 9
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 10
				method: 'addOAuthService'                                                                                          // 10
			});                                                                                                                 // 10
		}                                                                                                                    // 11
                                                                                                                       //
		if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {                                 // 13
			throw new Meteor.Error('error-action-not-allowed', 'Adding OAuth Services is not allowed', {                        // 14
				method: 'addOAuthService',                                                                                         // 14
				action: 'Adding_OAuth_Services'                                                                                    // 14
			});                                                                                                                 // 14
		}                                                                                                                    // 15
                                                                                                                       //
		name = name.toLowerCase().replace(/[^a-z0-9_]/g, '');                                                                // 17
		name = s.capitalize(name);                                                                                           // 18
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name, false, {                                                    // 19
			type: 'boolean',                                                                                                    // 19
			group: 'OAuth',                                                                                                     // 19
			section: "Custom OAuth: " + name,                                                                                   // 19
			i18nLabel: 'Accounts_OAuth_Custom_Enable',                                                                          // 19
			persistent: true                                                                                                    // 19
		});                                                                                                                  // 19
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-url", '', {                                              // 20
			type: 'string',                                                                                                     // 20
			group: 'OAuth',                                                                                                     // 20
			section: "Custom OAuth: " + name,                                                                                   // 20
			i18nLabel: 'URL',                                                                                                   // 20
			persistent: true                                                                                                    // 20
		});                                                                                                                  // 20
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-token_path", '/oauth/token', {                           // 21
			type: 'string',                                                                                                     // 21
			group: 'OAuth',                                                                                                     // 21
			section: "Custom OAuth: " + name,                                                                                   // 21
			i18nLabel: 'Accounts_OAuth_Custom_Token_Path',                                                                      // 21
			persistent: true                                                                                                    // 21
		});                                                                                                                  // 21
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-identity_path", '/me', {                                 // 22
			type: 'string',                                                                                                     // 22
			group: 'OAuth',                                                                                                     // 22
			section: "Custom OAuth: " + name,                                                                                   // 22
			i18nLabel: 'Accounts_OAuth_Custom_Identity_Path',                                                                   // 22
			persistent: true                                                                                                    // 22
		});                                                                                                                  // 22
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-authorize_path", '/oauth/authorize', {                   // 23
			type: 'string',                                                                                                     // 23
			group: 'OAuth',                                                                                                     // 23
			section: "Custom OAuth: " + name,                                                                                   // 23
			i18nLabel: 'Accounts_OAuth_Custom_Authorize_Path',                                                                  // 23
			persistent: true                                                                                                    // 23
		});                                                                                                                  // 23
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-scope", 'openid', {                                      // 24
			type: 'string',                                                                                                     // 24
			group: 'OAuth',                                                                                                     // 24
			section: "Custom OAuth: " + name,                                                                                   // 24
			i18nLabel: 'Accounts_OAuth_Custom_Scope',                                                                           // 24
			persistent: true                                                                                                    // 24
		});                                                                                                                  // 24
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-token_sent_via", 'payload', {                            // 25
			type: 'select',                                                                                                     // 25
			group: 'OAuth',                                                                                                     // 25
			section: "Custom OAuth: " + name,                                                                                   // 25
			i18nLabel: 'Accounts_OAuth_Custom_Token_Sent_Via',                                                                  // 25
			persistent: true,                                                                                                   // 25
			values: [{                                                                                                          // 25
				key: 'header',                                                                                                     // 25
				i18nLabel: 'Header'                                                                                                // 25
			}, {                                                                                                                // 25
				key: 'payload',                                                                                                    // 25
				i18nLabel: 'Payload'                                                                                               // 25
			}]                                                                                                                  // 25
		});                                                                                                                  // 25
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-id", '', {                                               // 26
			type: 'string',                                                                                                     // 26
			group: 'OAuth',                                                                                                     // 26
			section: "Custom OAuth: " + name,                                                                                   // 26
			i18nLabel: 'Accounts_OAuth_Custom_id',                                                                              // 26
			persistent: true                                                                                                    // 26
		});                                                                                                                  // 26
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-secret", '', {                                           // 27
			type: 'string',                                                                                                     // 27
			group: 'OAuth',                                                                                                     // 27
			section: "Custom OAuth: " + name,                                                                                   // 27
			i18nLabel: 'Accounts_OAuth_Custom_Secret',                                                                          // 27
			persistent: true                                                                                                    // 27
		});                                                                                                                  // 27
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-login_style", 'popup', {                                 // 28
			type: 'select',                                                                                                     // 28
			group: 'OAuth',                                                                                                     // 28
			section: "Custom OAuth: " + name,                                                                                   // 28
			i18nLabel: 'Accounts_OAuth_Custom_Login_Style',                                                                     // 28
			persistent: true,                                                                                                   // 28
			values: [{                                                                                                          // 28
				key: 'redirect',                                                                                                   // 28
				i18nLabel: 'Redirect'                                                                                              // 28
			}, {                                                                                                                // 28
				key: 'popup',                                                                                                      // 28
				i18nLabel: 'Popup'                                                                                                 // 28
			}, {                                                                                                                // 28
				key: '',                                                                                                           // 28
				i18nLabel: 'Default'                                                                                               // 28
			}]                                                                                                                  // 28
		});                                                                                                                  // 28
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-button_label_text", '', {                                // 29
			type: 'string',                                                                                                     // 29
			group: 'OAuth',                                                                                                     // 29
			section: "Custom OAuth: " + name,                                                                                   // 29
			i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Text',                                                               // 29
			persistent: true                                                                                                    // 29
		});                                                                                                                  // 29
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-button_label_color", '#FFFFFF', {                        // 30
			type: 'string',                                                                                                     // 30
			group: 'OAuth',                                                                                                     // 30
			section: "Custom OAuth: " + name,                                                                                   // 30
			i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Color',                                                              // 30
			persistent: true                                                                                                    // 30
		});                                                                                                                  // 30
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-button_color", '#13679A', {                              // 31
			type: 'string',                                                                                                     // 31
			group: 'OAuth',                                                                                                     // 31
			section: "Custom OAuth: " + name,                                                                                   // 31
			i18nLabel: 'Accounts_OAuth_Custom_Button_Color',                                                                    // 31
			persistent: true                                                                                                    // 31
		});                                                                                                                  // 31
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-username_field", '', {                                   // 32
			type: 'string',                                                                                                     // 32
			group: 'OAuth',                                                                                                     // 32
			section: "Custom OAuth: " + name,                                                                                   // 32
			i18nLabel: 'Accounts_OAuth_Custom_Username_Field',                                                                  // 32
			persistent: true                                                                                                    // 32
		});                                                                                                                  // 32
		RocketChat.settings.add("Accounts_OAuth_Custom-" + name + "-merge_users", false, {                                   // 33
			type: 'boolean',                                                                                                    // 33
			group: 'OAuth',                                                                                                     // 33
			section: "Custom OAuth: " + name,                                                                                   // 33
			i18nLabel: 'Accounts_OAuth_Custom_Merge_Users',                                                                     // 33
			persistent: true                                                                                                    // 33
		});                                                                                                                  // 33
	}                                                                                                                     // 34
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"refreshOAuthService.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/refreshOAuthService.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	refreshOAuthService: function () {                                                                                    // 2
		if (!Meteor.userId()) {                                                                                              // 3
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 4
				method: 'refreshOAuthService'                                                                                      // 4
			});                                                                                                                 // 4
		}                                                                                                                    // 5
                                                                                                                       //
		if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {                                 // 7
			throw new Meteor.Error('error-action-not-allowed', 'Refresh OAuth Services is not allowed', {                       // 8
				method: 'refreshOAuthService',                                                                                     // 8
				action: 'Refreshing_OAuth_Services'                                                                                // 8
			});                                                                                                                 // 8
		}                                                                                                                    // 9
                                                                                                                       //
		ServiceConfiguration.configurations.remove({});                                                                      // 11
		RocketChat.models.Settings.update({                                                                                  // 13
			_id: /^Accounts_OAuth_.+/                                                                                           // 13
		}, {                                                                                                                 // 13
			$set: {                                                                                                             // 13
				_updatedAt: new Date()                                                                                             // 13
			}                                                                                                                   // 13
		}, {                                                                                                                 // 13
			multi: true                                                                                                         // 13
		});                                                                                                                  // 13
	}                                                                                                                     // 14
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUserToRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	addUserToRoom: function (data) {                                                                                      // 2
		return Meteor.call('addUsersToRoom', {                                                                               // 3
			rid: data.rid,                                                                                                      // 4
			users: [data.username]                                                                                              // 5
		});                                                                                                                  // 3
	}                                                                                                                     // 7
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUsersToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUsersToRoom.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	addUsersToRoom: function () {                                                                                         // 2
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                   // 2
                                                                                                                       //
		// Validate user and room                                                                                            // 3
		if (!Meteor.userId()) {                                                                                              // 4
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 5
				method: 'addUsersToRoom'                                                                                           // 6
			});                                                                                                                 // 5
		}                                                                                                                    // 8
                                                                                                                       //
		if (!Match.test(data.rid, String)) {                                                                                 // 10
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                      // 11
				method: 'addUsersToRoom'                                                                                           // 12
			});                                                                                                                 // 11
		} // Get user and room details                                                                                       // 14
                                                                                                                       //
                                                                                                                       //
		var room = RocketChat.models.Rooms.findOneById(data.rid);                                                            // 17
		var userId = Meteor.userId();                                                                                        // 18
		var user = Meteor.user();                                                                                            // 19
		var userInRoom = Array.isArray(room.usernames) && room.usernames.includes(user.username); // Can't add to direct room ever
                                                                                                                       //
		if (room.t === 'd') {                                                                                                // 23
			throw new Meteor.Error('error-cant-invite-for-direct-room', 'Can\'t invite user to direct rooms', {                 // 24
				method: 'addUsersToRoom'                                                                                           // 25
			});                                                                                                                 // 24
		} // Can add to any room you're in, with permission, otherwise need specific room type permission                    // 27
                                                                                                                       //
                                                                                                                       //
		var canAddUser = false;                                                                                              // 30
                                                                                                                       //
		if (userInRoom && RocketChat.authz.hasPermission(userId, 'add-user-to-joined-room', room._id)) {                     // 31
			canAddUser = true;                                                                                                  // 32
		} else if (room.t === 'c' && RocketChat.authz.hasPermission(userId, 'add-user-to-any-c-room')) {                     // 33
			canAddUser = true;                                                                                                  // 34
		} else if (room.t === 'p' && RocketChat.authz.hasPermission(userId, 'add-user-to-any-p-room')) {                     // 35
			canAddUser = true;                                                                                                  // 36
		} // Adding wasn't allowed                                                                                           // 37
                                                                                                                       //
                                                                                                                       //
		if (!canAddUser) {                                                                                                   // 40
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 41
				method: 'addUsersToRoom'                                                                                           // 42
			});                                                                                                                 // 41
		} // Missing the users to be added                                                                                   // 44
                                                                                                                       //
                                                                                                                       //
		if (!Array.isArray(data.users)) {                                                                                    // 47
			throw new Meteor.Error('error-invalid-arguments', 'Invalid arguments', {                                            // 48
				method: 'addUsersToRoom'                                                                                           // 49
			});                                                                                                                 // 48
		} // Validate each user, then add to room                                                                            // 51
                                                                                                                       //
                                                                                                                       //
		data.users.forEach(function (username) {                                                                             // 54
			var newUser = RocketChat.models.Users.findOneByUsername(username);                                                  // 55
                                                                                                                       //
			if (!newUser) {                                                                                                     // 56
				throw new Meteor.Error('error-invalid-username', 'Invalid username', {                                             // 57
					method: 'addUsersToRoom'                                                                                          // 58
				});                                                                                                                // 57
			}                                                                                                                   // 60
                                                                                                                       //
			RocketChat.addUserToRoom(data.rid, newUser, user);                                                                  // 62
		});                                                                                                                  // 63
		return true;                                                                                                         // 65
	}                                                                                                                     // 66
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/archiveRoom.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	archiveRoom: function (rid) {                                                                                         // 2
		check(rid, String);                                                                                                  // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'archiveRoom'                                                                                              // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		var room = RocketChat.models.Rooms.findOneById(rid);                                                                 // 10
                                                                                                                       //
		if (!room) {                                                                                                         // 12
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                      // 13
				method: 'archiveRoom'                                                                                              // 13
			});                                                                                                                 // 13
		}                                                                                                                    // 14
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'archive-room', room._id)) {                                    // 16
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {                                                  // 17
				method: 'archiveRoom'                                                                                              // 17
			});                                                                                                                 // 17
		}                                                                                                                    // 18
                                                                                                                       //
		if (room.t === 'd') {                                                                                                // 20
			throw new Meteor.Error('error-direct-message-room', 'Direct Messages can not be archived', {                        // 21
				method: 'archiveRoom'                                                                                              // 21
			});                                                                                                                 // 21
		}                                                                                                                    // 22
                                                                                                                       //
		return RocketChat.archiveRoom(rid);                                                                                  // 24
	}                                                                                                                     // 25
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"blockUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/blockUser.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	blockUser: function (_ref) {                                                                                          // 2
		var rid = _ref.rid,                                                                                                  // 2
		    blocked = _ref.blocked;                                                                                          // 2
		check(rid, String);                                                                                                  // 4
		check(blocked, String);                                                                                              // 5
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 7
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 8
				method: 'blockUser'                                                                                                // 8
			});                                                                                                                 // 8
		}                                                                                                                    // 9
                                                                                                                       //
		var subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());                   // 11
		var subscription2 = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, blocked);                          // 12
                                                                                                                       //
		if (!subscription || !subscription2) {                                                                               // 14
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                      // 15
				method: 'blockUser'                                                                                                // 15
			});                                                                                                                 // 15
		}                                                                                                                    // 16
                                                                                                                       //
		RocketChat.models.Subscriptions.setBlockedByRoomId(rid, blocked, Meteor.userId());                                   // 18
		return true;                                                                                                         // 20
	}                                                                                                                     // 21
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkRegistrationSecretURL.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/checkRegistrationSecretURL.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	checkRegistrationSecretURL: function (hash) {                                                                         // 2
		check(hash, String);                                                                                                 // 4
		return hash === RocketChat.settings.get('Accounts_RegistrationForm_SecretURL');                                      // 6
	}                                                                                                                     // 7
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cleanChannelHistory.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/cleanChannelHistory.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	cleanChannelHistory: function (_ref) {                                                                                // 2
		var roomId = _ref.roomId,                                                                                            // 2
		    latest = _ref.latest,                                                                                            // 2
		    oldest = _ref.oldest,                                                                                            // 2
		    inclusive = _ref.inclusive;                                                                                      // 2
		check(roomId, String);                                                                                               // 3
		check(latest, Date);                                                                                                 // 4
		check(oldest, Date);                                                                                                 // 5
		check(inclusive, Boolean);                                                                                           // 6
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 8
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 9
				method: 'cleanChannelHistory'                                                                                      // 9
			});                                                                                                                 // 9
		}                                                                                                                    // 10
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'clean-channel-history')) {                                     // 12
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 13
				method: 'cleanChannelHistory'                                                                                      // 13
			});                                                                                                                 // 13
		}                                                                                                                    // 14
                                                                                                                       //
		if (inclusive) {                                                                                                     // 16
			RocketChat.models.Messages.remove({                                                                                 // 17
				rid: roomId,                                                                                                       // 18
				ts: {                                                                                                              // 19
					$gte: oldest,                                                                                                     // 20
					$lte: latest                                                                                                      // 21
				}                                                                                                                  // 19
			});                                                                                                                 // 17
		} else {                                                                                                             // 24
			RocketChat.models.Messages.remove({                                                                                 // 25
				rid: roomId,                                                                                                       // 26
				ts: {                                                                                                              // 27
					$gt: oldest,                                                                                                      // 28
					$lt: latest                                                                                                       // 29
				}                                                                                                                  // 27
			});                                                                                                                 // 25
		}                                                                                                                    // 32
	}                                                                                                                     // 33
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createChannel.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createChannel.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	createChannel: function (name, members) {                                                                             // 2
		var readOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;                            // 2
		var customFields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                           // 2
		check(name, String);                                                                                                 // 3
		check(members, Match.Optional([String]));                                                                            // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'createChannel'                                                                                            // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-c')) {                                                  // 10
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 11
				method: 'createChannel'                                                                                            // 11
			});                                                                                                                 // 11
		}                                                                                                                    // 12
                                                                                                                       //
		return RocketChat.createRoom('c', name, Meteor.user() && Meteor.user().username, members, readOnly, {                // 14
			customFields: customFields                                                                                          // 14
		});                                                                                                                  // 14
	}                                                                                                                     // 15
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createToken.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createToken.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	createToken: function (userId) {                                                                                      // 2
		if (Meteor.userId() !== userId && !RocketChat.authz.hasPermission(Meteor.userId(), 'user-generate-access-token')) {  // 3
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {                                                  // 4
				method: 'createToken'                                                                                              // 4
			});                                                                                                                 // 4
		}                                                                                                                    // 5
                                                                                                                       //
		var token = Accounts._generateStampedLoginToken();                                                                   // 6
                                                                                                                       //
		Accounts._insertLoginToken(userId, token);                                                                           // 7
                                                                                                                       //
		return {                                                                                                             // 8
			userId: userId,                                                                                                     // 9
			authToken: token.token                                                                                              // 10
		};                                                                                                                   // 8
	}                                                                                                                     // 12
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createPrivateGroup.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createPrivateGroup.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	createPrivateGroup: function (name, members) {                                                                        // 2
		var readOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;                            // 2
		var customFields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                           // 2
		check(name, String);                                                                                                 // 3
		check(members, Match.Optional([String]));                                                                            // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'createPrivateGroup'                                                                                       // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-p')) {                                                  // 10
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 11
				method: 'createPrivateGroup'                                                                                       // 11
			});                                                                                                                 // 11
		}                                                                                                                    // 12
                                                                                                                       //
		return RocketChat.createRoom('p', name, Meteor.user() && Meteor.user().username, members, readOnly, {                // 14
			customFields: customFields                                                                                          // 14
		});                                                                                                                  // 14
	}                                                                                                                     // 15
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var moment = void 0;                                                                                                   // 1
module.watch(require("moment"), {                                                                                      // 1
	"default": function (v) {                                                                                             // 1
		moment = v;                                                                                                          // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
Meteor.methods({                                                                                                       // 3
	deleteMessage: function (message) {                                                                                   // 4
		check(message, Match.ObjectIncluding({                                                                               // 5
			_id: String                                                                                                         // 6
		}));                                                                                                                 // 5
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 8
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 9
				method: 'deleteMessage'                                                                                            // 10
			});                                                                                                                 // 9
		}                                                                                                                    // 12
                                                                                                                       //
		var originalMessage = RocketChat.models.Messages.findOneById(message._id, {                                          // 13
			fields: {                                                                                                           // 14
				u: 1,                                                                                                              // 15
				rid: 1,                                                                                                            // 16
				file: 1                                                                                                            // 17
			}                                                                                                                   // 14
		});                                                                                                                  // 13
                                                                                                                       //
		if (originalMessage == null) {                                                                                       // 20
			throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {                                                 // 21
				method: 'deleteMessage',                                                                                           // 22
				action: 'Delete_message'                                                                                           // 23
			});                                                                                                                 // 21
		}                                                                                                                    // 25
                                                                                                                       //
		var hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'delete-message', originalMessage.rid);          // 26
		var deleteAllowed = RocketChat.settings.get('Message_AllowDeleting');                                                // 27
		var deleteOwn = originalMessage && originalMessage.u && originalMessage.u._id === Meteor.userId();                   // 28
                                                                                                                       //
		if (!(hasPermission || deleteAllowed && deleteOwn)) {                                                                // 29
			throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {                                                 // 30
				method: 'deleteMessage',                                                                                           // 31
				action: 'Delete_message'                                                                                           // 32
			});                                                                                                                 // 30
		}                                                                                                                    // 34
                                                                                                                       //
		var blockDeleteInMinutes = RocketChat.settings.get('Message_AllowDeleting_BlockDeleteInMinutes');                    // 35
                                                                                                                       //
		if (blockDeleteInMinutes != null && blockDeleteInMinutes !== 0) {                                                    // 36
			if (originalMessage.ts == null) {                                                                                   // 37
				return;                                                                                                            // 38
			}                                                                                                                   // 39
                                                                                                                       //
			var msgTs = moment(originalMessage.ts);                                                                             // 40
                                                                                                                       //
			if (msgTs == null) {                                                                                                // 41
				return;                                                                                                            // 42
			}                                                                                                                   // 43
                                                                                                                       //
			var currentTsDiff = moment().diff(msgTs, 'minutes');                                                                // 44
                                                                                                                       //
			if (currentTsDiff > blockDeleteInMinutes) {                                                                         // 45
				throw new Meteor.Error('error-message-deleting-blocked', 'Message deleting is blocked', {                          // 46
					method: 'deleteMessage'                                                                                           // 47
				});                                                                                                                // 46
			}                                                                                                                   // 49
		}                                                                                                                    // 50
                                                                                                                       //
		return RocketChat.deleteMessage(originalMessage, Meteor.user());                                                     // 51
	}                                                                                                                     // 52
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUserOwnAccount.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteUserOwnAccount.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	deleteUserOwnAccount: function (password) {                                                                           // 2
		check(password, String);                                                                                             // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'deleteUserOwnAccount'                                                                                     // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		if (!RocketChat.settings.get('Accounts_AllowDeleteOwnAccount')) {                                                    // 10
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 11
				method: 'deleteUserOwnAccount'                                                                                     // 11
			});                                                                                                                 // 11
		}                                                                                                                    // 12
                                                                                                                       //
		var userId = Meteor.userId();                                                                                        // 14
		var user = RocketChat.models.Users.findOneById(userId);                                                              // 15
                                                                                                                       //
		if (!user) {                                                                                                         // 17
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 18
				method: 'deleteUserOwnAccount'                                                                                     // 18
			});                                                                                                                 // 18
		}                                                                                                                    // 19
                                                                                                                       //
		if (user.services && user.services.password && s.trim(user.services.password.bcrypt)) {                              // 21
			var result = Accounts._checkPassword(user, {                                                                        // 22
				digest: password,                                                                                                  // 22
				algorithm: 'sha-256'                                                                                               // 22
			});                                                                                                                 // 22
                                                                                                                       //
			if (result.error) {                                                                                                 // 23
				throw new Meteor.Error('error-invalid-password', 'Invalid password', {                                             // 24
					method: 'deleteUserOwnAccount'                                                                                    // 24
				});                                                                                                                // 24
			}                                                                                                                   // 25
		} else if (user.username !== s.trim(password)) {                                                                     // 26
			throw new Meteor.Error('error-invalid-username', 'Invalid username', {                                              // 27
				method: 'deleteUserOwnAccount'                                                                                     // 27
			});                                                                                                                 // 27
		}                                                                                                                    // 28
                                                                                                                       //
		Meteor.defer(function () {                                                                                           // 30
			RocketChat.deleteUser(userId);                                                                                      // 31
		});                                                                                                                  // 32
		return true;                                                                                                         // 34
	}                                                                                                                     // 35
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterBadWords.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterBadWords.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Filter = Npm.require('bad-words');                                                                                 // 1
                                                                                                                       //
RocketChat.callbacks.add('beforeSaveMessage', function (message) {                                                     // 3
	if (RocketChat.settings.get('Message_AllowBadWordsFilter')) {                                                         // 5
		var badWordsList = RocketChat.settings.get('Message_BadWordsFilterList');                                            // 6
		var options = void 0; // Add words to the blacklist                                                                  // 7
                                                                                                                       //
		if (!!badWordsList && badWordsList.length) {                                                                         // 10
			options = {                                                                                                         // 11
				list: badWordsList.split(',')                                                                                      // 12
			};                                                                                                                  // 11
		}                                                                                                                    // 14
                                                                                                                       //
		var filter = new Filter(options);                                                                                    // 15
		message.msg = filter.clean(message.msg);                                                                             // 16
	}                                                                                                                     // 17
                                                                                                                       //
	return message;                                                                                                       // 19
}, 1, 'filterBadWords');                                                                                               // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterATAllTag.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterATAllTag.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.callbacks.add('beforeSaveMessage', function (message) {                                                     // 1
	// Test if the message mentions include @all.                                                                         // 2
	if (message.mentions != null && _.pluck(message.mentions, '_id').some(function (item) {                               // 3
		return item === 'all';                                                                                               // 4
	})) {                                                                                                                 // 4
		// Check if the user has permissions to use @all.                                                                    // 6
		if (!RocketChat.authz.hasPermission(message.u._id, 'mention-all')) {                                                 // 7
			// Get the language of the user for the error notification.                                                         // 9
			var language = RocketChat.models.Users.findOneById(message.u._id).language;                                         // 10
                                                                                                                       //
			var action = TAPi18n.__('Notify_all_in_this_room', {}, language); // Add a notification to the chat, informing the user that this
			// action is not allowed.                                                                                           // 14
                                                                                                                       //
                                                                                                                       //
			RocketChat.Notifications.notifyUser(message.u._id, 'message', {                                                     // 15
				_id: Random.id(),                                                                                                  // 16
				rid: message.rid,                                                                                                  // 17
				ts: new Date(),                                                                                                    // 18
				msg: TAPi18n.__('error-action-not-allowed', {                                                                      // 19
					action: action                                                                                                    // 19
				}, language)                                                                                                       // 19
			}); // Also throw to stop propagation of 'sendMessage'.                                                             // 15
                                                                                                                       //
			throw new Meteor.Error('error-action-not-allowed', 'Notify all in this room not allowed', {                         // 23
				method: 'filterATAllTag',                                                                                          // 27
				action: 'Notify_all_in_this_room'                                                                                  // 28
			});                                                                                                                 // 26
		}                                                                                                                    // 31
	}                                                                                                                     // 32
                                                                                                                       //
	return message;                                                                                                       // 34
}, 1, 'filterATAllTag');                                                                                               // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getChannelHistory.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getChannelHistory.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getChannelHistory: function (_ref) {                                                                                  // 2
		var rid = _ref.rid,                                                                                                  // 2
		    latest = _ref.latest,                                                                                            // 2
		    oldest = _ref.oldest,                                                                                            // 2
		    inclusive = _ref.inclusive,                                                                                      // 2
		    _ref$count = _ref.count,                                                                                         // 2
		    count = _ref$count === undefined ? 20 : _ref$count,                                                              // 2
		    unreads = _ref.unreads;                                                                                          // 2
		check(rid, String);                                                                                                  // 3
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 5
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 6
				method: 'getChannelHistory'                                                                                        // 6
			});                                                                                                                 // 6
		}                                                                                                                    // 7
                                                                                                                       //
		var fromUserId = Meteor.userId();                                                                                    // 9
		var room = Meteor.call('canAccessRoom', rid, fromUserId);                                                            // 10
                                                                                                                       //
		if (!room) {                                                                                                         // 11
			return false;                                                                                                       // 12
		} //Make sure they can access the room                                                                               // 13
                                                                                                                       //
                                                                                                                       //
		if (room.t === 'c' && !RocketChat.authz.hasPermission(fromUserId, 'preview-c-room') && room.usernames.indexOf(room.username) === -1) {
			return false;                                                                                                       // 17
		} //Ensure latest is always defined.                                                                                 // 18
                                                                                                                       //
                                                                                                                       //
		if (_.isUndefined(latest)) {                                                                                         // 21
			latest = new Date();                                                                                                // 22
		} //Verify oldest is a date if it exists                                                                             // 23
                                                                                                                       //
                                                                                                                       //
		if (!_.isUndefined(oldest) && !_.isDate(oldest)) {                                                                   // 26
			throw new Meteor.Error('error-invalid-date', 'Invalid date', {                                                      // 27
				method: 'getChannelHistory'                                                                                        // 27
			});                                                                                                                 // 27
		}                                                                                                                    // 28
                                                                                                                       //
		var options = {                                                                                                      // 30
			sort: {                                                                                                             // 31
				ts: -1                                                                                                             // 32
			},                                                                                                                  // 31
			limit: count                                                                                                        // 34
		};                                                                                                                   // 30
                                                                                                                       //
		if (!RocketChat.settings.get('Message_ShowEditedStatus')) {                                                          // 37
			options.fields = {                                                                                                  // 38
				'editedAt': 0                                                                                                      // 38
			};                                                                                                                  // 38
		}                                                                                                                    // 39
                                                                                                                       //
		var records = [];                                                                                                    // 41
                                                                                                                       //
		if (_.isUndefined(oldest) && inclusive) {                                                                            // 42
			records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestampInclusive(rid, latest, options).fetch();     // 43
		} else if (_.isUndefined(oldest) && !inclusive) {                                                                    // 44
			records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestamp(rid, latest, options).fetch();              // 45
		} else if (!_.isUndefined(oldest) && inclusive) {                                                                    // 46
			records = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestampsInclusive(rid, oldest, latest, options).fetch();
		} else {                                                                                                             // 48
			records = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, oldest, latest, options).fetch();    // 49
		}                                                                                                                    // 50
                                                                                                                       //
		var UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;                                         // 52
                                                                                                                       //
		var messages = _.map(records, function (message) {                                                                   // 54
			message.starred = _.findWhere(message.starred, {                                                                    // 55
				_id: fromUserId                                                                                                    // 55
			});                                                                                                                 // 55
                                                                                                                       //
			if (message.u && message.u._id && UI_Use_Real_Name) {                                                               // 56
				var user = RocketChat.models.Users.findOneById(message.u._id);                                                     // 57
				message.u.name = user && user.name;                                                                                // 58
			}                                                                                                                   // 59
                                                                                                                       //
			return message;                                                                                                     // 60
		});                                                                                                                  // 61
                                                                                                                       //
		if (unreads) {                                                                                                       // 63
			var unreadNotLoaded = 0;                                                                                            // 64
			var firstUnread = undefined;                                                                                        // 65
                                                                                                                       //
			if (!_.isUndefined(oldest)) {                                                                                       // 67
				var firstMsg = messages[messages.length - 1];                                                                      // 68
                                                                                                                       //
				if (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {                                                            // 69
					var unreadMessages = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, oldest, firstMsg.ts, {  // 70
						limit: 1,                                                                                                        // 70
						sort: {                                                                                                          // 70
							ts: 1                                                                                                           // 70
						}                                                                                                                // 70
					});                                                                                                               // 70
					firstUnread = unreadMessages.fetch()[0];                                                                          // 71
					unreadNotLoaded = unreadMessages.count();                                                                         // 72
				}                                                                                                                  // 73
			}                                                                                                                   // 74
                                                                                                                       //
			return {                                                                                                            // 76
				messages: messages,                                                                                                // 77
				firstUnread: firstUnread,                                                                                          // 78
				unreadNotLoaded: unreadNotLoaded                                                                                   // 79
			};                                                                                                                  // 76
		}                                                                                                                    // 81
                                                                                                                       //
		return {                                                                                                             // 83
			messages: messages                                                                                                  // 84
		};                                                                                                                   // 83
	}                                                                                                                     // 86
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFullUserData.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getFullUserData.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getFullUserData: function (_ref) {                                                                                    // 2
		var _ref$filter = _ref.filter,                                                                                       // 2
		    filter = _ref$filter === undefined ? '' : _ref$filter,                                                           // 2
		    limit = _ref.limit;                                                                                              // 2
		var result = RocketChat.getFullUserData({                                                                            // 3
			userId: Meteor.userId(),                                                                                            // 3
			filter: filter,                                                                                                     // 3
			limit: limit                                                                                                        // 3
		});                                                                                                                  // 3
                                                                                                                       //
		if (!result) {                                                                                                       // 5
			return result;                                                                                                      // 6
		}                                                                                                                    // 7
                                                                                                                       //
		return result.fetch();                                                                                               // 9
	}                                                                                                                     // 10
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomRoles.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getRoomRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getRoomRoles: function (rid) {                                                                                        // 2
		check(rid, String);                                                                                                  // 4
                                                                                                                       //
		if (!Meteor.userId() && RocketChat.settings.get('Accounts_AllowAnonymousRead') === false) {                          // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'getRoomRoles'                                                                                             // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		check(rid, String);                                                                                                  // 10
		var options = {                                                                                                      // 12
			sort: {                                                                                                             // 13
				'u.username': 1                                                                                                    // 14
			},                                                                                                                  // 13
			fields: {                                                                                                           // 16
				rid: 1,                                                                                                            // 17
				u: 1,                                                                                                              // 18
				roles: 1                                                                                                           // 19
			}                                                                                                                   // 16
		};                                                                                                                   // 12
		var roles = RocketChat.models.Roles.find({                                                                           // 23
			scope: 'Subscriptions',                                                                                             // 23
			description: {                                                                                                      // 23
				$exists: 1,                                                                                                        // 23
				$ne: ''                                                                                                            // 23
			}                                                                                                                   // 23
		}).fetch();                                                                                                          // 23
		return RocketChat.models.Subscriptions.findByRoomIdAndRoles(rid, _.pluck(roles, '_id'), options).fetch();            // 24
	}                                                                                                                     // 25
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getServerInfo.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getServerInfo.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getServerInfo: function () {                                                                                          // 2
		return RocketChat.Info;                                                                                              // 3
	}                                                                                                                     // 4
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserRoles.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getUserRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getUserRoles: function () {                                                                                           // 2
		if (!Meteor.userId()) {                                                                                              // 4
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 5
				method: 'getUserRoles'                                                                                             // 5
			});                                                                                                                 // 5
		}                                                                                                                    // 6
                                                                                                                       //
		var options = {                                                                                                      // 8
			sort: {                                                                                                             // 9
				'username': 1                                                                                                      // 10
			},                                                                                                                  // 9
			fields: {                                                                                                           // 12
				username: 1,                                                                                                       // 13
				roles: 1                                                                                                           // 14
			}                                                                                                                   // 12
		};                                                                                                                   // 8
		var roles = RocketChat.models.Roles.find({                                                                           // 18
			scope: 'Users',                                                                                                     // 18
			description: {                                                                                                      // 18
				$exists: 1,                                                                                                        // 18
				$ne: ''                                                                                                            // 18
			}                                                                                                                   // 18
		}).fetch();                                                                                                          // 18
                                                                                                                       //
		var roleIds = _.pluck(roles, '_id'); // Security issue: we should not send all user's roles to all clients, only the 'public' roles
		// We must remove all roles that are not part of the query from the returned users                                   // 22
                                                                                                                       //
                                                                                                                       //
		var users = RocketChat.models.Users.findUsersInRoles(roleIds, null, options).fetch();                                // 23
                                                                                                                       //
		for (var _iterator = users, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
			var _ref;                                                                                                           // 24
                                                                                                                       //
			if (_isArray) {                                                                                                     // 24
				if (_i >= _iterator.length) break;                                                                                 // 24
				_ref = _iterator[_i++];                                                                                            // 24
			} else {                                                                                                            // 24
				_i = _iterator.next();                                                                                             // 24
				if (_i.done) break;                                                                                                // 24
				_ref = _i.value;                                                                                                   // 24
			}                                                                                                                   // 24
                                                                                                                       //
			var user = _ref;                                                                                                    // 24
			user.roles = _.intersection(user.roles, roleIds);                                                                   // 25
		}                                                                                                                    // 26
                                                                                                                       //
		return users;                                                                                                        // 27
	}                                                                                                                     // 28
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"insertOrUpdateUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/insertOrUpdateUser.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	insertOrUpdateUser: function (userData) {                                                                             // 2
		check(userData, Object);                                                                                             // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'insertOrUpdateUser'                                                                                       // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		return RocketChat.saveUser(Meteor.userId(), userData);                                                               // 10
	}                                                                                                                     // 11
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinDefaultChannels.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	joinDefaultChannels: function (silenced) {                                                                            // 2
		check(silenced, Match.Optional(Boolean));                                                                            // 3
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 5
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 6
				method: 'joinDefaultChannels'                                                                                      // 6
			});                                                                                                                 // 6
		}                                                                                                                    // 7
                                                                                                                       //
		this.unblock();                                                                                                      // 9
		return RocketChat.addUserToDefaultChannels(Meteor.user(), silenced);                                                 // 10
	}                                                                                                                     // 11
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinRoom.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	joinRoom: function (rid, code) {                                                                                      // 2
		check(rid, String);                                                                                                  // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'joinRoom'                                                                                                 // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		var room = RocketChat.models.Rooms.findOneById(rid);                                                                 // 10
                                                                                                                       //
		if (!room) {                                                                                                         // 12
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                      // 13
				method: 'joinRoom'                                                                                                 // 13
			});                                                                                                                 // 13
		}                                                                                                                    // 14
                                                                                                                       //
		if (room.t !== 'c' || RocketChat.authz.hasPermission(Meteor.userId(), 'view-c-room') !== true) {                     // 16
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 17
				method: 'joinRoom'                                                                                                 // 17
			});                                                                                                                 // 17
		}                                                                                                                    // 18
                                                                                                                       //
		if (room.joinCodeRequired === true && code !== room.joinCode && !RocketChat.authz.hasPermission(Meteor.userId(), 'join-without-join-code')) {
			throw new Meteor.Error('error-code-invalid', 'Invalid Code', {                                                      // 21
				method: 'joinRoom'                                                                                                 // 21
			});                                                                                                                 // 21
		}                                                                                                                    // 22
                                                                                                                       //
		return RocketChat.addUserToRoom(rid, Meteor.user());                                                                 // 24
	}                                                                                                                     // 25
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"leaveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/leaveRoom.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	leaveRoom: function (rid) {                                                                                           // 2
		check(rid, String);                                                                                                  // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'leaveRoom'                                                                                                // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		this.unblock();                                                                                                      // 10
		var room = RocketChat.models.Rooms.findOneById(rid);                                                                 // 12
		var user = Meteor.user();                                                                                            // 13
                                                                                                                       //
		if (room.t === 'd') {                                                                                                // 15
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 16
				method: 'leaveRoom'                                                                                                // 16
			});                                                                                                                 // 16
		}                                                                                                                    // 17
                                                                                                                       //
		if (!Array.from(room.usernames || []).includes(user.username)) {                                                     // 19
			throw new Meteor.Error('error-user-not-in-room', 'You are not in this room', {                                      // 20
				method: 'leaveRoom'                                                                                                // 20
			});                                                                                                                 // 20
		} // If user is room owner, check if there are other owners. If there isn't anyone else, warn user to set a new owner.
                                                                                                                       //
                                                                                                                       //
		if (RocketChat.authz.hasRole(user._id, 'owner', room._id)) {                                                         // 24
			var numOwners = RocketChat.authz.getUsersInRole('owner', room._id).fetch().length;                                  // 25
                                                                                                                       //
			if (numOwners === 1) {                                                                                              // 26
				throw new Meteor.Error('error-you-are-last-owner', 'You are the last owner. Please set new owner before leaving the room.', {
					method: 'leaveRoom'                                                                                               // 27
				});                                                                                                                // 27
			}                                                                                                                   // 28
		}                                                                                                                    // 29
                                                                                                                       //
		return RocketChat.removeUserFromRoom(rid, Meteor.user());                                                            // 31
	}                                                                                                                     // 32
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeOAuthService.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/removeOAuthService.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	removeOAuthService: function (name) {                                                                                 // 2
		check(name, String);                                                                                                 // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'removeOAuthService'                                                                                       // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {                                 // 10
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 11
				method: 'removeOAuthService'                                                                                       // 11
			});                                                                                                                 // 11
		}                                                                                                                    // 12
                                                                                                                       //
		name = name.toLowerCase().replace(/[^a-z0-9_]/g, '');                                                                // 14
		name = s.capitalize(name);                                                                                           // 15
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name);                                                     // 16
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-url");                                            // 17
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-token_path");                                     // 18
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-identity_path");                                  // 19
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-authorize_path");                                 // 20
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-scope");                                          // 21
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-token_sent_via");                                 // 22
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-id");                                             // 23
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-secret");                                         // 24
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-button_label_text");                              // 25
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-button_label_color");                             // 26
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-button_color");                                   // 27
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-login_style");                                    // 28
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-username_field");                                 // 29
		RocketChat.settings.removeById("Accounts_OAuth_Custom-" + name + "-merge_users");                                    // 30
	}                                                                                                                     // 31
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"restartServer.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/restartServer.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	restart_server: function () {                                                                                         // 2
		if (!Meteor.userId()) {                                                                                              // 3
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 4
				method: 'restart_server'                                                                                           // 4
			});                                                                                                                 // 4
		}                                                                                                                    // 5
                                                                                                                       //
		if (RocketChat.authz.hasRole(Meteor.userId(), 'admin') !== true) {                                                   // 7
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 8
				method: 'restart_server'                                                                                           // 8
			});                                                                                                                 // 8
		}                                                                                                                    // 9
                                                                                                                       //
		Meteor.setTimeout(function () {                                                                                      // 11
			Meteor.setTimeout(function () {                                                                                     // 12
				console.warn('Call to process.exit() timed out, aborting.');                                                       // 13
				process.abort();                                                                                                   // 14
			}, 1000);                                                                                                           // 15
			process.exit(1);                                                                                                    // 17
		}, 1000);                                                                                                            // 18
		return {                                                                                                             // 21
			message: 'The_server_will_restart_in_s_seconds',                                                                    // 22
			params: [2]                                                                                                         // 23
		};                                                                                                                   // 21
	}                                                                                                                     // 25
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"robotMethods.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/robotMethods.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	'robot.modelCall': function (model, method, args) {                                                                   // 2
		check(model, String);                                                                                                // 3
		check(method, String);                                                                                               // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 5
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 6
				method: 'robot.modelCall'                                                                                          // 7
			});                                                                                                                 // 6
		}                                                                                                                    // 9
                                                                                                                       //
		if (!RocketChat.authz.hasRole(Meteor.userId(), 'robot')) {                                                           // 10
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 11
				method: 'robot.modelCall'                                                                                          // 12
			});                                                                                                                 // 11
		}                                                                                                                    // 14
                                                                                                                       //
		var m = RocketChat.models[model];                                                                                    // 15
                                                                                                                       //
		if (!m || !_.isFunction(m[method])) {                                                                                // 17
			throw new Meteor.Error('error-invalid-method', 'Invalid method', {                                                  // 18
				method: 'robot.modelCall'                                                                                          // 19
			});                                                                                                                 // 18
		}                                                                                                                    // 21
                                                                                                                       //
		var cursor = RocketChat.models[model][method].apply(RocketChat.models[model], args);                                 // 22
		return cursor && cursor.fetch ? cursor.fetch() : cursor;                                                             // 23
	}                                                                                                                     // 24
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveSetting.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/saveSetting.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	saveSetting: function (_id, value, editor) {                                                                          // 2
		if (Meteor.userId() === null) {                                                                                      // 3
			throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {                             // 4
				method: 'saveSetting'                                                                                              // 5
			});                                                                                                                 // 4
		}                                                                                                                    // 7
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'edit-privileged-setting')) {                                   // 9
			throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {                             // 10
				method: 'saveSetting'                                                                                              // 11
			});                                                                                                                 // 10
		} //Verify the _id passed in is a string.                                                                            // 13
                                                                                                                       //
                                                                                                                       //
		check(_id, String);                                                                                                  // 16
		var setting = RocketChat.models.Settings.db.findOneById(_id); //Verify the value is what it should be                // 18
                                                                                                                       //
		switch (setting.type) {                                                                                              // 21
			case 'roomPick':                                                                                                    // 22
				check(value, [Object]);                                                                                            // 23
				break;                                                                                                             // 24
                                                                                                                       //
			case 'boolean':                                                                                                     // 25
				check(value, Boolean);                                                                                             // 26
				break;                                                                                                             // 27
                                                                                                                       //
			case 'int':                                                                                                         // 28
				check(value, Number);                                                                                              // 29
				break;                                                                                                             // 30
                                                                                                                       //
			default:                                                                                                            // 31
				check(value, String);                                                                                              // 32
				break;                                                                                                             // 33
		}                                                                                                                    // 21
                                                                                                                       //
		RocketChat.settings.updateById(_id, value, editor);                                                                  // 36
		return true;                                                                                                         // 37
	}                                                                                                                     // 38
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendInvitationEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendInvitationEmail.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 2
	sendInvitationEmail: function (emails) {                                                                              // 3
		var _this = this;                                                                                                    // 3
                                                                                                                       //
		check(emails, [String]);                                                                                             // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 5
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 6
				method: 'sendInvitationEmail'                                                                                      // 7
			});                                                                                                                 // 6
		}                                                                                                                    // 9
                                                                                                                       //
		if (!RocketChat.authz.hasRole(Meteor.userId(), 'admin')) {                                                           // 10
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 11
				method: 'sendInvitationEmail'                                                                                      // 12
			});                                                                                                                 // 11
		}                                                                                                                    // 14
                                                                                                                       //
		var rfcMailPattern = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                                                                                                                       //
		var validEmails = _.compact(_.map(emails, function (email) {                                                         // 16
			if (rfcMailPattern.test(email)) {                                                                                   // 17
				return email;                                                                                                      // 18
			}                                                                                                                   // 19
		}));                                                                                                                 // 20
                                                                                                                       //
		var header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                         // 21
		var footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                         // 22
		var html = void 0;                                                                                                   // 23
		var subject = void 0;                                                                                                // 24
		var user = Meteor.user();                                                                                            // 25
		var lng = user.language || RocketChat.settings.get('language') || 'en';                                              // 26
                                                                                                                       //
		if (RocketChat.settings.get('Invitation_Customized')) {                                                              // 27
			subject = RocketChat.settings.get('Invitation_Subject');                                                            // 28
			html = RocketChat.settings.get('Invitation_HTML');                                                                  // 29
		} else {                                                                                                             // 30
			subject = TAPi18n.__('Invitation_Subject_Default', {                                                                // 31
				lng: lng                                                                                                           // 32
			});                                                                                                                 // 31
			html = TAPi18n.__('Invitation_HTML_Default', {                                                                      // 34
				lng: lng                                                                                                           // 35
			});                                                                                                                 // 34
		}                                                                                                                    // 37
                                                                                                                       //
		subject = RocketChat.placeholders.replace(subject);                                                                  // 38
		validEmails.forEach(function (email) {                                                                               // 39
			_this.unblock();                                                                                                    // 40
                                                                                                                       //
			html = RocketChat.placeholders.replace(html, {                                                                      // 41
				email: email                                                                                                       // 42
			});                                                                                                                 // 41
                                                                                                                       //
			try {                                                                                                               // 44
				Email.send({                                                                                                       // 45
					to: email,                                                                                                        // 46
					from: RocketChat.settings.get('From_Email'),                                                                      // 47
					subject: subject,                                                                                                 // 48
					html: header + html + footer                                                                                      // 49
				});                                                                                                                // 45
			} catch (_ref) {                                                                                                    // 51
				var message = _ref.message;                                                                                        // 51
				throw new Meteor.Error('error-email-send-failed', "Error trying to send email: " + message, {                      // 52
					method: 'sendInvitationEmail',                                                                                    // 53
					message: message                                                                                                  // 54
				});                                                                                                                // 52
			}                                                                                                                   // 56
		});                                                                                                                  // 57
		return validEmails;                                                                                                  // 58
	}                                                                                                                     // 59
});                                                                                                                    // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.coffee.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendMessage.coffee.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var moment = void 0;                                                                                                   // 1
module.import('moment', {                                                                                              // 1
  "default": function (v) {                                                                                            // 1
    moment = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
                                                                                                                       //
var indexOf = [].indexOf || function (item) {                                                                          // 1
  for (var i = 0, l = this.length; i < l; i++) {                                                                       // 1
    if (i in this && this[i] === item) return i;                                                                       // 1
  }                                                                                                                    // 1
                                                                                                                       //
  return -1;                                                                                                           // 1
};                                                                                                                     // 1
                                                                                                                       //
Meteor.methods({                                                                                                       // 3
  sendMessage: function (message) {                                                                                    // 4
    var ref, ref1, room, subscription, tsDiff, user;                                                                   // 6
    check(message, Object);                                                                                            // 6
                                                                                                                       //
    if (!Meteor.userId()) {                                                                                            // 8
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 9
        method: 'sendMessage'                                                                                          // 9
      });                                                                                                              // 9
    }                                                                                                                  // 13
                                                                                                                       //
    if (message.ts) {                                                                                                  // 11
      tsDiff = Math.abs(moment(message.ts).diff());                                                                    // 12
                                                                                                                       //
      if (tsDiff > 60000) {                                                                                            // 13
        throw new Meteor.Error('error-message-ts-out-of-sync', 'Message timestamp is out of sync', {                   // 14
          method: 'sendMessage',                                                                                       // 14
          message_ts: message.ts,                                                                                      // 14
          server_ts: new Date().getTime()                                                                              // 14
        });                                                                                                            // 14
      } else if (tsDiff > 10000) {                                                                                     // 13
        message.ts = new Date();                                                                                       // 16
      }                                                                                                                // 11
    } else {                                                                                                           // 11
      message.ts = new Date();                                                                                         // 18
    }                                                                                                                  // 27
                                                                                                                       //
    if (((ref = message.msg) != null ? ref.length : void 0) > RocketChat.settings.get('Message_MaxAllowedSize')) {     // 20
      throw new Meteor.Error('error-message-size-exceeded', 'Message size exceeds Message_MaxAllowedSize', {           // 21
        method: 'sendMessage'                                                                                          // 21
      });                                                                                                              // 21
    }                                                                                                                  // 32
                                                                                                                       //
    user = RocketChat.models.Users.findOneById(Meteor.userId(), {                                                      // 23
      fields: {                                                                                                        // 23
        username: 1,                                                                                                   // 23
        name: 1                                                                                                        // 23
      }                                                                                                                // 23
    });                                                                                                                // 23
    room = Meteor.call('canAccessRoom', message.rid, user._id);                                                        // 25
                                                                                                                       //
    if (!room) {                                                                                                       // 27
      return false;                                                                                                    // 28
    }                                                                                                                  // 42
                                                                                                                       //
    subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, Meteor.userId());             // 30
                                                                                                                       //
    if (subscription && (subscription.blocked || subscription.blocker)) {                                              // 31
      RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {                                                // 32
        _id: Random.id(),                                                                                              // 33
        rid: room._id,                                                                                                 // 34
        ts: new Date(),                                                                                                // 35
        msg: TAPi18n.__('room_is_blocked', {}, user.language)                                                          // 36
      });                                                                                                              // 32
      return false;                                                                                                    // 38
    }                                                                                                                  // 52
                                                                                                                       //
    if (ref1 = user.username, indexOf.call(room.muted || [], ref1) >= 0) {                                             // 40
      RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {                                                // 41
        _id: Random.id(),                                                                                              // 42
        rid: room._id,                                                                                                 // 43
        ts: new Date(),                                                                                                // 44
        msg: TAPi18n.__('You_have_been_muted', {}, user.language)                                                      // 45
      });                                                                                                              // 41
      return false;                                                                                                    // 47
    }                                                                                                                  // 61
                                                                                                                       //
    if (message.alias == null && RocketChat.settings.get('Message_SetNameToAliasEnabled')) {                           // 49
      message.alias = user.name;                                                                                       // 49
    }                                                                                                                  // 64
                                                                                                                       //
    if (Meteor.settings["public"].sandstorm) {                                                                         // 50
      message.sandstormSessionId = this.connection.sandstormSessionId();                                               // 51
    }                                                                                                                  // 67
                                                                                                                       //
    RocketChat.metrics.messagesSent.inc();                                                                             // 53
    return RocketChat.sendMessage(user, message, room);                                                                // 69
  }                                                                                                                    // 4
});                                                                                                                    // 4
DDPRateLimiter.addRule({                                                                                               // 57
  type: 'method',                                                                                                      // 58
  name: 'sendMessage',                                                                                                 // 59
  userId: function (userId) {                                                                                          // 60
    var user;                                                                                                          // 61
    user = RocketChat.models.Users.findOneById(userId);                                                                // 61
                                                                                                                       //
    if (!(user != null ? user.roles : void 0)) {                                                                       // 62
      return true;                                                                                                     // 62
    }                                                                                                                  // 81
                                                                                                                       //
    return indexOf.call(user.roles, 'bot') < 0;                                                                        // 63
  }                                                                                                                    // 58
}, 5, 1000);                                                                                                           // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendSMTPTestEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendSMTPTestEmail.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	sendSMTPTestEmail: function () {                                                                                      // 2
		if (!Meteor.userId()) {                                                                                              // 3
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 4
				method: 'sendSMTPTestEmail'                                                                                        // 5
			});                                                                                                                 // 4
		}                                                                                                                    // 7
                                                                                                                       //
		var user = Meteor.user();                                                                                            // 8
                                                                                                                       //
		if (!user.emails && !user.emails[0] && user.emails[0].address) {                                                     // 9
			throw new Meteor.Error('error-invalid-email', 'Invalid email', {                                                    // 10
				method: 'sendSMTPTestEmail'                                                                                        // 11
			});                                                                                                                 // 10
		}                                                                                                                    // 13
                                                                                                                       //
		this.unblock();                                                                                                      // 14
		var header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                         // 15
		var footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                         // 16
		console.log("Sending test email to " + user.emails[0].address);                                                      // 17
                                                                                                                       //
		try {                                                                                                                // 18
			Email.send({                                                                                                        // 19
				to: user.emails[0].address,                                                                                        // 20
				from: RocketChat.settings.get('From_Email'),                                                                       // 21
				subject: 'SMTP Test Email',                                                                                        // 22
				html: header + "<p>You have successfully sent an email</p>" + footer                                               // 23
			});                                                                                                                 // 19
		} catch (_ref) {                                                                                                     // 25
			var message = _ref.message;                                                                                         // 25
			throw new Meteor.Error('error-email-send-failed', "Error trying to send email: " + message, {                       // 26
				method: 'sendSMTPTestEmail',                                                                                       // 27
				message: message                                                                                                   // 28
			});                                                                                                                 // 26
		}                                                                                                                    // 30
                                                                                                                       //
		return {                                                                                                             // 31
			message: 'Your_mail_was_sent_to_s',                                                                                 // 32
			params: [user.emails[0].address]                                                                                    // 33
		};                                                                                                                   // 31
	}                                                                                                                     // 35
});                                                                                                                    // 1
DDPRateLimiter.addRule({                                                                                               // 38
	type: 'method',                                                                                                       // 39
	name: 'sendSMTPTestEmail',                                                                                            // 40
	userId: function () {                                                                                                 // 41
		return true;                                                                                                         // 42
	}                                                                                                                     // 43
}, 1, 1000);                                                                                                           // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setAdminStatus.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setAdminStatus.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	setAdminStatus: function (userId, admin) {                                                                            // 2
		check(userId, String);                                                                                               // 4
		check(admin, Match.Optional(Boolean));                                                                               // 5
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 7
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 8
				method: 'setAdminStatus'                                                                                           // 8
			});                                                                                                                 // 8
		}                                                                                                                    // 9
                                                                                                                       //
		if (RocketChat.authz.hasPermission(Meteor.userId(), 'assign-admin-role') !== true) {                                 // 11
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 12
				method: 'setAdminStatus'                                                                                           // 12
			});                                                                                                                 // 12
		}                                                                                                                    // 13
                                                                                                                       //
		var user = Meteor.users.findOne({                                                                                    // 15
			_id: userId                                                                                                         // 15
		}, {                                                                                                                 // 15
			fields: {                                                                                                           // 15
				username: 1                                                                                                        // 15
			}                                                                                                                   // 15
		});                                                                                                                  // 15
                                                                                                                       //
		if (admin) {                                                                                                         // 17
			return Meteor.call('authorization:addUserToRole', 'admin', user.username);                                          // 18
		} else {                                                                                                             // 19
			return Meteor.call('authorization:removeUserFromRole', 'admin', user.username);                                     // 20
		}                                                                                                                    // 21
	}                                                                                                                     // 22
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setRealName.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	setRealName: function (name) {                                                                                        // 2
		check(name, String);                                                                                                 // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'setRealName'                                                                                              // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		if (!RocketChat.setRealName(Meteor.userId(), name)) {                                                                // 10
			throw new Meteor.Error('error-could-not-change-name', 'Could not change name', {                                    // 11
				method: 'setRealName'                                                                                              // 11
			});                                                                                                                 // 11
		}                                                                                                                    // 12
                                                                                                                       //
		return name;                                                                                                         // 14
	}                                                                                                                     // 15
});                                                                                                                    // 1
RocketChat.RateLimiter.limitMethod('setRealName', 1, 1000, {                                                           // 18
	userId: function () {                                                                                                 // 19
		return true;                                                                                                         // 19
	}                                                                                                                     // 19
});                                                                                                                    // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setUsername.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	setUsername: function (username) {                                                                                    // 2
		var param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                  // 2
		var joinDefaultChannelsSilenced = param.joinDefaultChannelsSilenced;                                                 // 2
		check(username, String);                                                                                             // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'setUsername'                                                                                              // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		var user = Meteor.user();                                                                                            // 10
                                                                                                                       //
		if (user.username && !RocketChat.settings.get('Accounts_AllowUsernameChange')) {                                     // 12
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                        // 13
				method: 'setUsername'                                                                                              // 13
			});                                                                                                                 // 13
		}                                                                                                                    // 14
                                                                                                                       //
		if (user.username === username) {                                                                                    // 16
			return username;                                                                                                    // 17
		}                                                                                                                    // 18
                                                                                                                       //
		var nameValidation = void 0;                                                                                         // 20
                                                                                                                       //
		try {                                                                                                                // 21
			nameValidation = new RegExp("^" + RocketChat.settings.get('UTF8_Names_Validation') + "$");                          // 22
		} catch (error) {                                                                                                    // 23
			nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                   // 24
		}                                                                                                                    // 25
                                                                                                                       //
		if (!nameValidation.test(username)) {                                                                                // 27
			throw new Meteor.Error('username-invalid', _.escape(username) + " is not a valid username, use only letters, numbers, dots, hyphens and underscores");
		}                                                                                                                    // 29
                                                                                                                       //
		if (user.username !== undefined) {                                                                                   // 31
			if (!username.toLowerCase() === user.username.toLowerCase()) {                                                      // 32
				if (!RocketChat.checkUsernameAvailability(username)) {                                                             // 33
					throw new Meteor.Error('error-field-unavailable', "<strong>" + _.escape(username) + "</strong> is already in use :(", {
						method: 'setUsername',                                                                                           // 34
						field: username                                                                                                  // 34
					});                                                                                                               // 34
				}                                                                                                                  // 35
			}                                                                                                                   // 36
		} else if (!RocketChat.checkUsernameAvailability(username)) {                                                        // 37
			throw new Meteor.Error('error-field-unavailable', "<strong>" + _.escape(username) + "</strong> is already in use :(", {
				method: 'setUsername',                                                                                             // 38
				field: username                                                                                                    // 38
			});                                                                                                                 // 38
		}                                                                                                                    // 39
                                                                                                                       //
		if (!RocketChat.setUsername(user._id, username)) {                                                                   // 41
			throw new Meteor.Error('error-could-not-change-username', 'Could not change username', {                            // 42
				method: 'setUsername'                                                                                              // 42
			});                                                                                                                 // 42
		}                                                                                                                    // 43
                                                                                                                       //
		if (!user.username) {                                                                                                // 45
			Meteor.runAsUser(user._id, function () {                                                                            // 46
				return Meteor.call('joinDefaultChannels', joinDefaultChannelsSilenced);                                            // 46
			});                                                                                                                 // 46
			Meteor.defer(function () {                                                                                          // 47
				return RocketChat.callbacks.run('afterCreateUser', RocketChat.models.Users.findOneById(user._id));                 // 48
			});                                                                                                                 // 49
		}                                                                                                                    // 50
                                                                                                                       //
		return username;                                                                                                     // 52
	}                                                                                                                     // 53
});                                                                                                                    // 1
RocketChat.RateLimiter.limitMethod('setUsername', 1, 1000, {                                                           // 56
	userId: function () {                                                                                                 // 57
		return true;                                                                                                         // 57
	}                                                                                                                     // 57
});                                                                                                                    // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setEmail.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	setEmail: function (email) {                                                                                          // 2
		check(email, String);                                                                                                // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'setEmail'                                                                                                 // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		var user = Meteor.user();                                                                                            // 10
                                                                                                                       //
		if (!RocketChat.settings.get('Accounts_AllowEmailChange')) {                                                         // 12
			throw new Meteor.Error('error-action-not-allowed', 'Changing email is not allowed', {                               // 13
				method: 'setEmail',                                                                                                // 13
				action: 'Changing_email'                                                                                           // 13
			});                                                                                                                 // 13
		}                                                                                                                    // 14
                                                                                                                       //
		if (user.emails && user.emails[0] && user.emails[0].address === email) {                                             // 16
			return email;                                                                                                       // 17
		}                                                                                                                    // 18
                                                                                                                       //
		if (!RocketChat.setEmail(user._id, email)) {                                                                         // 20
			throw new Meteor.Error('error-could-not-change-email', 'Could not change email', {                                  // 21
				method: 'setEmail'                                                                                                 // 21
			});                                                                                                                 // 21
		}                                                                                                                    // 22
                                                                                                                       //
		return email;                                                                                                        // 24
	}                                                                                                                     // 25
});                                                                                                                    // 1
RocketChat.RateLimiter.limitMethod('setEmail', 1, 1000, {                                                              // 28
	userId: function () /*userId*/{                                                                                       // 29
		return true;                                                                                                         // 29
	}                                                                                                                     // 29
});                                                                                                                    // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unarchiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	unarchiveRoom: function (rid) {                                                                                       // 2
		check(rid, String);                                                                                                  // 4
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 6
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 7
				method: 'unarchiveRoom'                                                                                            // 7
			});                                                                                                                 // 7
		}                                                                                                                    // 8
                                                                                                                       //
		var room = RocketChat.models.Rooms.findOneById(rid);                                                                 // 10
                                                                                                                       //
		if (!room) {                                                                                                         // 12
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                      // 13
				method: 'unarchiveRoom'                                                                                            // 13
			});                                                                                                                 // 13
		}                                                                                                                    // 14
                                                                                                                       //
		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'unarchive-room', room._id)) {                                  // 16
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {                                                  // 17
				method: 'unarchiveRoom'                                                                                            // 17
			});                                                                                                                 // 17
		}                                                                                                                    // 18
                                                                                                                       //
		return RocketChat.unarchiveRoom(rid);                                                                                // 20
	}                                                                                                                     // 21
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unblockUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unblockUser.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	unblockUser: function (_ref) {                                                                                        // 2
		var rid = _ref.rid,                                                                                                  // 2
		    blocked = _ref.blocked;                                                                                          // 2
		check(rid, String);                                                                                                  // 4
		check(blocked, String);                                                                                              // 5
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 7
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 8
				method: 'blockUser'                                                                                                // 8
			});                                                                                                                 // 8
		}                                                                                                                    // 9
                                                                                                                       //
		var subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());                   // 11
		var subscription2 = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, blocked);                          // 12
                                                                                                                       //
		if (!subscription || !subscription2) {                                                                               // 14
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                      // 15
				method: 'blockUser'                                                                                                // 15
			});                                                                                                                 // 15
		}                                                                                                                    // 16
                                                                                                                       //
		RocketChat.models.Subscriptions.unsetBlockedByRoomId(rid, blocked, Meteor.userId());                                 // 18
		return true;                                                                                                         // 20
	}                                                                                                                     // 21
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/updateMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var moment = void 0;                                                                                                   // 1
module.watch(require("moment"), {                                                                                      // 1
	"default": function (v) {                                                                                             // 1
		moment = v;                                                                                                          // 1
	}                                                                                                                     // 1
}, 0);                                                                                                                 // 1
Meteor.methods({                                                                                                       // 3
	updateMessage: function (message) {                                                                                   // 4
		check(message, Match.ObjectIncluding({                                                                               // 6
			_id: String                                                                                                         // 6
		}));                                                                                                                 // 6
                                                                                                                       //
		if (!Meteor.userId()) {                                                                                              // 8
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                      // 9
				method: 'updateMessage'                                                                                            // 9
			});                                                                                                                 // 9
		}                                                                                                                    // 10
                                                                                                                       //
		var originalMessage = RocketChat.models.Messages.findOneById(message._id);                                           // 12
                                                                                                                       //
		if (!originalMessage || !originalMessage._id) {                                                                      // 14
			return;                                                                                                             // 15
		}                                                                                                                    // 16
                                                                                                                       //
		var hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'edit-message', message.rid);                    // 18
		var editAllowed = RocketChat.settings.get('Message_AllowEditing');                                                   // 19
		var editOwn = originalMessage.u && originalMessage.u._id === Meteor.userId();                                        // 20
                                                                                                                       //
		if (!hasPermission && (!editAllowed || !editOwn)) {                                                                  // 22
			throw new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {                                 // 23
				method: 'updateMessage',                                                                                           // 23
				action: 'Message_editing'                                                                                          // 23
			});                                                                                                                 // 23
		}                                                                                                                    // 24
                                                                                                                       //
		var blockEditInMinutes = RocketChat.settings.get('Message_AllowEditing_BlockEditInMinutes');                         // 26
                                                                                                                       //
		if (Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {                                            // 27
			var currentTsDiff = void 0;                                                                                         // 28
			var msgTs = void 0;                                                                                                 // 29
                                                                                                                       //
			if (Match.test(originalMessage.ts, Number)) {                                                                       // 31
				msgTs = moment(originalMessage.ts);                                                                                // 32
			}                                                                                                                   // 33
                                                                                                                       //
			if (msgTs) {                                                                                                        // 34
				currentTsDiff = moment().diff(msgTs, 'minutes');                                                                   // 35
			}                                                                                                                   // 36
                                                                                                                       //
			if (currentTsDiff > blockEditInMinutes) {                                                                           // 37
				throw new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {                            // 38
					method: 'updateMessage'                                                                                           // 38
				});                                                                                                                // 38
			}                                                                                                                   // 39
		}                                                                                                                    // 40
                                                                                                                       //
		if (originalMessage.attachments) {                                                                                   // 42
			if (originalMessage.attachments[0].description !== undefined) {                                                     // 43
				message.attachments = originalMessage.attachments;                                                                 // 44
				message.attachments[0].description = message.msg;                                                                  // 45
				message.msg = originalMessage.msg;                                                                                 // 46
			}                                                                                                                   // 47
		}                                                                                                                    // 48
                                                                                                                       //
		message.u = originalMessage.u;                                                                                       // 50
		return RocketChat.updateMessage(message, Meteor.user());                                                             // 52
	}                                                                                                                     // 53
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"defaultRoomTypes.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/startup/defaultRoomTypes.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals openRoom */RocketChat.roomTypes.add(null, 0, {                                                              // 1
	template: 'starredRooms',                                                                                             // 3
	icon: 'icon-star'                                                                                                     // 4
});                                                                                                                    // 2
RocketChat.roomTypes.add('c', 10, {                                                                                    // 7
	template: 'channels',                                                                                                 // 8
	icon: 'icon-hash',                                                                                                    // 9
	route: {                                                                                                              // 10
		name: 'channel',                                                                                                     // 11
		path: '/channel/:name',                                                                                              // 12
		action: function (params) {                                                                                          // 13
			return openRoom('c', params.name);                                                                                  // 14
		}                                                                                                                    // 15
	},                                                                                                                    // 10
	findRoom: function (identifier) {                                                                                     // 18
		var query = {                                                                                                        // 19
			t: 'c',                                                                                                             // 20
			name: identifier                                                                                                    // 21
		};                                                                                                                   // 19
		return ChatRoom.findOne(query);                                                                                      // 23
	},                                                                                                                    // 24
	roomName: function (roomData) {                                                                                       // 26
		return roomData.name;                                                                                                // 27
	},                                                                                                                    // 28
	condition: function () {                                                                                              // 30
		return RocketChat.authz.hasAtLeastOnePermission(['view-c-room', 'view-joined-room']) || RocketChat.settings.get('Accounts_AllowAnonymousRead') === true;
	},                                                                                                                    // 32
	showJoinLink: function (roomId) {                                                                                     // 34
		return !!ChatRoom.findOne({                                                                                          // 35
			_id: roomId,                                                                                                        // 35
			t: 'c'                                                                                                              // 35
		});                                                                                                                  // 35
	}                                                                                                                     // 36
});                                                                                                                    // 7
RocketChat.roomTypes.add('d', 20, {                                                                                    // 39
	template: 'directMessages',                                                                                           // 40
	icon: 'icon-at',                                                                                                      // 41
	route: {                                                                                                              // 42
		name: 'direct',                                                                                                      // 43
		path: '/direct/:username',                                                                                           // 44
		action: function (params) {                                                                                          // 45
			return openRoom('d', params.username);                                                                              // 46
		},                                                                                                                   // 47
		link: function (sub) {                                                                                               // 48
			return {                                                                                                            // 49
				username: sub.name                                                                                                 // 49
			};                                                                                                                  // 49
		}                                                                                                                    // 50
	},                                                                                                                    // 42
	findRoom: function (identifier) {                                                                                     // 53
		var query = {                                                                                                        // 54
			t: 'd',                                                                                                             // 55
			name: identifier                                                                                                    // 56
		};                                                                                                                   // 54
		var subscription = ChatSubscription.findOne(query);                                                                  // 59
                                                                                                                       //
		if (subscription && subscription.rid) {                                                                              // 60
			return ChatRoom.findOne(subscription.rid);                                                                          // 61
		}                                                                                                                    // 62
	},                                                                                                                    // 63
	roomName: function (roomData) {                                                                                       // 65
		var subscription = ChatSubscription.findOne({                                                                        // 66
			rid: roomData._id                                                                                                   // 66
		}, {                                                                                                                 // 66
			fields: {                                                                                                           // 66
				name: 1,                                                                                                           // 66
				fname: 1                                                                                                           // 66
			}                                                                                                                   // 66
		});                                                                                                                  // 66
                                                                                                                       //
		if (!subscription) {                                                                                                 // 67
			return '';                                                                                                          // 68
		}                                                                                                                    // 69
                                                                                                                       //
		if (RocketChat.settings.get('UI_Use_Real_Name') && subscription.fname) {                                             // 70
			return subscription.fname;                                                                                          // 71
		}                                                                                                                    // 72
                                                                                                                       //
		return subscription.name;                                                                                            // 74
	},                                                                                                                    // 75
	secondaryRoomName: function (roomData) {                                                                              // 77
		if (RocketChat.settings.get('UI_Use_Real_Name')) {                                                                   // 78
			var subscription = ChatSubscription.findOne({                                                                       // 79
				rid: roomData._id                                                                                                  // 79
			}, {                                                                                                                // 79
				fields: {                                                                                                          // 79
					name: 1                                                                                                           // 79
				}                                                                                                                  // 79
			});                                                                                                                 // 79
			return subscription && subscription.name;                                                                           // 80
		}                                                                                                                    // 81
	},                                                                                                                    // 82
	condition: function () {                                                                                              // 84
		return RocketChat.authz.hasAtLeastOnePermission(['view-d-room', 'view-joined-room']);                                // 85
	},                                                                                                                    // 86
	getUserStatus: function (roomId) {                                                                                    // 88
		var subscription = RocketChat.models.Subscriptions.findOne({                                                         // 89
			rid: roomId                                                                                                         // 89
		});                                                                                                                  // 89
                                                                                                                       //
		if (subscription == null) {                                                                                          // 90
			return;                                                                                                             // 90
		}                                                                                                                    // 90
                                                                                                                       //
		return Session.get("user_" + subscription.name + "_status");                                                         // 92
	}                                                                                                                     // 93
});                                                                                                                    // 39
RocketChat.roomTypes.add('p', 30, {                                                                                    // 96
	template: 'privateGroups',                                                                                            // 97
	icon: 'icon-lock',                                                                                                    // 98
	route: {                                                                                                              // 99
		name: 'group',                                                                                                       // 100
		path: '/group/:name',                                                                                                // 101
		action: function (params) {                                                                                          // 102
			return openRoom('p', params.name);                                                                                  // 103
		}                                                                                                                    // 104
	},                                                                                                                    // 99
	findRoom: function (identifier) {                                                                                     // 107
		var query = {                                                                                                        // 108
			t: 'p',                                                                                                             // 109
			name: identifier                                                                                                    // 110
		};                                                                                                                   // 108
		return ChatRoom.findOne(query);                                                                                      // 112
	},                                                                                                                    // 113
	roomName: function (roomData) {                                                                                       // 115
		return roomData.name;                                                                                                // 116
	},                                                                                                                    // 117
	condition: function () {                                                                                              // 119
		return RocketChat.authz.hasAllPermission('view-p-room');                                                             // 120
	}                                                                                                                     // 121
});                                                                                                                    // 96
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"rocketchat.info.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/rocketchat.info.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Info = {
    "version": "0.56.0",
    "build": {
        "date": "2017-06-14T04:48:31.141Z",
        "nodeVersion": "v4.8.3",
        "arch": "x64",
        "platform": "darwin",
        "osRelease": "16.6.0",
        "totalMemory": 17179869184,
        "freeMemory": 3686342656,
        "cpus": 8
    },
    "commit": {
        "hash": "ccb54455ceec4e6cb1a9845bf087fa1e740de2d0",
        "date": "Tue Jun 13 13:36:49 2017 +0900",
        "author": "Jungwoo Lee",
        "subject": "Create build.sh",
        "branch": "master"
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"node_modules":{"bugsnag":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// .npm/package/node_modules/bugsnag/package.json                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "bugsnag";
exports.version = "1.8.0";
exports.main = "./lib/bugsnag.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"bugsnag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/bugsnag/lib/bugsnag.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var domain = require("domain"),
    path = require("path"),
    Utils = require("./utils"),
    Logger = require("./logger"),
    Configuration = require("./configuration"),
    BugsnagError = require("./error"),
    Notification = require("./notification"),
    requestInfo = require("./request_info");

// Ensure we get all stack frames from thrown errors.
Error.stackTraceLimit = Infinity;

function autoNotifyCallback(notifiedError, uncaughtError) {
    if (!uncaughtError) {
        uncaughtError = notifiedError.domain;
    }
    return function(error) {
        if (error) {
            Configuration.logger.error("Bugsnag: error notifying bugsnag.com - " + error);
        }
        if (Configuration.onUncaughtError && uncaughtError) {
            return Configuration.onUncaughtError(notifiedError);
        }
    };
}

var unCaughtErrorHandlerAdded = false;

var Bugsnag = {};

// This allows people to directly play with metaData without knowledge of Configuration
Object.defineProperty(Bugsnag, 'metaData', {
    get: function() {
        return Configuration.metaData;
    },
    set: function(metaData) {
        Configuration.metaData = metaData;
    }
});

// This allows people to directly play with requestData without knowledge of domains
Object.defineProperty(Bugsnag, 'requestData', {
    get: function () {
        return process.domain && process.domain._bugsnagOptions;
    },

    set: function (requestData) {
        if (process.domain) {
            process.domain._bugsnagOptions = requestData;
        }
    }
});

// Register sets api key and will configure bugsnag based on options
Bugsnag.register = function(apiKey, options) {
    if (!options) {
        options = {};
    }
    Configuration.apiKey = apiKey;
    Bugsnag.configure(options);
    Configuration.logger.info("Registered with apiKey " + apiKey);
    return Bugsnag;
};

// Configure bugsnag using the provided options
Bugsnag.configure = function(options) {
    Configuration.configure(options);

    // If we should auto notify we also configure the uncaught exception handler, we can't do this
    // by default as it changes the way the app response by removing the default handler.
    if (Configuration.autoNotifyUncaught && !unCaughtErrorHandlerAdded) {
        unCaughtErrorHandlerAdded = true;
        Configuration.logger.info("Configuring uncaughtExceptionHandler");
        process.on("uncaughtException", function(err) {
            Bugsnag.notify(err, {
                severity: "error"
            }, autoNotifyCallback(err, true));
        });
    }
};

// Only error is required and that can be a string or error object
Bugsnag.notify = function(error, options, cb) {
    var bugsnagErrors, notification;
    if (Utils.typeOf(options) === "function") {
        cb = options;
        options = {};
    }
    if (!options) {
        options = {};
    }
    if (!Bugsnag.shouldNotify()) {
        if (cb) {
            if (!Configuration.apiKey) {
                cb(new Error("Bugsnag has not been configured with an api key!"));
            } else {
                cb(new Error("Current release stage not permitted to send events to Bugsnag."));
            }
        }
        return;
    }
    Configuration.logger.info("Notifying Bugsnag of exception...\n" + (error && error.stack || error));
    bugsnagErrors = BugsnagError.buildErrors(error, options.errorName);
    delete options.errorName;
    notification = new Notification(bugsnagErrors, options);
    if (Configuration.sendCode === true) {
        notification.loadCode(function () {
            notification.deliver(cb);
        });
    } else {
        notification.deliver(cb);
    }
};

// The error handler express/connext middleware. Performs a notify
Bugsnag.errorHandler = function(err, req, res, next) {
    Configuration.logger.info("Handling express error: " + (err.stack || err));
    Bugsnag.notify(err, {
        req: req,
        severity: "error"
    }, autoNotifyCallback(err));
    return next(err);
};

// The request middleware for express/connect. Ensures next(err) is called when there is an error, and
// tracks the request for manual notifies.
Bugsnag.requestHandler = function(req, res, next) {
    var dom;
    dom = domain.create();
    dom._bugsnagOptions = {
        cleanedRequest: requestInfo(req)
    };
    dom.on('error', next);
    return dom.run(next);
};

Bugsnag.restifyHandler = function(req, res, route, err) {
    Bugsnag.notify(err, {
        req: req,
        severity: "error"
    }, autoNotifyCallback(err));
};

Bugsnag.koaHandler = function(err, ctx) {
    var request;
    Configuration.logger.info("Handling koa error: " + (err.stack || err));
    request = ctx.req;
    request.protocol = ctx.request.protocol;
    request.host = ctx.request.host.split(':', 1)[0];
    return Bugsnag.notify(err, {
        req: request,
        severity: "error"
    }, autoNotifyCallback(err));
};

// Intercepts the first argument from a callback and interprets it as an error.
// if the error is not null it notifies bugsnag and doesn't call the callback
Bugsnag.intercept = function(cb) {
    if (!cb) {
        cb = (function() {});
    }
    if (process.domain) {
        return process.domain.intercept(cb);
    } else {
        return function() {
            var err = arguments[0];
            var args = Array.prototype.slice.call(arguments, 1);
            if (err && (err instanceof Error)) {
                return Bugsnag.notify(err, {
                    severity: "error"
                }, autoNotifyCallback(err));
            }
            if (cb) {
                return cb.apply(null, args);
            }
        };
    }
};

// Automatically notifies of uncaught exceptions in the callback and error
// event emitters. Returns an event emitter, you can hook into .on("error") if
// you want to.
Bugsnag.autoNotify = function(options, cb) {
    var dom;
    if (Utils.typeOf(options) === "function") {
        cb = options;
        options = {};
    }
    dom = domain.create();
    dom._bugsnagOptions = options;
    options.severity = "error";
    dom.on('error', function(err) {
        return Bugsnag.notify(err, options, autoNotifyCallback(err));
    });
    process.nextTick(function() {
        return dom.run(cb);
    });
    return dom;
};

Bugsnag.shouldNotify = function() {
    return (Configuration.notifyReleaseStages === null || Configuration.notifyReleaseStages.indexOf(Configuration.releaseStage) !== -1) && Configuration.apiKey;
};

Bugsnag.onBeforeNotify = function (callback) {
    if (typeof callback !== "function") {
        throw new Error("must pass a callback to onBeforeNotify");
    }

    Configuration.beforeNotifyCallbacks.push(callback);
};

module.exports = Bugsnag;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"prom-client":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// .npm/package/node_modules/prom-client/package.json                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "prom-client";
exports.version = "7.0.1";
exports.main = "index.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/prom-client/index.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Prometheus client
 * @module Prometheus client
 */

'use strict';

exports.register = require('./lib/register');

exports.Counter = require('./lib/counter');
exports.Gauge = require('./lib/gauge');
exports.Histogram = require('./lib/histogram');
exports.Summary = require('./lib/summary');
exports.Pushgateway = require('./lib/pushgateway');

exports.linearBuckets = require('./lib/bucketGenerators').linearBuckets;
exports.exponentialBuckets = require('./lib/bucketGenerators').exponentialBuckets;

var defaultMetrics = require('./lib/defaultMetrics');

defaultMetrics();

exports.defaultMetrics = defaultMetrics;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lokijs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// .npm/package/node_modules/lokijs/package.json                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "lokijs";
exports.version = "1.4.1";
exports.main = "src/lokijs.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"src":{"lokijs.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/lokijs/src/lokijs.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * LokiJS
 * @author Joe Minichino <joe.minichino@gmail.com>
 *
 * A lightweight document oriented javascript database
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([], factory);
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = factory();
  } else {
    // Browser globals
    root.loki = factory();
  }
}(this, function () {

  return (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var Utils = {
      copyProperties: function (src, dest) {
        var prop;
        for (prop in src) {
          dest[prop] = src[prop];
        }
      },
      // used to recursively scan hierarchical transform step object for param substitution
      resolveTransformObject: function (subObj, params, depth) {
        var prop,
          pname;

        if (typeof depth !== 'number') {
          depth = 0;
        }

        if (++depth >= 10) return subObj;

        for (prop in subObj) {
          if (typeof subObj[prop] === 'string' && subObj[prop].indexOf("[%lktxp]") === 0) {
            pname = subObj[prop].substring(8);
            if (params.hasOwnProperty(pname)) {
              subObj[prop] = params[pname];
            }
          } else if (typeof subObj[prop] === "object") {
            subObj[prop] = Utils.resolveTransformObject(subObj[prop], params, depth);
          }
        }

        return subObj;
      },
      // top level utility to resolve an entire (single) transform (array of steps) for parameter substitution
      resolveTransformParams: function (transform, params) {
        var idx,
          clonedStep,
          resolvedTransform = [];

        if (typeof params === 'undefined') return transform;

        // iterate all steps in the transform array
        for (idx = 0; idx < transform.length; idx++) {
          // clone transform so our scan and replace can operate directly on cloned transform
          clonedStep = JSON.parse(JSON.stringify(transform[idx]));
          resolvedTransform.push(Utils.resolveTransformObject(clonedStep, params));
        }

        return resolvedTransform;
      }
    };

    /** Helper function for determining 'less-than' conditions for ops, sorting, and binary indices.
     *     In the future we might want $lt and $gt ops to use their own functionality/helper.
     *     Since binary indices on a property might need to index [12, NaN, new Date(), Infinity], we
     *     need this function (as well as gtHelper) to always ensure one value is LT, GT, or EQ to another.
     */
    function ltHelper(prop1, prop2, equal) {
      var cv1, cv2;

      // 'falsy' and Boolean handling
      if (!prop1 || !prop2 || prop1 === true || prop2 === true) {
        if ((prop1 === true || prop1 === false) && (prop2 === true || prop2 === false)) {
          if (equal) {
            return prop1 === prop2;
          } else {
            if (prop1) {
              return false;
            } else {
              return prop2;
            }
          }
        }

        if (prop2 === undefined || prop2 === null || prop1 === true || prop2 === false) {
          return equal;
        }
        if (prop1 === undefined || prop1 === null || prop1 === false || prop2 === true) {
          return true;
        }
      }

      if (prop1 === prop2) {
        return equal;
      }

      if (prop1 < prop2) {
        return true;
      }

      if (prop1 > prop2) {
        return false;
      }

      // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare
      cv1 = prop1.toString();
      cv2 = prop2.toString();

      if (cv1 == cv2) {
        return equal;
      }

      if (cv1 < cv2) {
        return true;
      }

      return false;
    }

    function gtHelper(prop1, prop2, equal) {
      var cv1, cv2;

      // 'falsy' and Boolean handling
      if (!prop1 || !prop2 || prop1 === true || prop2 === true) {
        if ((prop1 === true || prop1 === false) && (prop2 === true || prop2 === false)) {
          if (equal) {
            return prop1 === prop2;
          } else {
            if (prop1) {
              return !prop2;
            } else {
              return false;
            }
          }
        }

        if (prop1 === undefined || prop1 === null || prop1 === false || prop2 === true) {
          return equal;
        }
        if (prop2 === undefined || prop2 === null || prop1 === true || prop2 === false) {
          return true;
        }
      }

      if (prop1 === prop2) {
        return equal;
      }

      if (prop1 > prop2) {
        return true;
      }

      if (prop1 < prop2) {
        return false;
      }

      // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare
      cv1 = prop1.toString();
      cv2 = prop2.toString();

      if (cv1 == cv2) {
        return equal;
      }

      if (cv1 > cv2) {
        return true;
      }

      return false;
    }

    function sortHelper(prop1, prop2, desc) {
      if (prop1 === prop2) {
        return 0;
      }

      if (ltHelper(prop1, prop2, false)) {
        return (desc) ? (1) : (-1);
      }

      if (gtHelper(prop1, prop2, false)) {
        return (desc) ? (-1) : (1);
      }

      // not lt, not gt so implied equality-- date compatible
      return 0;
    }

    /**
     * compoundeval() - helper function for compoundsort(), performing individual object comparisons
     *
     * @param {array} properties - array of property names, in order, by which to evaluate sort order
     * @param {object} obj1 - first object to compare
     * @param {object} obj2 - second object to compare
     * @returns {integer} 0, -1, or 1 to designate if identical (sortwise) or which should be first
     */
    function compoundeval(properties, obj1, obj2) {
      var res = 0;
      var prop, field;
      for (var i = 0, len = properties.length; i < len; i++) {
        prop = properties[i];
        field = prop[0];
        res = sortHelper(obj1[field], obj2[field], prop[1]);
        if (res !== 0) {
          return res;
        }
      }
      return 0;
    }

    /**
     * dotSubScan - helper function used for dot notation queries.
     *
     * @param {object} root - object to traverse
     * @param {array} paths - array of properties to drill into
     * @param {function} fun - evaluation function to test with
     * @param {any} value - comparative value to also pass to (compare) fun
     */
    function dotSubScan(root, paths, fun, value) {
      var path = paths[0];
      if (typeof root === 'undefined' || root === null || !root.hasOwnProperty(path)) {
        return false;
      }

      var valueFound = false;
      var element = root[path];
      if (Array.isArray(element)) {
        var index;
        for (index in element) {
          valueFound = valueFound || dotSubScan(element[index], paths.slice(1, paths.length), fun, value);
          if (valueFound === true) {
            break;
          }
        }
      } else if (typeof element === 'object') {
        valueFound = dotSubScan(element, paths.slice(1, paths.length), fun, value);
      } else {
        valueFound = fun(element, value);
      }

      return valueFound;
    }

    function containsCheckFn(a) {
      if (typeof a === 'string' || Array.isArray(a)) {
        return function (b) {
          return a.indexOf(b) !== -1;
        };
      } else if (typeof a === 'object' && a !== null) {
        return function (b) {
          return hasOwnProperty.call(a, b);
        };
      }
      return null;
    }

    function doQueryOp(val, op) {
      for (var p in op) {
        if (hasOwnProperty.call(op, p)) {
          return LokiOps[p](val, op[p]);
        }
      }
      return false;
    }

    var LokiOps = {
      // comparison operators
      // a is the value in the collection
      // b is the query value
      $eq: function (a, b) {
        return a === b;
      },

      // abstract/loose equality
      $aeq: function (a, b) {
        return a == b;
      },

      $ne: function (a, b) {
        // ecma 5 safe test for NaN
        if (b !== b) {
          // ecma 5 test value is not NaN
          return (a === a);
        }

        return a !== b;
      },

      $dteq: function (a, b) {
        if (ltHelper(a, b, false)) {
          return false;
        }
        return !gtHelper(a, b, false);
      },

      $gt: function (a, b) {
        return gtHelper(a, b, false);
      },

      $gte: function (a, b) {
        return gtHelper(a, b, true);
      },

      $lt: function (a, b) {
        return ltHelper(a, b, false);
      },

      $lte: function (a, b) {
        return ltHelper(a, b, true);
      },

      $in: function (a, b) {
        return b.indexOf(a) !== -1;
      },

      $nin: function (a, b) {
        return b.indexOf(a) === -1;
      },

      $keyin: function (a, b) {
        return a in b;
      },

      $nkeyin: function (a, b) {
        return !(a in b);
      },

      $definedin: function (a, b) {
        return b[a] !== undefined;
      },

      $undefinedin: function (a, b) {
        return b[a] === undefined;
      },

      $regex: function (a, b) {
        return b.test(a);
      },

      $containsString: function (a, b) {
        return (typeof a === 'string') && (a.indexOf(b) !== -1);
      },

      $containsNone: function (a, b) {
        return !LokiOps.$containsAny(a, b);
      },

      $containsAny: function (a, b) {
        var checkFn = containsCheckFn(a);
        if (checkFn !== null) {
          return (Array.isArray(b)) ? (b.some(checkFn)) : (checkFn(b));
        }
        return false;
      },

      $contains: function (a, b) {
        var checkFn = containsCheckFn(a);
        if (checkFn !== null) {
          return (Array.isArray(b)) ? (b.every(checkFn)) : (checkFn(b));
        }
        return false;
      },

      $type: function (a, b) {
        var type = typeof a;
        if (type === 'object') {
          if (Array.isArray(a)) {
            type = 'array';
          } else if (a instanceof Date) {
            type = 'date';
          }
        }
        return (typeof b !== 'object') ? (type === b) : doQueryOp(type, b);
      },

      $size: function (a, b) {
        if (Array.isArray(a)) {
          return (typeof b !== 'object') ? (a.length === b) : doQueryOp(a.length, b);
        }
        return false;
      },

      $len: function (a, b) {
        if (typeof a === 'string') {
          return (typeof b !== 'object') ? (a.length === b) : doQueryOp(a.length, b);
        }
        return false;
      },

      $where: function (a, b) {
        return b(a) === true;
      },

      // field-level logical operators
      // a is the value in the collection
      // b is the nested query operation (for '$not')
      //   or an array of nested query operations (for '$and' and '$or')
      $not: function (a, b) {
        return !doQueryOp(a, b);
      },

      $and: function (a, b) {
        for (var idx = 0, len = b.length; idx < len; idx += 1) {
          if (!doQueryOp(a, b[idx])) {
            return false;
          }
        }
        return true;
      },

      $or: function (a, b) {
        for (var idx = 0, len = b.length; idx < len; idx += 1) {
          if (doQueryOp(a, b[idx])) {
            return true;
          }
        }
        return false;
      }
    };

    // making indexing opt-in... our range function knows how to deal with these ops :
    var indexedOpsList = ['$eq', '$aeq', '$dteq', '$gt', '$gte', '$lt', '$lte'];

    function clone(data, method) {
      var cloneMethod = method || 'parse-stringify',
        cloned;

      switch (cloneMethod) {
      case "parse-stringify":
        cloned = JSON.parse(JSON.stringify(data));
        break;
      case "jquery-extend-deep":
        cloned = jQuery.extend(true, {}, data);
        break;
      case "shallow":
        cloned = Object.create(data.prototype || null);
        Object.keys(data).map(function (i) {
          cloned[i] = data[i];
        });
        break;
      default:
        break;
      }

      //if (cloneMethod === 'parse-stringify') {
      //  cloned = JSON.parse(JSON.stringify(data));
      //}
      return cloned;
    }

    function cloneObjectArray(objarray, method) {
      var i,
        result = [];

      if (method == "parse-stringify") {
        return clone(objarray, method);
      }

      i = objarray.length - 1;

      for (; i <= 0; i--) {
        result.push(clone(objarray[i], method));
      }

      return result;
    }

    function localStorageAvailable() {
      try {
        return (window && window.localStorage !== undefined && window.localStorage !== null);
      } catch (e) {
        return false;
      }
    }


    /**
     * LokiEventEmitter is a minimalist version of EventEmitter. It enables any
     * constructor that inherits EventEmitter to emit events and trigger
     * listeners that have been added to the event through the on(event, callback) method
     *
     * @constructor LokiEventEmitter
     */
    function LokiEventEmitter() {}

    /**
     * @prop {hashmap} events - a hashmap, with each property being an array of callbacks
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.events = {};

    /**
     * @prop {boolean} asyncListeners - boolean determines whether or not the callbacks associated with each event
     * should happen in an async fashion or not
     * Default is false, which means events are synchronous
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.asyncListeners = false;

    /**
     * on(eventName, listener) - adds a listener to the queue of callbacks associated to an event
     * @param {string} eventName - the name of the event to listen to
     * @param {function} listener - callback function of listener to attach
     * @returns {int} the index of the callback in the array of listeners for a particular event
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.on = function (eventName, listener) {
      var event = this.events[eventName];
      if (!event) {
        event = this.events[eventName] = [];
      }
      event.push(listener);
      return listener;
    };

    /**
     * emit(eventName, data) - emits a particular event
     * with the option of passing optional parameters which are going to be processed by the callback
     * provided signatures match (i.e. if passing emit(event, arg0, arg1) the listener should take two parameters)
     * @param {string} eventName - the name of the event
     * @param {object=} data - optional object passed with the event
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.emit = function (eventName, data) {
      var self = this;
      if (eventName && this.events[eventName]) {
        this.events[eventName].forEach(function (listener) {
          if (self.asyncListeners) {
            setTimeout(function () {
              listener(data);
            }, 1);
          } else {
            listener(data);
          }

        });
      } else {
        throw new Error('No event ' + eventName + ' defined');
      }
    };

    /**
     * removeListener() - removes the listener at position 'index' from the event 'eventName'
     * @param {string} eventName - the name of the event which the listener is attached to
     * @param {function} listener - the listener callback function to remove from emitter
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.removeListener = function (eventName, listener) {
      if (this.events[eventName]) {
        var listeners = this.events[eventName];
        listeners.splice(listeners.indexOf(listener), 1);
      }
    };

    /**
     * Loki: The main database class
     * @constructor Loki
     * @implements LokiEventEmitter
     * @param {string} filename - name of the file to be saved to
     * @param {object=} options - (Optional) config options object
     * @param {string} options.env - override environment detection as 'NODEJS', 'BROWSER', 'CORDOVA'
     * @param {boolean} options.verbose - enable console output (default is 'false')
     * @param {boolean} options.autosave - enables autosave
     * @param {int} options.autosaveInterval - time interval (in milliseconds) between saves (if dirty)
     * @param {boolean} options.autoload - enables autoload on loki instantiation
     * @param {function} options.autoloadCallback - user callback called after database load
     * @param {adapter} options.adapter - an instance of a loki persistence adapter
     */
    function Loki(filename, options) {
      this.filename = filename || 'loki.db';
      this.collections = [];

      // persist version of code which created the database to the database.
      // could use for upgrade scenarios
      this.databaseVersion = 1.1;
      this.engineVersion = 1.1;

      // autosave support (disabled by default)
      // pass autosave: true, autosaveInterval: 6000 in options to set 6 second autosave
      this.autosave = false;
      this.autosaveInterval = 5000;
      this.autosaveHandle = null;

      this.options = {};

      // currently keeping persistenceMethod and persistenceAdapter as loki level properties that
      // will not or cannot be deserialized.  You are required to configure persistence every time
      // you instantiate a loki object (or use default environment detection) in order to load the database anyways.

      // persistenceMethod could be 'fs', 'localStorage', or 'adapter'
      // this is optional option param, otherwise environment detection will be used
      // if user passes their own adapter we will force this method to 'adapter' later, so no need to pass method option.
      this.persistenceMethod = null;

      // retain reference to optional (non-serializable) persistenceAdapter 'instance'
      this.persistenceAdapter = null;

      // enable console output if verbose flag is set (disabled by default)
      this.verbose = options && options.hasOwnProperty('verbose') ? options.verbose : false;

      this.events = {
        'init': [],
        'loaded': [],
        'flushChanges': [],
        'close': [],
        'changes': [],
        'warning': []
      };

      var getENV = function () {
        // if (typeof global !== 'undefined' && (global.android || global.NSObject)) {
        //   //If no adapter is set use the default nativescript adapter
        //   if (!options.adapter) {
        //     var LokiNativescriptAdapter = require('./loki-nativescript-adapter');
        //     options.adapter=new LokiNativescriptAdapter();
        //   }
        //   return 'NATIVESCRIPT'; //nativescript
        // }

        if (typeof window === 'undefined') {
          return 'NODEJS';
        }

        if (typeof global !== 'undefined' && global.window) {
          return 'NODEJS'; //node-webkit
        }

        if (typeof document !== 'undefined') {
          if (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1) {
            return 'CORDOVA';
          }
          return 'BROWSER';
        }
        return 'CORDOVA';
      };

      // refactored environment detection due to invalid detection for browser environments.
      // if they do not specify an options.env we want to detect env rather than default to nodejs.
      // currently keeping two properties for similar thing (options.env and options.persistenceMethod)
      //   might want to review whether we can consolidate.
      if (options && options.hasOwnProperty('env')) {
        this.ENV = options.env;
      } else {
        this.ENV = getENV();
      }

      // not sure if this is necessary now that i have refactored the line above
      if (this.ENV === 'undefined') {
        this.ENV = 'NODEJS';
      }

      //if (typeof (options) !== 'undefined') {
      this.configureOptions(options, true);
      //}

      this.on('init', this.clearChanges);

    }

    // db class is an EventEmitter
    Loki.prototype = new LokiEventEmitter();

    // experimental support for browserify's abstract syntax scan to pick up dependency of indexed adapter.
    // Hopefully, once this hits npm a browserify require of lokijs should scan the main file and detect this indexed adapter reference.
    Loki.prototype.getIndexedAdapter = function () {
      var adapter;

      if (typeof require === 'function') {
        adapter = require("./loki-indexed-adapter.js");
      }

      return adapter;
    };


    /**
     * Allows reconfiguring database options
     *
     * @param {object} options - configuration options to apply to loki db object
     * @param {string} options.env - override environment detection as 'NODEJS', 'BROWSER', 'CORDOVA'
     * @param {boolean} options.verbose - enable console output (default is 'false')
     * @param {boolean} options.autosave - enables autosave
     * @param {int} options.autosaveInterval - time interval (in milliseconds) between saves (if dirty)
     * @param {boolean} options.autoload - enables autoload on loki instantiation
     * @param {function} options.autoloadCallback - user callback called after database load
     * @param {adapter} options.adapter - an instance of a loki persistence adapter
     * @param {boolean} initialConfig - (internal) true is passed when loki ctor is invoking
     * @memberof Loki
     */
    Loki.prototype.configureOptions = function (options, initialConfig) {
      var defaultPersistence = {
          'NODEJS': 'fs',
          'BROWSER': 'localStorage',
          'CORDOVA': 'localStorage'
        },
        persistenceMethods = {
          'fs': LokiFsAdapter,
          'localStorage': LokiLocalStorageAdapter
        };

      this.options = {};

      this.persistenceMethod = null;
      // retain reference to optional persistence adapter 'instance'
      // currently keeping outside options because it can't be serialized
      this.persistenceAdapter = null;

      // process the options
      if (typeof (options) !== 'undefined') {
        this.options = options;


        if (this.options.hasOwnProperty('persistenceMethod')) {
          // check if the specified persistence method is known
          if (typeof (persistenceMethods[options.persistenceMethod]) == 'function') {
            this.persistenceMethod = options.persistenceMethod;
            this.persistenceAdapter = new persistenceMethods[options.persistenceMethod]();
          }
          // should be throw an error here, or just fall back to defaults ??
        }

        // if user passes adapter, set persistence mode to adapter and retain persistence adapter instance
        if (this.options.hasOwnProperty('adapter')) {
          this.persistenceMethod = 'adapter';
          this.persistenceAdapter = options.adapter;
          this.options.adapter = null;
        }


        // if they want to load database on loki instantiation, now is a good time to load... after adapter set and before possible autosave initiation
        if (options.autoload && initialConfig) {
          // for autoload, let the constructor complete before firing callback
          var self = this;
          setTimeout(function () {
            self.loadDatabase(options, options.autoloadCallback);
          }, 1);
        }

        if (this.options.hasOwnProperty('autosaveInterval')) {
          this.autosaveDisable();
          this.autosaveInterval = parseInt(this.options.autosaveInterval, 10);
        }

        if (this.options.hasOwnProperty('autosave') && this.options.autosave) {
          this.autosaveDisable();
          this.autosave = true;

          if (this.options.hasOwnProperty('autosaveCallback')) {
            this.autosaveEnable(options, options.autosaveCallback);
          } else {
            this.autosaveEnable();
          }
        }
      } // end of options processing

      // if by now there is no adapter specified by user nor derived from persistenceMethod: use sensible defaults
      if (this.persistenceAdapter === null) {
        this.persistenceMethod = defaultPersistence[this.ENV];
        if (this.persistenceMethod) {
          this.persistenceAdapter = new persistenceMethods[this.persistenceMethod]();
        }
      }

    };

    /**
     * Shorthand method for quickly creating and populating an anonymous collection.
     *    This collection is not referenced internally so upon losing scope it will be garbage collected.
     *
     * @example
     * var results = new loki().anonym(myDocArray).find({'age': {'$gt': 30} });
     *
     * @param {Array} docs - document array to initialize the anonymous collection with
     * @param {object} options - configuration object, see {@link Loki#addCollection} options
     * @returns {Collection} New collection which you can query or chain
     * @memberof Loki
     */
    Loki.prototype.anonym = function (docs, options) {
      var collection = new Collection('anonym', options);
      collection.insert(docs);

      if (this.verbose)
        collection.console = console;

      return collection;
    };

    /**
     * Adds a collection to the database.
     * @param {string} name - name of collection to add
     * @param {object=} options - (optional) options to configure collection with.
     * @param {array} options.unique - array of property names to define unique constraints for
     * @param {array} options.exact - array of property names to define exact constraints for
     * @param {array} options.indices - array property names to define binary indexes for
     * @param {boolean} options.asyncListeners - default is false
     * @param {boolean} options.disableChangesApi - default is true
     * @param {boolean} options.autoupdate - use Object.observe to update objects automatically (default: false)
     * @param {boolean} options.clone - specify whether inserts and queries clone to/from user
     * @param {string} options.cloneMethod - 'parse-stringify' (default), 'jquery-extend-deep', 'shallow'
     * @param {int} options.ttlInterval - time interval for clearing out 'aged' documents; not set by default.
     * @returns {Collection} a reference to the collection which was just added
     * @memberof Loki
     */
    Loki.prototype.addCollection = function (name, options) {
      var collection = new Collection(name, options);
      this.collections.push(collection);

      if (this.verbose)
        collection.console = console;

      return collection;
    };

    Loki.prototype.loadCollection = function (collection) {
      if (!collection.name) {
        throw new Error('Collection must have a name property to be loaded');
      }
      this.collections.push(collection);
    };

    /**
     * Retrieves reference to a collection by name.
     * @param {string} collectionName - name of collection to look up
     * @returns {Collection} Reference to collection in database by that name, or null if not found
     * @memberof Loki
     */
    Loki.prototype.getCollection = function (collectionName) {
      var i,
        len = this.collections.length;

      for (i = 0; i < len; i += 1) {
        if (this.collections[i].name === collectionName) {
          return this.collections[i];
        }
      }

      // no such collection
      this.emit('warning', 'collection ' + collectionName + ' not found');
      return null;
    };

    Loki.prototype.listCollections = function () {

      var i = this.collections.length,
        colls = [];

      while (i--) {
        colls.push({
          name: this.collections[i].name,
          type: this.collections[i].objType,
          count: this.collections[i].data.length
        });
      }
      return colls;
    };

    /**
     * Removes a collection from the database.
     * @param {string} collectionName - name of collection to remove
     * @memberof Loki
     */
    Loki.prototype.removeCollection = function (collectionName) {
      var i,
        len = this.collections.length;

      for (i = 0; i < len; i += 1) {
        if (this.collections[i].name === collectionName) {
          var tmpcol = new Collection(collectionName, {});
          var curcol = this.collections[i];
          for (var prop in curcol) {
            if (curcol.hasOwnProperty(prop) && tmpcol.hasOwnProperty(prop)) {
              curcol[prop] = tmpcol[prop];
            }
          }
          this.collections.splice(i, 1);
          return;
        }
      }
    };

    Loki.prototype.getName = function () {
      return this.name;
    };

    /**
     * serializeReplacer - used to prevent certain properties from being serialized
     *
     */
    Loki.prototype.serializeReplacer = function (key, value) {
      switch (key) {
      case 'autosaveHandle':
      case 'persistenceAdapter':
      case 'constraints':
        return null;
      default:
        return value;
      }
    };

    /**
     * Serialize database to a string which can be loaded via {@link Loki#loadJSON}
     *
     * @returns {string} Stringified representation of the loki database.
     * @memberof Loki
     */
    Loki.prototype.serialize = function () {
      return JSON.stringify(this, this.serializeReplacer);
    };
    // alias of serialize
    Loki.prototype.toJson = Loki.prototype.serialize;

    /**
     * Inflates a loki database from a serialized JSON string
     *
     * @param {string} serializedDb - a serialized loki database string
     * @param {object} options - apply or override collection level settings
     * @memberof Loki
     */
    Loki.prototype.loadJSON = function (serializedDb, options) {
      var dbObject;
      if (serializedDb.length === 0) {
        dbObject = {};
      } else {
        dbObject = JSON.parse(serializedDb);
      }

      this.loadJSONObject(dbObject, options);
    };

    /**
     * Inflates a loki database from a JS object
     *
     * @param {object} dbObject - a serialized loki database string
     * @param {object} options - apply or override collection level settings
     * @memberof Loki
     */
    Loki.prototype.loadJSONObject = function (dbObject, options) {
      var i = 0,
        len = dbObject.collections ? dbObject.collections.length : 0,
        coll,
        copyColl,
        clen,
        j;

      this.name = dbObject.name;

      // restore database version
      this.databaseVersion = 1.0;
      if (dbObject.hasOwnProperty('databaseVersion')) {
        this.databaseVersion = dbObject.databaseVersion;
      }

      this.collections = [];

      for (i; i < len; i += 1) {
        coll = dbObject.collections[i];
        copyColl = this.addCollection(coll.name);

        copyColl.transactional = coll.transactional;
        copyColl.asyncListeners = coll.asyncListeners;
        copyColl.disableChangesApi = coll.disableChangesApi;
        copyColl.cloneObjects = coll.cloneObjects;
        copyColl.cloneMethod = coll.cloneMethod || "parse-stringify";
        copyColl.autoupdate = coll.autoupdate;

        // load each element individually
        clen = coll.data.length;
        j = 0;
        if (options && options.hasOwnProperty(coll.name)) {

          var loader = options[coll.name].inflate ? options[coll.name].inflate : Utils.copyProperties;

          for (j; j < clen; j++) {
            var collObj = new(options[coll.name].proto)();
            loader(coll.data[j], collObj);
            copyColl.data[j] = collObj;
            copyColl.addAutoUpdateObserver(collObj);
          }
        } else {

          for (j; j < clen; j++) {
            copyColl.data[j] = coll.data[j];
            copyColl.addAutoUpdateObserver(copyColl.data[j]);
          }
        }

        copyColl.maxId = (coll.data.length === 0) ? 0 : coll.maxId;
        copyColl.idIndex = coll.idIndex;
        if (typeof (coll.binaryIndices) !== 'undefined') {
          copyColl.binaryIndices = coll.binaryIndices;
        }
        if (typeof coll.transforms !== 'undefined') {
          copyColl.transforms = coll.transforms;
        }

        copyColl.ensureId();

        // regenerate unique indexes
        copyColl.uniqueNames = [];
        if (coll.hasOwnProperty("uniqueNames")) {
          copyColl.uniqueNames = coll.uniqueNames;
          for (j = 0; j < copyColl.uniqueNames.length; j++) {
            copyColl.ensureUniqueIndex(copyColl.uniqueNames[j]);
          }
        }

        // in case they are loading a database created before we added dynamic views, handle undefined
        if (typeof (coll.DynamicViews) === 'undefined') continue;

        // reinflate DynamicViews and attached Resultsets
        for (var idx = 0; idx < coll.DynamicViews.length; idx++) {
          var colldv = coll.DynamicViews[idx];

          var dv = copyColl.addDynamicView(colldv.name, colldv.options);
          dv.resultdata = colldv.resultdata;
          dv.resultsdirty = colldv.resultsdirty;
          dv.filterPipeline = colldv.filterPipeline;

          dv.sortCriteria = colldv.sortCriteria;
          dv.sortFunction = null;

          dv.sortDirty = colldv.sortDirty;
          dv.resultset.filteredrows = colldv.resultset.filteredrows;
          dv.resultset.searchIsChained = colldv.resultset.searchIsChained;
          dv.resultset.filterInitialized = colldv.resultset.filterInitialized;

          dv.rematerialize({
            removeWhereFilters: true
          });
        }
      }
    };

    /**
     * Emits the close event. In autosave scenarios, if the database is dirty, this will save and disable timer.
     * Does not actually destroy the db.
     *
     * @param {function=} callback - (Optional) if supplied will be registered with close event before emitting.
     * @memberof Loki
     */
    Loki.prototype.close = function (callback) {
      // for autosave scenarios, we will let close perform final save (if dirty)
      // For web use, you might call from window.onbeforeunload to shutdown database, saving pending changes
      if (this.autosave) {
        this.autosaveDisable();
        if (this.autosaveDirty()) {
          this.saveDatabase(callback);
          callback = undefined;
        }
      }

      if (callback) {
        this.on('close', callback);
      }
      this.emit('close');
    };

    /**-------------------------+
    | Changes API               |
    +--------------------------*/

    /**
     * The Changes API enables the tracking the changes occurred in the collections since the beginning of the session,
     * so it's possible to create a differential dataset for synchronization purposes (possibly to a remote db)
     */

    /**
     * (Changes API) : takes all the changes stored in each
     * collection and creates a single array for the entire database. If an array of names
     * of collections is passed then only the included collections will be tracked.
     *
     * @param {array=} optional array of collection names. No arg means all collections are processed.
     * @returns {array} array of changes
     * @see private method createChange() in Collection
     * @memberof Loki
     */
    Loki.prototype.generateChangesNotification = function (arrayOfCollectionNames) {
      function getCollName(coll) {
        return coll.name;
      }
      var changes = [],
        selectedCollections = arrayOfCollectionNames || this.collections.map(getCollName);

      this.collections.forEach(function (coll) {
        if (selectedCollections.indexOf(getCollName(coll)) !== -1) {
          changes = changes.concat(coll.getChanges());
        }
      });
      return changes;
    };

    /**
     * (Changes API) - stringify changes for network transmission
     * @returns {string} string representation of the changes
     * @memberof Loki
     */
    Loki.prototype.serializeChanges = function (collectionNamesArray) {
      return JSON.stringify(this.generateChangesNotification(collectionNamesArray));
    };

    /**
     * (Changes API) : clears all the changes in all collections.
     * @memberof Loki
     */
    Loki.prototype.clearChanges = function () {
      this.collections.forEach(function (coll) {
        if (coll.flushChanges) {
          coll.flushChanges();
        }
      });
    };

    /*------------------+
    | PERSISTENCE       |
    -------------------*/


    /** there are two build in persistence adapters for internal use
     * fs             for use in Nodejs type environments
     * localStorage   for use in browser environment
     * defined as helper classes here so its easy and clean to use
     */

    /**
     * A loki persistence adapter which persists using node fs module
     * @constructor LokiFsAdapter
     */
    function LokiFsAdapter() {
      this.fs = require('fs');
    }

    /**
     * loadDatabase() - Load data from file, will throw an error if the file does not exist
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiFsAdapter
     */
    LokiFsAdapter.prototype.loadDatabase = function loadDatabase(dbname, callback) {
      this.fs.readFile(dbname, {
        encoding: 'utf8'
      }, function readFileCallback(err, data) {
        if (err) {
          callback(new Error(err));
        } else {
          callback(data);
        }
      });
    };

    /**
     * saveDatabase() - save data to file, will throw an error if the file can't be saved
     * might want to expand this to avoid dataloss on partial save
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiFsAdapter
     */
    LokiFsAdapter.prototype.saveDatabase = function saveDatabase(dbname, dbstring, callback) {
      this.fs.writeFile(dbname, dbstring, callback);
    };

    /**
     * deleteDatabase() - delete the database file, will throw an error if the
     * file can't be deleted
     * @param {string} dbname - the filename of the database to delete
     * @param {function} callback - the callback to handle the result
     * @memberof LokiFsAdapter
     */
    LokiFsAdapter.prototype.deleteDatabase = function deleteDatabase(dbname, callback) {
      this.fs.unlink(dbname, function deleteDatabaseCallback(err) {
        if (err) {
          callback(new Error(err));
        } else {
          callback();
        }
      });
    };


    /**
     * A loki persistence adapter which persists to web browser's local storage object
     * @constructor LokiLocalStorageAdapter
     */
    function LokiLocalStorageAdapter() {}

    /**
     * loadDatabase() - Load data from localstorage
     * @param {string} dbname - the name of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiLocalStorageAdapter
     */
    LokiLocalStorageAdapter.prototype.loadDatabase = function loadDatabase(dbname, callback) {
      if (localStorageAvailable()) {
        callback(localStorage.getItem(dbname));
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * saveDatabase() - save data to localstorage, will throw an error if the file can't be saved
     * might want to expand this to avoid dataloss on partial save
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiLocalStorageAdapter
     */
    LokiLocalStorageAdapter.prototype.saveDatabase = function saveDatabase(dbname, dbstring, callback) {
      if (localStorageAvailable()) {
        localStorage.setItem(dbname, dbstring);
        callback(null);
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * deleteDatabase() - delete the database from localstorage, will throw an error if it
     * can't be deleted
     * @param {string} dbname - the filename of the database to delete
     * @param {function} callback - the callback to handle the result
     * @memberof LokiLocalStorageAdapter
     */
    LokiLocalStorageAdapter.prototype.deleteDatabase = function deleteDatabase(dbname, callback) {
      if (localStorageAvailable()) {
        localStorage.removeItem(dbname);
        callback(null);
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * Handles loading from file system, local storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function=} callback - (Optional) user supplied async callback / error handler
     * @memberof Loki
     */
    Loki.prototype.loadDatabase = function (options, callback) {
      var cFun = callback || function (err, data) {
          if (err) {
            throw err;
          }
        },
        self = this;

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {

        this.persistenceAdapter.loadDatabase(this.filename, function loadDatabaseCallback(dbString) {
          if (typeof (dbString) === 'string') {
            var parseSuccess = false;
            try {
              self.loadJSON(dbString, options || {});
              parseSuccess = true;
            } catch (err) {
              cFun(err);
            }
            if (parseSuccess) {
              cFun(null);
              self.emit('loaded', 'database ' + self.filename + ' loaded');
            }
          } else {
            // if adapter has returned an js object (other than null or error) attempt to load from JSON object
            if (typeof (dbString) === "object" && dbString !== null && !(dbString instanceof Error)) {
              self.loadJSONObject(dbString, options || {});
              cFun(null); // return null on success
              self.emit('loaded', 'database ' + self.filename + ' loaded');
            } else {
              // error from adapter (either null or instance of error), pass on to 'user' callback
              cFun(dbString);
            }
          }
        });

      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    /**
     * Handles saving to file system, local storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {function=} callback - (Optional) user supplied async callback / error handler
     * @memberof Loki
     */
    Loki.prototype.saveDatabase = function (callback) {
      var cFun = callback || function (err) {
          if (err) {
            throw err;
          }
          return;
        },
        self = this;

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {
        // check if the adapter is requesting (and supports) a 'reference' mode export
        if (this.persistenceAdapter.mode === "reference" && typeof this.persistenceAdapter.exportDatabase === "function") {
          // filename may seem redundant but loadDatabase will need to expect this same filename
          this.persistenceAdapter.exportDatabase(this.filename, this, function exportDatabaseCallback(err) {
            self.autosaveClearFlags();
            cFun(err);
          });
        }
        // otherwise just pass the serialized database to adapter
        else {
          this.persistenceAdapter.saveDatabase(this.filename, self.serialize(), function saveDatabasecallback(err) {
            self.autosaveClearFlags();
            cFun(err);
          });
        }
      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    // alias
    Loki.prototype.save = Loki.prototype.saveDatabase;

    /**
     * Handles deleting a database from file system, local
     *    storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function=} callback - (Optional) user supplied async callback / error handler
     * @memberof Loki
     */
    Loki.prototype.deleteDatabase = function (options, callback) {
      var cFun = callback || function (err, data) {
        if (err) {
          throw err;
        }
      };

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {
        this.persistenceAdapter.deleteDatabase(this.filename, function deleteDatabaseCallback(err) {
          cFun(err);
        });
      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    /**
     * autosaveDirty - check whether any collections are 'dirty' meaning we need to save (entire) database
     *
     * @returns {boolean} - true if database has changed since last autosave, false if not.
     */
    Loki.prototype.autosaveDirty = function () {
      for (var idx = 0; idx < this.collections.length; idx++) {
        if (this.collections[idx].dirty) {
          return true;
        }
      }

      return false;
    };

    /**
     * autosaveClearFlags - resets dirty flags on all collections.
     *    Called from saveDatabase() after db is saved.
     *
     */
    Loki.prototype.autosaveClearFlags = function () {
      for (var idx = 0; idx < this.collections.length; idx++) {
        this.collections[idx].dirty = false;
      }
    };

    /**
     * autosaveEnable - begin a javascript interval to periodically save the database.
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function=} callback - (Optional) user supplied async callback
     */
    Loki.prototype.autosaveEnable = function (options, callback) {
      this.autosave = true;

      var delay = 5000,
        self = this;

      if (typeof (this.autosaveInterval) !== 'undefined' && this.autosaveInterval !== null) {
        delay = this.autosaveInterval;
      }

      this.autosaveHandle = setInterval(function autosaveHandleInterval() {
        // use of dirty flag will need to be hierarchical since mods are done at collection level with no visibility of 'db'
        // so next step will be to implement collection level dirty flags set on insert/update/remove
        // along with loki level isdirty() function which iterates all collections to see if any are dirty

        if (self.autosaveDirty()) {
          self.saveDatabase(callback);
        }
      }, delay);
    };

    /**
     * autosaveDisable - stop the autosave interval timer.
     *
     */
    Loki.prototype.autosaveDisable = function () {
      if (typeof (this.autosaveHandle) !== 'undefined' && this.autosaveHandle !== null) {
        clearInterval(this.autosaveHandle);
        this.autosaveHandle = null;
      }
    };


    /**
     * Resultset class allowing chainable queries.  Intended to be instanced internally.
     *    Collection.find(), Collection.where(), and Collection.chain() instantiate this.
     *
     * @example
     *    mycollection.chain()
     *      .find({ 'doors' : 4 })
     *      .where(function(obj) { return obj.name === 'Toyota' })
     *      .data();
     *
     * @constructor Resultset
     * @param {Collection} collection - The collection which this Resultset will query against.
     * @param {Object=} options - Object containing one or more options.
     * @param {string} options.queryObj - Optional mongo-style query object to initialize resultset with.
     * @param {function} options.queryFunc - Optional javascript filter function to initialize resultset with.
     * @param {bool} options.firstOnly - Optional boolean used by collection.findOne().
     */
    function Resultset(collection, options) {
      options = options || {};

      options.queryObj = options.queryObj || null;
      options.queryFunc = options.queryFunc || null;
      options.firstOnly = options.firstOnly || false;

      // retain reference to collection we are querying against
      this.collection = collection;

      // if chain() instantiates with null queryObj and queryFunc, so we will keep flag for later
      this.searchIsChained = (!options.queryObj && !options.queryFunc);
      this.filteredrows = [];
      this.filterInitialized = false;

      // if user supplied initial queryObj or queryFunc, apply it
      if (typeof (options.queryObj) !== "undefined" && options.queryObj !== null) {
        return this.find(options.queryObj, options.firstOnly);
      }
      if (typeof (options.queryFunc) !== "undefined" && options.queryFunc !== null) {
        return this.where(options.queryFunc);
      }

      // otherwise return unfiltered Resultset for future filtering
      return this;
    }

    /**
     * reset() - Reset the resultset to its initial state.
     *
     * @returns {Resultset} Reference to this resultset, for future chain operations.
     */
    Resultset.prototype.reset = function () {
      if (this.filteredrows.length > 0) {
        this.filteredrows = [];
      }
      this.filterInitialized = false;
      return this;
    };

    /**
     * toJSON() - Override of toJSON to avoid circular references
     *
     */
    Resultset.prototype.toJSON = function () {
      var copy = this.copy();
      copy.collection = null;
      return copy;
    };

    /**
     * Allows you to limit the number of documents passed to next chain operation.
     *    A resultset copy() is made to avoid altering original resultset.
     *
     * @param {int} qty - The number of documents to return.
     * @returns {Resultset} Returns a copy of the resultset, limited by qty, for subsequent chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.limit = function (qty) {
      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var rscopy = new Resultset(this.collection);
      rscopy.filteredrows = this.filteredrows.slice(0, qty);
      rscopy.filterInitialized = true;
      return rscopy;
    };

    /**
     * Used for skipping 'pos' number of documents in the resultset.
     *
     * @param {int} pos - Number of documents to skip; all preceding documents are filtered out.
     * @returns {Resultset} Returns a copy of the resultset, containing docs starting at 'pos' for subsequent chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.offset = function (pos) {
      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var rscopy = new Resultset(this.collection);
      rscopy.filteredrows = this.filteredrows.slice(pos);
      rscopy.filterInitialized = true;
      return rscopy;
    };

    /**
     * copy() - To support reuse of resultset in branched query situations.
     *
     * @returns {Resultset} Returns a copy of the resultset (set) but the underlying document references will be the same.
     * @memberof Resultset
     */
    Resultset.prototype.copy = function () {
      var result = new Resultset(this.collection);

      if (this.filteredrows.length > 0) {
        result.filteredrows = this.filteredrows.slice();
      }
      result.filterInitialized = this.filterInitialized;

      return result;
    };

    /**
     * Alias of copy()
     * @memberof Resultset
     */
    Resultset.prototype.branch = Resultset.prototype.copy;

    /**
     * transform() - executes a named collection transform or raw array of transform steps against the resultset.
     *
     * @param transform {(string|array)} - name of collection transform or raw transform array
     * @param parameters {object=} - (Optional) object property hash of parameters, if the transform requires them.
     * @returns {Resultset} either (this) resultset or a clone of of this resultset (depending on steps)
     * @memberof Resultset
     */
    Resultset.prototype.transform = function (transform, parameters) {
      var idx,
        step,
        rs = this;

      // if transform is name, then do lookup first
      if (typeof transform === 'string') {
        if (this.collection.transforms.hasOwnProperty(transform)) {
          transform = this.collection.transforms[transform];
        }
      }

      // either they passed in raw transform array or we looked it up, so process
      if (typeof transform !== 'object' || !Array.isArray(transform)) {
        throw new Error("Invalid transform");
      }

      if (typeof parameters !== 'undefined') {
        transform = Utils.resolveTransformParams(transform, parameters);
      }

      for (idx = 0; idx < transform.length; idx++) {
        step = transform[idx];

        switch (step.type) {
        case "find":
          rs.find(step.value);
          break;
        case "where":
          rs.where(step.value);
          break;
        case "simplesort":
          rs.simplesort(step.property, step.desc);
          break;
        case "compoundsort":
          rs.compoundsort(step.value);
          break;
        case "sort":
          rs.sort(step.value);
          break;
        case "limit":
          rs = rs.limit(step.value);
          break; // limit makes copy so update reference
        case "offset":
          rs = rs.offset(step.value);
          break; // offset makes copy so update reference
        case "map":
          rs = rs.map(step.value);
          break;
        case "eqJoin":
          rs = rs.eqJoin(step.joinData, step.leftJoinKey, step.rightJoinKey, step.mapFun);
          break;
          // following cases break chain by returning array data so make any of these last in transform steps
        case "mapReduce":
          rs = rs.mapReduce(step.mapFunction, step.reduceFunction);
          break;
          // following cases update documents in current filtered resultset (use carefully)
        case "update":
          rs.update(step.value);
          break;
        case "remove":
          rs.remove();
          break;
        default:
          break;
        }
      }

      return rs;
    };

    /**
     * User supplied compare function is provided two documents to compare. (chainable)
     * @example
     *    rslt.sort(function(obj1, obj2) {
     *      if (obj1.name === obj2.name) return 0;
     *      if (obj1.name > obj2.name) return 1;
     *      if (obj1.name < obj2.name) return -1;
     *    });
     *
     * @param {function} comparefun - A javascript compare function used for sorting.
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     * @memberof Resultset
     */
    Resultset.prototype.sort = function (comparefun) {
      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var wrappedComparer =
        (function (userComparer, data) {
          return function (a, b) {
            return userComparer(data[a], data[b]);
          };
        })(comparefun, this.collection.data);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * Simpler, loose evaluation for user to sort based on a property name. (chainable).
     *    Sorting based on the same lt/gt helper functions used for binary indices.
     *
     * @param {string} propname - name of property to sort by.
     * @param {bool=} isdesc - (Optional) If true, the property will be sorted in descending order
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     * @memberof Resultset
     */
    Resultset.prototype.simplesort = function (propname, isdesc) {
      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      if (typeof (isdesc) === 'undefined') {
        isdesc = false;
      }

      var wrappedComparer =
        (function (prop, desc, data) {
          return function (a, b) {
            return sortHelper(data[a][prop], data[b][prop], desc);
          };
        })(propname, isdesc, this.collection.data);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * Allows sorting a resultset based on multiple columns.
     * @example
     * // to sort by age and then name (both ascending)
     * rs.compoundsort(['age', 'name']);
     * // to sort by age (ascending) and then by name (descending)
     * rs.compoundsort(['age', ['name', true]);
     *
     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     * @memberof Resultset
     */
    Resultset.prototype.compoundsort = function (properties) {
      if (properties.length === 0) {
        throw new Error("Invalid call to compoundsort, need at least one property");
      }

      var prop;
      if (properties.length === 1) {
        prop = properties[0];
        if (Array.isArray(prop)) {
          return this.simplesort(prop[0], prop[1]);
        }
        return this.simplesort(prop, false);
      }

      // unify the structure of 'properties' to avoid checking it repeatedly while sorting
      for (var i = 0, len = properties.length; i < len; i += 1) {
        prop = properties[i];
        if (!Array.isArray(prop)) {
          properties[i] = [prop, false];
        }
      }

      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var wrappedComparer =
        (function (props, data) {
          return function (a, b) {
            return compoundeval(props, data[a], data[b]);
          };
        })(properties, this.collection.data);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * calculateRange() - Binary Search utility method to find range/segment of values matching criteria.
     *    this is used for collection.find() and first find filter of resultset/dynview
     *    slightly different than get() binary search in that get() hones in on 1 value,
     *    but we have to hone in on many (range)
     * @param {string} op - operation, such as $eq
     * @param {string} prop - name of property to calculate range for
     * @param {object} val - value to use for range calculation.
     * @returns {array} [start, end] index array positions
     */
    Resultset.prototype.calculateRange = function (op, prop, val) {
      var rcd = this.collection.data;
      var index = this.collection.binaryIndices[prop].values;
      var min = 0;
      var max = index.length - 1;
      var mid = 0;

      // when no documents are in collection, return empty range condition
      if (rcd.length === 0) {
        return [0, -1];
      }

      var minVal = rcd[index[min]][prop];
      var maxVal = rcd[index[max]][prop];

      // if value falls outside of our range return [0, -1] to designate no results
      switch (op) {
      case '$eq':
      case '$aeq':
        if (ltHelper(val, minVal, false) || gtHelper(val, maxVal, false)) {
          return [0, -1];
        }
        break;
      case '$dteq':
        if (ltHelper(val, minVal, false) || gtHelper(val, maxVal, false)) {
          return [0, -1];
        }
        break;
      case '$gt':
        if (gtHelper(val, maxVal, true)) {
          return [0, -1];
        }
        break;
      case '$gte':
        if (gtHelper(val, maxVal, false)) {
          return [0, -1];
        }
        break;
      case '$lt':
        if (ltHelper(val, minVal, true)) {
          return [0, -1];
        }
        if (ltHelper(maxVal, val, false)) {
          return [0, rcd.length - 1];
        }
        break;
      case '$lte':
        if (ltHelper(val, minVal, false)) {
          return [0, -1];
        }
        if (ltHelper(maxVal, val, true)) {
          return [0, rcd.length - 1];
        }
        break;
      }

      // hone in on start position of value
      while (min < max) {
        mid = (min + max) >> 1;

        if (ltHelper(rcd[index[mid]][prop], val, false)) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }

      var lbound = min;

      // do not reset min, as the upper bound cannot be prior to the found low bound
      max = index.length - 1;

      // hone in on end position of value
      while (min < max) {
        mid = (min + max) >> 1;

        if (ltHelper(val, rcd[index[mid]][prop], false)) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }

      var ubound = max;

      var lval = rcd[index[lbound]][prop];
      var uval = rcd[index[ubound]][prop];

      switch (op) {
      case '$eq':
        if (lval !== val) {
          return [0, -1];
        }
        if (uval !== val) {
          ubound--;
        }

        return [lbound, ubound];
      case '$dteq':
        if (lval > val || lval < val) {
          return [0, -1];
        }
        if (uval > val || uval < val) {
          ubound--;
        }

        return [lbound, ubound];


      case '$gt':
        if (ltHelper(uval, val, true)) {
          return [0, -1];
        }

        return [ubound, rcd.length - 1];

      case '$gte':
        if (ltHelper(lval, val, false)) {
          return [0, -1];
        }

        return [lbound, rcd.length - 1];

      case '$lt':
        if (lbound === 0 && ltHelper(lval, val, false)) {
          return [0, 0];
        }
        return [0, lbound - 1];

      case '$lte':
        if (uval !== val) {
          ubound--;
        }

        if (ubound === 0 && ltHelper(uval, val, false)) {
          return [0, 0];
        }
        return [0, ubound];

      default:
        return [0, rcd.length - 1];
      }
    };

    /**
     * findOr() - oversee the operation of OR'ed query expressions.
     *    OR'ed expression evaluation runs each expression individually against the full collection,
     *    and finally does a set OR on each expression's results.
     *    Each evaluation can utilize a binary index to prevent multiple linear array scans.
     *
     * @param {array} expressionArray - array of expressions
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.findOr = function (expressionArray) {
      var fr = null,
        fri = 0,
        frlen = 0,
        docset = [],
        idxset = [],
        idx = 0,
        origCount = this.count();

      // If filter is already initialized, then we query against only those items already in filter.
      // This means no index utilization for fields, so hopefully its filtered to a smallish filteredrows.
      for (var ei = 0, elen = expressionArray.length; ei < elen; ei++) {
        // we need to branch existing query to run each filter separately and combine results
        fr = this.branch().find(expressionArray[ei]).filteredrows;
        frlen = fr.length;
        // if the find operation did not reduce the initial set, then the initial set is the actual result
        if (frlen === origCount) {
          return this;
        }

        // add any document 'hits'
        for (fri = 0; fri < frlen; fri++) {
          idx = fr[fri];
          if (idxset[idx] === undefined) {
            idxset[idx] = true;
            docset.push(idx);
          }
        }
      }

      this.filteredrows = docset;
      this.filterInitialized = true;

      return this;
    };
    Resultset.prototype.$or = Resultset.prototype.findOr;

    /**
     * findAnd() - oversee the operation of AND'ed query expressions.
     *    AND'ed expression evaluation runs each expression progressively against the full collection,
     *    internally utilizing existing chained resultset functionality.
     *    Only the first filter can utilize a binary index.
     *
     * @param {array} expressionArray - array of expressions
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.findAnd = function (expressionArray) {
      // we have already implementing method chaining in this (our Resultset class)
      // so lets just progressively apply user supplied and filters
      for (var i = 0, len = expressionArray.length; i < len; i++) {
        if (this.count() === 0) {
          return this;
        }
        this.find(expressionArray[i]);
      }
      return this;
    };
    Resultset.prototype.$and = Resultset.prototype.findAnd;

    /**
     * Used for querying via a mongo-style query object.
     *
     * @param {object} query - A mongo-style query object used for filtering current results.
     * @param {boolean=} firstOnly - (Optional) Used by collection.findOne()
     * @returns {Resultset} this resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.find = function (query, firstOnly) {
      if (this.collection.data.length === 0) {
        if (this.searchIsChained) {
          this.filteredrows = [];
          this.filterInitialized = true;
          return this;
        }
        return [];
      }

      var queryObject = query || 'getAll',
        p,
        property,
        queryObjectOp,
        operator,
        value,
        key,
        searchByIndex = false,
        result = [],
        index = null;

      // if this was note invoked via findOne()
      firstOnly = firstOnly || false;

      if (typeof queryObject === 'object') {
        for (p in queryObject) {
          if (hasOwnProperty.call(queryObject, p)) {
            property = p;
            queryObjectOp = queryObject[p];
            break;
          }
        }
      }

      // apply no filters if they want all
      if (!property || queryObject === 'getAll') {
        // Chained queries can just do coll.chain().data() but let's
        // be versatile and allow this also coll.chain().find().data()

        // If a chained search, simply leave everything as-is.
        // Note: If no filter at this point, it will be properly
        // created by the follow-up queries or sorts that need it.
        // If not chained, then return the collection data array copy.
        return (this.searchIsChained) ? (this) : (this.collection.data.slice());
      }

      // injecting $and and $or expression tree evaluation here.
      if (property === '$and' || property === '$or') {
        if (this.searchIsChained) {
          this[property](queryObjectOp);

          // for chained find with firstonly,
          if (firstOnly && this.filteredrows.length > 1) {
            this.filteredrows = this.filteredrows.slice(0, 1);
          }

          return this;
        } else {
          // our $and operation internally chains filters
          result = this.collection.chain()[property](queryObjectOp).data();

          // if this was coll.findOne() return first object or empty array if null
          // since this is invoked from a constructor we can't return null, so we will
          // make null in coll.findOne();
          if (firstOnly) {
            return (result.length === 0) ? ([]) : (result[0]);
          }

          // not first only return all results
          return result;
        }
      }

      // see if query object is in shorthand mode (assuming eq operator)
      if (queryObjectOp === null || (typeof queryObjectOp !== 'object' || queryObjectOp instanceof Date)) {
        operator = '$eq';
        value = queryObjectOp;
      } else if (typeof queryObjectOp === 'object') {
        for (key in queryObjectOp) {
          if (hasOwnProperty.call(queryObjectOp, key)) {
            operator = key;
            value = queryObjectOp[key];
            break;
          }
        }
      } else {
        throw new Error('Do not know what you want to do.');
      }

      // for regex ops, precompile
      if (operator === '$regex') {
        if (Array.isArray(value)) {
          value = new RegExp(value[0], value[1]);
        } else if (!(value instanceof RegExp)) {
          value = new RegExp(value);
        }
      }

      // if user is deep querying the object such as find('name.first': 'odin')
      var usingDotNotation = (property.indexOf('.') !== -1);

      // if an index exists for the property being queried against, use it
      // for now only enabling for non-chained query (who's set of docs matches index)
      // or chained queries where it is the first filter applied and prop is indexed
      var doIndexCheck = !usingDotNotation &&
        (!this.searchIsChained || !this.filterInitialized);

      if (doIndexCheck && this.collection.binaryIndices[property] &&
        indexedOpsList.indexOf(operator) !== -1) {
        // this is where our lazy index rebuilding will take place
        // basically we will leave all indexes dirty until we need them
        // so here we will rebuild only the index tied to this property
        // ensureIndex() will only rebuild if flagged as dirty since we are not passing force=true param
        this.collection.ensureIndex(property);

        searchByIndex = true;
        index = this.collection.binaryIndices[property];
      }

      // the comparison function
      var fun = LokiOps[operator];

      // "shortcut" for collection data
      var t = this.collection.data;
      // filter data length
      var i = 0;

      // Query executed differently depending on :
      //    - whether it is chained or not
      //    - whether the property being queried has an index defined
      //    - if chained, we handle first pass differently for initial filteredrows[] population
      //
      // For performance reasons, each case has its own if block to minimize in-loop calculations

      // If not a chained query, bypass filteredrows and work directly against data
      if (!this.searchIsChained) {
        if (!searchByIndex) {
          i = t.length;

          if (firstOnly) {
            if (usingDotNotation) {
              property = property.split('.');
              while (i--) {
                if (dotSubScan(t[i], property, fun, value)) {
                  return (t[i]);
                }
              }
            } else {
              while (i--) {
                if (fun(t[i][property], value)) {
                  return (t[i]);
                }
              }
            }

            return [];
          }

          // if using dot notation then treat property as keypath such as 'name.first'.
          // currently supporting dot notation for non-indexed conditions only
          if (usingDotNotation) {
            property = property.split('.');
            while (i--) {
              if (dotSubScan(t[i], property, fun, value)) {
                result.push(t[i]);
              }
            }
          } else {
            while (i--) {
              if (fun(t[i][property], value)) {
                result.push(t[i]);
              }
            }
          }
        } else {
          // searching by binary index via calculateRange() utility method
          var seg = this.calculateRange(operator, property, value);

          // not chained so this 'find' was designated in Resultset constructor
          // so return object itself
          if (firstOnly) {
            if (seg[1] !== -1) {
              return t[index.values[seg[0]]];
            }
            return [];
          }

          for (i = seg[0]; i <= seg[1]; i++) {
            result.push(t[index.values[i]]);
          }
        }

        // not a chained query so return result as data[]
        return result;
      }


      // Otherwise this is a chained query

      var filter, rowIdx = 0;

      // If the filteredrows[] is already initialized, use it
      if (this.filterInitialized) {
        filter = this.filteredrows;
        i = filter.length;

        // currently supporting dot notation for non-indexed conditions only
        if (usingDotNotation) {
          property = property.split('.');
          while (i--) {
            rowIdx = filter[i];
            if (dotSubScan(t[rowIdx], property, fun, value)) {
              result.push(rowIdx);
            }
          }
        } else {
          while (i--) {
            rowIdx = filter[i];
            if (fun(t[rowIdx][property], value)) {
              result.push(rowIdx);
            }
          }
        }
      }
      // first chained query so work against data[] but put results in filteredrows
      else {
        // if not searching by index
        if (!searchByIndex) {
          i = t.length;

          if (usingDotNotation) {
            property = property.split('.');
            while (i--) {
              if (dotSubScan(t[i], property, fun, value)) {
                result.push(i);
              }
            }
          } else {
            while (i--) {
              if (fun(t[i][property], value)) {
                result.push(i);
              }
            }
          }
        } else {
          // search by index
          var segm = this.calculateRange(operator, property, value);

          for (i = segm[0]; i <= segm[1]; i++) {
            result.push(index.values[i]);
          }
        }

        this.filterInitialized = true; // next time work against filteredrows[]
      }

      this.filteredrows = result;
      return this;
    };


    /**
     * where() - Used for filtering via a javascript filter function.
     *
     * @param {function} fun - A javascript function used for filtering current results by.
     * @returns {Resultset} this resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.where = function (fun) {
      var viewFunction,
        result = [];

      if ('function' === typeof fun) {
        viewFunction = fun;
      } else {
        throw new TypeError('Argument is not a stored view or a function');
      }
      try {
        // if not a chained query then run directly against data[] and return object []
        if (!this.searchIsChained) {
          var i = this.collection.data.length;

          while (i--) {
            if (viewFunction(this.collection.data[i]) === true) {
              result.push(this.collection.data[i]);
            }
          }

          // not a chained query so returning result as data[]
          return result;
        }
        // else chained query, so run against filteredrows
        else {
          // If the filteredrows[] is already initialized, use it
          if (this.filterInitialized) {
            var j = this.filteredrows.length;

            while (j--) {
              if (viewFunction(this.collection.data[this.filteredrows[j]]) === true) {
                result.push(this.filteredrows[j]);
              }
            }

            this.filteredrows = result;

            return this;
          }
          // otherwise this is initial chained op, work against data, push into filteredrows[]
          else {
            var k = this.collection.data.length;

            while (k--) {
              if (viewFunction(this.collection.data[k]) === true) {
                result.push(k);
              }
            }

            this.filteredrows = result;
            this.filterInitialized = true;

            return this;
          }
        }
      } catch (err) {
        throw err;
      }
    };

    /**
     * count() - returns the number of documents in the resultset.
     *
     * @returns {number} The number of documents in the resultset.
     * @memberof Resultset
     */
    Resultset.prototype.count = function () {
      if (this.searchIsChained && this.filterInitialized) {
        return this.filteredrows.length;
      }
      return this.collection.count();
    };

    /**
     * Terminates the chain and returns array of filtered documents
     *
     * @param {object=} options - allows specifying 'forceClones' and 'forceCloneMethod' options.
     * @param {boolean} options.forceClones - Allows forcing the return of cloned objects even when
     *        the collection is not configured for clone object.
     * @param {string} options.forceCloneMethod - Allows overriding the default or collection specified cloning method.
     *        Possible values include 'parse-stringify', 'jquery-extend-deep', and 'shallow'
     *
     * @returns {array} Array of documents in the resultset
     * @memberof Resultset
     */
    Resultset.prototype.data = function (options) {
      var result = [],
        data = this.collection.data,
        len,
        i,
        method;

      options = options || {};

      // if this is chained resultset with no filters applied, just return collection.data
      if (this.searchIsChained && !this.filterInitialized) {
        if (this.filteredrows.length === 0) {
          // determine whether we need to clone objects or not
          if (this.collection.cloneObjects || options.forceClones) {
            len = data.length;
            method = options.forceCloneMethod || this.collection.cloneMethod;

            for (i = 0; i < len; i++) {
              result.push(clone(data[i], method));
            }
            return result;
          }
          // otherwise we are not cloning so return sliced array with same object references
          else {
            return data.slice();
          }
        } else {
          // filteredrows must have been set manually, so use it
          this.filterInitialized = true;
        }
      }

      var fr = this.filteredrows;
      len = fr.length;

      if (this.collection.cloneObjects || options.forceClones) {
        method = options.forceCloneMethod || this.collection.cloneMethod;
        for (i = 0; i < len; i++) {
          result.push(clone(data[fr[i]], method));
        }
      } else {
        for (i = 0; i < len; i++) {
          result.push(data[fr[i]]);
        }
      }
      return result;
    };

    /**
     * Used to run an update operation on all documents currently in the resultset.
     *
     * @param {function} updateFunction - User supplied updateFunction(obj) will be executed for each document object.
     * @returns {Resultset} this resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.update = function (updateFunction) {

      if (typeof (updateFunction) !== "function") {
        throw new TypeError('Argument is not a function');
      }

      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var len = this.filteredrows.length,
        rcd = this.collection.data;

      for (var idx = 0; idx < len; idx++) {
        // pass in each document object currently in resultset to user supplied updateFunction
        updateFunction(rcd[this.filteredrows[idx]]);

        // notify collection we have changed this object so it can update meta and allow DynamicViews to re-evaluate
        this.collection.update(rcd[this.filteredrows[idx]]);
      }

      return this;
    };

    /**
     * Removes all document objects which are currently in resultset from collection (as well as resultset)
     *
     * @returns {Resultset} this (empty) resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.remove = function () {

      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      this.collection.remove(this.data());

      this.filteredrows = [];

      return this;
    };

    /**
     * data transformation via user supplied functions
     *
     * @param {function} mapFunction - this function accepts a single document for you to transform and return
     * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value
     * @returns {value} The output of your reduceFunction
     * @memberof Resultset
     */
    Resultset.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data().map(mapFunction));
      } catch (err) {
        throw err;
      }
    };

    /**
     * eqJoin() - Left joining two sets of data. Join keys can be defined or calculated properties
     * eqJoin expects the right join key values to be unique.  Otherwise left data will be joined on the last joinData object with that key
     * @param {Array} joinData - Data array to join to.
     * @param {(string|function)} leftJoinKey - Property name in this result set to join on or a function to produce a value to join on
     * @param {(string|function)} rightJoinKey - Property name in the joinData to join on or a function to produce a value to join on
     * @param {function=} mapFun - (Optional) A function that receives each matching pair and maps them into output objects - function(left,right){return joinedObject}
     * @returns {Resultset} A resultset with data in the format [{left: leftObj, right: rightObj}]
     * @memberof Resultset
     */
    Resultset.prototype.eqJoin = function (joinData, leftJoinKey, rightJoinKey, mapFun) {

      var leftData = [],
        leftDataLength,
        rightData = [],
        rightDataLength,
        key,
        result = [],
        leftKeyisFunction = typeof leftJoinKey === 'function',
        rightKeyisFunction = typeof rightJoinKey === 'function',
        joinMap = {};

      //get the left data
      leftData = this.data();
      leftDataLength = leftData.length;

      //get the right data
      if (joinData instanceof Resultset) {
        rightData = joinData.data();
      } else if (Array.isArray(joinData)) {
        rightData = joinData;
      } else {
        throw new TypeError('joinData needs to be an array or result set');
      }
      rightDataLength = rightData.length;

      //construct a lookup table

      for (var i = 0; i < rightDataLength; i++) {
        key = rightKeyisFunction ? rightJoinKey(rightData[i]) : rightData[i][rightJoinKey];
        joinMap[key] = rightData[i];
      }

      if (!mapFun) {
        mapFun = function (left, right) {
          return {
            left: left,
            right: right
          };
        };
      }

      //Run map function over each object in the resultset
      for (var j = 0; j < leftDataLength; j++) {
        key = leftKeyisFunction ? leftJoinKey(leftData[j]) : leftData[j][leftJoinKey];
        result.push(mapFun(leftData[j], joinMap[key] || {}));
      }

      //return return a new resultset with no filters
      this.collection = new Collection('joinData');
      this.collection.insert(result);
      this.filteredrows = [];
      this.filterInitialized = false;

      return this;
    };

    Resultset.prototype.map = function (mapFun) {
      var data = this.data().map(mapFun);
      //return return a new resultset with no filters
      this.collection = new Collection('mappedData');
      this.collection.insert(data);
      this.filteredrows = [];
      this.filterInitialized = false;

      return this;
    };

    /**
     * DynamicView class is a versatile 'live' view class which can have filters and sorts applied.
     *    Collection.addDynamicView(name) instantiates this DynamicView object and notifies it
     *    whenever documents are add/updated/removed so it can remain up-to-date. (chainable)
     *
     * @example
     * var mydv = mycollection.addDynamicView('test');  // default is non-persistent
     * mydv.applyFind({ 'doors' : 4 });
     * mydv.applyWhere(function(obj) { return obj.name === 'Toyota'; });
     * var results = mydv.data();
     *
     * @constructor DynamicView
     * @implements LokiEventEmitter
     * @param {Collection} collection - A reference to the collection to work against
     * @param {string} name - The name of this dynamic view
     * @param {object=} options - (Optional) Pass in object with 'persistent' and/or 'sortPriority' options.
     * @param {boolean} options.persistent - indicates if view is to main internal results array in 'resultdata'
     * @param {string} options.sortPriority - 'passive' (sorts performed on call to data) or 'active' (after updates)
     * @param {number} options.minRebuildInterval - minimum rebuild interval (need clarification to docs here)
     * @see {@link Collection#addDynamicView} to construct instances of DynamicView
     */
    function DynamicView(collection, name, options) {
      this.collection = collection;
      this.name = name;
      this.rebuildPending = false;
      this.options = options || {};

      if (!this.options.hasOwnProperty('persistent')) {
        this.options.persistent = false;
      }

      // 'persistentSortPriority':
      // 'passive' will defer the sort phase until they call data(). (most efficient overall)
      // 'active' will sort async whenever next idle. (prioritizes read speeds)
      if (!this.options.hasOwnProperty('sortPriority')) {
        this.options.sortPriority = 'passive';
      }

      if (!this.options.hasOwnProperty('minRebuildInterval')) {
        this.options.minRebuildInterval = 1;
      }

      this.resultset = new Resultset(collection);
      this.resultdata = [];
      this.resultsdirty = false;

      this.cachedresultset = null;

      // keep ordered filter pipeline
      this.filterPipeline = [];

      // sorting member variables
      // we only support one active search, applied using applySort() or applySimpleSort()
      this.sortFunction = null;
      this.sortCriteria = null;
      this.sortDirty = false;

      // for now just have 1 event for when we finally rebuilt lazy view
      // once we refactor transactions, i will tie in certain transactional events

      this.events = {
        'rebuild': []
      };
    }

    DynamicView.prototype = new LokiEventEmitter();


    /**
     * rematerialize() - intended for use immediately after deserialization (loading)
     *    This will clear out and reapply filterPipeline ops, recreating the view.
     *    Since where filters do not persist correctly, this method allows
     *    restoring the view to state where user can re-apply those where filters.
     *
     * @param {Object=} options - (Optional) allows specification of 'removeWhereFilters' option
     * @returns {DynamicView} This dynamic view for further chained ops.
     * @memberof DynamicView
     * @fires DynamicView.rebuild
     */
    DynamicView.prototype.rematerialize = function (options) {
      var fpl,
        fpi,
        idx;

      options = options || {};

      this.resultdata = [];
      this.resultsdirty = true;
      this.resultset = new Resultset(this.collection);

      if (this.sortFunction || this.sortCriteria) {
        this.sortDirty = true;
      }

      if (options.hasOwnProperty('removeWhereFilters')) {
        // for each view see if it had any where filters applied... since they don't
        // serialize those functions lets remove those invalid filters
        fpl = this.filterPipeline.length;
        fpi = fpl;
        while (fpi--) {
          if (this.filterPipeline[fpi].type === 'where') {
            if (fpi !== this.filterPipeline.length - 1) {
              this.filterPipeline[fpi] = this.filterPipeline[this.filterPipeline.length - 1];
            }

            this.filterPipeline.length--;
          }
        }
      }

      // back up old filter pipeline, clear filter pipeline, and reapply pipeline ops
      var ofp = this.filterPipeline;
      this.filterPipeline = [];

      // now re-apply 'find' filterPipeline ops
      fpl = ofp.length;
      for (idx = 0; idx < fpl; idx++) {
        this.applyFind(ofp[idx].val);
      }

      // during creation of unit tests, i will remove this forced refresh and leave lazy
      this.data();

      // emit rebuild event in case user wants to be notified
      this.emit('rebuild', this);

      return this;
    };

    /**
     * branchResultset() - Makes a copy of the internal resultset for branched queries.
     *    Unlike this dynamic view, the branched resultset will not be 'live' updated,
     *    so your branched query should be immediately resolved and not held for future evaluation.
     *
     * @param {(string|array=)} transform - Optional name of collection transform, or an array of transform steps
     * @param {object=} parameters - optional parameters (if optional transform requires them)
     * @returns {Resultset} A copy of the internal resultset for branched queries.
     * @memberof DynamicView
     */
    DynamicView.prototype.branchResultset = function (transform, parameters) {
      var rs = this.resultset.branch();

      if (typeof transform === 'undefined') {
        return rs;
      }

      return rs.transform(transform, parameters);
    };

    /**
     * toJSON() - Override of toJSON to avoid circular references
     *
     */
    DynamicView.prototype.toJSON = function () {
      var copy = new DynamicView(this.collection, this.name, this.options);

      copy.resultset = this.resultset;
      copy.resultdata = []; // let's not save data (copy) to minimize size
      copy.resultsdirty = true;
      copy.filterPipeline = this.filterPipeline;
      copy.sortFunction = this.sortFunction;
      copy.sortCriteria = this.sortCriteria;
      copy.sortDirty = this.sortDirty;

      // avoid circular reference, reapply in db.loadJSON()
      copy.collection = null;

      return copy;
    };

    /**
     * removeFilters() - Used to clear pipeline and reset dynamic view to initial state.
     *     Existing options should be retained.
     * @memberof DynamicView
     */
    DynamicView.prototype.removeFilters = function () {
      this.rebuildPending = false;
      this.resultset.reset();
      this.resultdata = [];
      this.resultsdirty = false;

      this.cachedresultset = null;

      // keep ordered filter pipeline
      this.filterPipeline = [];

      // sorting member variables
      // we only support one active search, applied using applySort() or applySimpleSort()
      this.sortFunction = null;
      this.sortCriteria = null;
      this.sortDirty = false;
    };

    /**
     * applySort() - Used to apply a sort to the dynamic view
     * @example
     * dv.applySort(function(obj1, obj2) {
     *   if (obj1.name === obj2.name) return 0;
     *   if (obj1.name > obj2.name) return 1;
     *   if (obj1.name < obj2.name) return -1;
     * });
     *
     * @param {function} comparefun - a javascript compare function used for sorting
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applySort = function (comparefun) {
      this.sortFunction = comparefun;
      this.sortCriteria = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * applySimpleSort() - Used to specify a property used for view translation.
     * @example
     * dv.applySimpleSort("name");
     *
     * @param {string} propname - Name of property by which to sort.
     * @param {boolean=} isdesc - (Optional) If true, the sort will be in descending order.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applySimpleSort = function (propname, isdesc) {
      this.sortCriteria = [
        [propname, isdesc || false]
      ];
      this.sortFunction = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * applySortCriteria() - Allows sorting a resultset based on multiple columns.
     * @example
     * // to sort by age and then name (both ascending)
     * dv.applySortCriteria(['age', 'name']);
     * // to sort by age (ascending) and then by name (descending)
     * dv.applySortCriteria(['age', ['name', true]);
     * // to sort by age (descending) and then by name (descending)
     * dv.applySortCriteria(['age', true], ['name', true]);
     *
     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order
     * @returns {DynamicView} Reference to this DynamicView, sorted, for future chain operations.
     * @memberof DynamicView
     */
    DynamicView.prototype.applySortCriteria = function (criteria) {
      this.sortCriteria = criteria;
      this.sortFunction = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * startTransaction() - marks the beginning of a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.startTransaction = function () {
      this.cachedresultset = this.resultset.copy();

      return this;
    };

    /**
     * commit() - commits a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.commit = function () {
      this.cachedresultset = null;

      return this;
    };

    /**
     * rollback() - rolls back a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.rollback = function () {
      this.resultset = this.cachedresultset;

      if (this.options.persistent) {
        // for now just rebuild the persistent dynamic view data in this worst case scenario
        // (a persistent view utilizing transactions which get rolled back), we already know the filter so not too bad.
        this.resultdata = this.resultset.data();

        this.emit('rebuild', this);
      }

      return this;
    };


    /**
     * Implementation detail.
     * _indexOfFilterWithId() - Find the index of a filter in the pipeline, by that filter's ID.
     *
     * @param {(string|number)} uid - The unique ID of the filter.
     * @returns {number}: index of the referenced filter in the pipeline; -1 if not found.
     */
    DynamicView.prototype._indexOfFilterWithId = function (uid) {
      if (typeof uid === 'string' || typeof uid === 'number') {
        for (var idx = 0, len = this.filterPipeline.length; idx < len; idx += 1) {
          if (uid === this.filterPipeline[idx].uid) {
            return idx;
          }
        }
      }
      return -1;
    };

    /**
     * Implementation detail.
     * _addFilter() - Add the filter object to the end of view's filter pipeline and apply the filter to the resultset.
     *
     * @param {object} filter - The filter object. Refer to applyFilter() for extra details.
     */
    DynamicView.prototype._addFilter = function (filter) {
      this.filterPipeline.push(filter);
      this.resultset[filter.type](filter.val);
    };

    /**
     * reapplyFilters() - Reapply all the filters in the current pipeline.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.reapplyFilters = function () {
      this.resultset.reset();

      this.cachedresultset = null;
      if (this.options.persistent) {
        this.resultdata = [];
        this.resultsdirty = true;
      }

      var filters = this.filterPipeline;
      this.filterPipeline = [];

      for (var idx = 0, len = filters.length; idx < len; idx += 1) {
        this._addFilter(filters[idx]);
      }

      if (this.sortFunction || this.sortCriteria) {
        this.queueSortPhase();
      } else {
        this.queueRebuildEvent();
      }

      return this;
    };

    /**
     * applyFilter() - Adds or updates a filter in the DynamicView filter pipeline
     *
     * @param {object} filter - A filter object to add to the pipeline.
     *    The object is in the format { 'type': filter_type, 'val', filter_param, 'uid', optional_filter_id }
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applyFilter = function (filter) {
      var idx = this._indexOfFilterWithId(filter.uid);
      if (idx >= 0) {
        this.filterPipeline[idx] = filter;
        return this.reapplyFilters();
      }

      this.cachedresultset = null;
      if (this.options.persistent) {
        this.resultdata = [];
        this.resultsdirty = true;
      }

      this._addFilter(filter);

      if (this.sortFunction || this.sortCriteria) {
        this.queueSortPhase();
      } else {
        this.queueRebuildEvent();
      }

      return this;
    };

    /**
     * applyFind() - Adds or updates a mongo-style query option in the DynamicView filter pipeline
     *
     * @param {object} query - A mongo-style query object to apply to pipeline
     * @param {(string|number)=} uid - Optional: The unique ID of this filter, to reference it in the future.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applyFind = function (query, uid) {
      this.applyFilter({
        type: 'find',
        val: query,
        uid: uid
      });
      return this;
    };

    /**
     * applyWhere() - Adds or updates a javascript filter function in the DynamicView filter pipeline
     *
     * @param {function} fun - A javascript filter function to apply to pipeline
     * @param {(string|number)=} uid - Optional: The unique ID of this filter, to reference it in the future.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applyWhere = function (fun, uid) {
      this.applyFilter({
        type: 'where',
        val: fun,
        uid: uid
      });
      return this;
    };

    /**
     * removeFilter() - Remove the specified filter from the DynamicView filter pipeline
     *
     * @param {(string|number)} uid - The unique ID of the filter to be removed.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.removeFilter = function (uid) {
      var idx = this._indexOfFilterWithId(uid);
      if (idx < 0) {
        throw new Error("Dynamic view does not contain a filter with ID: " + uid);
      }

      this.filterPipeline.splice(idx, 1);
      this.reapplyFilters();
      return this;
    };

    /**
     * count() - returns the number of documents representing the current DynamicView contents.
     *
     * @returns {number} The number of documents representing the current DynamicView contents.
     * @memberof DynamicView
     */
    DynamicView.prototype.count = function () {
      if (this.options.persistent) {
        return this.resultdata.length;
      }
      return this.resultset.count();
    };

    /**
     * data() - resolves and pending filtering and sorting, then returns document array as result.
     *
     * @returns {array} An array of documents representing the current DynamicView contents.
     * @memberof DynamicView
     */
    DynamicView.prototype.data = function () {
      // using final sort phase as 'catch all' for a few use cases which require full rebuild
      if (this.sortDirty || this.resultsdirty) {
        this.performSortPhase({
          suppressRebuildEvent: true
        });
      }
      return (this.options.persistent) ? (this.resultdata) : (this.resultset.data());
    };

    /**
     * queueRebuildEvent() - When the view is not sorted we may still wish to be notified of rebuild events.
     *     This event will throttle and queue a single rebuild event when batches of updates affect the view.
     */
    DynamicView.prototype.queueRebuildEvent = function () {
      if (this.rebuildPending) {
        return;
      }
      this.rebuildPending = true;

      var self = this;
      setTimeout(function () {
        if (self.rebuildPending) {
          self.rebuildPending = false;
          self.emit('rebuild', self);
        }
      }, this.options.minRebuildInterval);
    };

    /**
     * queueSortPhase : If the view is sorted we will throttle sorting to either :
     *    (1) passive - when the user calls data(), or
     *    (2) active - once they stop updating and yield js thread control
     */
    DynamicView.prototype.queueSortPhase = function () {
      // already queued? exit without queuing again
      if (this.sortDirty) {
        return;
      }
      this.sortDirty = true;

      var self = this;
      if (this.options.sortPriority === "active") {
        // active sorting... once they are done and yield js thread, run async performSortPhase()
        setTimeout(function () {
          self.performSortPhase();
        }, this.options.minRebuildInterval);
      } else {
        // must be passive sorting... since not calling performSortPhase (until data call), lets use queueRebuildEvent to
        // potentially notify user that data has changed.
        this.queueRebuildEvent();
      }
    };

    /**
     * performSortPhase() - invoked synchronously or asynchronously to perform final sort phase (if needed)
     *
     */
    DynamicView.prototype.performSortPhase = function (options) {
      // async call to this may have been pre-empted by synchronous call to data before async could fire
      if (!this.sortDirty && !this.resultsdirty) {
        return;
      }

      options = options || {};

      if (this.sortDirty) {
        if (this.sortFunction) {
          this.resultset.sort(this.sortFunction);
        } else if (this.sortCriteria) {
          this.resultset.compoundsort(this.sortCriteria);
        }

        this.sortDirty = false;
      }

      if (this.options.persistent) {
        // persistent view, rebuild local resultdata array
        this.resultdata = this.resultset.data();
        this.resultsdirty = false;
      }

      if (!options.suppressRebuildEvent) {
        this.emit('rebuild', this);
      }
    };

    /**
     * evaluateDocument() - internal method for (re)evaluating document inclusion.
     *    Called by : collection.insert() and collection.update().
     *
     * @param {int} objIndex - index of document to (re)run through filter pipeline.
     * @param {bool} isNew - true if the document was just added to the collection.
     */
    DynamicView.prototype.evaluateDocument = function (objIndex, isNew) {
      // if no filter applied yet, the result 'set' should remain 'everything'
      if (!this.resultset.filterInitialized) {
        if (this.options.persistent) {
          this.resultdata = this.resultset.data();
        }
        // need to re-sort to sort new document
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }
        return;
      }

      var ofr = this.resultset.filteredrows;
      var oldPos = (isNew) ? (-1) : (ofr.indexOf(+objIndex));
      var oldlen = ofr.length;

      // creating a 1-element resultset to run filter chain ops on to see if that doc passes filters;
      // mostly efficient algorithm, slight stack overhead price (this function is called on inserts and updates)
      var evalResultset = new Resultset(this.collection);
      evalResultset.filteredrows = [objIndex];
      evalResultset.filterInitialized = true;
      var filter;
      for (var idx = 0, len = this.filterPipeline.length; idx < len; idx++) {
        filter = this.filterPipeline[idx];
        evalResultset[filter.type](filter.val);
      }

      // not a true position, but -1 if not pass our filter(s), 0 if passed filter(s)
      var newPos = (evalResultset.filteredrows.length === 0) ? -1 : 0;

      // wasn't in old, shouldn't be now... do nothing
      if (oldPos === -1 && newPos === -1) return;

      // wasn't in resultset, should be now... add
      if (oldPos === -1 && newPos !== -1) {
        ofr.push(objIndex);

        if (this.options.persistent) {
          this.resultdata.push(this.collection.data[objIndex]);
        }

        // need to re-sort to sort new document
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }

        return;
      }

      // was in resultset, shouldn't be now... delete
      if (oldPos !== -1 && newPos === -1) {
        if (oldPos < oldlen - 1) {
          // http://dvolvr.davidwaterston.com/2013/06/09/restating-the-obvious-the-fastest-way-to-truncate-an-array-in-javascript/comment-page-1/
          ofr[oldPos] = ofr[oldlen - 1];
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata[oldPos] = this.resultdata[oldlen - 1];
            this.resultdata.length = oldlen - 1;
          }
        } else {
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata.length = oldlen - 1;
          }
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }

        return;
      }

      // was in resultset, should still be now... (update persistent only?)
      if (oldPos !== -1 && newPos !== -1) {
        if (this.options.persistent) {
          // in case document changed, replace persistent view data with the latest collection.data document
          this.resultdata[oldPos] = this.collection.data[objIndex];
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }

        return;
      }
    };

    /**
     * removeDocument() - internal function called on collection.delete()
     */
    DynamicView.prototype.removeDocument = function (objIndex) {
      // if no filter applied yet, the result 'set' should remain 'everything'
      if (!this.resultset.filterInitialized) {
        if (this.options.persistent) {
          this.resultdata = this.resultset.data();
        }
        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }
        return;
      }

      var ofr = this.resultset.filteredrows;
      var oldPos = ofr.indexOf(+objIndex);
      var oldlen = ofr.length;
      var idx;

      if (oldPos !== -1) {
        // if not last row in resultdata, swap last to hole and truncate last row
        if (oldPos < oldlen - 1) {
          ofr[oldPos] = ofr[oldlen - 1];
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata[oldPos] = this.resultdata[oldlen - 1];
            this.resultdata.length = oldlen - 1;
          }
        }
        // last row, so just truncate last row
        else {
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata.length = oldlen - 1;
          }
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }
      }

      // since we are using filteredrows to store data array positions
      // if they remove a document (whether in our view or not),
      // we need to adjust array positions -1 for all document array references after that position
      oldlen = ofr.length;
      for (idx = 0; idx < oldlen; idx++) {
        if (ofr[idx] > objIndex) {
          ofr[idx]--;
        }
      }
    };

    /**
     * mapReduce() - data transformation via user supplied functions
     *
     * @param {function} mapFunction - this function accepts a single document for you to transform and return
     * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value
     * @returns The output of your reduceFunction
     * @memberof DynamicView
     */
    DynamicView.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data().map(mapFunction));
      } catch (err) {
        throw err;
      }
    };


    /**
     * Collection class that handles documents of same type
     * @constructor Collection
     * @implements LokiEventEmitter
     * @param {string} name - collection name
     * @param {(array|object)=} options - (optional) array of property names to be indicized OR a configuration object
     * @param {array} options.unique - array of property names to define unique constraints for
     * @param {array} options.exact - array of property names to define exact constraints for
     * @param {array} options.indices - array property names to define binary indexes for
     * @param {boolean} options.asyncListeners - default is false
     * @param {boolean} options.disableChangesApi - default is true
     * @param {boolean} options.autoupdate - use Object.observe to update objects automatically (default: false)
     * @param {boolean} options.clone - specify whether inserts and queries clone to/from user
     * @param {string} options.cloneMethod - 'parse-stringify' (default), 'jquery-extend-deep', 'shallow'
     * @param {int} options.ttlInterval - time interval for clearing out 'aged' documents; not set by default.
     * @see {@link Loki#addCollection} for normal creation of collections
     */
    function Collection(name, options) {
      // the name of the collection

      this.name = name;
      // the data held by the collection
      this.data = [];
      this.idIndex = []; // index of id
      this.binaryIndices = {}; // user defined indexes
      this.constraints = {
        unique: {},
        exact: {}
      };

      // unique contraints contain duplicate object references, so they are not persisted.
      // we will keep track of properties which have unique contraint applied here, and regenerate on load
      this.uniqueNames = [];

      // transforms will be used to store frequently used query chains as a series of steps
      // which itself can be stored along with the database.
      this.transforms = {};

      // the object type of the collection
      this.objType = name;

      // in autosave scenarios we will use collection level dirty flags to determine whether save is needed.
      // currently, if any collection is dirty we will autosave the whole database if autosave is configured.
      // defaulting to true since this is called from addCollection and adding a collection should trigger save
      this.dirty = true;

      // private holders for cached data
      this.cachedIndex = null;
      this.cachedBinaryIndex = null;
      this.cachedData = null;
      var self = this;

      /* OPTIONS */
      options = options || {};

      // exact match and unique constraints
      if (options.hasOwnProperty('unique')) {
        if (!Array.isArray(options.unique)) {
          options.unique = [options.unique];
        }
        options.unique.forEach(function (prop) {
          self.uniqueNames.push(prop); // used to regenerate on subsequent database loads
          self.constraints.unique[prop] = new UniqueIndex(prop);
        });
      }

      if (options.hasOwnProperty('exact')) {
        options.exact.forEach(function (prop) {
          self.constraints.exact[prop] = new ExactIndex(prop);
        });
      }

      // is collection transactional
      this.transactional = options.hasOwnProperty('transactional') ? options.transactional : false;

      // options to clone objects when inserting them
      this.cloneObjects = options.hasOwnProperty('clone') ? options.clone : false;

      // default clone method (if enabled) is parse-stringify
      this.cloneMethod = options.hasOwnProperty('cloneMethod') ? options.cloneMethod : "parse-stringify";

      // option to make event listeners async, default is sync
      this.asyncListeners = options.hasOwnProperty('asyncListeners') ? options.asyncListeners : false;

      // disable track changes
      this.disableChangesApi = options.hasOwnProperty('disableChangesApi') ? options.disableChangesApi : true;

      // option to observe objects and update them automatically, ignored if Object.observe is not supported
      this.autoupdate = options.hasOwnProperty('autoupdate') ? options.autoupdate : false;

      //option to activate a cleaner daemon - clears "aged" documents at set intervals.
      this.ttl = {
        age: null,
        ttlInterval: null,
        daemon: null
      };
      this.setTTL(options.ttl || -1, options.ttlInterval);

      // currentMaxId - change manually at your own peril!
      this.maxId = 0;

      this.DynamicViews = [];

      // events
      this.events = {
        'insert': [],
        'update': [],
        'pre-insert': [],
        'pre-update': [],
        'close': [],
        'flushbuffer': [],
        'error': [],
        'delete': [],
        'warning': []
      };

      // changes are tracked by collection and aggregated by the db
      this.changes = [];

      // initialize the id index
      this.ensureId();
      var indices = [];
      // initialize optional user-supplied indices array ['age', 'lname', 'zip']
      if (options && options.indices) {
        if (Object.prototype.toString.call(options.indices) === '[object Array]') {
          indices = options.indices;
        } else if (typeof options.indices === 'string') {
          indices = [options.indices];
        } else {
          throw new TypeError('Indices needs to be a string or an array of strings');
        }
      }

      for (var idx = 0; idx < indices.length; idx++) {
        this.ensureIndex(indices[idx]);
      }

      function observerCallback(changes) {

        var changedObjects = typeof Set === 'function' ? new Set() : [];

        if (!changedObjects.add)
          changedObjects.add = function (object) {
            if (this.indexOf(object) === -1)
              this.push(object);
            return this;
          };

        changes.forEach(function (change) {
          changedObjects.add(change.object);
        });

        changedObjects.forEach(function (object) {
          if (!hasOwnProperty.call(object, '$loki'))
            return self.removeAutoUpdateObserver(object);
          try {
            self.update(object);
          } catch (err) {}
        });
      }

      this.observerCallback = observerCallback;

      /*
       * This method creates a clone of the current status of an object and associates operation and collection name,
       * so the parent db can aggregate and generate a changes object for the entire db
       */
      function createChange(name, op, obj) {
        self.changes.push({
          name: name,
          operation: op,
          obj: JSON.parse(JSON.stringify(obj))
        });
      }

      // clear all the changes
      function flushChanges() {
        self.changes = [];
      }

      this.getChanges = function () {
        return self.changes;
      };

      this.flushChanges = flushChanges;

      /**
       * If the changes API is disabled make sure only metadata is added without re-evaluating everytime if the changesApi is enabled
       */
      function insertMeta(obj) {
        if (!obj) {
          return;
        }
        if (!obj.meta) {
          obj.meta = {};
        }

        obj.meta.created = (new Date()).getTime();
        obj.meta.revision = 0;
      }

      function updateMeta(obj) {
        if (!obj) {
          return;
        }
        obj.meta.updated = (new Date()).getTime();
        obj.meta.revision += 1;
      }

      function createInsertChange(obj) {
        createChange(self.name, 'I', obj);
      }

      function createUpdateChange(obj) {
        createChange(self.name, 'U', obj);
      }

      function insertMetaWithChange(obj) {
        insertMeta(obj);
        createInsertChange(obj);
      }

      function updateMetaWithChange(obj) {
        updateMeta(obj);
        createUpdateChange(obj);
      }


      /* assign correct handler based on ChangesAPI flag */
      var insertHandler, updateHandler;

      function setHandlers() {
        insertHandler = self.disableChangesApi ? insertMeta : insertMetaWithChange;
        updateHandler = self.disableChangesApi ? updateMeta : updateMetaWithChange;
      }

      setHandlers();

      this.setChangesApi = function (enabled) {
        self.disableChangesApi = !enabled;
        setHandlers();
      };
      /**
       * built-in events
       */
      this.on('insert', function insertCallback(obj) {
        insertHandler(obj);
      });

      this.on('update', function updateCallback(obj) {
        updateHandler(obj);
      });

      this.on('delete', function deleteCallback(obj) {
        if (!self.disableChangesApi) {
          createChange(self.name, 'R', obj);
        }
      });

      this.on('warning', function (warning) {
        self.console.warn(warning);
      });
      // for de-serialization purposes
      flushChanges();
    }

    Collection.prototype = new LokiEventEmitter();

    Collection.prototype.console = {
      log: function () {},
      warn: function () {},
      error: function () {},
    };

    Collection.prototype.addAutoUpdateObserver = function (object) {
      if (!this.autoupdate || typeof Object.observe !== 'function')
        return;

      Object.observe(object, this.observerCallback, ['add', 'update', 'delete', 'reconfigure', 'setPrototype']);
    };

    Collection.prototype.removeAutoUpdateObserver = function (object) {
      if (!this.autoupdate || typeof Object.observe !== 'function')
        return;

      Object.unobserve(object, this.observerCallback);
    };

    /**
     * Adds a named collection transform to the collection
     * @param {string} name - name to associate with transform
     * @param {array} transform - an array of transformation 'step' objects to save into the collection
     * @memberof Collection
     */
    Collection.prototype.addTransform = function (name, transform) {
      if (this.transforms.hasOwnProperty(name)) {
        throw new Error("a transform by that name already exists");
      }

      this.transforms[name] = transform;
    };

    /**
     * Updates a named collection transform to the collection
     * @param {string} name - name to associate with transform
     * @param {object} transform - a transformation object to save into collection
     * @memberof Collection
     */
    Collection.prototype.setTransform = function (name, transform) {
      this.transforms[name] = transform;
    };

    /**
     * Removes a named collection transform from the collection
     * @param {string} name - name of collection transform to remove
     * @memberof Collection
     */
    Collection.prototype.removeTransform = function (name) {
      delete this.transforms[name];
    };

    Collection.prototype.byExample = function (template) {
      var k, obj, query;
      query = [];
      for (k in template) {
        if (!template.hasOwnProperty(k)) continue;
        query.push((
          obj = {},
          obj[k] = template[k],
          obj
        ));
      }
      return {
        '$and': query
      };
    };

    Collection.prototype.findObject = function (template) {
      return this.findOne(this.byExample(template));
    };

    Collection.prototype.findObjects = function (template) {
      return this.find(this.byExample(template));
    };

    /*----------------------------+
    | TTL daemon                  |
    +----------------------------*/
    Collection.prototype.ttlDaemonFuncGen = function () {
      var collection = this;
      var age = this.ttl.age;
      return function ttlDaemon() {
        var now = Date.now();
        var toRemove = collection.chain().where(function daemonFilter(member) {
          var timestamp = member.meta.updated || member.meta.created;
          var diff = now - timestamp;
          return age < diff;
        });
        toRemove.remove();
      };
    };

    Collection.prototype.setTTL = function (age, interval) {
      if (age < 0) {
        clearInterval(this.ttl.daemon);
      } else {
        this.ttl.age = age;
        this.ttl.ttlInterval = interval;
        this.ttl.daemon = setInterval(this.ttlDaemonFuncGen(), interval);
      }
    };

    /*----------------------------+
    | INDEXING                    |
    +----------------------------*/

    /**
     * create a row filter that covers all documents in the collection
     */
    Collection.prototype.prepareFullDocIndex = function () {
      var len = this.data.length;
      var indexes = new Array(len);
      for (var i = 0; i < len; i += 1) {
        indexes[i] = i;
      }
      return indexes;
    };

    /**
     * Ensure binary index on a certain field
     * @param {string} property - name of property to create binary index on
     * @param {boolean=} force - (Optional) flag indicating whether to construct index immediately
     * @memberof Collection
     */
    Collection.prototype.ensureIndex = function (property, force) {
      // optional parameter to force rebuild whether flagged as dirty or not
      if (typeof (force) === 'undefined') {
        force = false;
      }

      if (property === null || property === undefined) {
        throw new Error('Attempting to set index without an associated property');
      }

      if (this.binaryIndices[property] && !force) {
        if (!this.binaryIndices[property].dirty) return;
      }

      var index = {
        'name': property,
        'dirty': true,
        'values': this.prepareFullDocIndex()
      };
      this.binaryIndices[property] = index;

      var wrappedComparer =
        (function (p, data) {
          return function (a, b) {
            var objAp = data[a][p],
              objBp = data[b][p];
            if (objAp !== objBp) {
              if (ltHelper(objAp, objBp, false)) return -1;
              if (gtHelper(objAp, objBp, false)) return 1;
            }
            return 0;
          };
        })(property, this.data);

      index.values.sort(wrappedComparer);
      index.dirty = false;

      this.dirty = true; // for autosave scenarios
    };

    Collection.prototype.getSequencedIndexValues = function (property) {
      var idx, idxvals = this.binaryIndices[property].values;
      var result = "";

      for (idx = 0; idx < idxvals.length; idx++) {
        result += " [" + idx + "] " + this.data[idxvals[idx]][property];
      }

      return result;
    };

    Collection.prototype.ensureUniqueIndex = function (field) {
      var index = this.constraints.unique[field];
      if (!index) {
        // keep track of new unique index for regenerate after database (re)load.
        if (this.uniqueNames.indexOf(field) == -1) {
          this.uniqueNames.push(field);
        }
      }

      // if index already existed, (re)loading it will likely cause collisions, rebuild always
      this.constraints.unique[field] = index = new UniqueIndex(field);
      this.data.forEach(function (obj) {
        index.set(obj);
      });
      return index;
    };

    /**
     * Ensure all binary indices
     */
    Collection.prototype.ensureAllIndexes = function (force) {
      var key, bIndices = this.binaryIndices;
      for (key in bIndices) {
        if (hasOwnProperty.call(bIndices, key)) {
          this.ensureIndex(key, force);
        }
      }
    };

    Collection.prototype.flagBinaryIndexesDirty = function () {
      var key, bIndices = this.binaryIndices;
      for (key in bIndices) {
        if (hasOwnProperty.call(bIndices, key)) {
          bIndices[key].dirty = true;
        }
      }
    };

    Collection.prototype.flagBinaryIndexDirty = function (index) {
      if (this.binaryIndices[index])
        this.binaryIndices[index].dirty = true;
    };

    /**
     * Quickly determine number of documents in collection (or query)
     * @param {object=} query - (optional) query object to count results of
     * @returns {number} number of documents in the collection
     * @memberof Collection
     */
    Collection.prototype.count = function (query) {
      if (!query) {
        return this.data.length;
      }

      return this.chain().find(query).filteredrows.length;
    };

    /**
     * Rebuild idIndex
     */
    Collection.prototype.ensureId = function () {
      var len = this.data.length,
        i = 0;

      this.idIndex = [];
      for (i; i < len; i += 1) {
        this.idIndex.push(this.data[i].$loki);
      }
    };

    /**
     * Rebuild idIndex async with callback - useful for background syncing with a remote server
     */
    Collection.prototype.ensureIdAsync = function (callback) {
      this.async(function () {
        this.ensureId();
      }, callback);
    };

    /**
     * Add a dynamic view to the collection
     * @param {string} name - name of dynamic view to add
     * @param {object=} options - (optional) options to configure dynamic view with
     * @param {boolean} options.persistent - indicates if view is to main internal results array in 'resultdata'
     * @param {string} options.sortPriority - 'passive' (sorts performed on call to data) or 'active' (after updates)
     * @param {number} options.minRebuildInterval - minimum rebuild interval (need clarification to docs here)
     * @returns {DynamicView} reference to the dynamic view added
     * @memberof Collection
     **/

    Collection.prototype.addDynamicView = function (name, options) {
      var dv = new DynamicView(this, name, options);
      this.DynamicViews.push(dv);

      return dv;
    };

    /**
     * Remove a dynamic view from the collection
     * @param {string} name - name of dynamic view to remove
     * @memberof Collection
     **/
    Collection.prototype.removeDynamicView = function (name) {
      for (var idx = 0; idx < this.DynamicViews.length; idx++) {
        if (this.DynamicViews[idx].name === name) {
          this.DynamicViews.splice(idx, 1);
        }
      }
    };

    /**
     * Look up dynamic view reference from within the collection
     * @param {string} name - name of dynamic view to retrieve reference of
     * @returns {DynamicView} A reference to the dynamic view with that name
     * @memberof Collection
     **/
    Collection.prototype.getDynamicView = function (name) {
      for (var idx = 0; idx < this.DynamicViews.length; idx++) {
        if (this.DynamicViews[idx].name === name) {
          return this.DynamicViews[idx];
        }
      }

      return null;
    };

    /**
     * find and update: pass a filtering function to select elements to be updated
     * and apply the updatefunctino to those elements iteratively
     * @param {function} filterFunction - filter function whose results will execute update
     * @param {function} updateFunction - update function to run against filtered documents
     * @memberof Collection
     */
    Collection.prototype.findAndUpdate = function (filterFunction, updateFunction) {
      var results = this.where(filterFunction),
        i = 0,
        obj;
      try {
        for (i; i < results.length; i++) {
          obj = updateFunction(results[i]);
          this.update(obj);
        }

      } catch (err) {
        this.rollback();
        this.console.error(err.message);
      }
    };

    /**
     * Adds object(s) to collection, ensure object(s) have meta properties, clone it if necessary, etc.
     * @param {(object|array)} doc - the document (or array of documents) to be inserted
     * @returns {(object|array)} document or documents inserted
     * @memberof Collection
     */
    Collection.prototype.insert = function (doc) {
      if (!Array.isArray(doc)) {
        return this.insertOne(doc);
      }

      // holder to the clone of the object inserted if collections is set to clone objects
      var obj;
      var results = [];
      for (var i = 0, len = doc.length; i < len; i++) {
        obj = this.insertOne(doc[i]);
        if (!obj) {
          return undefined;
        }
        results.push(obj);
      }
      return results.length === 1 ? results[0] : results;
    };

    /**
     * Adds a single object, ensures it has meta properties, clone it if necessary, etc.
     * @param {object} doc - the document to be inserted
     * @returns {object} document or 'undefined' if there was a problem inserting it
     * @memberof Collection
     */
    Collection.prototype.insertOne = function (doc) {
      var err = null;
      if (typeof doc !== 'object') {
        err = new TypeError('Document needs to be an object');
      } else if (doc === null) {
        err = new TypeError('Object cannot be null');
      }

      if (err !== null) {
        this.emit('error', err);
        throw err;
      }

      // if configured to clone, do so now... otherwise just use same obj reference
      var obj = this.cloneObjects ? clone(doc, this.cloneMethod) : doc;

      if (typeof obj.meta === 'undefined') {
        obj.meta = {
          revision: 0,
          created: 0
        };
      }

      this.emit('pre-insert', obj);
      if (!this.add(obj)) {
        return undefined;
      }

      this.addAutoUpdateObserver(obj);
      this.emit('insert', obj);
      return obj;
    };

    /**
     * Empties the collection.
     * @memberof Collection
     */
    Collection.prototype.clear = function () {
      this.data = [];
      this.idIndex = [];
      this.binaryIndices = {};
      this.cachedIndex = null;
      this.cachedBinaryIndex = null;
      this.cachedData = null;
      this.maxId = 0;
      this.DynamicViews = [];
      this.dirty = true;
    };

    /**
     * Updates an object and notifies collection that the document has changed.
     * @param {object} doc - document to update within the collection
     * @memberof Collection
     */
    Collection.prototype.update = function (doc) {
      this.flagBinaryIndexesDirty();

      if (Array.isArray(doc)) {
        var k = 0,
          len = doc.length;
        for (k; k < len; k += 1) {
          this.update(doc[k]);
        }
        return;
      }

      // verify object is a properly formed document
      if (!hasOwnProperty.call(doc, '$loki')) {
        throw new Error('Trying to update unsynced document. Please save the document first by using insert() or addMany()');
      }
      try {
        this.startTransaction();
        var arr = this.get(doc.$loki, true),
          obj,
          position,
          self = this;

        obj = arr[0]; // -internal- obj ref
        position = arr[1]; // position in data array

        if (!arr) {
          throw new Error('Trying to update a document not in collection.');
        }
        this.emit('pre-update', doc);

        Object.keys(this.constraints.unique).forEach(function (key) {
          self.constraints.unique[key].update(obj, doc);
        });

        // operate the update
        this.data[position] = doc;

        if (obj !== doc) {
          this.addAutoUpdateObserver(doc);
        }

        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].evaluateDocument(position, false);
        }

        this.idIndex[position] = obj.$loki;

        this.commit();
        this.dirty = true; // for autosave scenarios
        this.emit('update', doc);
        return doc;
      } catch (err) {
        this.rollback();
        this.console.error(err.message);
        this.emit('error', err);
        throw (err); // re-throw error so user does not think it succeeded
      }
    };

    /**
     * Add object to collection
     */
    Collection.prototype.add = function (obj) {
      // if parameter isn't object exit with throw
      if ('object' !== typeof obj) {
        throw new TypeError('Object being added needs to be an object');
      }
      // if object you are adding already has id column it is either already in the collection
      // or the object is carrying its own 'id' property.  If it also has a meta property,
      // then this is already in collection so throw error, otherwise rename to originalId and continue adding.
      if (typeof (obj.$loki) !== 'undefined') {
        throw new Error('Document is already in collection, please use update()');
      }

      this.flagBinaryIndexesDirty();

      /*
       * try adding object to collection
       */
      try {
        this.startTransaction();
        this.maxId++;

        if (isNaN(this.maxId)) {
          this.maxId = (this.data[this.data.length - 1].$loki + 1);
        }

        obj.$loki = this.maxId;
        obj.meta.version = 0;

        var key, constrUnique = this.constraints.unique;
        for (key in constrUnique) {
          if (hasOwnProperty.call(constrUnique, key)) {
            constrUnique[key].set(obj);
          }
        }

        // add new obj id to idIndex
        this.idIndex.push(obj.$loki);

        // add the object
        this.data.push(obj);

        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion
        var addedPos = this.data.length - 1;
        var dvlen = this.DynamicViews.length;
        for (var i = 0; i < dvlen; i++) {
          this.DynamicViews[i].evaluateDocument(addedPos, true);
        }

        this.commit();
        this.dirty = true; // for autosave scenarios

        return (this.cloneObjects) ? (clone(obj, this.cloneMethod)) : (obj);
      } catch (err) {
        this.rollback();
        this.console.error(err.message);
        this.emit('error', err);
        throw (err); // re-throw error so user does not think it succeeded
      }
    };


    /**
     * Remove all documents matching supplied filter object
     * @param {object} query - query object to filter on
     * @memberof Collection
     */
    Collection.prototype.removeWhere = function (query) {
      var list;
      if (typeof query === 'function') {
        list = this.data.filter(query);
      } else {
        list = new Resultset(this, {
          queryObj: query
        });
      }
      this.remove(list);
    };

    Collection.prototype.removeDataOnly = function () {
      this.remove(this.data.slice());
    };

    /**
     * Remove a document from the collection
     * @param {object} doc - document to remove from collection
     * @memberof Collection
     */
    Collection.prototype.remove = function (doc) {
      if (typeof doc === 'number') {
        doc = this.get(doc);
      }

      if ('object' !== typeof doc) {
        throw new Error('Parameter is not an object');
      }
      if (Array.isArray(doc)) {
        var k = 0,
          len = doc.length;
        for (k; k < len; k += 1) {
          this.remove(doc[k]);
        }
        return;
      }

      if (!hasOwnProperty.call(doc, '$loki')) {
        throw new Error('Object is not a document stored in the collection');
      }

      this.flagBinaryIndexesDirty();

      try {
        this.startTransaction();
        var arr = this.get(doc.$loki, true),
          // obj = arr[0],
          position = arr[1];
        var self = this;
        Object.keys(this.constraints.unique).forEach(function (key) {
          if (doc[key] !== null && typeof doc[key] !== 'undefined') {
            self.constraints.unique[key].remove(doc[key]);
          }
        });
        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to remove
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].removeDocument(position);
        }

        this.data.splice(position, 1);
        this.removeAutoUpdateObserver(doc);

        // remove id from idIndex
        this.idIndex.splice(position, 1);

        this.commit();
        this.dirty = true; // for autosave scenarios
        this.emit('delete', arr[0]);
        delete doc.$loki;
        delete doc.meta;
        return doc;

      } catch (err) {
        this.rollback();
        this.console.error(err.message);
        this.emit('error', err);
        return null;
      }
    };

    /*---------------------+
    | Finding methods     |
    +----------------------*/

    /**
     * Get by Id - faster than other methods because of the searching algorithm
     * @param {int} id - $loki id of document you want to retrieve
     * @param {boolean} returnPosition - if 'true' we will return [object, position]
     * @returns {(object|array|null)} Object reference if document was found, null if not,
     *     or an array if 'returnPosition' was passed.
     * @memberof Collection
     */
    Collection.prototype.get = function (id, returnPosition) {
      var retpos = returnPosition || false,
        data = this.idIndex,
        max = data.length - 1,
        min = 0,
        mid = (min + max) >> 1;

      id = typeof id === 'number' ? id : parseInt(id, 10);

      if (isNaN(id)) {
        throw new TypeError('Passed id is not an integer');
      }

      while (data[min] < data[max]) {
        mid = (min + max) >> 1;

        if (data[mid] < id) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }

      if (max === min && data[min] === id) {
        if (retpos) {
          return [this.data[min], min];
        }
        return this.data[min];
      }
      return null;

    };

    /**
     * Retrieve doc by Unique index
     * @param {string} field - name of uniquely indexed property to use when doing lookup
     * @param {value} value - unique value to search for
     * @returns {object} document matching the value passed
     * @memberof Collection
     */
    Collection.prototype.by = function (field, value) {
      var self;
      if (value === undefined) {
        self = this;
        return function (value) {
          return self.by(field, value);
        };
      }

      var result = this.constraints.unique[field].get(value);
      if (!this.cloneObjects) {
        return result;
      } else {
        return clone(result, this.cloneMethod);
      }
    };

    /**
     * Find one object by index property, by property equal to value
     * @param {object} query - query object used to perform search with
     * @returns {(object|null)} First matching document, or null if none
     * @memberof Collection
     */
    Collection.prototype.findOne = function (query) {
      // Instantiate Resultset and exec find op passing firstOnly = true param
      var result = new Resultset(this, {
        queryObj: query,
        firstOnly: true
      });
      if (Array.isArray(result) && result.length === 0) {
        return null;
      } else {
        if (!this.cloneObjects) {
          return result;
        } else {
          return clone(result, this.cloneMethod);
        }
      }
    };

    /**
     * Chain method, used for beginning a series of chained find() and/or view() operations
     * on a collection.
     *
     * @param {array} transform - Ordered array of transform step objects similar to chain
     * @param {object} parameters - Object containing properties representing parameters to substitute
     * @returns {Resultset} (this) resultset, or data array if any map or join functions where called
     * @memberof Collection
     */
    Collection.prototype.chain = function (transform, parameters) {
      var rs = new Resultset(this);

      if (typeof transform === 'undefined') {
        return rs;
      }

      return rs.transform(transform, parameters);
    };

    /**
     * Find method, api is similar to mongodb.
     * for more complex queries use [chain()]{@link Collection#chain} or [where()]{@link Collection#where}.
     * @example {@tutorial Query Examples}
     * @param {object} query - 'mongo-like' query object
     * @returns {array} Array of matching documents
     * @memberof Collection
     */
    Collection.prototype.find = function (query) {
      if (typeof (query) === 'undefined') {
        query = 'getAll';
      }

      var results = new Resultset(this, {
        queryObj: query
      });
      if (!this.cloneObjects) {
        return results;
      } else {
        return cloneObjectArray(results, this.cloneMethod);
      }
    };

    /**
     * Find object by unindexed field by property equal to value,
     * simply iterates and returns the first element matching the query
     */
    Collection.prototype.findOneUnindexed = function (prop, value) {
      var i = this.data.length,
        doc;
      while (i--) {
        if (this.data[i][prop] === value) {
          doc = this.data[i];
          return doc;
        }
      }
      return null;
    };

    /**
     * Transaction methods
     */

    /** start the transation */
    Collection.prototype.startTransaction = function () {
      if (this.transactional) {
        this.cachedData = clone(this.data, this.cloneMethod);
        this.cachedIndex = this.idIndex;
        this.cachedBinaryIndex = this.binaryIndices;

        // propagate startTransaction to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].startTransaction();
        }
      }
    };

    /** commit the transation */
    Collection.prototype.commit = function () {
      if (this.transactional) {
        this.cachedData = null;
        this.cachedIndex = null;
        this.cachedBinaryIndex = null;

        // propagate commit to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].commit();
        }
      }
    };

    /** roll back the transation */
    Collection.prototype.rollback = function () {
      if (this.transactional) {
        if (this.cachedData !== null && this.cachedIndex !== null) {
          this.data = this.cachedData;
          this.idIndex = this.cachedIndex;
          this.binaryIndices = this.cachedBinaryIndex;
        }

        // propagate rollback to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].rollback();
        }
      }
    };

    // async executor. This is only to enable callbacks at the end of the execution.
    Collection.prototype.async = function (fun, callback) {
      setTimeout(function () {
        if (typeof fun === 'function') {
          fun();
          callback();
        } else {
          throw new TypeError('Argument passed for async execution is not a function');
        }
      }, 0);
    };

    /**
     * Query the collection by supplying a javascript filter function.
     * @example
     * var results = coll.where(function(obj) {
     *   return obj.legs === 8;
     * });
     *
     * @param {function} fun - filter function to run against all collection docs
     * @returns {array} all documents which pass your filter function
     * @memberof Collection
     */
    Collection.prototype.where = function (fun) {
      var results = new Resultset(this, {
        queryFunc: fun
      });
      if (!this.cloneObjects) {
        return results;
      } else {
        return cloneObjectArray(results, this.cloneMethod);
      }
    };

    /**
     * Map Reduce operation
     *
     * @param {function} mapFunction - function to use as map function
     * @param {function} reduceFunction - function to use as reduce function
     * @returns {data} The result of your mapReduce operation
     * @memberof Collection
     */
    Collection.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data.map(mapFunction));
      } catch (err) {
        throw err;
      }
    };

    /**
     * Join two collections on specified properties
     *
     * @param {array} joinData - array of documents to 'join' to this collection
     * @param {string} leftJoinProp - property name in collection
     * @param {string} rightJoinProp - property name in joinData
     * @param {function=} mapFun - (Optional) map function to use
     * @returns {Resultset} Result of the mapping operation
     * @memberof Collection
     */
    Collection.prototype.eqJoin = function (joinData, leftJoinProp, rightJoinProp, mapFun) {
      // logic in Resultset class
      return new Resultset(this).eqJoin(joinData, leftJoinProp, rightJoinProp, mapFun);
    };

    /* ------ STAGING API -------- */
    /**
     * stages: a map of uniquely identified 'stages', which hold copies of objects to be
     * manipulated without affecting the data in the original collection
     */
    Collection.prototype.stages = {};

    /**
     * (Staging API) create a stage and/or retrieve it
     * @memberof Collection
     */
    Collection.prototype.getStage = function (name) {
      if (!this.stages[name]) {
        this.stages[name] = {};
      }
      return this.stages[name];
    };
    /**
     * a collection of objects recording the changes applied through a commmitStage
     */
    Collection.prototype.commitLog = [];

    /**
     * (Staging API) create a copy of an object and insert it into a stage
     * @memberof Collection
     */
    Collection.prototype.stage = function (stageName, obj) {
      var copy = JSON.parse(JSON.stringify(obj));
      this.getStage(stageName)[obj.$loki] = copy;
      return copy;
    };

    /**
     * (Staging API) re-attach all objects to the original collection, so indexes and views can be rebuilt
     * then create a message to be inserted in the commitlog
     * @param {string} stageName - name of stage
     * @param {string} message
     * @memberof Collection
     */
    Collection.prototype.commitStage = function (stageName, message) {
      var stage = this.getStage(stageName),
        prop,
        timestamp = new Date().getTime();

      for (prop in stage) {

        this.update(stage[prop]);
        this.commitLog.push({
          timestamp: timestamp,
          message: message,
          data: JSON.parse(JSON.stringify(stage[prop]))
        });
      }
      this.stages[stageName] = {};
    };

    Collection.prototype.no_op = function () {
      return;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.extract = function (field) {
      var i = 0,
        len = this.data.length,
        isDotNotation = isDeepProperty(field),
        result = [];
      for (i; i < len; i += 1) {
        result.push(deepProperty(this.data[i], field, isDotNotation));
      }
      return result;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.max = function (field) {
      return Math.max.apply(null, this.extract(field));
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.min = function (field) {
      return Math.min.apply(null, this.extract(field));
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.maxRecord = function (field) {
      var i = 0,
        len = this.data.length,
        deep = isDeepProperty(field),
        result = {
          index: 0,
          value: undefined
        },
        max;

      for (i; i < len; i += 1) {
        if (max !== undefined) {
          if (max < deepProperty(this.data[i], field, deep)) {
            max = deepProperty(this.data[i], field, deep);
            result.index = this.data[i].$loki;
          }
        } else {
          max = deepProperty(this.data[i], field, deep);
          result.index = this.data[i].$loki;
        }
      }
      result.value = max;
      return result;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.minRecord = function (field) {
      var i = 0,
        len = this.data.length,
        deep = isDeepProperty(field),
        result = {
          index: 0,
          value: undefined
        },
        min;

      for (i; i < len; i += 1) {
        if (min !== undefined) {
          if (min > deepProperty(this.data[i], field, deep)) {
            min = deepProperty(this.data[i], field, deep);
            result.index = this.data[i].$loki;
          }
        } else {
          min = deepProperty(this.data[i], field, deep);
          result.index = this.data[i].$loki;
        }
      }
      result.value = min;
      return result;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.extractNumerical = function (field) {
      return this.extract(field).map(parseBase10).filter(Number).filter(function (n) {
        return !(isNaN(n));
      });
    };

    /**
     * Calculates the average numerical value of a property
     *
     * @param {string} field - name of property in docs to average
     * @returns {number} average of property in all docs in the collection
     * @memberof Collection
     */
    Collection.prototype.avg = function (field) {
      return average(this.extractNumerical(field));
    };

    /**
     * Calculate standard deviation of a field
     * @memberof Collection
     * @param {string} field
     */
    Collection.prototype.stdDev = function (field) {
      return standardDeviation(this.extractNumerical(field));
    };

    /**
     * @memberof Collection
     * @param {string} field
     */
    Collection.prototype.mode = function (field) {
      var dict = {},
        data = this.extract(field);
      data.forEach(function (obj) {
        if (dict[obj]) {
          dict[obj] += 1;
        } else {
          dict[obj] = 1;
        }
      });
      var max,
        prop, mode;
      for (prop in dict) {
        if (max) {
          if (max < dict[prop]) {
            mode = prop;
          }
        } else {
          mode = prop;
          max = dict[prop];
        }
      }
      return mode;
    };

    /**
     * @memberof Collection
     * @param {string} field - property name
     */
    Collection.prototype.median = function (field) {
      var values = this.extractNumerical(field);
      values.sort(sub);

      var half = Math.floor(values.length / 2);

      if (values.length % 2) {
        return values[half];
      } else {
        return (values[half - 1] + values[half]) / 2.0;
      }
    };

    /**
     * General utils, including statistical functions
     */
    function isDeepProperty(field) {
      return field.indexOf('.') !== -1;
    }

    function parseBase10(num) {
      return parseFloat(num, 10);
    }

    function isNotUndefined(obj) {
      return obj !== undefined;
    }

    function add(a, b) {
      return a + b;
    }

    function sub(a, b) {
      return a - b;
    }

    function median(values) {
      values.sort(sub);
      var half = Math.floor(values.length / 2);
      return (values.length % 2) ? values[half] : ((values[half - 1] + values[half]) / 2.0);
    }

    function average(array) {
      return (array.reduce(add, 0)) / array.length;
    }

    function standardDeviation(values) {
      var avg = average(values);
      var squareDiffs = values.map(function (value) {
        var diff = value - avg;
        var sqrDiff = diff * diff;
        return sqrDiff;
      });

      var avgSquareDiff = average(squareDiffs);

      var stdDev = Math.sqrt(avgSquareDiff);
      return stdDev;
    }

    function deepProperty(obj, property, isDeep) {
      if (isDeep === false) {
        // pass without processing
        return obj[property];
      }
      var pieces = property.split('.'),
        root = obj;
      while (pieces.length > 0) {
        root = root[pieces.shift()];
      }
      return root;
    }

    function binarySearch(array, item, fun) {
      var lo = 0,
        hi = array.length,
        compared,
        mid;
      while (lo < hi) {
        mid = (lo + hi) >> 1;
        compared = fun.apply(null, [item, array[mid]]);
        if (compared === 0) {
          return {
            found: true,
            index: mid
          };
        } else if (compared < 0) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      return {
        found: false,
        index: hi
      };
    }

    function BSonSort(fun) {
      return function (array, item) {
        return binarySearch(array, item, fun);
      };
    }

    function KeyValueStore() {}

    KeyValueStore.prototype = {
      keys: [],
      values: [],
      sort: function (a, b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
      },
      setSort: function (fun) {
        this.bs = new BSonSort(fun);
      },
      bs: function () {
        return new BSonSort(this.sort);
      },
      set: function (key, value) {
        var pos = this.bs(this.keys, key);
        if (pos.found) {
          this.values[pos.index] = value;
        } else {
          this.keys.splice(pos.index, 0, key);
          this.values.splice(pos.index, 0, value);
        }
      },
      get: function (key) {
        return this.values[binarySearch(this.keys, key, this.sort).index];
      }
    };

    function UniqueIndex(uniqueField) {
      this.field = uniqueField;
      this.keyMap = {};
      this.lokiMap = {};
    }
    UniqueIndex.prototype.keyMap = {};
    UniqueIndex.prototype.lokiMap = {};
    UniqueIndex.prototype.set = function (obj) {
      var fieldValue = obj[this.field];
      if (fieldValue !== null && typeof (fieldValue) !== 'undefined') {
        if (this.keyMap[fieldValue]) {
          throw new Error('Duplicate key for property ' + this.field + ': ' + fieldValue);
        } else {
          this.keyMap[fieldValue] = obj;
          this.lokiMap[obj.$loki] = fieldValue;
        }
      }
    };
    UniqueIndex.prototype.get = function (key) {
      return this.keyMap[key];
    };

    UniqueIndex.prototype.byId = function (id) {
      return this.keyMap[this.lokiMap[id]];
    };
    /**
     * Updates a document's unique index given an updated object.
     * @param  {Object} obj Original document object
     * @param  {Object} doc New document object (likely the same as obj)
     */
    UniqueIndex.prototype.update = function (obj, doc) {
      if (this.lokiMap[obj.$loki] !== doc[this.field]) {
        var old = this.lokiMap[obj.$loki];
        this.set(doc);
        // make the old key fail bool test, while avoiding the use of delete (mem-leak prone)
        this.keyMap[old] = undefined;
      } else {
        this.keyMap[obj[this.field]] = doc;
      }
    };
    UniqueIndex.prototype.remove = function (key) {
      var obj = this.keyMap[key];
      if (obj !== null && typeof obj !== 'undefined') {
        this.keyMap[key] = undefined;
        this.lokiMap[obj.$loki] = undefined;
      } else {
        throw new Error('Key is not in unique index: ' + this.field);
      }
    };
    UniqueIndex.prototype.clear = function () {
      this.keyMap = {};
      this.lokiMap = {};
    };

    function ExactIndex(exactField) {
      this.index = {};
      this.field = exactField;
    }

    // add the value you want returned to the key in the index
    ExactIndex.prototype = {
      set: function add(key, val) {
        if (this.index[key]) {
          this.index[key].push(val);
        } else {
          this.index[key] = [val];
        }
      },

      // remove the value from the index, if the value was the last one, remove the key
      remove: function remove(key, val) {
        var idxSet = this.index[key];
        for (var i in idxSet) {
          if (idxSet[i] == val) {
            idxSet.splice(i, 1);
          }
        }
        if (idxSet.length < 1) {
          this.index[key] = undefined;
        }
      },

      // get the values related to the key, could be more than one
      get: function get(key) {
        return this.index[key];
      },

      // clear will zap the index
      clear: function clear(key) {
        this.index = {};
      }
    };

    function SortedIndex(sortedField) {
      this.field = sortedField;
    }

    SortedIndex.prototype = {
      keys: [],
      values: [],
      // set the default sort
      sort: function (a, b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
      },
      bs: function () {
        return new BSonSort(this.sort);
      },
      // and allow override of the default sort
      setSort: function (fun) {
        this.bs = new BSonSort(fun);
      },
      // add the value you want returned  to the key in the index
      set: function (key, value) {
        var pos = binarySearch(this.keys, key, this.sort);
        if (pos.found) {
          this.values[pos.index].push(value);
        } else {
          this.keys.splice(pos.index, 0, key);
          this.values.splice(pos.index, 0, [value]);
        }
      },
      // get all values which have a key == the given key
      get: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        if (bsr.found) {
          return this.values[bsr.index];
        } else {
          return [];
        }
      },
      // get all values which have a key < the given key
      getLt: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        var pos = bsr.index;
        if (bsr.found) pos--;
        return this.getAll(key, 0, pos);
      },
      // get all values which have a key > the given key
      getGt: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        var pos = bsr.index;
        if (bsr.found) pos++;
        return this.getAll(key, pos, this.keys.length);
      },

      // get all vals from start to end
      getAll: function (key, start, end) {
        var results = [];
        for (var i = start; i < end; i++) {
          results = results.concat(this.values[i]);
        }
        return results;
      },
      // just in case someone wants to do something smart with ranges
      getPos: function (key) {
        return binarySearch(this.keys, key, this.sort);
      },
      // remove the value from the index, if the value was the last one, remove the key
      remove: function (key, value) {
        var pos = binarySearch(this.keys, key, this.sort).index;
        var idxSet = this.values[pos];
        for (var i in idxSet) {
          if (idxSet[i] == value) idxSet.splice(i, 1);
        }
        if (idxSet.length < 1) {
          this.keys.splice(pos, 1);
          this.values.splice(pos, 1);
        }
      },
      // clear will zap the index
      clear: function () {
        this.keys = [];
        this.values = [];
      }
    };


    Loki.LokiOps = LokiOps;
    Loki.Collection = Collection;
    Loki.KeyValueStore = KeyValueStore;
    Loki.persistenceAdapters = {
      fs: LokiFsAdapter,
      localStorage: LokiLocalStorageAdapter
    };
    return Loki;
  }());

}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"object-path":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/object-path/index.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
(function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function(){
  'use strict';

  var
    toStr = Object.prototype.toString,
    _hasOwnProperty = Object.prototype.hasOwnProperty;

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (!isString(value)) {
        for (var i in value) {
            if (_hasOwnProperty.call(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isNumber(value){
    return typeof value === 'number' || toString(value) === "[object Number]";
  }

  function isString(obj){
    return typeof obj === 'string' || toString(obj) === "[object String]";
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  function isArray(obj){
    return typeof obj === 'object' && typeof obj.length === 'number' && toString(obj) === '[object Array]';
  }

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function set(obj, path, value, doNotReplace){
    if (isNumber(path)) {
      path = [path];
    }
    if (isEmpty(path)) {
      return obj;
    }
    if (isString(path)) {
      return set(obj, path.split('.').map(getKey), value, doNotReplace);
    }
    var currentPath = path[0];

    if (path.length === 1) {
      var oldVal = obj[currentPath];
      if (oldVal === void 0 || !doNotReplace) {
        obj[currentPath] = value;
      }
      return oldVal;
    }

    if (obj[currentPath] === void 0) {
      //check if we assume an array
      if(isNumber(path[1])) {
        obj[currentPath] = [];
      } else {
        obj[currentPath] = {};
      }
    }

    return set(obj[currentPath], path.slice(1), value, doNotReplace);
  }

  function del(obj, path) {
    if (isNumber(path)) {
      path = [path];
    }

    if (isEmpty(obj)) {
      return void 0;
    }

    if (isEmpty(path)) {
      return obj;
    }
    if(isString(path)) {
      return del(obj, path.split('.'));
    }

    var currentPath = getKey(path[0]);
    var oldVal = obj[currentPath];

    if(path.length === 1) {
      if (oldVal !== void 0) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      }
    } else {
      if (obj[currentPath] !== void 0) {
        return del(obj[currentPath], path.slice(1));
      }
    }

    return obj;
  }

  var objectPath = function(obj) {
    return Object.keys(objectPath).reduce(function(proxy, prop) {
      if (typeof objectPath[prop] === 'function') {
        proxy[prop] = objectPath[prop].bind(objectPath, obj);
      }

      return proxy;
    }, {});
  };

  objectPath.has = function (obj, path) {
    if (isEmpty(obj)) {
      return false;
    }

    if (isNumber(path)) {
      path = [path];
    } else if (isString(path)) {
      path = path.split('.');
    }

    if (isEmpty(path) || path.length === 0) {
      return false;
    }

    for (var i = 0; i < path.length; i++) {
      var j = path[i];
      if ((isObject(obj) || isArray(obj)) && _hasOwnProperty.call(obj, j)) {
        obj = obj[j];
      } else {
        return false;
      }
    }

    return true;
  };

  objectPath.ensureExists = function (obj, path, value){
    return set(obj, path, value, true);
  };

  objectPath.set = function (obj, path, value, doNotReplace){
    return set(obj, path, value, doNotReplace);
  };

  objectPath.insert = function (obj, path, value, at){
    var arr = objectPath.get(obj, path);
    at = ~~at;
    if (!isArray(arr)) {
      arr = [];
      objectPath.set(obj, path, arr);
    }
    arr.splice(at, 0, value);
  };

  objectPath.empty = function(obj, path) {
    if (isEmpty(path)) {
      return obj;
    }
    if (isEmpty(obj)) {
      return void 0;
    }

    var value, i;
    if (!(value = objectPath.get(obj, path))) {
      return obj;
    }

    if (isString(value)) {
      return objectPath.set(obj, path, '');
    } else if (isBoolean(value)) {
      return objectPath.set(obj, path, false);
    } else if (isNumber(value)) {
      return objectPath.set(obj, path, 0);
    } else if (isArray(value)) {
      value.length = 0;
    } else if (isObject(value)) {
      for (i in value) {
        if (_hasOwnProperty.call(value, i)) {
          delete value[i];
        }
      }
    } else {
      return objectPath.set(obj, path, null);
    }
  };

  objectPath.push = function (obj, path /*, values */){
    var arr = objectPath.get(obj, path);
    if (!isArray(arr)) {
      arr = [];
      objectPath.set(obj, path, arr);
    }

    arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
  };

  objectPath.coalesce = function (obj, paths, defaultValue) {
    var value;

    for (var i = 0, len = paths.length; i < len; i++) {
      if ((value = objectPath.get(obj, paths[i])) !== void 0) {
        return value;
      }
    }

    return defaultValue;
  };

  objectPath.get = function (obj, path, defaultValue){
    if (isNumber(path)) {
      path = [path];
    }
    if (isEmpty(path)) {
      return obj;
    }
    if (isEmpty(obj)) {
      return defaultValue;
    }
    if (isString(path)) {
      return objectPath.get(obj, path.split('.'), defaultValue);
    }

    var currentPath = getKey(path[0]);

    if (path.length === 1) {
      if (obj[currentPath] === void 0) {
        return defaultValue;
      }
      return obj[currentPath];
    }

    return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
  };

  objectPath.del = function(obj, path) {
    return del(obj, path);
  };

  return objectPath;
});

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".coffee",
    ".info"
  ]
});
require("./node_modules/meteor/rocketchat:lib/lib/core.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/debug.js");
require("./node_modules/meteor/rocketchat:lib/lib/getURL.js");
require("./node_modules/meteor/rocketchat:lib/lib/settings.js");
require("./node_modules/meteor/rocketchat:lib/lib/callbacks.js");
require("./node_modules/meteor/rocketchat:lib/lib/fileUploadRestrictions.js");
require("./node_modules/meteor/rocketchat:lib/lib/placeholders.js");
require("./node_modules/meteor/rocketchat:lib/lib/promises.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypesCommon.js");
require("./node_modules/meteor/rocketchat:lib/lib/slashCommand.js");
require("./node_modules/meteor/rocketchat:lib/lib/Message.js");
require("./node_modules/meteor/rocketchat:lib/lib/MessageTypes.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/bugsnag.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/metrics.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/RateLimiter.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/isDocker.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/addUserToDefaultChannels.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/addUserToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/archiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/checkUsernameAvailability.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/checkEmailAvailability.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/createRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/deleteMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/deleteUser.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/getFullUserData.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/removeUserFromRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveUser.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveCustomFields.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/sendMessage.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setUserAvatar.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setUsername.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setRealName.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/unarchiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/updateMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/Notifications.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/configLogger.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/PushNotification.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/defaultBlockedDomainsList.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/notifyUsersOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/roomTypes.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/sendEmailOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/sendNotificationsOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/validateEmailDomain.js");
require("./node_modules/meteor/rocketchat:lib/server/models/_Base.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Messages.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Reports.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Rooms.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Subscriptions.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Uploads.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Users.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/oauth/oauth.js");
require("./node_modules/meteor/rocketchat:lib/server/oauth/google.js");
require("./node_modules/meteor/rocketchat:lib/server/oauth/proxy.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/statsTracker.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/cache/CacheLoad.js");
require("./node_modules/meteor/rocketchat:lib/server/publications/settings.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addOAuthService.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/refreshOAuthService.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addUserToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addUsersToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/archiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/blockUser.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/checkRegistrationSecretURL.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/cleanChannelHistory.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createChannel.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createToken.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createPrivateGroup.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/deleteMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/deleteUserOwnAccount.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/filterBadWords.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/filterATAllTag.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getChannelHistory.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getFullUserData.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getRoomRoles.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getServerInfo.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getUserRoles.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/insertOrUpdateUser.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/joinDefaultChannels.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/joinRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/leaveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/removeOAuthService.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/restartServer.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/robotMethods.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/saveSetting.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendInvitationEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendMessage.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendSMTPTestEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setAdminStatus.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setRealName.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setUsername.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/unarchiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/unblockUser.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/updateMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadCdnPrefix.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadSMTP.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/oAuthServicesUpdate.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settings.js");
require("./node_modules/meteor/rocketchat:lib/lib/startup/settingsOnLoadSiteUrl.js");
require("./node_modules/meteor/rocketchat:lib/startup/defaultRoomTypes.js");
require("./node_modules/meteor/rocketchat:lib/rocketchat.info.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['rocketchat:lib'] = {}, {
  RocketChat: RocketChat,
  RocketChatTabBar: RocketChatTabBar
});

})();

//# sourceMappingURL=rocketchat_lib.js.map
