{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:custom-oauth/custom_oauth_server.js"],"names":["module","export","CustomOAuth","logger","Logger","Services","BeforeUpdateOrCreateUserFromExternalService","name","options","debug","Match","test","String","Meteor","Error","configure","userAgent","release","Accounts","oauth","registerService","addHookToProcessUser","Object","serverURL","tokenPath","identityPath","tokenSentVia","usernameField","trim","mergeUsers","addAutopublishFields","getAccessToken","query","config","ServiceConfiguration","configurations","findOne","service","ConfigError","response","undefined","allOptions","headers","Accept","params","code","redirect_uri","OAuth","_redirectUri","grant_type","state","clientId","openSecret","secret","HTTP","post","err","error","message","_","extend","data","JSON","parse","content","access_token","getIdentity","accessToken","get","stringify","self","identity","_id","id","result","ID","user_id","CharacterID","user","userid","email","phid","sub","serviceData","_OAuthCustom","profile","username","nickname","CharacterName","userName","preferred_username","retrieveCredential","credentialToken","credentialSecret","getUsername","indexOf","replace","match","field","push","serviceName","RocketChat","models","Users","findOneByUsername","services","serviceIdKey","update","$set","validateNewUser","updateOrCreateUserFromExternalService","hook","apply","arguments"],"mappings":"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","file":"/packages/rocketchat_custom-oauth.js","sourcesContent":["/*globals OAuth*/\n\nconst logger = new Logger('CustomOAuth');\n\nconst Services = {};\nconst BeforeUpdateOrCreateUserFromExternalService = [];\n\nexport class CustomOAuth {\n\tconstructor(name, options) {\n\t\tlogger.debug('Init CustomOAuth', name, options);\n\n\t\tthis.name = name;\n\t\tif (!Match.test(this.name, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Name is required and must be String');\n\t\t}\n\n\t\tif (Services[this.name]) {\n\t\t\tServices[this.name].configure(options);\n\t\t\treturn;\n\t\t}\n\n\t\tServices[this.name] = this;\n\n\t\tthis.configure(options);\n\n\t\tthis.userAgent = 'Meteor';\n\t\tif (Meteor.release) {\n\t\t\tthis.userAgent += `/${ Meteor.release }`;\n\t\t}\n\n\t\tAccounts.oauth.registerService(this.name);\n\t\tthis.registerService();\n\t\tthis.addHookToProcessUser();\n\t}\n\n\tconfigure(options) {\n\t\tif (!Match.test(options, Object)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options is required and must be Object');\n\t\t}\n\n\t\tif (!Match.test(options.serverURL, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options.serverURL is required and must be String');\n\t\t}\n\n\t\tif (!Match.test(options.tokenPath, String)) {\n\t\t\toptions.tokenPath = '/oauth/token';\n\t\t}\n\n\t\tif (!Match.test(options.identityPath, String)) {\n\t\t\toptions.identityPath = '/me';\n\t\t}\n\n\t\tthis.serverURL = options.serverURL;\n\t\tthis.tokenPath = options.tokenPath;\n\t\tthis.identityPath = options.identityPath;\n\t\tthis.tokenSentVia = options.tokenSentVia;\n\t\tthis.usernameField = (options.usernameField || '').trim();\n\t\tthis.mergeUsers = options.mergeUsers;\n\n\t\tif (!/^https?:\\/\\/.+/.test(this.tokenPath)) {\n\t\t\tthis.tokenPath = this.serverURL + this.tokenPath;\n\t\t}\n\n\t\tif (!/^https?:\\/\\/.+/.test(this.identityPath)) {\n\t\t\tthis.identityPath = this.serverURL + this.identityPath;\n\t\t}\n\n\t\tif (Match.test(options.addAutopublishFields, Object)) {\n\t\t\tAccounts.addAutopublishFields(options.addAutopublishFields);\n\t\t}\n\t}\n\n\tgetAccessToken(query) {\n\t\tconst config = ServiceConfiguration.configurations.findOne({service: this.name});\n\t\tif (!config) {\n\t\t\tthrow new ServiceConfiguration.ConfigError();\n\t\t}\n\n\t\tlet response = undefined;\n\n\t\tconst allOptions = {\n\t\t\theaders: {\n\t\t\t\t'User-Agent': this.userAgent, // http://doc.gitlab.com/ce/api/users.html#Current-user\n\t\t\t\tAccept: 'application/json'\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tcode: query.code,\n\t\t\t\tredirect_uri: OAuth._redirectUri(this.name, config),\n\t\t\t\tgrant_type: 'authorization_code',\n\t\t\t\tstate: query.state\n\t\t\t}\n\t\t};\n\n\t\t// Only send clientID / secret once on header or payload.\n\t\tif (this.tokenSentVia === 'header') {\n\t\t\tallOptions['auth'] = `${ config.clientId }:${ OAuth.openSecret(config.secret) }`;\n\t\t} else {\n\t\t\tallOptions['params']['client_secret'] = OAuth.openSecret(config.secret);\n\t\t\tallOptions['params']['client_id'] = config.clientId;\n\t\t}\n\n\t\ttry {\n\t\t\tresponse = HTTP.post(this.tokenPath, allOptions);\n\t\t} catch (err) {\n\t\t\tconst error = new Error(`Failed to complete OAuth handshake with ${ this.name } at ${ this.tokenPath }. ${ err.message }`);\n\t\t\tthrow _.extend(error, {response: err.response});\n\t\t}\n\n\t\tlet data;\n\t\tif (response.data) {\n\t\t\tdata = response.data;\n\t\t} else {\n\t\t\tdata = JSON.parse(response.content);\n\t\t}\n\n\t\tif (data.error) { //if the http response was a json object with an error attribute\n\t\t\tthrow new Error(`Failed to complete OAuth handshake with ${ this.name } at ${ this.tokenPath }. ${ data.error }`);\n\t\t} else {\n\t\t\treturn data.access_token;\n\t\t}\n\t}\n\n\tgetIdentity(accessToken) {\n\t\tconst params = {};\n\t\tconst headers = {\n\t\t\t'User-Agent': this.userAgent // http://doc.gitlab.com/ce/api/users.html#Current-user\n\t\t};\n\n\t\tif (this.tokenSentVia === 'header') {\n\t\t\theaders['Authorization'] = `Bearer ${ accessToken }`;\n\t\t} else {\n\t\t\tparams['access_token'] = accessToken;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = HTTP.get(this.identityPath, {\n\t\t\t\theaders,\n\t\t\t\tparams\n\t\t\t});\n\n\t\t\tlet data;\n\n\t\t\tif (response.data) {\n\t\t\t\tdata = response.data;\n\t\t\t} else {\n\t\t\t\tdata = JSON.parse(response.content);\n\t\t\t}\n\n\t\t\tlogger.debug('Identity response', JSON.stringify(data, null, 2));\n\n\t\t\treturn data;\n\t\t} catch (err) {\n\t\t\tconst error = new Error(`Failed to fetch identity from ${ this.name } at ${ this.identityPath }. ${ err.message }`);\n\t\t\tthrow _.extend(error, {response: err.response});\n\t\t}\n\t}\n\n\tregisterService() {\n\t\tconst self = this;\n\t\tOAuth.registerService(this.name, 2, null, (query) => {\n\t\t\tconst accessToken = self.getAccessToken(query);\n\t\t\t// console.log 'at:', accessToken\n\n\t\t\tlet identity = self.getIdentity(accessToken);\n\n\t\t\tif (identity) {\n\t\t\t\t// Set 'id' to '_id' for any sources that provide it\n\t\t\t\tif (identity._id && !identity.id) {\n\t\t\t\t\tidentity.id = identity._id;\n\t\t\t\t}\n\n\t\t\t\t// Fix for Reddit\n\t\t\t\tif (identity.result) {\n\t\t\t\t\tidentity = identity.result;\n\t\t\t\t}\n\n\t\t\t\t// Fix WordPress-like identities having 'ID' instead of 'id'\n\t\t\t\tif (identity.ID && !identity.id) {\n\t\t\t\t\tidentity.id = identity.ID;\n\t\t\t\t}\n\n\t\t\t\t// Fix Auth0-like identities having 'user_id' instead of 'id'\n\t\t\t\tif (identity.user_id && !identity.id) {\n\t\t\t\t\tidentity.id = identity.user_id;\n\t\t\t\t}\n\n\t\t\t\tif (identity.CharacterID && !identity.id) {\n\t\t\t\t\tidentity.id = identity.CharacterID;\n\t\t\t\t}\n\n\t\t\t\t// Fix Dataporten having 'user.userid' instead of 'id'\n\t\t\t\tif (identity.user && identity.user.userid && !identity.id) {\n\t\t\t\t\tidentity.id = identity.user.userid;\n\t\t\t\t\tidentity.email = identity.user.email;\n\t\t\t\t}\n\n\t\t\t\t// Fix general 'phid' instead of 'id' from phabricator\n\t\t\t\tif (identity.phid && !identity.id) {\n\t\t\t\t\tidentity.id = identity.phid;\n\t\t\t\t}\n\n\t\t\t\t// Fix Keycloak-like identities having 'sub' instead of 'id'\n\t\t\t\tif (identity.sub && !identity.id) {\n\t\t\t\t\tidentity.id = identity.sub;\n\t\t\t\t}\n\n\t\t\t\t// Fix general 'userid' instead of 'id' from provider\n\t\t\t\tif (identity.userid && !identity.id) {\n\t\t\t\t\tidentity.id = identity.userid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log 'id:', JSON.stringify identity, null, '  '\n\n\t\t\tconst serviceData = {\n\t\t\t\t_OAuthCustom: true,\n\t\t\t\taccessToken\n\t\t\t};\n\n\t\t\t_.extend(serviceData, identity);\n\n\t\t\tconst data = {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name || identity.username || identity.nickname || identity.CharacterName || identity.userName || identity.preferred_username || (identity.user && identity.user.name)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// console.log data\n\n\t\t\treturn data;\n\t\t});\n\t}\n\n\tretrieveCredential(credentialToken, credentialSecret) {\n\t\treturn OAuth.retrieveCredential(credentialToken, credentialSecret);\n\t}\n\n\tgetUsername(data) {\n\t\tlet username = '';\n\n\t\tif (this.usernameField.indexOf('#{') > -1) {\n\t\t\tusername = this.usernameField.replace(/#{(.+?)}/g, function(match, field) {\n\t\t\t\tif (!data[field]) {\n\t\t\t\t\tthrow new Meteor.Error('field_not_found', `Username template item \"${ field }\" not found in data`, data);\n\t\t\t\t}\n\t\t\t\treturn data[field];\n\t\t\t});\n\t\t} else {\n\t\t\tusername = data[this.usernameField];\n\t\t\tif (!username) {\n\t\t\t\tthrow new Meteor.Error('field_not_found', `Username field \"${ this.usernameField }\" not found in data`, data);\n\t\t\t}\n\t\t}\n\n\t\treturn username;\n\t}\n\n\taddHookToProcessUser() {\n\t\tBeforeUpdateOrCreateUserFromExternalService.push((serviceName, serviceData/*, options*/) => {\n\t\t\tif (serviceName !== this.name) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.usernameField) {\n\t\t\t\tconst username = this.getUsername(serviceData);\n\n\t\t\t\tconst user = RocketChat.models.Users.findOneByUsername(username);\n\t\t\t\tif (!user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// User already created or merged\n\t\t\t\tif (user.services && user.services[serviceName] && user.services[serviceName].id === serviceData.id) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.mergeUsers !== true) {\n\t\t\t\t\tthrow new Meteor.Error('CustomOAuth', `User with username ${ user.username } already exists`);\n\t\t\t\t}\n\n\t\t\t\tconst serviceIdKey = `services.${ serviceName }.id`;\n\t\t\t\tconst update = {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t[serviceIdKey]: serviceData.id\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tRocketChat.models.Users.update({_id: user._id}, update);\n\t\t\t}\n\t\t});\n\n\t\tAccounts.validateNewUser((user) => {\n\t\t\tif (!user.services || !user.services[this.name] || !user.services[this.name].id) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.usernameField) {\n\t\t\t\tuser.username = this.getUsername(user.services[this.name]);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t}\n}\n\n\nconst updateOrCreateUserFromExternalService = Accounts.updateOrCreateUserFromExternalService;\nAccounts.updateOrCreateUserFromExternalService = function(/*serviceName, serviceData, options*/) {\n\tfor (const hook of BeforeUpdateOrCreateUserFromExternalService) {\n\t\thook.apply(this, arguments);\n\t}\n\n\treturn updateOrCreateUserFromExternalService.apply(this, arguments);\n};\n"]}