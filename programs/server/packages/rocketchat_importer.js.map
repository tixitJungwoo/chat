{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_importer/lib/_importer.coffee","meteor://ðŸ’»app/packages/rocketchat_importer/lib/importTool.coffee","meteor://ðŸ’»app/lib/importTool.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/classes/ImporterBase.coffee","meteor://ðŸ’»app/server/classes/ImporterBase.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/classes/ImporterProgress.coffee","meteor://ðŸ’»app/server/classes/ImporterProgress.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/classes/ImporterProgressStep.coffee","meteor://ðŸ’»app/packages/rocketchat_importer/server/classes/ImporterSelection.coffee","meteor://ðŸ’»app/server/classes/ImporterSelection.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/classes/ImporterSelectionChannel.coffee","meteor://ðŸ’»app/server/classes/ImporterSelectionChannel.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/classes/ImporterSelectionUser.coffee","meteor://ðŸ’»app/server/classes/ImporterSelectionUser.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/models/Imports.coffee","meteor://ðŸ’»app/server/models/Imports.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/models/RawImports.coffee","meteor://ðŸ’»app/server/models/RawImports.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/methods/getImportProgress.coffee","meteor://ðŸ’»app/server/methods/getImportProgress.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/methods/getSelectionData.coffee","meteor://ðŸ’»app/server/methods/getSelectionData.coffee.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/prepareImport.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/methods/restartImport.coffee","meteor://ðŸ’»app/server/methods/restartImport.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/methods/setupImporter.coffee","meteor://ðŸ’»app/server/methods/setupImporter.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/methods/startImport.coffee","meteor://ðŸ’»app/server/methods/startImport.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer/server/startup/setImportsToInvalid.coffee","meteor://ðŸ’»app/server/startup/setImportsToInvalid.coffee.js"],"names":["Importer","Importers","addImporter","name","importer","options","mimeType","warnings","bind","fn","me","apply","arguments","Base","MaxBSONSize","http","Npm","require","https","getBSONSize","object","BSON","bson","calculateObjectSize","getBSONSafeArraysFromAnArray","theArray","BSONSize","i","maxSize","safeArrays","Math","floor","length","ceil","push","slice","description","importId","uploadFile","updateRecord","addCountCompleted","addCountToTotal","updateProgress","getProgress","getSelection","startImport","prepare","logger","Logger","progress","Progress","collection","RawImports","AdmZip","getFileType","Imports","insert","Date","now","step","Meteor","user","_id","importRecord","findOne","users","channels","messages","prototype","dataURI","sentContentType","fileName","fileType","Buffer","split","debug","mime","warn","Error","ProgressStep","PREPARING_STARTED","importSelection","IMPORTING_STARTED","count","total","completed","fields","update","$set","details","fileUrl","room","timeStamp","requestModule","test","get","bindEnvironment","stream","fileId","fileStore","create","write","err","file","attachment","msg","ref","url","replace","absoluteUrl","title","title_link","type","image_url","image_type","image_size","size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","rid","ts","groupable","attachments","message_id","RocketChat","sendMessage","error","NEW","Object","freeze","PREPARING_USERS","PREPARING_CHANNELS","PREPARING_MESSAGES","USER_SELECTION","IMPORTING_USERS","IMPORTING_CHANNELS","IMPORTING_MESSAGES","FINISHING","DONE","ERROR","CANCELLED","Selection","SelectionChannel","channel_id","is_archived","do_import","is_private","SelectionUser","user_id","username","email","is_deleted","is_bot","extend","child","parent","key","hasProp","call","ctor","constructor","__super__","hasOwnProperty","superClass","models","_Base","methods","getImportProgress","userId","method","authz","hasPermission","importerInstance","getSelectionData","prepareImport","contentType","check","String","results","Promise","catch","e","restartImport","valid","setupImporter","console","input","channelsSelection","selection","usersSelection","map","channel","startup","$ne","multi","find","forEach","item","remove"],"mappings":"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","file":"/packages/rocketchat_importer.js","sourcesContent":["Importer = {}\n","Importer.Importers = {}\n\nImporter.addImporter = (name, importer, options) ->\n\tif not Importer.Importers[name]?\n\t\tImporter.Importers[name] =\n\t\t\tname: options.name\n\t\t\timporter: importer\n\t\t\tmimeType: options.mimeType\n\t\t\twarnings: options.warnings\n","Importer.Importers = {};\n\nImporter.addImporter = function(name, importer, options) {\n  if (Importer.Importers[name] == null) {\n    return Importer.Importers[name] = {\n      name: options.name,\n      importer: importer,\n      mimeType: options.mimeType,\n      warnings: options.warnings\n    };\n  }\n};\n","# Base class for all Importers.\n#\n# @example How to subclass an importer\n# \tclass ExampleImporter extends RocketChat.importTool._baseImporter\n#\t\tconstructor: ->\n#\t\t\tsuper('Name of Importer', 'Description of the importer, use i18n string.', new RegExp('application\\/.*?zip'))\n#\t\tprepare: (uploadedFileData, uploadedFileContentType, uploadedFileName) =>\n#\t\t\tsuper\n#\t\tstartImport: (selectedUsersAndChannels) =>\n#\t\t\tsuper\n#\t\tgetProgress: =>\n#\t\t\t#return the progress report, tbd what is expected\n# @version 1.0.0\nImporter.Base = class Importer.Base\n\t@MaxBSONSize = 8000000\n\t@http = Npm.require 'http'\n\t@https = Npm.require 'https'\n\n\t@getBSONSize: (object) ->\n\t\t# The max BSON object size we can store in MongoDB is 16777216 bytes\n\t\t# but for some reason the mongo instanace which comes with meteor\n\t\t# errors out for anything close to that size. So, we are rounding it\n\t\t# down to 8000000 bytes.\n\t\tBSON = require('bson').native().BSON\n\t\tbson = new BSON()\n\t\tbson.calculateObjectSize object\n\n\t@getBSONSafeArraysFromAnArray: (theArray) ->\n\t\tBSONSize = Importer.Base.getBSONSize theArray\n\t\tmaxSize = Math.floor(theArray.length / (Math.ceil(BSONSize / Importer.Base.MaxBSONSize)))\n\t\tsafeArrays = []\n\t\ti = 0\n\t\twhile i < theArray.length\n\t\t\tsafeArrays.push(theArray.slice(i, i += maxSize))\n\t\treturn safeArrays\n\n\t# Constructs a new importer, adding an empty collection, AdmZip property, and empty users & channels\n\t#\n\t# @param [String] name the name of the Importer\n\t# @param [String] description the i18n string which describes the importer\n\t# @param [String] mimeType the of the expected file type\n\t#\n\tconstructor: (@name, @description, @mimeType) ->\n\t\t@logger = new Logger(\"#{@name} Importer\", {});\n\t\t@progress = new Importer.Progress @name\n\t\t@collection = Importer.RawImports\n\t\t@AdmZip = Npm.require 'adm-zip'\n\t\t@getFileType = Npm.require 'file-type'\n\t\timportId = Importer.Imports.insert { 'type': @name, 'ts': Date.now(), 'status': @progress.step, 'valid': true, 'user': Meteor.user()._id }\n\t\t@importRecord = Importer.Imports.findOne importId\n\t\t@users = {}\n\t\t@channels = {}\n\t\t@messages = {}\n\n\t# Takes the uploaded file and extracts the users, channels, and messages from it.\n\t#\n\t# @param [String] dataURI a base64 string of the uploaded file\n\t# @param [String] sentContentType the file type\n\t# @param [String] fileName the name of the uploaded file\n\t#\n\t# @return [Importer.Selection] Contains two properties which are arrays of objects, `channels` and `users`.\n\t#\n\tprepare: (dataURI, sentContentType, fileName) =>\n\t\tfileType = @getFileType(new Buffer(dataURI.split(',')[1], 'base64'))\n\t\t@logger.debug 'Uploaded file information is:', fileType\n\t\t@logger.debug 'Expected file type is:', @mimeType\n\n\t\tif not fileType or fileType.mime isnt @mimeType\n\t\t\t@logger.warn \"Invalid file uploaded for the #{@name} importer.\"\n\t\t\tthrow new Meteor.Error('error-invalid-file-uploaded', \"Invalid file uploaded to import #{@name} data from.\", { step: 'prepare' })\n\n\t\t@updateProgress Importer.ProgressStep.PREPARING_STARTED\n\t\t@updateRecord { 'file': fileName }\n\n\t# Starts the import process. The implementing method should defer as soon as the selection is set, so the user who started the process\n\t# doesn't end up with a \"locked\" ui while meteor waits for a response. The returned object should be the progress.\n\t#\n\t# @param [Importer.Selection] selectedUsersAndChannels an object with `channels` and `users` which contains information about which users and channels to import\n\t#\n\t# @return [Importer.Progress] the progress of the import\n\t#\n\tstartImport: (importSelection) =>\n\t\tif importSelection is undefined\n\t\t\tthrow new Error \"No selected users and channel data provided to the #{@name} importer.\" #TODO: Make translatable\n\t\telse if importSelection.users is undefined\n\t\t\tthrow new Error \"Users in the selected data wasn't found, it must but at least an empty array for the #{@name} importer.\" #TODO: Make translatable\n\t\telse if importSelection.channels is undefined\n\t\t\tthrow new Error \"Channels in the selected data wasn't found, it must but at least an empty array for the #{@name} importer.\" #TODO: Make translatable\n\n\t\t@updateProgress Importer.ProgressStep.IMPORTING_STARTED\n\n\t# Gets the Importer.Selection object for the import.\n\t#\n\t# @return [Importer.Selection] the users and channels selection\n\tgetSelection: () =>\n\t\tthrow new Error \"Invalid 'getSelection' called on #{@name}, it must be overridden and super can not be called.\"\n\n\t# Gets the progress of this importer.\n\t#\n\t# @return [Importer.Progress] the progress of the import\n\t#\n\tgetProgress: =>\n\t\treturn @progress\n\n\t# Updates the progress step of this importer.\n\t#\n\t# @return [Importer.Progress] the progress of the import\n\t#\n\tupdateProgress: (step) =>\n\t\t@progress.step = step\n\n\t\t@logger.debug \"#{@name} is now at #{step}.\"\n\t\t@updateRecord { 'status': @progress.step }\n\n\t\treturn @progress\n\n\t# Adds the passed in value to the total amount of items needed to complete.\n\t#\n\t# @return [Importer.Progress] the progress of the import\n\t#\n\taddCountToTotal: (count) =>\n\t\t@progress.count.total = @progress.count.total + count\n\t\t@updateRecord { 'count.total': @progress.count.total }\n\n\t\treturn @progress\n\n\t# Adds the passed in value to the total amount of items completed.\n\t#\n\t# @return [Importer.Progress] the progress of the import\n\t#\n\taddCountCompleted: (count) =>\n\t\t@progress.count.completed = @progress.count.completed + count\n\n\t\t#Only update the database every 500 records\n\t\t#Or the completed is greater than or equal to the total amount\n\t\tif (@progress.count.completed % 500 == 0) or @progress.count.completed >= @progress.count.total\n\t\t\t@updateRecord { 'count.completed': @progress.count.completed }\n\n\t\treturn @progress\n\n\t# Updates the import record with the given fields being `set`\n\t#\n\t# @return [Importer.Imports] the import record object\n\t#\n\tupdateRecord: (fields) =>\n\t\tImporter.Imports.update { _id: @importRecord._id }, { $set: fields }\n\t\t@importRecord = Importer.Imports.findOne @importRecord._id\n\n\t\treturn @importRecord\n\n\t# Uploads the file to the storage.\n\t#\n\t# @param [Object] details an object with details about the upload. name, size, type, and rid\n\t# @param [String] fileUrl url of the file to download/import\n\t# @param [Object] user the Rocket.Chat user\n\t# @param [Object] room the Rocket.Chat room\n\t# @param [Date] timeStamp the timestamp the file was uploaded\n\t#\n\tuploadFile: (details, fileUrl, user, room, timeStamp) =>\n\t\t@logger.debug \"Uploading the file #{details.name} from #{fileUrl}.\"\n\t\trequestModule = if /https/i.test(fileUrl) then Importer.Base.https else Importer.Base.http\n\n\t\trequestModule.get fileUrl, Meteor.bindEnvironment((stream) ->\n\t\t\tfileId = Meteor.fileStore.create details\n\t\t\tif fileId\n\t\t\t\tMeteor.fileStore.write stream, fileId, (err, file) ->\n\t\t\t\t\tif err\n\t\t\t\t\t\tthrow new Error(err)\n\t\t\t\t\telse\n\t\t\t\t\t\turl = file.url.replace(Meteor.absoluteUrl(), '/')\n\n\t\t\t\t\t\tattachment =\n\t\t\t\t\t\t\ttitle: \"File Uploaded: #{file.name}\"\n\t\t\t\t\t\t\ttitle_link: url\n\n\t\t\t\t\t\tif /^image\\/.+/.test file.type\n\t\t\t\t\t\t\tattachment.image_url = url\n\t\t\t\t\t\t\tattachment.image_type = file.type\n\t\t\t\t\t\t\tattachment.image_size = file.size\n\t\t\t\t\t\t\tattachment.image_dimensions = file.identify?.size\n\n\t\t\t\t\t\tif /^audio\\/.+/.test file.type\n\t\t\t\t\t\t\tattachment.audio_url = url\n\t\t\t\t\t\t\tattachment.audio_type = file.type\n\t\t\t\t\t\t\tattachment.audio_size = file.size\n\n\t\t\t\t\t\tif /^video\\/.+/.test file.type\n\t\t\t\t\t\t\tattachment.video_url = url\n\t\t\t\t\t\t\tattachment.video_type = file.type\n\t\t\t\t\t\t\tattachment.video_size = file.size\n\n\t\t\t\t\t\tmsg =\n\t\t\t\t\t\t\trid: details.rid\n\t\t\t\t\t\t\tts: timeStamp\n\t\t\t\t\t\t\tmsg: ''\n\t\t\t\t\t\t\tfile:\n\t\t\t\t\t\t\t\t_id: file._id\n\t\t\t\t\t\t\tgroupable: false\n\t\t\t\t\t\t\tattachments: [attachment]\n\n\t\t\t\t\t\tif details.message_id? and (typeof details.message_id is 'string')\n\t\t\t\t\t\t\tmsg['_id'] = details.message_id\n\n\t\t\t\t\t\tRocketChat.sendMessage user, msg, room, true\n\t\t\telse\n\t\t\t\t@logger.error \"Failed to create the store for #{fileUrl}!!!\"\n\t\t)\n","var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nImporter.Base = Importer.Base = (function() {\n  Base.MaxBSONSize = 8000000;\n\n  Base.http = Npm.require('http');\n\n  Base.https = Npm.require('https');\n\n  Base.getBSONSize = function(object) {\n    var BSON, bson;\n    BSON = require('bson')[\"native\"]().BSON;\n    bson = new BSON();\n    return bson.calculateObjectSize(object);\n  };\n\n  Base.getBSONSafeArraysFromAnArray = function(theArray) {\n    var BSONSize, i, maxSize, safeArrays;\n    BSONSize = Importer.Base.getBSONSize(theArray);\n    maxSize = Math.floor(theArray.length / (Math.ceil(BSONSize / Importer.Base.MaxBSONSize)));\n    safeArrays = [];\n    i = 0;\n    while (i < theArray.length) {\n      safeArrays.push(theArray.slice(i, i += maxSize));\n    }\n    return safeArrays;\n  };\n\n  function Base(name, description, mimeType) {\n    var importId;\n    this.name = name;\n    this.description = description;\n    this.mimeType = mimeType;\n    this.uploadFile = bind(this.uploadFile, this);\n    this.updateRecord = bind(this.updateRecord, this);\n    this.addCountCompleted = bind(this.addCountCompleted, this);\n    this.addCountToTotal = bind(this.addCountToTotal, this);\n    this.updateProgress = bind(this.updateProgress, this);\n    this.getProgress = bind(this.getProgress, this);\n    this.getSelection = bind(this.getSelection, this);\n    this.startImport = bind(this.startImport, this);\n    this.prepare = bind(this.prepare, this);\n    this.logger = new Logger(this.name + \" Importer\", {});\n    this.progress = new Importer.Progress(this.name);\n    this.collection = Importer.RawImports;\n    this.AdmZip = Npm.require('adm-zip');\n    this.getFileType = Npm.require('file-type');\n    importId = Importer.Imports.insert({\n      'type': this.name,\n      'ts': Date.now(),\n      'status': this.progress.step,\n      'valid': true,\n      'user': Meteor.user()._id\n    });\n    this.importRecord = Importer.Imports.findOne(importId);\n    this.users = {};\n    this.channels = {};\n    this.messages = {};\n  }\n\n  Base.prototype.prepare = function(dataURI, sentContentType, fileName) {\n    var fileType;\n    fileType = this.getFileType(new Buffer(dataURI.split(',')[1], 'base64'));\n    this.logger.debug('Uploaded file information is:', fileType);\n    this.logger.debug('Expected file type is:', this.mimeType);\n    if (!fileType || fileType.mime !== this.mimeType) {\n      this.logger.warn(\"Invalid file uploaded for the \" + this.name + \" importer.\");\n      throw new Meteor.Error('error-invalid-file-uploaded', \"Invalid file uploaded to import \" + this.name + \" data from.\", {\n        step: 'prepare'\n      });\n    }\n    this.updateProgress(Importer.ProgressStep.PREPARING_STARTED);\n    return this.updateRecord({\n      'file': fileName\n    });\n  };\n\n  Base.prototype.startImport = function(importSelection) {\n    if (importSelection === void 0) {\n      throw new Error(\"No selected users and channel data provided to the \" + this.name + \" importer.\");\n    } else if (importSelection.users === void 0) {\n      throw new Error(\"Users in the selected data wasn't found, it must but at least an empty array for the \" + this.name + \" importer.\");\n    } else if (importSelection.channels === void 0) {\n      throw new Error(\"Channels in the selected data wasn't found, it must but at least an empty array for the \" + this.name + \" importer.\");\n    }\n    return this.updateProgress(Importer.ProgressStep.IMPORTING_STARTED);\n  };\n\n  Base.prototype.getSelection = function() {\n    throw new Error(\"Invalid 'getSelection' called on \" + this.name + \", it must be overridden and super can not be called.\");\n  };\n\n  Base.prototype.getProgress = function() {\n    return this.progress;\n  };\n\n  Base.prototype.updateProgress = function(step) {\n    this.progress.step = step;\n    this.logger.debug(this.name + \" is now at \" + step + \".\");\n    this.updateRecord({\n      'status': this.progress.step\n    });\n    return this.progress;\n  };\n\n  Base.prototype.addCountToTotal = function(count) {\n    this.progress.count.total = this.progress.count.total + count;\n    this.updateRecord({\n      'count.total': this.progress.count.total\n    });\n    return this.progress;\n  };\n\n  Base.prototype.addCountCompleted = function(count) {\n    this.progress.count.completed = this.progress.count.completed + count;\n    if ((this.progress.count.completed % 500 === 0) || this.progress.count.completed >= this.progress.count.total) {\n      this.updateRecord({\n        'count.completed': this.progress.count.completed\n      });\n    }\n    return this.progress;\n  };\n\n  Base.prototype.updateRecord = function(fields) {\n    Importer.Imports.update({\n      _id: this.importRecord._id\n    }, {\n      $set: fields\n    });\n    this.importRecord = Importer.Imports.findOne(this.importRecord._id);\n    return this.importRecord;\n  };\n\n  Base.prototype.uploadFile = function(details, fileUrl, user, room, timeStamp) {\n    var requestModule;\n    this.logger.debug(\"Uploading the file \" + details.name + \" from \" + fileUrl + \".\");\n    requestModule = /https/i.test(fileUrl) ? Importer.Base.https : Importer.Base.http;\n    return requestModule.get(fileUrl, Meteor.bindEnvironment(function(stream) {\n      var fileId;\n      fileId = Meteor.fileStore.create(details);\n      if (fileId) {\n        return Meteor.fileStore.write(stream, fileId, function(err, file) {\n          var attachment, msg, ref, url;\n          if (err) {\n            throw new Error(err);\n          } else {\n            url = file.url.replace(Meteor.absoluteUrl(), '/');\n            attachment = {\n              title: \"File Uploaded: \" + file.name,\n              title_link: url\n            };\n            if (/^image\\/.+/.test(file.type)) {\n              attachment.image_url = url;\n              attachment.image_type = file.type;\n              attachment.image_size = file.size;\n              attachment.image_dimensions = (ref = file.identify) != null ? ref.size : void 0;\n            }\n            if (/^audio\\/.+/.test(file.type)) {\n              attachment.audio_url = url;\n              attachment.audio_type = file.type;\n              attachment.audio_size = file.size;\n            }\n            if (/^video\\/.+/.test(file.type)) {\n              attachment.video_url = url;\n              attachment.video_type = file.type;\n              attachment.video_size = file.size;\n            }\n            msg = {\n              rid: details.rid,\n              ts: timeStamp,\n              msg: '',\n              file: {\n                _id: file._id\n              },\n              groupable: false,\n              attachments: [attachment]\n            };\n            if ((details.message_id != null) && (typeof details.message_id === 'string')) {\n              msg['_id'] = details.message_id;\n            }\n            return RocketChat.sendMessage(user, msg, room, true);\n          }\n        });\n      } else {\n        return this.logger.error(\"Failed to create the store for \" + fileUrl + \"!!!\");\n      }\n    }));\n  };\n\n  return Base;\n\n})();\n","# Class for all the progress of the importers to use.\nImporter.Progress = class Importer.Progress\n\t# Constructs a new progress object.\n\t#\n\t# @param [String] name the name of the Importer\n\t#\n\tconstructor: (@name) ->\n\t\t@step = Importer.ProgressStep.NEW\n\t\t@count = { completed: 0, total: 0 }\n","Importer.Progress = Importer.Progress = (function() {\n  function Progress(name) {\n    this.name = name;\n    this.step = Importer.ProgressStep.NEW;\n    this.count = {\n      completed: 0,\n      total: 0\n    };\n  }\n\n  return Progress;\n\n})();\n","# \"ENUM\" of the import step, the value is the translation string\nImporter.ProgressStep = Object.freeze\n\tNEW: 'importer_new'\n\tPREPARING_STARTED: 'importer_preparing_started'\n\tPREPARING_USERS: 'importer_preparing_users'\n\tPREPARING_CHANNELS: 'importer_preparing_channels'\n\tPREPARING_MESSAGES: 'importer_preparing_messages'\n\tUSER_SELECTION: 'importer_user_selection'\n\tIMPORTING_STARTED: 'importer_importing_started'\n\tIMPORTING_USERS: 'importer_importing_users'\n\tIMPORTING_CHANNELS: 'importer_importing_channels'\n\tIMPORTING_MESSAGES: 'importer_importing_messages'\n\tFINISHING: 'importer_finishing'\n\tDONE: 'importer_done'\n\tERROR: 'importer_import_failed'\n\tCANCELLED: 'importer_import_cancelled'\n","# Class for all the selection of users and channels for the importers\nImporter.Selection = class Importer.Selection\n\t# Constructs a new importer selection object.\n\t#\n\t# @param [String] name the name of the Importer\n\t# @param [Array<Importer.User>] users the array of users\n\t# @param [Array<Importer.Channel>] channels the array of channels\n\t#\n\tconstructor: (@name, @users, @channels) ->\n","Importer.Selection = Importer.Selection = (function() {\n  function Selection(name, users, channels) {\n    this.name = name;\n    this.users = users;\n    this.channels = channels;\n  }\n\n  return Selection;\n\n})();\n","#  Class for the selection channels for ImporterSelection\nImporter.SelectionChannel = class Importer.SelectionChannel\n\t# Constructs a new selection channel.\n\t#\n\t# @param [String] channel_id the unique identifier of the channel\n\t# @param [String] name the name of the channel\n\t# @param [Boolean] is_archived whether the channel was archived or not\n\t# @param [Boolean] do_import whether we will be importing the channel or not\n\t# @param [Boolean] is_private whether the channel is private or public\n\t#\n\tconstructor: (@channel_id, @name, @is_archived, @do_import, @is_private) ->\n\t\t#TODO: Add some verification?\n","Importer.SelectionChannel = Importer.SelectionChannel = (function() {\n  function SelectionChannel(channel_id, name, is_archived, do_import, is_private) {\n    this.channel_id = channel_id;\n    this.name = name;\n    this.is_archived = is_archived;\n    this.do_import = do_import;\n    this.is_private = is_private;\n  }\n\n  return SelectionChannel;\n\n})();\n","# Class for the selection users for ImporterSelection\nImporter.SelectionUser = class Importer.SelectionUser\n\t# Constructs a new selection user.\n\t#\n\t# @param [String] user_id the unique user identifier\n\t# @param [String] username the user's username\n\t# @param [String] email the user's email\n\t# @param [Boolean] is_deleted whether the user was deleted or not\n\t# @param [Boolean] is_bot whether the user is a bot or not\n\t# @param [Boolean] do_import whether we are going to import this user or not\n\t#\n\tconstructor: (@user_id, @username, @email, @is_deleted, @is_bot, @do_import) ->\n\t\t#TODO: Add some verification?\n","Importer.SelectionUser = Importer.SelectionUser = (function() {\n  function SelectionUser(user_id, username, email, is_deleted, is_bot, do_import) {\n    this.user_id = user_id;\n    this.username = username;\n    this.email = email;\n    this.is_deleted = is_deleted;\n    this.is_bot = is_bot;\n    this.do_import = do_import;\n  }\n\n  return SelectionUser;\n\n})();\n","Importer.Imports = new class Importer.Imports extends RocketChat.models._Base\n\tconstructor: ->\n\t\tsuper('import')\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nImporter.Imports = new (Importer.Imports = (function(superClass) {\n  extend(Imports, superClass);\n\n  function Imports() {\n    Imports.__super__.constructor.call(this, 'import');\n  }\n\n  return Imports;\n\n})(RocketChat.models._Base));\n","Importer.RawImports = new class Importer.RawImports extends RocketChat.models._Base\n\tconstructor: ->\n\t\tsuper('raw_imports')\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nImporter.RawImports = new (Importer.RawImports = (function(superClass) {\n  extend(RawImports, superClass);\n\n  function RawImports() {\n    RawImports.__super__.constructor.call(this, 'raw_imports');\n  }\n\n  return RawImports;\n\n})(RocketChat.models._Base));\n","Meteor.methods\n\tgetImportProgress: (name) ->\n\t\tif not Meteor.userId()\n\t\t\tthrow new Meteor.Error 'error-invalid-user', 'Invalid user', { method: 'getImportProgress' }\n\n\t\tif not RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\n\t\tif Importer.Importers[name]?\n\t\t\treturn Importer.Importers[name].importerInstance?.getProgress()\n\t\telse\n\t\t\tthrow new Meteor.Error 'error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'getImportProgress' }\n","Meteor.methods({\n  getImportProgress: function(name) {\n    var ref;\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'getImportProgress'\n      });\n    }\n    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', {\n        method: 'setupImporter'\n      });\n    }\n    if (Importer.Importers[name] != null) {\n      return (ref = Importer.Importers[name].importerInstance) != null ? ref.getProgress() : void 0;\n    } else {\n      throw new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', {\n        method: 'getImportProgress'\n      });\n    }\n  }\n});\n","Meteor.methods\n\tgetSelectionData: (name) ->\n\t\tif not Meteor.userId()\n\t\t\tthrow new Meteor.Error 'error-invalid-user', 'Invalid user', { method: 'getSelectionData' }\n\n\t\tif not RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\n\t\tif Importer.Importers[name]?.importerInstance?\n\t\t\tprogress = Importer.Importers[name].importerInstance.getProgress()\n\t\t\tswitch progress.step\n\t\t\t\twhen Importer.ProgressStep.USER_SELECTION\n\t\t\t\t\treturn Importer.Importers[name].importerInstance.getSelection()\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\telse\n\t\t\tthrow new Meteor.Error 'error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'getSelectionData' }\n","Meteor.methods({\n  getSelectionData: function(name) {\n    var progress, ref;\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'getSelectionData'\n      });\n    }\n    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', {\n        method: 'setupImporter'\n      });\n    }\n    if (((ref = Importer.Importers[name]) != null ? ref.importerInstance : void 0) != null) {\n      progress = Importer.Importers[name].importerInstance.getProgress();\n      switch (progress.step) {\n        case Importer.ProgressStep.USER_SELECTION:\n          return Importer.Importers[name].importerInstance.getSelection();\n        default:\n          return false;\n      }\n    } else {\n      throw new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', {\n        method: 'getSelectionData'\n      });\n    }\n  }\n});\n","/* globals Importer */\n\nMeteor.methods({\n\tprepareImport(name, dataURI, contentType, fileName) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'prepareImport' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\t\t}\n\n\t\tcheck(name, String);\n\t\tcheck(dataURI, String);\n\t\tcheck(fileName, String);\n\n\t\tif (name && Importer.Importers[name] && Importer.Importers[name].importerInstance) {\n\t\t\tconst results = Importer.Importers[name].importerInstance.prepare(dataURI, contentType, fileName);\n\n\t\t\tif (typeof results === 'object') {\n\t\t\t\tif (results instanceof Promise) {\n\t\t\t\t\treturn results.catch(e => { throw new Meteor.Error(e); });\n\t\t\t\t} else {\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!name) {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', `No Importer Found: \"${ name }\"`, { method: 'prepareImport' });\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', `The importer, \"${ name }\", was not defined correctly, it is missing the Import class.`, { method: 'prepareImport' });\n\t\t}\n\t}\n});\n","Meteor.methods\n\trestartImport: (name) ->\n\t\tif not Meteor.userId()\n\t\t\tthrow new Meteor.Error 'error-invalid-user', 'Invalid user', { method: 'restartImport' }\n\n\t\tif not RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\n\t\tif Importer.Importers[name]?\n\t\t\timporter = Importer.Importers[name]\n\t\t\timporter.importerInstance.updateProgress Importer.ProgressStep.CANCELLED\n\t\t\timporter.importerInstance.updateRecord { valid: false }\n\t\t\timporter.importerInstance = undefined\n\t\t\timporter.importerInstance = new importer.importer importer.name, importer.description, importer.mimeType\n\t\t\treturn importer.importerInstance.getProgress()\n\t\telse\n\t\t\tthrow new Meteor.Error 'error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'restartImport' }\n","Meteor.methods({\n  restartImport: function(name) {\n    var importer;\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'restartImport'\n      });\n    }\n    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', {\n        method: 'setupImporter'\n      });\n    }\n    if (Importer.Importers[name] != null) {\n      importer = Importer.Importers[name];\n      importer.importerInstance.updateProgress(Importer.ProgressStep.CANCELLED);\n      importer.importerInstance.updateRecord({\n        valid: false\n      });\n      importer.importerInstance = void 0;\n      importer.importerInstance = new importer.importer(importer.name, importer.description, importer.mimeType);\n      return importer.importerInstance.getProgress();\n    } else {\n      throw new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', {\n        method: 'restartImport'\n      });\n    }\n  }\n});\n","Meteor.methods\n\tsetupImporter: (name) ->\n\t\tif not Meteor.userId()\n\t\t\tthrow new Meteor.Error 'error-invalid-user', 'Invalid user', { method: 'setupImporter' }\n\n\t\tif not RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\n\t\tif Importer.Importers[name]?.importer?\n\t\t\timporter = Importer.Importers[name]\n\t\t\t# If they currently have progress, get it and return the progress.\n\t\t\tif importer.importerInstance\n\t\t\t\treturn importer.importerInstance.getProgress()\n\t\t\telse\n\t\t\t\timporter.importerInstance = new importer.importer importer.name, importer.description, importer.mimeType\n\t\t\t\treturn importer.importerInstance.getProgress()\n\t\telse\n\t\t\tconsole.warn \"Tried to setup #{name} as an importer.\"\n\t\t\tthrow new Meteor.Error 'error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'setupImporter' }\n","Meteor.methods({\n  setupImporter: function(name) {\n    var importer, ref;\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'setupImporter'\n      });\n    }\n    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', {\n        method: 'setupImporter'\n      });\n    }\n    if (((ref = Importer.Importers[name]) != null ? ref.importer : void 0) != null) {\n      importer = Importer.Importers[name];\n      if (importer.importerInstance) {\n        return importer.importerInstance.getProgress();\n      } else {\n        importer.importerInstance = new importer.importer(importer.name, importer.description, importer.mimeType);\n        return importer.importerInstance.getProgress();\n      }\n    } else {\n      console.warn(\"Tried to setup \" + name + \" as an importer.\");\n      throw new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', {\n        method: 'setupImporter'\n      });\n    }\n  }\n});\n","Meteor.methods\n\tstartImport: (name, input) ->\n\t\t# Takes name and object with users / channels selected to import\n\t\tif not Meteor.userId()\n\t\t\tthrow new Meteor.Error 'error-invalid-user', 'Invalid user', { method: 'startImport' }\n\n\t\tif not RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\n\t\tif Importer.Importers[name]?.importerInstance?\n\t\t\tusersSelection = input.users.map (user) ->\n\t\t\t\treturn new Importer.SelectionUser user.user_id, user.username, user.email, user.is_deleted, user.is_bot, user.do_import\n\t\t\tchannelsSelection = input.channels.map (channel) ->\n\t\t\t\treturn new Importer.SelectionChannel channel.channel_id, channel.name, channel.is_archived, channel.do_import\n\n\t\t\tselection = new Importer.Selection name, usersSelection, channelsSelection\n\t\t\tImporter.Importers[name].importerInstance.startImport selection\n\t\telse\n\t\t\tthrow new Meteor.Error 'error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'startImport' }\n","Meteor.methods({\n  startImport: function(name, input) {\n    var channelsSelection, ref, selection, usersSelection;\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'startImport'\n      });\n    }\n    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', {\n        method: 'setupImporter'\n      });\n    }\n    if (((ref = Importer.Importers[name]) != null ? ref.importerInstance : void 0) != null) {\n      usersSelection = input.users.map(function(user) {\n        return new Importer.SelectionUser(user.user_id, user.username, user.email, user.is_deleted, user.is_bot, user.do_import);\n      });\n      channelsSelection = input.channels.map(function(channel) {\n        return new Importer.SelectionChannel(channel.channel_id, channel.name, channel.is_archived, channel.do_import);\n      });\n      selection = new Importer.Selection(name, usersSelection, channelsSelection);\n      return Importer.Importers[name].importerInstance.startImport(selection);\n    } else {\n      throw new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', {\n        method: 'startImport'\n      });\n    }\n  }\n});\n","Meteor.startup ->\n\t# Make sure all imports are marked as invalid, data clean up since you can't\n\t# restart an import at the moment.\n\tImporter.Imports.update { valid: { $ne: false } }, { $set: { valid: false } }, { multi: true }\n\n\t# Clean up all the raw import data, since you can't restart an import at the moment\n\tImporter.Imports.find({ valid: { $ne: true }}).forEach (item) ->\n\t\tImporter.RawImports.remove { 'import': item._id, 'importer': item.type }\n","Meteor.startup(function() {\n  Importer.Imports.update({\n    valid: {\n      $ne: false\n    }\n  }, {\n    $set: {\n      valid: false\n    }\n  }, {\n    multi: true\n  });\n  return Importer.Imports.find({\n    valid: {\n      $ne: true\n    }\n  }).forEach(function(item) {\n    return Importer.RawImports.remove({\n      'import': item._id,\n      'importer': item.type\n    });\n  });\n});\n"]}