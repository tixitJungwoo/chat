{"version":3,"sources":["meteor://ðŸ’»app/packages/mizzao_autocomplete/autocomplete-server.coffee","meteor://ðŸ’»app/autocomplete-server.coffee.js"],"names":["Autocomplete","publishCursor","cursor","sub","Mongo","Collection","_publishCursor","Meteor","publish","selector","options","collName","collection","global","Error","_isInsecure","_debug","limit","Math","min","abs","find","ready"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,eAAA;ACGJ,WAASA,YAAT,GAAwB,CAAE;;ADF1BA,eAACC,aAAD,GAAgB,UAACC,MAAD,EAASC,GAAT;ACKd,WDFAC,MAAMC,UAAN,CAAiBC,cAAjB,CAAgCJ,MAAhC,EAAwCC,GAAxC,EAA6C,qBAA7C,CCEA;ADLc,GAAhB;;ACQA,SAAOH,YAAP;AAED,CDXK;;AAMNO,OAAOC,OAAP,CAAe,wBAAf,EAAyC,UAACC,QAAD,EAAWC,OAAX,EAAoBC,QAApB;AACvC,MAAAC,UAAA;AAAAA,eAAaC,OAAOF,QAAP,CAAb;;AACA,OAAOC,UAAP;AACE,UAAU,IAAAE,KAAA,CAAMH,WAAW,wDAAjB,CAAV;ACSD;;ADLD,OAAOC,WAAWG,WAAX,EAAP;AACER,WAAOS,MAAP,CAAcL,WAAW,sNAAzB;;AACA,WAAO,EAAP;ACOD;;ADJD,MAAyDD,QAAQO,KAAjE;AAAAP,YAAQO,KAAR,GAAgBC,KAAKC,GAAL,CAAS,EAAT,EAAaD,KAAKE,GAAL,CAASV,QAAQO,KAAjB,CAAb,CAAhB;ACOC;;ADHDjB,eAAaC,aAAb,CAA4BW,WAAWS,IAAX,CAAgBZ,QAAhB,EAA0BC,OAA1B,CAA5B,EAAgE,IAAhE;ACKA,SDFA,KAAKY,KAAL,ECEA;ADrBF,8F","file":"/packages/mizzao_autocomplete.js","sourcesContent":["class Autocomplete\n  @publishCursor: (cursor, sub) ->\n    # This also attaches an onStop callback to sub, so we don't need to worry about that.\n    # https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\n    Mongo.Collection._publishCursor(cursor, sub, \"autocompleteRecords\")\n\nMeteor.publish 'autocomplete-recordset', (selector, options, collName) ->\n  collection = global[collName]\n  unless collection\n    throw new Error(collName + ' is not defined on the global namespace of the server.')\n\n  # This is a semi-documented Meteor feature:\n  # https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/collection.js\n  unless collection._isInsecure()\n    Meteor._debug(collName + ' is a secure collection, therefore no data was returned because the client could compromise security by subscribing to arbitrary server collections via the browser console. Please write your own publish function.')\n    return [] # We need this for the subscription to be marked ready\n\n  # guard against client-side DOS: hard limit to 50\n  options.limit = Math.min(50, Math.abs(options.limit)) if options.limit\n\n  # Push this into our own collection on the client so they don't interfere with other publications of the named collection.\n  # This also stops the observer automatically when the subscription is stopped.\n  Autocomplete.publishCursor( collection.find(selector, options), this)\n\n  # Mark the subscription ready after the initial addition of documents.\n  this.ready()\n\n","                 \n\nAutocomplete = (function() {\n  function Autocomplete() {}\n\n  Autocomplete.publishCursor = function(cursor, sub) {\n    return Mongo.Collection._publishCursor(cursor, sub, \"autocompleteRecords\");\n  };\n\n  return Autocomplete;\n\n})();\n\nMeteor.publish('autocomplete-recordset', function(selector, options, collName) {\n  var collection;\n  collection = global[collName];\n  if (!collection) {\n    throw new Error(collName + ' is not defined on the global namespace of the server.');\n  }\n  if (!collection._isInsecure()) {\n    Meteor._debug(collName + ' is a secure collection, therefore no data was returned because the client could compromise security by subscribing to arbitrary server collections via the browser console. Please write your own publish function.');\n    return [];\n  }\n  if (options.limit) {\n    options.limit = Math.min(50, Math.abs(options.limit));\n  }\n  Autocomplete.publishCursor(collection.find(selector, options), this);\n  return this.ready();\n});\n"]}