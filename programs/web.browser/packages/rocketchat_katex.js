//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Template = Package['templating-runtime'].Template;
var s = Package['underscorestring:underscore.string'].s;
var RocketChat = Package['rocketchat:lib'].RocketChat;
var RocketChatTabBar = Package['rocketchat:lib'].RocketChatTabBar;
var meteorInstall = Package.modules.meteorInstall;
var process = Package.modules.process;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var TAPi18next = Package['tap:i18n'].TAPi18next;
var TAPi18n = Package['tap:i18n'].TAPi18n;
var Symbol = Package['ecmascript-runtime-client'].Symbol;
var Map = Package['ecmascript-runtime-client'].Map;
var Set = Package['ecmascript-runtime-client'].Set;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

var require = meteorInstall({"node_modules":{"meteor":{"rocketchat:katex":{"katex.js":function(require){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/rocketchat_katex/katex.js                                                                                //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                              //
                                                                                                                     //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //
                                                                                                                     //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                    //
                                                                                                                     //
/*                                                                                                                   // 1
 * KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.                                //
 * https://github.com/Khan/KaTeX                                                                                     //
 */var katex = require('katex');                                                                                     //
                                                                                                                     //
var Boundary = function () {                                                                                         //
	function Boundary() {                                                                                               // 8
		(0, _classCallCheck3.default)(this, Boundary);                                                                     // 8
	}                                                                                                                   // 8
                                                                                                                     //
	Boundary.prototype.length = function () {                                                                           //
		function length() {                                                                                                //
			return this.end - this.start;                                                                                     // 11
		}                                                                                                                  // 12
                                                                                                                     //
		return length;                                                                                                     //
	}();                                                                                                                //
                                                                                                                     //
	Boundary.prototype.extract = function () {                                                                          //
		function extract(str) {                                                                                            //
			return str.substr(this.start, this.length());                                                                     // 15
		}                                                                                                                  // 16
                                                                                                                     //
		return extract;                                                                                                    //
	}();                                                                                                                //
                                                                                                                     //
	return Boundary;                                                                                                    //
}();                                                                                                                 //
                                                                                                                     //
var Katex = function () {                                                                                            //
	function Katex() {                                                                                                  // 21
		var _this = this;                                                                                                  // 21
                                                                                                                     //
		(0, _classCallCheck3.default)(this, Katex);                                                                        // 21
		this.delimiters_map = [{                                                                                           // 22
			opener: '\\[',                                                                                                    // 24
			closer: '\\]',                                                                                                    // 25
			displayMode: true,                                                                                                // 26
			enabled: function () {                                                                                            // 27
				return _this.parenthesis_syntax_enabled();                                                                       // 28
			}                                                                                                                 // 29
		}, {                                                                                                               // 23
			opener: '\\(',                                                                                                    // 31
			closer: '\\)',                                                                                                    // 32
			displayMode: false,                                                                                               // 33
			enabled: function () {                                                                                            // 34
				return _this.parenthesis_syntax_enabled();                                                                       // 35
			}                                                                                                                 // 36
		}, {                                                                                                               // 30
			opener: '$$',                                                                                                     // 38
			closer: '$$',                                                                                                     // 39
			displayMode: true,                                                                                                // 40
			enabled: function () {                                                                                            // 41
				return _this.dollar_syntax_enabled();                                                                            // 42
			}                                                                                                                 // 43
		}, {                                                                                                               // 37
			opener: '$',                                                                                                      // 45
			closer: '$',                                                                                                      // 46
			displayMode: false,                                                                                               // 47
			enabled: function () {                                                                                            // 48
				return _this.dollar_syntax_enabled();                                                                            // 49
			}                                                                                                                 // 50
		}];                                                                                                                // 44
	} // Searches for the first opening delimiter in the string from a given position                                   // 53
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.find_opening_delimiter = function () {                                                              //
		function find_opening_delimiter(str, start) {                                                                      //
			var _this2 = this;                                                                                                // 56
                                                                                                                     //
			// Search the string for each opening delimiter                                                                   // 56
			var matches = function () {                                                                                       // 57
				var map = _this2.delimiters_map;                                                                                 // 58
				var results = [];                                                                                                // 59
				map.forEach(function (op) {                                                                                      // 61
					if (op.enabled()) {                                                                                             // 62
						results.push({                                                                                                 // 63
							options: op,                                                                                                  // 64
							pos: str.indexOf(op.opener, start)                                                                            // 65
						});                                                                                                            // 63
					}                                                                                                               // 67
				});                                                                                                              // 68
				return results;                                                                                                  // 69
			}();                                                                                                              // 70
                                                                                                                     //
			var positions = function () {                                                                                     // 72
				var results = [];                                                                                                // 73
				matches.forEach(function (pos) {                                                                                 // 74
					if (pos.pos >= 0) {                                                                                             // 75
						results.push(pos.pos);                                                                                         // 76
					}                                                                                                               // 77
				});                                                                                                              // 78
				return results;                                                                                                  // 79
			}(); // No opening delimiters were found                                                                          // 80
                                                                                                                     //
                                                                                                                     //
			if (positions.length === 0) {                                                                                     // 83
				return null;                                                                                                     // 84
			} //Take the first delimiter found                                                                                // 85
                                                                                                                     //
                                                                                                                     //
			var pos = Math.min.apply(Math, positions);                                                                        // 88
                                                                                                                     //
			var match_index = function () {                                                                                   // 90
				var results = [];                                                                                                // 91
				matches.forEach(function (m) {                                                                                   // 92
					results.push(m.pos);                                                                                            // 93
				});                                                                                                              // 94
				return results;                                                                                                  // 95
			}().indexOf(pos);                                                                                                 // 96
                                                                                                                     //
			var match = matches[match_index];                                                                                 // 98
			return match;                                                                                                     // 99
		}                                                                                                                  // 100
                                                                                                                     //
		return find_opening_delimiter;                                                                                     //
	}(); // Returns the outer and inner boundaries of the latex block starting                                          //
	// at the given opening delimiter                                                                                   // 103
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.get_latex_boundaries = function () {                                                                //
		function get_latex_boundaries(str, opening_delimiter_match) {                                                      //
			var inner = new Boundary();                                                                                       // 105
			var outer = new Boundary(); // The closing delimiter matching to the opening one                                  // 106
                                                                                                                     //
			var closer = opening_delimiter_match.options.closer;                                                              // 109
			outer.start = opening_delimiter_match.pos;                                                                        // 110
			inner.start = opening_delimiter_match.pos + closer.length; // Search for a closer delimiter after the opening one
                                                                                                                     //
			var closer_index = str.substr(inner.start).indexOf(closer);                                                       // 114
                                                                                                                     //
			if (closer_index < 0) {                                                                                           // 115
				return null;                                                                                                     // 116
			}                                                                                                                 // 117
                                                                                                                     //
			inner.end = inner.start + closer_index;                                                                           // 118
			outer.end = inner.end + closer.length;                                                                            // 119
			return {                                                                                                          // 120
				outer: outer,                                                                                                    // 121
				inner: inner                                                                                                     // 122
			};                                                                                                                // 120
		}                                                                                                                  // 124
                                                                                                                     //
		return get_latex_boundaries;                                                                                       //
	}(); // Searches for the first latex block in the given string                                                      //
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.find_latex = function () {                                                                          //
		function find_latex(str) {                                                                                         //
			var start = 0;                                                                                                    // 128
			var opening_delimiter_match = void 0;                                                                             // 129
                                                                                                                     //
			while ((opening_delimiter_match = this.find_opening_delimiter(str, start++)) != null) {                           // 131
				var match = this.get_latex_boundaries(str, opening_delimiter_match);                                             // 132
                                                                                                                     //
				if (match && match.inner.extract(str).trim().length) {                                                           // 133
					match.options = opening_delimiter_match.options;                                                                // 134
					return match;                                                                                                   // 135
				}                                                                                                                // 136
			}                                                                                                                 // 137
                                                                                                                     //
			return null;                                                                                                      // 138
		}                                                                                                                  // 139
                                                                                                                     //
		return find_latex;                                                                                                 //
	}(); // Breaks a message to what comes before, after and to the content of a                                        //
	// matched latex block                                                                                              // 142
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.extract_latex = function () {                                                                       //
		function extract_latex(str, match) {                                                                               //
			var before = str.substr(0, match.outer.start);                                                                    // 144
			var after = str.substr(match.outer.end);                                                                          // 145
			var latex = match.inner.extract(str);                                                                             // 146
			latex = s.unescapeHTML(latex);                                                                                    // 147
			return {                                                                                                          // 148
				before: before,                                                                                                  // 149
				latex: latex,                                                                                                    // 150
				after: after                                                                                                     // 151
			};                                                                                                                // 148
		}                                                                                                                  // 153
                                                                                                                     //
		return extract_latex;                                                                                              //
	}(); // Takes a latex math string and the desired display mode and renders it                                       //
	// to HTML using the KaTeX library                                                                                  // 156
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.render_latex = function () {                                                                        //
		function render_latex(latex, displayMode) {                                                                        //
			var rendered = void 0;                                                                                            // 158
                                                                                                                     //
			try {                                                                                                             // 159
				rendered = katex.renderToString(latex, {                                                                         // 160
					displayMode: displayMode                                                                                        // 161
				});                                                                                                              // 160
			} catch (error) {                                                                                                 // 163
				var e = error;                                                                                                   // 164
				var display_mode = displayMode ? 'block' : 'inline';                                                             // 165
				rendered = "<div class=\"katex-error katex-" + display_mode + "-error\">";                                       // 166
				rendered += "" + s.escapeHTML(e.message);                                                                        // 167
				rendered += '</div>';                                                                                            // 168
			}                                                                                                                 // 169
                                                                                                                     //
			return rendered;                                                                                                  // 170
		}                                                                                                                  // 171
                                                                                                                     //
		return render_latex;                                                                                               //
	}(); // Takes a string and renders all latex blocks inside it                                                       //
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.render = function () {                                                                              //
		function render(str, render_func) {                                                                                //
			var result = '';                                                                                                  // 175
                                                                                                                     //
			while (this.find_latex(str) != null) {                                                                            // 176
				// Find the first latex block in the string                                                                      // 177
				var match = this.find_latex(str);                                                                                // 178
				var parts = this.extract_latex(str, match); // Add to the reuslt what comes before the latex block as well as    // 179
				// the rendered latex content                                                                                    // 182
                                                                                                                     //
				var rendered = render_func(parts.latex, match.options.displayMode);                                              // 183
				result += parts.before + rendered; // Set what comes after the latex block to be examined next                   // 184
                                                                                                                     //
				str = parts.after;                                                                                               // 186
			}                                                                                                                 // 187
                                                                                                                     //
			return result += str;                                                                                             // 188
		}                                                                                                                  // 189
                                                                                                                     //
		return render;                                                                                                     //
	}(); // Takes a rocketchat message and renders latex in its content                                                 //
                                                                                                                     //
                                                                                                                     //
	Katex.prototype.render_message = function () {                                                                      //
		function render_message(message) {                                                                                 //
			var _this3 = this;                                                                                                // 192
                                                                                                                     //
			//Render only if enabled in admin panel                                                                           // 193
			var render_func = void 0;                                                                                         // 194
                                                                                                                     //
			if (this.katex_enabled()) {                                                                                       // 195
				var msg = message;                                                                                               // 196
                                                                                                                     //
				if (!_.isString(message)) {                                                                                      // 197
					if (_.trim(message.html)) {                                                                                     // 198
						msg = message.html;                                                                                            // 199
					} else {                                                                                                        // 200
						return message;                                                                                                // 201
					}                                                                                                               // 202
				}                                                                                                                // 203
                                                                                                                     //
				if (_.isString(message)) {                                                                                       // 204
					render_func = function (latex, displayMode) {                                                                   // 205
						return _this3.render_latex(latex, displayMode);                                                                // 206
					};                                                                                                              // 207
				} else {                                                                                                         // 208
					if (message.tokens == null) {                                                                                   // 209
						message.tokens = [];                                                                                           // 210
					}                                                                                                               // 211
                                                                                                                     //
					render_func = function (latex, displayMode) {                                                                   // 212
						var token = "=!=" + Random.id() + "=!=";                                                                       // 213
						message.tokens.push({                                                                                          // 214
							token: token,                                                                                                 // 215
							text: _this3.render_latex(latex, displayMode)                                                                 // 216
						});                                                                                                            // 214
						return token;                                                                                                  // 218
					};                                                                                                              // 219
				}                                                                                                                // 220
                                                                                                                     //
				msg = this.render(msg, render_func);                                                                             // 221
                                                                                                                     //
				if (!_.isString(message)) {                                                                                      // 222
					message.html = msg;                                                                                             // 223
				} else {                                                                                                         // 224
					message = msg;                                                                                                  // 225
				}                                                                                                                // 226
			}                                                                                                                 // 227
                                                                                                                     //
			return message;                                                                                                   // 228
		}                                                                                                                  // 229
                                                                                                                     //
		return render_message;                                                                                             //
	}();                                                                                                                //
                                                                                                                     //
	Katex.prototype.katex_enabled = function () {                                                                       //
		function katex_enabled() {                                                                                         //
			return RocketChat.settings.get('Katex_Enabled');                                                                  // 232
		}                                                                                                                  // 233
                                                                                                                     //
		return katex_enabled;                                                                                              //
	}();                                                                                                                //
                                                                                                                     //
	Katex.prototype.dollar_syntax_enabled = function () {                                                               //
		function dollar_syntax_enabled() {                                                                                 //
			return RocketChat.settings.get('Katex_Dollar_Syntax');                                                            // 236
		}                                                                                                                  // 237
                                                                                                                     //
		return dollar_syntax_enabled;                                                                                      //
	}();                                                                                                                //
                                                                                                                     //
	Katex.prototype.parenthesis_syntax_enabled = function () {                                                          //
		function parenthesis_syntax_enabled() {                                                                            //
			return RocketChat.settings.get('Katex_Parenthesis_Syntax');                                                       // 240
		}                                                                                                                  // 241
                                                                                                                     //
		return parenthesis_syntax_enabled;                                                                                 //
	}();                                                                                                                //
                                                                                                                     //
	return Katex;                                                                                                       //
}();                                                                                                                 //
                                                                                                                     //
RocketChat.katex = new Katex();                                                                                      // 245
var cb = RocketChat.katex.render_message.bind(RocketChat.katex);                                                     // 247
RocketChat.callbacks.add('renderMessage', cb, RocketChat.callbacks.priority.HIGH - 1, 'katex');                      // 249
                                                                                                                     //
if (Meteor.isClient) {                                                                                               // 251
	Blaze.registerHelper('RocketChatKatex', function (text) {                                                           // 252
		return RocketChat.katex.render_message(text);                                                                      // 253
	});                                                                                                                 // 254
}                                                                                                                    // 255
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"node_modules":{"katex":{"package.json":function(require,exports){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/katex/package.json                                                                                   //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
exports.name = "katex";                                                                                              // 1
exports.version = "0.7.1";                                                                                           // 2
exports.main = "katex.js";                                                                                           // 3
                                                                                                                     // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"katex.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/katex.js                                                  //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* eslint no-console:0 */                                                                                            // 1
/**                                                                                                                  // 2
 * This is the main entry point for KaTeX. Here, we expose functions for                                             // 3
 * rendering expressions either to DOM nodes or to markup strings.                                                   // 4
 *                                                                                                                   // 5
 * We also expose the ParseError class to check if errors thrown from KaTeX are                                      // 6
 * errors in the expression, or errors in javascript handling.                                                       // 7
 */                                                                                                                  // 8
                                                                                                                     // 9
var ParseError = require("./src/ParseError");                                                                        // 10
var Settings = require("./src/Settings");                                                                            // 11
                                                                                                                     // 12
var buildTree = require("./src/buildTree");                                                                          // 13
var parseTree = require("./src/parseTree");                                                                          // 14
var utils = require("./src/utils");                                                                                  // 15
                                                                                                                     // 16
/**                                                                                                                  // 17
 * Parse and build an expression, and place that expression in the DOM node                                          // 18
 * given.                                                                                                            // 19
 */                                                                                                                  // 20
var render = function(expression, baseNode, options) {                                                               // 21
    utils.clearNode(baseNode);                                                                                       // 22
                                                                                                                     // 23
    var settings = new Settings(options);                                                                            // 24
                                                                                                                     // 25
    var tree = parseTree(expression, settings);                                                                      // 26
    var node = buildTree(tree, expression, settings).toNode();                                                       // 27
                                                                                                                     // 28
    baseNode.appendChild(node);                                                                                      // 29
};                                                                                                                   // 30
                                                                                                                     // 31
// KaTeX's styles don't work properly in quirks mode. Print out an error, and                                        // 32
// disable rendering.                                                                                                // 33
if (typeof document !== "undefined") {                                                                               // 34
    if (document.compatMode !== "CSS1Compat") {                                                                      // 35
        typeof console !== "undefined" && console.warn(                                                              // 36
            "Warning: KaTeX doesn't work in quirks mode. Make sure your " +                                          // 37
                "website has a suitable doctype.");                                                                  // 38
                                                                                                                     // 39
        render = function() {                                                                                        // 40
            throw new ParseError("KaTeX doesn't work in quirks mode.");                                              // 41
        };                                                                                                           // 42
    }                                                                                                                // 43
}                                                                                                                    // 44
                                                                                                                     // 45
/**                                                                                                                  // 46
 * Parse and build an expression, and return the markup for that.                                                    // 47
 */                                                                                                                  // 48
var renderToString = function(expression, options) {                                                                 // 49
    var settings = new Settings(options);                                                                            // 50
                                                                                                                     // 51
    var tree = parseTree(expression, settings);                                                                      // 52
    return buildTree(tree, expression, settings).toMarkup();                                                         // 53
};                                                                                                                   // 54
                                                                                                                     // 55
/**                                                                                                                  // 56
 * Parse an expression and return the parse tree.                                                                    // 57
 */                                                                                                                  // 58
var generateParseTree = function(expression, options) {                                                              // 59
    var settings = new Settings(options);                                                                            // 60
    return parseTree(expression, settings);                                                                          // 61
};                                                                                                                   // 62
                                                                                                                     // 63
module.exports = {                                                                                                   // 64
    render: render,                                                                                                  // 65
    renderToString: renderToString,                                                                                  // 66
    /**                                                                                                              // 67
     * NOTE: This method is not currently recommended for public use.                                                // 68
     * The internal tree representation is unstable and is very likely                                               // 69
     * to change. Use at your own risk.                                                                              // 70
     */                                                                                                              // 71
    __parse: generateParseTree,                                                                                      // 72
    ParseError: ParseError                                                                                           // 73
};                                                                                                                   // 74
                                                                                                                     // 75
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"src":{"ParseError.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/ParseError.js                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This is the ParseError class, which is the main error thrown by KaTeX                                             // 2
 * functions when something has gone wrong. This is used to distinguish internal                                     // 3
 * errors from errors in the expression that the user provided.                                                      // 4
 *                                                                                                                   // 5
 * If possible, a caller should provide a Token or ParseNode with information                                        // 6
 * about where in the source string the problem occurred.                                                            // 7
 *                                                                                                                   // 8
 * @param {string} message  The error message                                                                        // 9
 * @param {(Token|ParseNode)=} token  An object providing position information                                       // 10
 */                                                                                                                  // 11
function ParseError(message, token) {                                                                                // 12
    var error = "KaTeX parse error: " + message;                                                                     // 13
    var start;                                                                                                       // 14
    var end;                                                                                                         // 15
                                                                                                                     // 16
    if (token && token.lexer && token.start <= token.end) {                                                          // 17
        // If we have the input and a position, make the error a bit fancier                                         // 18
                                                                                                                     // 19
        // Get the input                                                                                             // 20
        var input = token.lexer.input;                                                                               // 21
                                                                                                                     // 22
        // Prepend some information                                                                                  // 23
        start = token.start;                                                                                         // 24
        end = token.end;                                                                                             // 25
        if (start === input.length) {                                                                                // 26
            error += " at end of input: ";                                                                           // 27
        } else {                                                                                                     // 28
            error += " at position " + (start + 1) + ": ";                                                           // 29
        }                                                                                                            // 30
                                                                                                                     // 31
        // Underline token in question using combining underscores                                                   // 32
        var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332");                                        // 33
                                                                                                                     // 34
        // Extract some context from the input and add it to the error                                               // 35
        var left;                                                                                                    // 36
        if (start > 15) {                                                                                            // 37
            left = "…" + input.slice(start - 15, start);                                                             // 38
        } else {                                                                                                     // 39
            left = input.slice(0, start);                                                                            // 40
        }                                                                                                            // 41
        var right;                                                                                                   // 42
        if (end + 15 < input.length) {                                                                               // 43
            right = input.slice(end, end + 15) + "…";                                                                // 44
        } else {                                                                                                     // 45
            right = input.slice(end);                                                                                // 46
        }                                                                                                            // 47
        error += left + underlined + right;                                                                          // 48
    }                                                                                                                // 49
                                                                                                                     // 50
    // Some hackery to make ParseError a prototype of Error                                                          // 51
    // See http://stackoverflow.com/a/8460753                                                                        // 52
    var self = new Error(error);                                                                                     // 53
    self.name = "ParseError";                                                                                        // 54
    self.__proto__ = ParseError.prototype;                                                                           // 55
                                                                                                                     // 56
    self.position = start;                                                                                           // 57
    return self;                                                                                                     // 58
}                                                                                                                    // 59
                                                                                                                     // 60
// More hackery                                                                                                      // 61
ParseError.prototype.__proto__ = Error.prototype;                                                                    // 62
                                                                                                                     // 63
module.exports = ParseError;                                                                                         // 64
                                                                                                                     // 65
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Settings.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/Settings.js                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This is a module for storing settings passed into KaTeX. It correctly handles                                     // 2
 * default settings.                                                                                                 // 3
 */                                                                                                                  // 4
                                                                                                                     // 5
/**                                                                                                                  // 6
 * Helper function for getting a default value if the value is undefined                                             // 7
 */                                                                                                                  // 8
function get(option, defaultValue) {                                                                                 // 9
    return option === undefined ? defaultValue : option;                                                             // 10
}                                                                                                                    // 11
                                                                                                                     // 12
/**                                                                                                                  // 13
 * The main Settings object                                                                                          // 14
 *                                                                                                                   // 15
 * The current options stored are:                                                                                   // 16
 *  - displayMode: Whether the expression should be typeset by default in                                            // 17
 *                 textstyle or displaystyle (default false)                                                         // 18
 */                                                                                                                  // 19
function Settings(options) {                                                                                         // 20
    // allow null options                                                                                            // 21
    options = options || {};                                                                                         // 22
    this.displayMode = get(options.displayMode, false);                                                              // 23
    this.throwOnError = get(options.throwOnError, true);                                                             // 24
    this.errorColor = get(options.errorColor, "#cc0000");                                                            // 25
    this.macros = options.macros || {};                                                                              // 26
}                                                                                                                    // 27
                                                                                                                     // 28
module.exports = Settings;                                                                                           // 29
                                                                                                                     // 30
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"buildTree.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/buildTree.js                                          //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var buildHTML = require("./buildHTML");                                                                              // 1
var buildMathML = require("./buildMathML");                                                                          // 2
var buildCommon = require("./buildCommon");                                                                          // 3
var Options = require("./Options");                                                                                  // 4
var Settings = require("./Settings");                                                                                // 5
var Style = require("./Style");                                                                                      // 6
                                                                                                                     // 7
var makeSpan = buildCommon.makeSpan;                                                                                 // 8
                                                                                                                     // 9
var buildTree = function(tree, expression, settings) {                                                               // 10
    settings = settings || new Settings({});                                                                         // 11
                                                                                                                     // 12
    var startStyle = Style.TEXT;                                                                                     // 13
    if (settings.displayMode) {                                                                                      // 14
        startStyle = Style.DISPLAY;                                                                                  // 15
    }                                                                                                                // 16
                                                                                                                     // 17
    // Setup the default options                                                                                     // 18
    var options = new Options({                                                                                      // 19
        style: startStyle,                                                                                           // 20
        size: "size5"                                                                                                // 21
    });                                                                                                              // 22
                                                                                                                     // 23
    // `buildHTML` sometimes messes with the parse tree (like turning bins ->                                        // 24
    // ords), so we build the MathML version first.                                                                  // 25
    var mathMLNode = buildMathML(tree, expression, options);                                                         // 26
    var htmlNode = buildHTML(tree, options);                                                                         // 27
                                                                                                                     // 28
    var katexNode = makeSpan(["katex"], [                                                                            // 29
        mathMLNode, htmlNode                                                                                         // 30
    ]);                                                                                                              // 31
                                                                                                                     // 32
    if (settings.displayMode) {                                                                                      // 33
        return makeSpan(["katex-display"], [katexNode]);                                                             // 34
    } else {                                                                                                         // 35
        return katexNode;                                                                                            // 36
    }                                                                                                                // 37
};                                                                                                                   // 38
                                                                                                                     // 39
module.exports = buildTree;                                                                                          // 40
                                                                                                                     // 41
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"buildHTML.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/buildHTML.js                                          //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* eslint no-console:0 */                                                                                            // 1
/**                                                                                                                  // 2
 * This file does the main work of building a domTree structure from a parse                                         // 3
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.                                      // 4
 * Then, the buildExpression, buildGroup, and various groupTypes functions are                                       // 5
 * called, to produce a final HTML tree.                                                                             // 6
 */                                                                                                                  // 7
                                                                                                                     // 8
var ParseError = require("./ParseError");                                                                            // 9
var Style = require("./Style");                                                                                      // 10
                                                                                                                     // 11
var buildCommon = require("./buildCommon");                                                                          // 12
var delimiter = require("./delimiter");                                                                              // 13
var domTree = require("./domTree");                                                                                  // 14
var fontMetrics = require("./fontMetrics");                                                                          // 15
var utils = require("./utils");                                                                                      // 16
                                                                                                                     // 17
var makeSpan = buildCommon.makeSpan;                                                                                 // 18
                                                                                                                     // 19
var isSpace = function(node) {                                                                                       // 20
    return node instanceof domTree.span && node.classes[0] === "mspace";                                             // 21
};                                                                                                                   // 22
                                                                                                                     // 23
// Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)                                             // 24
// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,                                          // 25
// and the text before Rule 19.                                                                                      // 26
                                                                                                                     // 27
var isBin = function(node) {                                                                                         // 28
    return node && node.classes[0] === "mbin";                                                                       // 29
};                                                                                                                   // 30
                                                                                                                     // 31
var isBinLeftCanceller = function(node, isRealGroup) {                                                               // 32
    // TODO: This code assumes that a node's math class is the first element                                         // 33
    // of its `classes` array. A later cleanup should ensure this, for                                               // 34
    // instance by changing the signature of `makeSpan`.                                                             // 35
    if (node) {                                                                                                      // 36
        return utils.contains(["mbin", "mopen", "mrel", "mop", "mpunct"],                                            // 37
                              node.classes[0]);                                                                      // 38
    } else {                                                                                                         // 39
        return isRealGroup;                                                                                          // 40
    }                                                                                                                // 41
};                                                                                                                   // 42
                                                                                                                     // 43
var isBinRightCanceller = function(node, isRealGroup) {                                                              // 44
    if (node) {                                                                                                      // 45
        return utils.contains(["mrel", "mclose", "mpunct"], node.classes[0]);                                        // 46
    } else {                                                                                                         // 47
        return isRealGroup;                                                                                          // 48
    }                                                                                                                // 49
};                                                                                                                   // 50
                                                                                                                     // 51
/**                                                                                                                  // 52
 * Take a list of nodes, build them in order, and return a list of the built                                         // 53
 * nodes. documentFragments are flattened into their contents, so the                                                // 54
 * returned list contains no fragments. `isRealGroup` is true if `expression`                                        // 55
 * is a real group (no atoms will be added on either side), as opposed to                                            // 56
 * a partial group (e.g. one created by \color).                                                                     // 57
 */                                                                                                                  // 58
var buildExpression = function(expression, options, isRealGroup) {                                                   // 59
    // Parse expressions into `groups`.                                                                              // 60
    var groups = [];                                                                                                 // 61
    for (var i = 0; i < expression.length; i++) {                                                                    // 62
        var group = expression[i];                                                                                   // 63
        var output = buildGroup(group, options);                                                                     // 64
        if (output instanceof domTree.documentFragment) {                                                            // 65
            Array.prototype.push.apply(groups, output.children);                                                     // 66
        } else {                                                                                                     // 67
            groups.push(output);                                                                                     // 68
        }                                                                                                            // 69
    }                                                                                                                // 70
    // At this point `groups` consists entirely of `symbolNode`s and `span`s.                                        // 71
                                                                                                                     // 72
    // Explicit spaces (e.g., \;, \,) should be ignored with respect to atom                                         // 73
    // spacing (e.g., "add thick space between mord and mrel"). Since CSS                                            // 74
    // adjacency rules implement atom spacing, spaces should be invisible to                                         // 75
    // CSS. So we splice them out of `groups` and into the atoms themselves.                                         // 76
    var spaces = null;                                                                                               // 77
    for (i = 0; i < groups.length; i++) {                                                                            // 78
        if (isSpace(groups[i])) {                                                                                    // 79
            spaces = spaces || [];                                                                                   // 80
            spaces.push(groups[i]);                                                                                  // 81
            groups.splice(i, 1);                                                                                     // 82
            i--;                                                                                                     // 83
        } else if (spaces) {                                                                                         // 84
            if (groups[i] instanceof domTree.symbolNode) {                                                           // 85
                groups[i] = makeSpan([].concat(groups[i].classes), [groups[i]]);                                     // 86
            }                                                                                                        // 87
            buildCommon.prependChildren(groups[i], spaces);                                                          // 88
            spaces = null;                                                                                           // 89
        }                                                                                                            // 90
    }                                                                                                                // 91
    if (spaces) {                                                                                                    // 92
        Array.prototype.push.apply(groups, spaces);                                                                  // 93
    }                                                                                                                // 94
                                                                                                                     // 95
    // Binary operators change to ordinary symbols in some contexts.                                                 // 96
    for (i = 0; i < groups.length; i++) {                                                                            // 97
        if (isBin(groups[i])                                                                                         // 98
            && (isBinLeftCanceller(groups[i - 1], isRealGroup)                                                       // 99
                || isBinRightCanceller(groups[i + 1], isRealGroup))) {                                               // 100
            groups[i].classes[0] = "mord";                                                                           // 101
        }                                                                                                            // 102
    }                                                                                                                // 103
                                                                                                                     // 104
    return groups;                                                                                                   // 105
};                                                                                                                   // 106
                                                                                                                     // 107
// Return math atom class (mclass) of a domTree.                                                                     // 108
var getTypeOfDomTree = function(node) {                                                                              // 109
    if (node instanceof domTree.documentFragment) {                                                                  // 110
        if (node.children.length) {                                                                                  // 111
            return getTypeOfDomTree(                                                                                 // 112
                node.children[node.children.length - 1]);                                                            // 113
        }                                                                                                            // 114
    } else {                                                                                                         // 115
        if (utils.contains(["mord", "mop", "mbin", "mrel", "mopen", "mclose",                                        // 116
            "mpunct", "minner"], node.classes[0])) {                                                                 // 117
            return node.classes[0];                                                                                  // 118
        }                                                                                                            // 119
    }                                                                                                                // 120
    return null;                                                                                                     // 121
};                                                                                                                   // 122
                                                                                                                     // 123
/**                                                                                                                  // 124
 * Sometimes, groups perform special rules when they have superscripts or                                            // 125
 * subscripts attached to them. This function lets the `supsub` group know that                                      // 126
 * its inner element should handle the superscripts and subscripts instead of                                        // 127
 * handling them itself.                                                                                             // 128
 */                                                                                                                  // 129
var shouldHandleSupSub = function(group, options) {                                                                  // 130
    if (!group) {                                                                                                    // 131
        return false;                                                                                                // 132
    } else if (group.type === "op") {                                                                                // 133
        // Operators handle supsubs differently when they have limits                                                // 134
        // (e.g. `\displaystyle\sum_2^3`)                                                                            // 135
        return group.value.limits &&                                                                                 // 136
            (options.style.size === Style.DISPLAY.size ||                                                            // 137
            group.value.alwaysHandleSupSub);                                                                         // 138
    } else if (group.type === "accent") {                                                                            // 139
        return isCharacterBox(group.value.base);                                                                     // 140
    } else {                                                                                                         // 141
        return null;                                                                                                 // 142
    }                                                                                                                // 143
};                                                                                                                   // 144
                                                                                                                     // 145
/**                                                                                                                  // 146
 * Sometimes we want to pull out the innermost element of a group. In most                                           // 147
 * cases, this will just be the group itself, but when ordgroups and colors have                                     // 148
 * a single element, we want to pull that out.                                                                       // 149
 */                                                                                                                  // 150
var getBaseElem = function(group) {                                                                                  // 151
    if (!group) {                                                                                                    // 152
        return false;                                                                                                // 153
    } else if (group.type === "ordgroup") {                                                                          // 154
        if (group.value.length === 1) {                                                                              // 155
            return getBaseElem(group.value[0]);                                                                      // 156
        } else {                                                                                                     // 157
            return group;                                                                                            // 158
        }                                                                                                            // 159
    } else if (group.type === "color") {                                                                             // 160
        if (group.value.value.length === 1) {                                                                        // 161
            return getBaseElem(group.value.value[0]);                                                                // 162
        } else {                                                                                                     // 163
            return group;                                                                                            // 164
        }                                                                                                            // 165
    } else if (group.type === "font") {                                                                              // 166
        return getBaseElem(group.value.body);                                                                        // 167
    } else {                                                                                                         // 168
        return group;                                                                                                // 169
    }                                                                                                                // 170
};                                                                                                                   // 171
                                                                                                                     // 172
/**                                                                                                                  // 173
 * TeXbook algorithms often reference "character boxes", which are simply groups                                     // 174
 * with a single character in them. To decide if something is a character box,                                       // 175
 * we find its innermost group, and see if it is a single character.                                                 // 176
 */                                                                                                                  // 177
var isCharacterBox = function(group) {                                                                               // 178
    var baseElem = getBaseElem(group);                                                                               // 179
                                                                                                                     // 180
    // These are all they types of groups which hold single characters                                               // 181
    return baseElem.type === "mathord" ||                                                                            // 182
        baseElem.type === "textord" ||                                                                               // 183
        baseElem.type === "bin" ||                                                                                   // 184
        baseElem.type === "rel" ||                                                                                   // 185
        baseElem.type === "inner" ||                                                                                 // 186
        baseElem.type === "open" ||                                                                                  // 187
        baseElem.type === "close" ||                                                                                 // 188
        baseElem.type === "punct";                                                                                   // 189
};                                                                                                                   // 190
                                                                                                                     // 191
var makeNullDelimiter = function(options, classes) {                                                                 // 192
    return makeSpan(classes.concat([                                                                                 // 193
        "sizing", "reset-" + options.size, "size5",                                                                  // 194
        options.style.reset(), Style.TEXT.cls(),                                                                     // 195
        "nulldelimiter"]));                                                                                          // 196
};                                                                                                                   // 197
                                                                                                                     // 198
/**                                                                                                                  // 199
 * This is a map of group types to the function used to handle that type.                                            // 200
 * Simpler types come at the beginning, while complicated types come afterwards.                                     // 201
 */                                                                                                                  // 202
var groupTypes = {};                                                                                                 // 203
                                                                                                                     // 204
groupTypes.mathord = function(group, options) {                                                                      // 205
    return buildCommon.makeOrd(group, options, "mathord");                                                           // 206
};                                                                                                                   // 207
                                                                                                                     // 208
groupTypes.textord = function(group, options) {                                                                      // 209
    return buildCommon.makeOrd(group, options, "textord");                                                           // 210
};                                                                                                                   // 211
                                                                                                                     // 212
groupTypes.bin = function(group, options) {                                                                          // 213
    return buildCommon.mathsym(                                                                                      // 214
        group.value, group.mode, options, ["mbin"]);                                                                 // 215
};                                                                                                                   // 216
                                                                                                                     // 217
groupTypes.rel = function(group, options) {                                                                          // 218
    return buildCommon.mathsym(                                                                                      // 219
        group.value, group.mode, options, ["mrel"]);                                                                 // 220
};                                                                                                                   // 221
                                                                                                                     // 222
groupTypes.open = function(group, options) {                                                                         // 223
    return buildCommon.mathsym(                                                                                      // 224
        group.value, group.mode, options, ["mopen"]);                                                                // 225
};                                                                                                                   // 226
                                                                                                                     // 227
groupTypes.close = function(group, options) {                                                                        // 228
    return buildCommon.mathsym(                                                                                      // 229
        group.value, group.mode, options, ["mclose"]);                                                               // 230
};                                                                                                                   // 231
                                                                                                                     // 232
groupTypes.inner = function(group, options) {                                                                        // 233
    return buildCommon.mathsym(                                                                                      // 234
        group.value, group.mode, options, ["minner"]);                                                               // 235
};                                                                                                                   // 236
                                                                                                                     // 237
groupTypes.punct = function(group, options) {                                                                        // 238
    return buildCommon.mathsym(                                                                                      // 239
        group.value, group.mode, options, ["mpunct"]);                                                               // 240
};                                                                                                                   // 241
                                                                                                                     // 242
groupTypes.ordgroup = function(group, options) {                                                                     // 243
    return makeSpan(                                                                                                 // 244
        ["mord", options.style.cls()],                                                                               // 245
        buildExpression(group.value, options.reset(), true),                                                         // 246
        options                                                                                                      // 247
    );                                                                                                               // 248
};                                                                                                                   // 249
                                                                                                                     // 250
groupTypes.text = function(group, options) {                                                                         // 251
    var newOptions = options.withFont(group.value.style);                                                            // 252
    var inner = buildExpression(group.value.body, newOptions, true);                                                 // 253
    for (var i = 0; i < inner.length - 1; i++) {                                                                     // 254
        if (inner[i].tryCombine(inner[i + 1])) {                                                                     // 255
            inner.splice(i + 1, 1);                                                                                  // 256
            i--;                                                                                                     // 257
        }                                                                                                            // 258
    }                                                                                                                // 259
    return makeSpan(["mord", "text", newOptions.style.cls()],                                                        // 260
        inner, newOptions);                                                                                          // 261
};                                                                                                                   // 262
                                                                                                                     // 263
groupTypes.color = function(group, options) {                                                                        // 264
    var elements = buildExpression(                                                                                  // 265
        group.value.value,                                                                                           // 266
        options.withColor(group.value.color),                                                                        // 267
        false                                                                                                        // 268
    );                                                                                                               // 269
                                                                                                                     // 270
    // \color isn't supposed to affect the type of the elements it contains.                                         // 271
    // To accomplish this, we wrap the results in a fragment, so the inner                                           // 272
    // elements will be able to directly interact with their neighbors. For                                          // 273
    // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`                                                 // 274
    return new buildCommon.makeFragment(elements);                                                                   // 275
};                                                                                                                   // 276
                                                                                                                     // 277
groupTypes.supsub = function(group, options) {                                                                       // 278
    // Superscript and subscripts are handled in the TeXbook on page                                                 // 279
    // 445-446, rules 18(a-f).                                                                                       // 280
                                                                                                                     // 281
    // Here is where we defer to the inner group if it should handle                                                 // 282
    // superscripts and subscripts itself.                                                                           // 283
    if (shouldHandleSupSub(group.value.base, options)) {                                                             // 284
        return groupTypes[group.value.base.type](group, options);                                                    // 285
    }                                                                                                                // 286
                                                                                                                     // 287
    var base = buildGroup(group.value.base, options.reset());                                                        // 288
    var supmid;                                                                                                      // 289
    var submid;                                                                                                      // 290
    var sup;                                                                                                         // 291
    var sub;                                                                                                         // 292
                                                                                                                     // 293
    var style = options.style;                                                                                       // 294
    var newOptions;                                                                                                  // 295
                                                                                                                     // 296
    if (group.value.sup) {                                                                                           // 297
        newOptions = options.withStyle(style.sup());                                                                 // 298
        sup = buildGroup(group.value.sup, newOptions);                                                               // 299
        supmid = makeSpan([style.reset(), style.sup().cls()],                                                        // 300
            [sup], newOptions);                                                                                      // 301
    }                                                                                                                // 302
                                                                                                                     // 303
    if (group.value.sub) {                                                                                           // 304
        newOptions = options.withStyle(style.sub());                                                                 // 305
        sub = buildGroup(group.value.sub, newOptions);                                                               // 306
        submid = makeSpan([style.reset(), style.sub().cls()],                                                        // 307
            [sub], newOptions);                                                                                      // 308
    }                                                                                                                // 309
                                                                                                                     // 310
    // Rule 18a                                                                                                      // 311
    var supShift;                                                                                                    // 312
    var subShift;                                                                                                    // 313
    if (isCharacterBox(group.value.base)) {                                                                          // 314
        supShift = 0;                                                                                                // 315
        subShift = 0;                                                                                                // 316
    } else {                                                                                                         // 317
        supShift = base.height - style.metrics.supDrop;                                                              // 318
        subShift = base.depth + style.metrics.subDrop;                                                               // 319
    }                                                                                                                // 320
                                                                                                                     // 321
    // Rule 18c                                                                                                      // 322
    var minSupShift;                                                                                                 // 323
    if (style === Style.DISPLAY) {                                                                                   // 324
        minSupShift = style.metrics.sup1;                                                                            // 325
    } else if (style.cramped) {                                                                                      // 326
        minSupShift = style.metrics.sup3;                                                                            // 327
    } else {                                                                                                         // 328
        minSupShift = style.metrics.sup2;                                                                            // 329
    }                                                                                                                // 330
                                                                                                                     // 331
    // scriptspace is a font-size-independent size, so scale it                                                      // 332
    // appropriately                                                                                                 // 333
    var multiplier = Style.TEXT.sizeMultiplier *                                                                     // 334
            style.sizeMultiplier;                                                                                    // 335
    var scriptspace =                                                                                                // 336
        (0.5 / fontMetrics.metrics.ptPerEm) / multiplier + "em";                                                     // 337
                                                                                                                     // 338
    var supsub;                                                                                                      // 339
    if (!group.value.sup) {                                                                                          // 340
        // Rule 18b                                                                                                  // 341
        subShift = Math.max(                                                                                         // 342
            subShift, style.metrics.sub1,                                                                            // 343
            sub.height - 0.8 * style.metrics.xHeight);                                                               // 344
                                                                                                                     // 345
        supsub = buildCommon.makeVList([                                                                             // 346
            {type: "elem", elem: submid}                                                                             // 347
        ], "shift", subShift, options);                                                                              // 348
                                                                                                                     // 349
        supsub.children[0].style.marginRight = scriptspace;                                                          // 350
                                                                                                                     // 351
        // Subscripts shouldn't be shifted by the base's italic correction.                                          // 352
        // Account for that by shifting the subscript back the appropriate                                           // 353
        // amount. Note we only do this when the base is a single symbol.                                            // 354
        if (base instanceof domTree.symbolNode) {                                                                    // 355
            supsub.children[0].style.marginLeft = -base.italic + "em";                                               // 356
        }                                                                                                            // 357
    } else if (!group.value.sub) {                                                                                   // 358
        // Rule 18c, d                                                                                               // 359
        supShift = Math.max(supShift, minSupShift,                                                                   // 360
            sup.depth + 0.25 * style.metrics.xHeight);                                                               // 361
                                                                                                                     // 362
        supsub = buildCommon.makeVList([                                                                             // 363
            {type: "elem", elem: supmid}                                                                             // 364
        ], "shift", -supShift, options);                                                                             // 365
                                                                                                                     // 366
        supsub.children[0].style.marginRight = scriptspace;                                                          // 367
    } else {                                                                                                         // 368
        supShift = Math.max(                                                                                         // 369
            supShift, minSupShift, sup.depth + 0.25 * style.metrics.xHeight);                                        // 370
        subShift = Math.max(subShift, style.metrics.sub2);                                                           // 371
                                                                                                                     // 372
        var ruleWidth = fontMetrics.metrics.defaultRuleThickness;                                                    // 373
                                                                                                                     // 374
        // Rule 18e                                                                                                  // 375
        if ((supShift - sup.depth) - (sub.height - subShift) <                                                       // 376
                4 * ruleWidth) {                                                                                     // 377
            subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;                                          // 378
            var psi = 0.8 * style.metrics.xHeight - (supShift - sup.depth);                                          // 379
            if (psi > 0) {                                                                                           // 380
                supShift += psi;                                                                                     // 381
                subShift -= psi;                                                                                     // 382
            }                                                                                                        // 383
        }                                                                                                            // 384
                                                                                                                     // 385
        supsub = buildCommon.makeVList([                                                                             // 386
            {type: "elem", elem: submid, shift: subShift},                                                           // 387
            {type: "elem", elem: supmid, shift: -supShift}                                                           // 388
        ], "individualShift", null, options);                                                                        // 389
                                                                                                                     // 390
        // See comment above about subscripts not being shifted                                                      // 391
        if (base instanceof domTree.symbolNode) {                                                                    // 392
            supsub.children[0].style.marginLeft = -base.italic + "em";                                               // 393
        }                                                                                                            // 394
                                                                                                                     // 395
        supsub.children[0].style.marginRight = scriptspace;                                                          // 396
        supsub.children[1].style.marginRight = scriptspace;                                                          // 397
    }                                                                                                                // 398
                                                                                                                     // 399
    // We ensure to wrap the supsub vlist in a span.msupsub to reset text-align                                      // 400
    var mclass = getTypeOfDomTree(base) || "mord";                                                                   // 401
    return makeSpan([mclass],                                                                                        // 402
        [base, makeSpan(["msupsub"], [supsub])],                                                                     // 403
        options);                                                                                                    // 404
};                                                                                                                   // 405
                                                                                                                     // 406
groupTypes.genfrac = function(group, options) {                                                                      // 407
    // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).                                         // 408
    // Figure out what style this fraction should be in based on the                                                 // 409
    // function used                                                                                                 // 410
    var style = options.style;                                                                                       // 411
    if (group.value.size === "display") {                                                                            // 412
        style = Style.DISPLAY;                                                                                       // 413
    } else if (group.value.size === "text") {                                                                        // 414
        style = Style.TEXT;                                                                                          // 415
    }                                                                                                                // 416
                                                                                                                     // 417
    var nstyle = style.fracNum();                                                                                    // 418
    var dstyle = style.fracDen();                                                                                    // 419
    var newOptions;                                                                                                  // 420
                                                                                                                     // 421
    newOptions = options.withStyle(nstyle);                                                                          // 422
    var numer = buildGroup(group.value.numer, newOptions);                                                           // 423
    var numerreset = makeSpan([style.reset(), nstyle.cls()],                                                         // 424
        [numer], newOptions);                                                                                        // 425
                                                                                                                     // 426
    newOptions = options.withStyle(dstyle);                                                                          // 427
    var denom = buildGroup(group.value.denom, newOptions);                                                           // 428
    var denomreset = makeSpan([style.reset(), dstyle.cls()],                                                         // 429
        [denom], newOptions);                                                                                        // 430
                                                                                                                     // 431
    var ruleWidth;                                                                                                   // 432
    if (group.value.hasBarLine) {                                                                                    // 433
        ruleWidth = fontMetrics.metrics.defaultRuleThickness /                                                       // 434
            options.style.sizeMultiplier;                                                                            // 435
    } else {                                                                                                         // 436
        ruleWidth = 0;                                                                                               // 437
    }                                                                                                                // 438
                                                                                                                     // 439
    // Rule 15b                                                                                                      // 440
    var numShift;                                                                                                    // 441
    var clearance;                                                                                                   // 442
    var denomShift;                                                                                                  // 443
    if (style.size === Style.DISPLAY.size) {                                                                         // 444
        numShift = style.metrics.num1;                                                                               // 445
        if (ruleWidth > 0) {                                                                                         // 446
            clearance = 3 * ruleWidth;                                                                               // 447
        } else {                                                                                                     // 448
            clearance = 7 * fontMetrics.metrics.defaultRuleThickness;                                                // 449
        }                                                                                                            // 450
        denomShift = style.metrics.denom1;                                                                           // 451
    } else {                                                                                                         // 452
        if (ruleWidth > 0) {                                                                                         // 453
            numShift = style.metrics.num2;                                                                           // 454
            clearance = ruleWidth;                                                                                   // 455
        } else {                                                                                                     // 456
            numShift = style.metrics.num3;                                                                           // 457
            clearance = 3 * fontMetrics.metrics.defaultRuleThickness;                                                // 458
        }                                                                                                            // 459
        denomShift = style.metrics.denom2;                                                                           // 460
    }                                                                                                                // 461
                                                                                                                     // 462
    var frac;                                                                                                        // 463
    if (ruleWidth === 0) {                                                                                           // 464
        // Rule 15c                                                                                                  // 465
        var candidateClearance =                                                                                     // 466
            (numShift - numer.depth) - (denom.height - denomShift);                                                  // 467
        if (candidateClearance < clearance) {                                                                        // 468
            numShift += 0.5 * (clearance - candidateClearance);                                                      // 469
            denomShift += 0.5 * (clearance - candidateClearance);                                                    // 470
        }                                                                                                            // 471
                                                                                                                     // 472
        frac = buildCommon.makeVList([                                                                               // 473
            {type: "elem", elem: denomreset, shift: denomShift},                                                     // 474
            {type: "elem", elem: numerreset, shift: -numShift}                                                       // 475
        ], "individualShift", null, options);                                                                        // 476
    } else {                                                                                                         // 477
        // Rule 15d                                                                                                  // 478
        var axisHeight = style.metrics.axisHeight;                                                                   // 479
                                                                                                                     // 480
        if ((numShift - numer.depth) - (axisHeight + 0.5 * ruleWidth) <                                              // 481
                clearance) {                                                                                         // 482
            numShift +=                                                                                              // 483
                clearance - ((numShift - numer.depth) -                                                              // 484
                             (axisHeight + 0.5 * ruleWidth));                                                        // 485
        }                                                                                                            // 486
                                                                                                                     // 487
        if ((axisHeight - 0.5 * ruleWidth) - (denom.height - denomShift) <                                           // 488
                clearance) {                                                                                         // 489
            denomShift +=                                                                                            // 490
                clearance - ((axisHeight - 0.5 * ruleWidth) -                                                        // 491
                             (denom.height - denomShift));                                                           // 492
        }                                                                                                            // 493
                                                                                                                     // 494
        var mid = makeSpan(                                                                                          // 495
            [options.style.reset(), Style.TEXT.cls(), "frac-line"]);                                                 // 496
        // Manually set the height of the line because its height is                                                 // 497
        // created in CSS                                                                                            // 498
        mid.height = ruleWidth;                                                                                      // 499
                                                                                                                     // 500
        var midShift = -(axisHeight - 0.5 * ruleWidth);                                                              // 501
                                                                                                                     // 502
        frac = buildCommon.makeVList([                                                                               // 503
            {type: "elem", elem: denomreset, shift: denomShift},                                                     // 504
            {type: "elem", elem: mid,        shift: midShift},                                                       // 505
            {type: "elem", elem: numerreset, shift: -numShift}                                                       // 506
        ], "individualShift", null, options);                                                                        // 507
    }                                                                                                                // 508
                                                                                                                     // 509
    // Since we manually change the style sometimes (with \dfrac or \tfrac),                                         // 510
    // account for the possible size change here.                                                                    // 511
    frac.height *= style.sizeMultiplier / options.style.sizeMultiplier;                                              // 512
    frac.depth *= style.sizeMultiplier / options.style.sizeMultiplier;                                               // 513
                                                                                                                     // 514
    // Rule 15e                                                                                                      // 515
    var delimSize;                                                                                                   // 516
    if (style.size === Style.DISPLAY.size) {                                                                         // 517
        delimSize = style.metrics.delim1;                                                                            // 518
    } else {                                                                                                         // 519
        delimSize = style.metrics.delim2;                                                                            // 520
    }                                                                                                                // 521
                                                                                                                     // 522
    var leftDelim;                                                                                                   // 523
    var rightDelim;                                                                                                  // 524
    if (group.value.leftDelim == null) {                                                                             // 525
        leftDelim = makeNullDelimiter(options, ["mopen"]);                                                           // 526
    } else {                                                                                                         // 527
        leftDelim = delimiter.customSizedDelim(                                                                      // 528
            group.value.leftDelim, delimSize, true,                                                                  // 529
            options.withStyle(style), group.mode, ["mopen"]);                                                        // 530
    }                                                                                                                // 531
    if (group.value.rightDelim == null) {                                                                            // 532
        rightDelim = makeNullDelimiter(options, ["mclose"]);                                                         // 533
    } else {                                                                                                         // 534
        rightDelim = delimiter.customSizedDelim(                                                                     // 535
            group.value.rightDelim, delimSize, true,                                                                 // 536
            options.withStyle(style), group.mode, ["mclose"]);                                                       // 537
    }                                                                                                                // 538
                                                                                                                     // 539
    return makeSpan(                                                                                                 // 540
        ["mord", options.style.reset(), style.cls()],                                                                // 541
        [leftDelim, makeSpan(["mfrac"], [frac]), rightDelim],                                                        // 542
        options);                                                                                                    // 543
};                                                                                                                   // 544
                                                                                                                     // 545
var calculateSize = function(sizeValue, style) {                                                                     // 546
    var x = sizeValue.number;                                                                                        // 547
    if (sizeValue.unit === "ex") {                                                                                   // 548
        x *= style.metrics.emPerEx;                                                                                  // 549
    } else if (sizeValue.unit === "mu") {                                                                            // 550
        x /= 18;                                                                                                     // 551
    }                                                                                                                // 552
    return x;                                                                                                        // 553
};                                                                                                                   // 554
                                                                                                                     // 555
groupTypes.array = function(group, options) {                                                                        // 556
    var r;                                                                                                           // 557
    var c;                                                                                                           // 558
    var nr = group.value.body.length;                                                                                // 559
    var nc = 0;                                                                                                      // 560
    var body = new Array(nr);                                                                                        // 561
                                                                                                                     // 562
    var style = options.style;                                                                                       // 563
                                                                                                                     // 564
    // Horizontal spacing                                                                                            // 565
    var pt = 1 / fontMetrics.metrics.ptPerEm;                                                                        // 566
    var arraycolsep = 5 * pt; // \arraycolsep in article.cls                                                         // 567
                                                                                                                     // 568
    // Vertical spacing                                                                                              // 569
    var baselineskip = 12 * pt; // see size10.clo                                                                    // 570
    // Default \arraystretch from lttab.dtx                                                                          // 571
    // TODO(gagern): may get redefined once we have user-defined macros                                              // 572
    var arraystretch = utils.deflt(group.value.arraystretch, 1);                                                     // 573
    var arrayskip = arraystretch * baselineskip;                                                                     // 574
    var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and                                            // 575
    var arstrutDepth = 0.3 * arrayskip;  // \@arstrutbox in lttab.dtx                                                // 576
                                                                                                                     // 577
    var totalHeight = 0;                                                                                             // 578
    for (r = 0; r < group.value.body.length; ++r) {                                                                  // 579
        var inrow = group.value.body[r];                                                                             // 580
        var height = arstrutHeight; // \@array adds an \@arstrut                                                     // 581
        var depth = arstrutDepth;   // to each tow (via the template)                                                // 582
                                                                                                                     // 583
        if (nc < inrow.length) {                                                                                     // 584
            nc = inrow.length;                                                                                       // 585
        }                                                                                                            // 586
                                                                                                                     // 587
        var outrow = new Array(inrow.length);                                                                        // 588
        for (c = 0; c < inrow.length; ++c) {                                                                         // 589
            var elt = buildGroup(inrow[c], options);                                                                 // 590
            if (depth < elt.depth) {                                                                                 // 591
                depth = elt.depth;                                                                                   // 592
            }                                                                                                        // 593
            if (height < elt.height) {                                                                               // 594
                height = elt.height;                                                                                 // 595
            }                                                                                                        // 596
            outrow[c] = elt;                                                                                         // 597
        }                                                                                                            // 598
                                                                                                                     // 599
        var gap = 0;                                                                                                 // 600
        if (group.value.rowGaps[r]) {                                                                                // 601
            gap = calculateSize(group.value.rowGaps[r].value, style);                                                // 602
            if (gap > 0) { // \@argarraycr                                                                           // 603
                gap += arstrutDepth;                                                                                 // 604
                if (depth < gap) {                                                                                   // 605
                    depth = gap; // \@xargarraycr                                                                    // 606
                }                                                                                                    // 607
                gap = 0;                                                                                             // 608
            }                                                                                                        // 609
        }                                                                                                            // 610
                                                                                                                     // 611
        outrow.height = height;                                                                                      // 612
        outrow.depth = depth;                                                                                        // 613
        totalHeight += height;                                                                                       // 614
        outrow.pos = totalHeight;                                                                                    // 615
        totalHeight += depth + gap; // \@yargarraycr                                                                 // 616
        body[r] = outrow;                                                                                            // 617
    }                                                                                                                // 618
                                                                                                                     // 619
    var offset = totalHeight / 2 + style.metrics.axisHeight;                                                         // 620
    var colDescriptions = group.value.cols || [];                                                                    // 621
    var cols = [];                                                                                                   // 622
    var colSep;                                                                                                      // 623
    var colDescrNum;                                                                                                 // 624
    for (c = 0, colDescrNum = 0;                                                                                     // 625
         // Continue while either there are more columns or more column                                              // 626
         // descriptions, so trailing separators don't get lost.                                                     // 627
         c < nc || colDescrNum < colDescriptions.length;                                                             // 628
         ++c, ++colDescrNum) {                                                                                       // 629
                                                                                                                     // 630
        var colDescr = colDescriptions[colDescrNum] || {};                                                           // 631
                                                                                                                     // 632
        var firstSeparator = true;                                                                                   // 633
        while (colDescr.type === "separator") {                                                                      // 634
            // If there is more than one separator in a row, add a space                                             // 635
            // between them.                                                                                         // 636
            if (!firstSeparator) {                                                                                   // 637
                colSep = makeSpan(["arraycolsep"], []);                                                              // 638
                colSep.style.width =                                                                                 // 639
                    fontMetrics.metrics.doubleRuleSep + "em";                                                        // 640
                cols.push(colSep);                                                                                   // 641
            }                                                                                                        // 642
                                                                                                                     // 643
            if (colDescr.separator === "|") {                                                                        // 644
                var separator = makeSpan(                                                                            // 645
                    ["vertical-separator"],                                                                          // 646
                    []);                                                                                             // 647
                separator.style.height = totalHeight + "em";                                                         // 648
                separator.style.verticalAlign =                                                                      // 649
                    -(totalHeight - offset) + "em";                                                                  // 650
                                                                                                                     // 651
                cols.push(separator);                                                                                // 652
            } else {                                                                                                 // 653
                throw new ParseError(                                                                                // 654
                    "Invalid separator type: " + colDescr.separator);                                                // 655
            }                                                                                                        // 656
                                                                                                                     // 657
            colDescrNum++;                                                                                           // 658
            colDescr = colDescriptions[colDescrNum] || {};                                                           // 659
            firstSeparator = false;                                                                                  // 660
        }                                                                                                            // 661
                                                                                                                     // 662
        if (c >= nc) {                                                                                               // 663
            continue;                                                                                                // 664
        }                                                                                                            // 665
                                                                                                                     // 666
        var sepwidth;                                                                                                // 667
        if (c > 0 || group.value.hskipBeforeAndAfter) {                                                              // 668
            sepwidth = utils.deflt(colDescr.pregap, arraycolsep);                                                    // 669
            if (sepwidth !== 0) {                                                                                    // 670
                colSep = makeSpan(["arraycolsep"], []);                                                              // 671
                colSep.style.width = sepwidth + "em";                                                                // 672
                cols.push(colSep);                                                                                   // 673
            }                                                                                                        // 674
        }                                                                                                            // 675
                                                                                                                     // 676
        var col = [];                                                                                                // 677
        for (r = 0; r < nr; ++r) {                                                                                   // 678
            var row = body[r];                                                                                       // 679
            var elem = row[c];                                                                                       // 680
            if (!elem) {                                                                                             // 681
                continue;                                                                                            // 682
            }                                                                                                        // 683
            var shift = row.pos - offset;                                                                            // 684
            elem.depth = row.depth;                                                                                  // 685
            elem.height = row.height;                                                                                // 686
            col.push({type: "elem", elem: elem, shift: shift});                                                      // 687
        }                                                                                                            // 688
                                                                                                                     // 689
        col = buildCommon.makeVList(col, "individualShift", null, options);                                          // 690
        col = makeSpan(                                                                                              // 691
            ["col-align-" + (colDescr.align || "c")],                                                                // 692
            [col]);                                                                                                  // 693
        cols.push(col);                                                                                              // 694
                                                                                                                     // 695
        if (c < nc - 1 || group.value.hskipBeforeAndAfter) {                                                         // 696
            sepwidth = utils.deflt(colDescr.postgap, arraycolsep);                                                   // 697
            if (sepwidth !== 0) {                                                                                    // 698
                colSep = makeSpan(["arraycolsep"], []);                                                              // 699
                colSep.style.width = sepwidth + "em";                                                                // 700
                cols.push(colSep);                                                                                   // 701
            }                                                                                                        // 702
        }                                                                                                            // 703
    }                                                                                                                // 704
    body = makeSpan(["mtable"], cols);                                                                               // 705
    return makeSpan(["mord"], [body], options);                                                                      // 706
};                                                                                                                   // 707
                                                                                                                     // 708
groupTypes.spacing = function(group, options) {                                                                      // 709
    if (group.value === "\\ " || group.value === "\\space" ||                                                        // 710
        group.value === " " || group.value === "~") {                                                                // 711
        // Spaces are generated by adding an actual space. Each of these                                             // 712
        // things has an entry in the symbols table, so these will be turned                                         // 713
        // into appropriate outputs.                                                                                 // 714
        if (group.mode === "text") {                                                                                 // 715
            return buildCommon.makeOrd(group, options, "textord");                                                   // 716
        } else {                                                                                                     // 717
            return makeSpan(["mspace"],                                                                              // 718
                [buildCommon.mathsym(group.value, group.mode, options)],                                             // 719
                options);                                                                                            // 720
        }                                                                                                            // 721
    } else {                                                                                                         // 722
        // Other kinds of spaces are of arbitrary width. We use CSS to                                               // 723
        // generate these.                                                                                           // 724
        return makeSpan(                                                                                             // 725
            ["mspace",                                                                                               // 726
                buildCommon.spacingFunctions[group.value].className],                                                // 727
            [], options);                                                                                            // 728
    }                                                                                                                // 729
};                                                                                                                   // 730
                                                                                                                     // 731
groupTypes.llap = function(group, options) {                                                                         // 732
    var inner = makeSpan(                                                                                            // 733
        ["inner"], [buildGroup(group.value.body, options.reset())]);                                                 // 734
    var fix = makeSpan(["fix"], []);                                                                                 // 735
    return makeSpan(                                                                                                 // 736
        ["mord", "llap", options.style.cls()], [inner, fix], options);                                               // 737
};                                                                                                                   // 738
                                                                                                                     // 739
groupTypes.rlap = function(group, options) {                                                                         // 740
    var inner = makeSpan(                                                                                            // 741
        ["inner"], [buildGroup(group.value.body, options.reset())]);                                                 // 742
    var fix = makeSpan(["fix"], []);                                                                                 // 743
    return makeSpan(                                                                                                 // 744
        ["mord", "rlap", options.style.cls()], [inner, fix], options);                                               // 745
};                                                                                                                   // 746
                                                                                                                     // 747
groupTypes.op = function(group, options) {                                                                           // 748
    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).                                                 // 749
    var supGroup;                                                                                                    // 750
    var subGroup;                                                                                                    // 751
    var hasLimits = false;                                                                                           // 752
    if (group.type === "supsub") {                                                                                   // 753
        // If we have limits, supsub will pass us its group to handle. Pull                                          // 754
        // out the superscript and subscript and set the group to the op in                                          // 755
        // its base.                                                                                                 // 756
        supGroup = group.value.sup;                                                                                  // 757
        subGroup = group.value.sub;                                                                                  // 758
        group = group.value.base;                                                                                    // 759
        hasLimits = true;                                                                                            // 760
    }                                                                                                                // 761
                                                                                                                     // 762
    var style = options.style;                                                                                       // 763
                                                                                                                     // 764
    // Most operators have a large successor symbol, but these don't.                                                // 765
    var noSuccessor = [                                                                                              // 766
        "\\smallint"                                                                                                 // 767
    ];                                                                                                               // 768
                                                                                                                     // 769
    var large = false;                                                                                               // 770
    if (style.size === Style.DISPLAY.size &&                                                                         // 771
        group.value.symbol &&                                                                                        // 772
        !utils.contains(noSuccessor, group.value.body)) {                                                            // 773
                                                                                                                     // 774
        // Most symbol operators get larger in displaystyle (rule 13)                                                // 775
        large = true;                                                                                                // 776
    }                                                                                                                // 777
                                                                                                                     // 778
    var base;                                                                                                        // 779
    var baseShift = 0;                                                                                               // 780
    var slant = 0;                                                                                                   // 781
    if (group.value.symbol) {                                                                                        // 782
        // If this is a symbol, create the symbol.                                                                   // 783
        var fontName = large ? "Size2-Regular" : "Size1-Regular";                                                    // 784
        base = buildCommon.makeSymbol(                                                                               // 785
            group.value.body, fontName, "math", options,                                                             // 786
            ["mop", "op-symbol", large ? "large-op" : "small-op"]);                                                  // 787
                                                                                                                     // 788
        // Shift the symbol so its center lies on the axis (rule 13). It                                             // 789
        // appears that our fonts have the centers of the symbols already                                            // 790
        // almost on the axis, so these numbers are very small. Note we                                              // 791
        // don't actually apply this here, but instead it is used either in                                          // 792
        // the vlist creation or separately when there are no limits.                                                // 793
        baseShift = (base.height - base.depth) / 2 -                                                                 // 794
            style.metrics.axisHeight * style.sizeMultiplier;                                                         // 795
                                                                                                                     // 796
        // The slant of the symbol is just its italic correction.                                                    // 797
        slant = base.italic;                                                                                         // 798
    } else if (group.value.value) {                                                                                  // 799
        // If this is a list, compose that list.                                                                     // 800
        var inner = buildExpression(group.value.value, options, true);                                               // 801
                                                                                                                     // 802
        base = makeSpan(["mop"], inner, options);                                                                    // 803
    } else {                                                                                                         // 804
        // Otherwise, this is a text operator. Build the text from the                                               // 805
        // operator's name.                                                                                          // 806
        // TODO(emily): Add a space in the middle of some of these                                                   // 807
        // operators, like \limsup                                                                                   // 808
        var output = [];                                                                                             // 809
        for (var i = 1; i < group.value.body.length; i++) {                                                          // 810
            output.push(buildCommon.mathsym(group.value.body[i], group.mode));                                       // 811
        }                                                                                                            // 812
        base = makeSpan(["mop"], output, options);                                                                   // 813
    }                                                                                                                // 814
                                                                                                                     // 815
    if (hasLimits) {                                                                                                 // 816
        // IE 8 clips \int if it is in a display: inline-block. We wrap it                                           // 817
        // in a new span so it is an inline, and works.                                                              // 818
        base = makeSpan([], [base]);                                                                                 // 819
                                                                                                                     // 820
        var supmid;                                                                                                  // 821
        var supKern;                                                                                                 // 822
        var submid;                                                                                                  // 823
        var subKern;                                                                                                 // 824
        var newOptions;                                                                                              // 825
        // We manually have to handle the superscripts and subscripts. This,                                         // 826
        // aside from the kern calculations, is copied from supsub.                                                  // 827
        if (supGroup) {                                                                                              // 828
            newOptions = options.withStyle(style.sup());                                                             // 829
            var sup = buildGroup(supGroup, newOptions);                                                              // 830
            supmid = makeSpan([style.reset(), style.sup().cls()],                                                    // 831
                [sup], newOptions);                                                                                  // 832
                                                                                                                     // 833
            supKern = Math.max(                                                                                      // 834
                fontMetrics.metrics.bigOpSpacing1,                                                                   // 835
                fontMetrics.metrics.bigOpSpacing3 - sup.depth);                                                      // 836
        }                                                                                                            // 837
                                                                                                                     // 838
        if (subGroup) {                                                                                              // 839
            newOptions = options.withStyle(style.sub());                                                             // 840
            var sub = buildGroup(subGroup, newOptions);                                                              // 841
            submid = makeSpan([style.reset(), style.sub().cls()],                                                    // 842
                [sub], newOptions);                                                                                  // 843
                                                                                                                     // 844
            subKern = Math.max(                                                                                      // 845
                fontMetrics.metrics.bigOpSpacing2,                                                                   // 846
                fontMetrics.metrics.bigOpSpacing4 - sub.height);                                                     // 847
        }                                                                                                            // 848
                                                                                                                     // 849
        // Build the final group as a vlist of the possible subscript, base,                                         // 850
        // and possible superscript.                                                                                 // 851
        var finalGroup;                                                                                              // 852
        var top;                                                                                                     // 853
        var bottom;                                                                                                  // 854
        if (!supGroup) {                                                                                             // 855
            top = base.height - baseShift;                                                                           // 856
                                                                                                                     // 857
            finalGroup = buildCommon.makeVList([                                                                     // 858
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},                                             // 859
                {type: "elem", elem: submid},                                                                        // 860
                {type: "kern", size: subKern},                                                                       // 861
                {type: "elem", elem: base}                                                                           // 862
            ], "top", top, options);                                                                                 // 863
                                                                                                                     // 864
            // Here, we shift the limits by the slant of the symbol. Note                                            // 865
            // that we are supposed to shift the limits by 1/2 of the slant,                                         // 866
            // but since we are centering the limits adding a full slant of                                          // 867
            // margin will shift by 1/2 that.                                                                        // 868
            finalGroup.children[0].style.marginLeft = -slant + "em";                                                 // 869
        } else if (!subGroup) {                                                                                      // 870
            bottom = base.depth + baseShift;                                                                         // 871
                                                                                                                     // 872
            finalGroup = buildCommon.makeVList([                                                                     // 873
                {type: "elem", elem: base},                                                                          // 874
                {type: "kern", size: supKern},                                                                       // 875
                {type: "elem", elem: supmid},                                                                        // 876
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5}                                              // 877
            ], "bottom", bottom, options);                                                                           // 878
                                                                                                                     // 879
            // See comment above about slants                                                                        // 880
            finalGroup.children[1].style.marginLeft = slant + "em";                                                  // 881
        } else if (!supGroup && !subGroup) {                                                                         // 882
            // This case probably shouldn't occur (this would mean the                                               // 883
            // supsub was sending us a group with no superscript or                                                  // 884
            // subscript) but be safe.                                                                               // 885
            return base;                                                                                             // 886
        } else {                                                                                                     // 887
            bottom = fontMetrics.metrics.bigOpSpacing5 +                                                             // 888
                submid.height + submid.depth +                                                                       // 889
                subKern +                                                                                            // 890
                base.depth + baseShift;                                                                              // 891
                                                                                                                     // 892
            finalGroup = buildCommon.makeVList([                                                                     // 893
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},                                             // 894
                {type: "elem", elem: submid},                                                                        // 895
                {type: "kern", size: subKern},                                                                       // 896
                {type: "elem", elem: base},                                                                          // 897
                {type: "kern", size: supKern},                                                                       // 898
                {type: "elem", elem: supmid},                                                                        // 899
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5}                                              // 900
            ], "bottom", bottom, options);                                                                           // 901
                                                                                                                     // 902
            // See comment above about slants                                                                        // 903
            finalGroup.children[0].style.marginLeft = -slant + "em";                                                 // 904
            finalGroup.children[2].style.marginLeft = slant + "em";                                                  // 905
        }                                                                                                            // 906
                                                                                                                     // 907
        return makeSpan(["mop", "op-limits"], [finalGroup], options);                                                // 908
    } else {                                                                                                         // 909
        if (group.value.symbol) {                                                                                    // 910
            base.style.top = baseShift + "em";                                                                       // 911
        }                                                                                                            // 912
                                                                                                                     // 913
        return base;                                                                                                 // 914
    }                                                                                                                // 915
};                                                                                                                   // 916
                                                                                                                     // 917
groupTypes.mod = function(group, options) {                                                                          // 918
    var inner = [];                                                                                                  // 919
                                                                                                                     // 920
    if (group.value.modType === "bmod") {                                                                            // 921
        // “\nonscript\mskip-\medmuskip\mkern5mu”                                                                    // 922
        if (!options.style.isTight()) {                                                                              // 923
            inner.push(makeSpan(                                                                                     // 924
                ["mspace", "negativemediumspace"], [], options));                                                    // 925
        }                                                                                                            // 926
        inner.push(makeSpan(["mspace", "thickspace"], [], options));                                                 // 927
    } else if (options.style.size === Style.DISPLAY.size) {                                                          // 928
        inner.push(makeSpan(["mspace", "quad"], [], options));                                                       // 929
    } else if (group.value.modType === "mod") {                                                                      // 930
        inner.push(makeSpan(["mspace", "twelvemuspace"], [], options));                                              // 931
    } else {                                                                                                         // 932
        inner.push(makeSpan(["mspace", "eightmuspace"], [], options));                                               // 933
    }                                                                                                                // 934
                                                                                                                     // 935
    if (group.value.modType === "pod" || group.value.modType === "pmod") {                                           // 936
        inner.push(buildCommon.mathsym("(", group.mode));                                                            // 937
    }                                                                                                                // 938
                                                                                                                     // 939
    if (group.value.modType !== "pod") {                                                                             // 940
        var modInner = [                                                                                             // 941
            buildCommon.mathsym("m", group.mode),                                                                    // 942
            buildCommon.mathsym("o", group.mode),                                                                    // 943
            buildCommon.mathsym("d", group.mode)];                                                                   // 944
        if (group.value.modType === "bmod") {                                                                        // 945
            inner.push(makeSpan(["mbin"], modInner, options));                                                       // 946
            // “\mkern5mu\nonscript\mskip-\medmuskip”                                                                // 947
            inner.push(makeSpan(["mspace", "thickspace"], [], options));                                             // 948
            if (!options.style.isTight()) {                                                                          // 949
                inner.push(makeSpan(                                                                                 // 950
                    ["mspace", "negativemediumspace"], [], options));                                                // 951
            }                                                                                                        // 952
        } else {                                                                                                     // 953
            Array.prototype.push.apply(inner, modInner);                                                             // 954
            inner.push(makeSpan(["mspace", "sixmuspace"], [], options));                                             // 955
        }                                                                                                            // 956
    }                                                                                                                // 957
                                                                                                                     // 958
    if (group.value.value) {                                                                                         // 959
        Array.prototype.push.apply(inner,                                                                            // 960
            buildExpression(group.value.value, options, false));                                                     // 961
    }                                                                                                                // 962
                                                                                                                     // 963
    if (group.value.modType === "pod" || group.value.modType === "pmod") {                                           // 964
        inner.push(buildCommon.mathsym(")", group.mode));                                                            // 965
    }                                                                                                                // 966
                                                                                                                     // 967
    return buildCommon.makeFragment(inner);                                                                          // 968
};                                                                                                                   // 969
                                                                                                                     // 970
groupTypes.katex = function(group, options) {                                                                        // 971
    // The KaTeX logo. The offsets for the K and a were chosen to look                                               // 972
    // good, but the offsets for the T, E, and X were taken from the                                                 // 973
    // definition of \TeX in TeX (see TeXbook pg. 356)                                                               // 974
    var k = makeSpan(                                                                                                // 975
        ["k"], [buildCommon.mathsym("K", group.mode)], options);                                                     // 976
    var a = makeSpan(                                                                                                // 977
        ["a"], [buildCommon.mathsym("A", group.mode)], options);                                                     // 978
                                                                                                                     // 979
    a.height = (a.height + 0.2) * 0.75;                                                                              // 980
    a.depth = (a.height - 0.2) * 0.75;                                                                               // 981
                                                                                                                     // 982
    var t = makeSpan(                                                                                                // 983
        ["t"], [buildCommon.mathsym("T", group.mode)], options);                                                     // 984
    var e = makeSpan(                                                                                                // 985
        ["e"], [buildCommon.mathsym("E", group.mode)], options);                                                     // 986
                                                                                                                     // 987
    e.height = (e.height - 0.2155);                                                                                  // 988
    e.depth = (e.depth + 0.2155);                                                                                    // 989
                                                                                                                     // 990
    var x = makeSpan(                                                                                                // 991
        ["x"], [buildCommon.mathsym("X", group.mode)], options);                                                     // 992
                                                                                                                     // 993
    return makeSpan(                                                                                                 // 994
        ["mord", "katex-logo"], [k, a, t, e, x], options);                                                           // 995
};                                                                                                                   // 996
                                                                                                                     // 997
groupTypes.overline = function(group, options) {                                                                     // 998
    // Overlines are handled in the TeXbook pg 443, Rule 9.                                                          // 999
    var style = options.style;                                                                                       // 1000
                                                                                                                     // 1001
    // Build the inner group in the cramped style.                                                                   // 1002
    var innerGroup = buildGroup(group.value.body,                                                                    // 1003
            options.withStyle(style.cramp()));                                                                       // 1004
                                                                                                                     // 1005
    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /                                                       // 1006
        style.sizeMultiplier;                                                                                        // 1007
                                                                                                                     // 1008
    // Create the line above the body                                                                                // 1009
    var line = makeSpan(                                                                                             // 1010
        [style.reset(), Style.TEXT.cls(), "overline-line"]);                                                         // 1011
    line.height = ruleWidth;                                                                                         // 1012
    line.maxFontSize = 1.0;                                                                                          // 1013
                                                                                                                     // 1014
    // Generate the vlist, with the appropriate kerns                                                                // 1015
    var vlist = buildCommon.makeVList([                                                                              // 1016
        {type: "elem", elem: innerGroup},                                                                            // 1017
        {type: "kern", size: 3 * ruleWidth},                                                                         // 1018
        {type: "elem", elem: line},                                                                                  // 1019
        {type: "kern", size: ruleWidth}                                                                              // 1020
    ], "firstBaseline", null, options);                                                                              // 1021
                                                                                                                     // 1022
    return makeSpan(["mord", "overline"], [vlist], options);                                                         // 1023
};                                                                                                                   // 1024
                                                                                                                     // 1025
groupTypes.underline = function(group, options) {                                                                    // 1026
    // Underlines are handled in the TeXbook pg 443, Rule 10.                                                        // 1027
    var style = options.style;                                                                                       // 1028
                                                                                                                     // 1029
    // Build the inner group.                                                                                        // 1030
    var innerGroup = buildGroup(group.value.body, options);                                                          // 1031
                                                                                                                     // 1032
    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /                                                       // 1033
        style.sizeMultiplier;                                                                                        // 1034
                                                                                                                     // 1035
    // Create the line above the body                                                                                // 1036
    var line = makeSpan([style.reset(), Style.TEXT.cls(), "underline-line"]);                                        // 1037
    line.height = ruleWidth;                                                                                         // 1038
    line.maxFontSize = 1.0;                                                                                          // 1039
                                                                                                                     // 1040
    // Generate the vlist, with the appropriate kerns                                                                // 1041
    var vlist = buildCommon.makeVList([                                                                              // 1042
        {type: "kern", size: ruleWidth},                                                                             // 1043
        {type: "elem", elem: line},                                                                                  // 1044
        {type: "kern", size: 3 * ruleWidth},                                                                         // 1045
        {type: "elem", elem: innerGroup}                                                                             // 1046
    ], "top", innerGroup.height, options);                                                                           // 1047
                                                                                                                     // 1048
    return makeSpan(["mord", "underline"], [vlist], options);                                                        // 1049
};                                                                                                                   // 1050
                                                                                                                     // 1051
groupTypes.sqrt = function(group, options) {                                                                         // 1052
    // Square roots are handled in the TeXbook pg. 443, Rule 11.                                                     // 1053
    var style = options.style;                                                                                       // 1054
                                                                                                                     // 1055
    // First, we do the same steps as in overline to build the inner group                                           // 1056
    // and line                                                                                                      // 1057
    var inner = buildGroup(group.value.body, options.withStyle(style.cramp()));                                      // 1058
                                                                                                                     // 1059
    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /                                                       // 1060
        style.sizeMultiplier;                                                                                        // 1061
                                                                                                                     // 1062
    var line = makeSpan(                                                                                             // 1063
        [style.reset(), Style.TEXT.cls(), "sqrt-line"], [],                                                          // 1064
        options);                                                                                                    // 1065
    line.height = ruleWidth;                                                                                         // 1066
    line.maxFontSize = 1.0;                                                                                          // 1067
                                                                                                                     // 1068
    var phi = ruleWidth;                                                                                             // 1069
    if (style.id < Style.TEXT.id) {                                                                                  // 1070
        phi = style.metrics.xHeight;                                                                                 // 1071
    }                                                                                                                // 1072
                                                                                                                     // 1073
    // Calculate the clearance between the body and line                                                             // 1074
    var lineClearance = ruleWidth + phi / 4;                                                                         // 1075
                                                                                                                     // 1076
    var innerHeight = (inner.height + inner.depth) * style.sizeMultiplier;                                           // 1077
    var minDelimiterHeight = innerHeight + lineClearance + ruleWidth;                                                // 1078
                                                                                                                     // 1079
    // Create a \surd delimiter of the required minimum size                                                         // 1080
    var delim = makeSpan(["sqrt-sign"], [                                                                            // 1081
        delimiter.customSizedDelim("\\surd", minDelimiterHeight,                                                     // 1082
                                   false, options, group.mode)],                                                     // 1083
                         options);                                                                                   // 1084
                                                                                                                     // 1085
    var delimDepth = (delim.height + delim.depth) - ruleWidth;                                                       // 1086
                                                                                                                     // 1087
    // Adjust the clearance based on the delimiter size                                                              // 1088
    if (delimDepth > inner.height + inner.depth + lineClearance) {                                                   // 1089
        lineClearance =                                                                                              // 1090
            (lineClearance + delimDepth - inner.height - inner.depth) / 2;                                           // 1091
    }                                                                                                                // 1092
                                                                                                                     // 1093
    // Shift the delimiter so that its top lines up with the top of the line                                         // 1094
    var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;                                     // 1095
    delim.style.top = delimShift + "em";                                                                             // 1096
    delim.height -= delimShift;                                                                                      // 1097
    delim.depth += delimShift;                                                                                       // 1098
                                                                                                                     // 1099
    // We add a special case here, because even when `inner` is empty, we                                            // 1100
    // still get a line. So, we use a simple heuristic to decide if we                                               // 1101
    // should omit the body entirely. (note this doesn't work for something                                          // 1102
    // like `\sqrt{\rlap{x}}`, but if someone is doing that they deserve for                                         // 1103
    // it not to work.                                                                                               // 1104
    var body;                                                                                                        // 1105
    if (inner.height === 0 && inner.depth === 0) {                                                                   // 1106
        body = makeSpan();                                                                                           // 1107
    } else {                                                                                                         // 1108
        body = buildCommon.makeVList([                                                                               // 1109
            {type: "elem", elem: inner},                                                                             // 1110
            {type: "kern", size: lineClearance},                                                                     // 1111
            {type: "elem", elem: line},                                                                              // 1112
            {type: "kern", size: ruleWidth}                                                                          // 1113
        ], "firstBaseline", null, options);                                                                          // 1114
    }                                                                                                                // 1115
                                                                                                                     // 1116
    if (!group.value.index) {                                                                                        // 1117
        return makeSpan(["mord", "sqrt"], [delim, body], options);                                                   // 1118
    } else {                                                                                                         // 1119
        // Handle the optional root index                                                                            // 1120
                                                                                                                     // 1121
        // The index is always in scriptscript style                                                                 // 1122
        var newOptions = options.withStyle(Style.SCRIPTSCRIPT);                                                      // 1123
        var root = buildGroup(group.value.index, newOptions);                                                        // 1124
        var rootWrap = makeSpan(                                                                                     // 1125
            [style.reset(), Style.SCRIPTSCRIPT.cls()],                                                               // 1126
            [root],                                                                                                  // 1127
            newOptions);                                                                                             // 1128
                                                                                                                     // 1129
        // Figure out the height and depth of the inner part                                                         // 1130
        var innerRootHeight = Math.max(delim.height, body.height);                                                   // 1131
        var innerRootDepth = Math.max(delim.depth, body.depth);                                                      // 1132
                                                                                                                     // 1133
        // The amount the index is shifted by. This is taken from the TeX                                            // 1134
        // source, in the definition of `\r@@t`.                                                                     // 1135
        var toShift = 0.6 * (innerRootHeight - innerRootDepth);                                                      // 1136
                                                                                                                     // 1137
        // Build a VList with the superscript shifted up correctly                                                   // 1138
        var rootVList = buildCommon.makeVList(                                                                       // 1139
            [{type: "elem", elem: rootWrap}],                                                                        // 1140
            "shift", -toShift, options);                                                                             // 1141
        // Add a class surrounding it so we can add on the appropriate                                               // 1142
        // kerning                                                                                                   // 1143
        var rootVListWrap = makeSpan(["root"], [rootVList]);                                                         // 1144
                                                                                                                     // 1145
        return makeSpan(["mord", "sqrt"],                                                                            // 1146
            [rootVListWrap, delim, body], options);                                                                  // 1147
    }                                                                                                                // 1148
};                                                                                                                   // 1149
                                                                                                                     // 1150
groupTypes.sizing = function(group, options) {                                                                       // 1151
    // Handle sizing operators like \Huge. Real TeX doesn't actually allow                                           // 1152
    // these functions inside of math expressions, so we do some special                                             // 1153
    // handling.                                                                                                     // 1154
    var inner = buildExpression(group.value.value,                                                                   // 1155
            options.withSize(group.value.size), false);                                                              // 1156
                                                                                                                     // 1157
    // Compute the correct maxFontSize.                                                                              // 1158
    var style = options.style;                                                                                       // 1159
    var fontSize = buildCommon.sizingMultiplier[group.value.size];                                                   // 1160
    fontSize = fontSize * style.sizeMultiplier;                                                                      // 1161
                                                                                                                     // 1162
    // Add size-resetting classes to the inner list and set maxFontSize                                              // 1163
    // manually. Handle nested size changes.                                                                         // 1164
    for (var i = 0; i < inner.length; i++) {                                                                         // 1165
        var pos = utils.indexOf(inner[i].classes, "sizing");                                                         // 1166
        if (pos < 0) {                                                                                               // 1167
            inner[i].classes.push("sizing", "reset-" + options.size,                                                 // 1168
                                  group.value.size, style.cls());                                                    // 1169
            inner[i].maxFontSize = fontSize;                                                                         // 1170
        } else if (inner[i].classes[pos + 1] === "reset-" + group.value.size) {                                      // 1171
            // This is a nested size change: e.g., inner[i] is the "b" in                                            // 1172
            // `\Huge a \small b`. Override the old size (the `reset-` class)                                        // 1173
            // but not the new size.                                                                                 // 1174
            inner[i].classes[pos + 1] = "reset-" + options.size;                                                     // 1175
        }                                                                                                            // 1176
    }                                                                                                                // 1177
                                                                                                                     // 1178
    return buildCommon.makeFragment(inner);                                                                          // 1179
};                                                                                                                   // 1180
                                                                                                                     // 1181
groupTypes.styling = function(group, options) {                                                                      // 1182
    // Style changes are handled in the TeXbook on pg. 442, Rule 3.                                                  // 1183
                                                                                                                     // 1184
    // Figure out what style we're changing to.                                                                      // 1185
    var styleMap = {                                                                                                 // 1186
        "display": Style.DISPLAY,                                                                                    // 1187
        "text": Style.TEXT,                                                                                          // 1188
        "script": Style.SCRIPT,                                                                                      // 1189
        "scriptscript": Style.SCRIPTSCRIPT                                                                           // 1190
    };                                                                                                               // 1191
                                                                                                                     // 1192
    var newStyle = styleMap[group.value.style];                                                                      // 1193
    var newOptions = options.withStyle(newStyle);                                                                    // 1194
                                                                                                                     // 1195
    // Build the inner expression in the new style.                                                                  // 1196
    var inner = buildExpression(                                                                                     // 1197
        group.value.value, newOptions, false);                                                                       // 1198
                                                                                                                     // 1199
    // Add style-resetting classes to the inner list. Handle nested changes.                                         // 1200
    for (var i = 0; i < inner.length; i++) {                                                                         // 1201
        var pos = utils.indexOf(inner[i].classes, newStyle.reset());                                                 // 1202
        if (pos < 0) {                                                                                               // 1203
            inner[i].classes.push(options.style.reset(), newStyle.cls());                                            // 1204
        } else {                                                                                                     // 1205
            // This is a nested style change, as `\textstyle a\scriptstyle b`.                                       // 1206
            // Only override the old style (the reset class).                                                        // 1207
            inner[i].classes[pos] = options.style.reset();                                                           // 1208
        }                                                                                                            // 1209
    }                                                                                                                // 1210
                                                                                                                     // 1211
    return new buildCommon.makeFragment(inner);                                                                      // 1212
};                                                                                                                   // 1213
                                                                                                                     // 1214
groupTypes.font = function(group, options) {                                                                         // 1215
    var font = group.value.font;                                                                                     // 1216
    return buildGroup(group.value.body, options.withFont(font));                                                     // 1217
};                                                                                                                   // 1218
                                                                                                                     // 1219
groupTypes.delimsizing = function(group, options) {                                                                  // 1220
    var delim = group.value.value;                                                                                   // 1221
                                                                                                                     // 1222
    if (delim === ".") {                                                                                             // 1223
        // Empty delimiters still count as elements, even though they don't                                          // 1224
        // show anything.                                                                                            // 1225
        return makeSpan([group.value.mclass]);                                                                       // 1226
    }                                                                                                                // 1227
                                                                                                                     // 1228
    // Use delimiter.sizedDelim to generate the delimiter.                                                           // 1229
    return delimiter.sizedDelim(                                                                                     // 1230
            delim, group.value.size, options, group.mode,                                                            // 1231
            [group.value.mclass]);                                                                                   // 1232
};                                                                                                                   // 1233
                                                                                                                     // 1234
groupTypes.leftright = function(group, options) {                                                                    // 1235
    // Build the inner expression                                                                                    // 1236
    var inner = buildExpression(group.value.body, options.reset(), true);                                            // 1237
                                                                                                                     // 1238
    var innerHeight = 0;                                                                                             // 1239
    var innerDepth = 0;                                                                                              // 1240
    var hadMiddle = false;                                                                                           // 1241
                                                                                                                     // 1242
    // Calculate its height and depth                                                                                // 1243
    for (var i = 0; i < inner.length; i++) {                                                                         // 1244
        if (inner[i].isMiddle) {                                                                                     // 1245
            hadMiddle = true;                                                                                        // 1246
        } else {                                                                                                     // 1247
            innerHeight = Math.max(inner[i].height, innerHeight);                                                    // 1248
            innerDepth = Math.max(inner[i].depth, innerDepth);                                                       // 1249
        }                                                                                                            // 1250
    }                                                                                                                // 1251
                                                                                                                     // 1252
    var style = options.style;                                                                                       // 1253
                                                                                                                     // 1254
    // The size of delimiters is the same, regardless of what style we are                                           // 1255
    // in. Thus, to correctly calculate the size of delimiter we need around                                         // 1256
    // a group, we scale down the inner size based on the size.                                                      // 1257
    innerHeight *= style.sizeMultiplier;                                                                             // 1258
    innerDepth *= style.sizeMultiplier;                                                                              // 1259
                                                                                                                     // 1260
    var leftDelim;                                                                                                   // 1261
    if (group.value.left === ".") {                                                                                  // 1262
        // Empty delimiters in \left and \right make null delimiter spaces.                                          // 1263
        leftDelim = makeNullDelimiter(options, ["mopen"]);                                                           // 1264
    } else {                                                                                                         // 1265
        // Otherwise, use leftRightDelim to generate the correct sized                                               // 1266
        // delimiter.                                                                                                // 1267
        leftDelim = delimiter.leftRightDelim(                                                                        // 1268
            group.value.left, innerHeight, innerDepth, options,                                                      // 1269
            group.mode, ["mopen"]);                                                                                  // 1270
    }                                                                                                                // 1271
    // Add it to the beginning of the expression                                                                     // 1272
    inner.unshift(leftDelim);                                                                                        // 1273
                                                                                                                     // 1274
    // Handle middle delimiters                                                                                      // 1275
    if (hadMiddle) {                                                                                                 // 1276
        for (i = 1; i < inner.length; i++) {                                                                         // 1277
            if (inner[i].isMiddle) {                                                                                 // 1278
                // Apply the options that were active when \middle was called                                        // 1279
                inner[i] = delimiter.leftRightDelim(                                                                 // 1280
                    inner[i].isMiddle.value, innerHeight, innerDepth,                                                // 1281
                    inner[i].isMiddle.options, group.mode, []);                                                      // 1282
            }                                                                                                        // 1283
        }                                                                                                            // 1284
    }                                                                                                                // 1285
                                                                                                                     // 1286
    var rightDelim;                                                                                                  // 1287
    // Same for the right delimiter                                                                                  // 1288
    if (group.value.right === ".") {                                                                                 // 1289
        rightDelim = makeNullDelimiter(options, ["mclose"]);                                                         // 1290
    } else {                                                                                                         // 1291
        rightDelim = delimiter.leftRightDelim(                                                                       // 1292
            group.value.right, innerHeight, innerDepth, options,                                                     // 1293
            group.mode, ["mclose"]);                                                                                 // 1294
    }                                                                                                                // 1295
    // Add it to the end of the expression.                                                                          // 1296
    inner.push(rightDelim);                                                                                          // 1297
                                                                                                                     // 1298
    return makeSpan(                                                                                                 // 1299
        ["minner", style.cls()], inner, options);                                                                    // 1300
};                                                                                                                   // 1301
                                                                                                                     // 1302
groupTypes.middle = function(group, options) {                                                                       // 1303
    var middleDelim;                                                                                                 // 1304
    if (group.value.value === ".") {                                                                                 // 1305
        middleDelim = makeNullDelimiter(options, []);                                                                // 1306
    } else {                                                                                                         // 1307
        middleDelim = delimiter.sizedDelim(                                                                          // 1308
            group.value.value, 1, options,                                                                           // 1309
            group.mode, []);                                                                                         // 1310
        middleDelim.isMiddle = {value: group.value.value, options: options};                                         // 1311
    }                                                                                                                // 1312
    return middleDelim;                                                                                              // 1313
};                                                                                                                   // 1314
                                                                                                                     // 1315
groupTypes.rule = function(group, options) {                                                                         // 1316
    // Make an empty span for the rule                                                                               // 1317
    var rule = makeSpan(["mord", "rule"], [], options);                                                              // 1318
    var style = options.style;                                                                                       // 1319
                                                                                                                     // 1320
    // Calculate the shift, width, and height of the rule, and account for units                                     // 1321
    var shift = 0;                                                                                                   // 1322
    if (group.value.shift) {                                                                                         // 1323
        shift = calculateSize(group.value.shift, style);                                                             // 1324
    }                                                                                                                // 1325
                                                                                                                     // 1326
    var width = calculateSize(group.value.width, style);                                                             // 1327
    var height = calculateSize(group.value.height, style);                                                           // 1328
                                                                                                                     // 1329
    // The sizes of rules are absolute, so make it larger if we are in a                                             // 1330
    // smaller style.                                                                                                // 1331
    shift /= style.sizeMultiplier;                                                                                   // 1332
    width /= style.sizeMultiplier;                                                                                   // 1333
    height /= style.sizeMultiplier;                                                                                  // 1334
                                                                                                                     // 1335
    // Style the rule to the right size                                                                              // 1336
    rule.style.borderRightWidth = width + "em";                                                                      // 1337
    rule.style.borderTopWidth = height + "em";                                                                       // 1338
    rule.style.bottom = shift + "em";                                                                                // 1339
                                                                                                                     // 1340
    // Record the height and width                                                                                   // 1341
    rule.width = width;                                                                                              // 1342
    rule.height = height + shift;                                                                                    // 1343
    rule.depth = -shift;                                                                                             // 1344
                                                                                                                     // 1345
    return rule;                                                                                                     // 1346
};                                                                                                                   // 1347
                                                                                                                     // 1348
groupTypes.kern = function(group, options) {                                                                         // 1349
    // Make an empty span for the rule                                                                               // 1350
    var rule = makeSpan(["mord", "rule"], [], options);                                                              // 1351
    var style = options.style;                                                                                       // 1352
                                                                                                                     // 1353
    var dimension = 0;                                                                                               // 1354
    if (group.value.dimension) {                                                                                     // 1355
        dimension = calculateSize(group.value.dimension, style);                                                     // 1356
    }                                                                                                                // 1357
                                                                                                                     // 1358
    dimension /= style.sizeMultiplier;                                                                               // 1359
                                                                                                                     // 1360
    rule.style.marginLeft = dimension + "em";                                                                        // 1361
                                                                                                                     // 1362
    return rule;                                                                                                     // 1363
};                                                                                                                   // 1364
                                                                                                                     // 1365
groupTypes.accent = function(group, options) {                                                                       // 1366
    // Accents are handled in the TeXbook pg. 443, rule 12.                                                          // 1367
    var base = group.value.base;                                                                                     // 1368
    var style = options.style;                                                                                       // 1369
                                                                                                                     // 1370
    var supsubGroup;                                                                                                 // 1371
    if (group.type === "supsub") {                                                                                   // 1372
        // If our base is a character box, and we have superscripts and                                              // 1373
        // subscripts, the supsub will defer to us. In particular, we want                                           // 1374
        // to attach the superscripts and subscripts to the inner body (so                                           // 1375
        // that the position of the superscripts and subscripts won't be                                             // 1376
        // affected by the height of the accent). We accomplish this by                                              // 1377
        // sticking the base of the accent into the base of the supsub, and                                          // 1378
        // rendering that, while keeping track of where the accent is.                                               // 1379
                                                                                                                     // 1380
        // The supsub group is the group that was passed in                                                          // 1381
        var supsub = group;                                                                                          // 1382
        // The real accent group is the base of the supsub group                                                     // 1383
        group = supsub.value.base;                                                                                   // 1384
        // The character box is the base of the accent group                                                         // 1385
        base = group.value.base;                                                                                     // 1386
        // Stick the character box into the base of the supsub group                                                 // 1387
        supsub.value.base = base;                                                                                    // 1388
                                                                                                                     // 1389
        // Rerender the supsub group with its new base, and store that                                               // 1390
        // result.                                                                                                   // 1391
        supsubGroup = buildGroup(                                                                                    // 1392
            supsub, options.reset());                                                                                // 1393
    }                                                                                                                // 1394
                                                                                                                     // 1395
    // Build the base group                                                                                          // 1396
    var body = buildGroup(                                                                                           // 1397
        base, options.withStyle(style.cramp()));                                                                     // 1398
                                                                                                                     // 1399
    // Calculate the skew of the accent. This is based on the line "If the                                           // 1400
    // nucleus is not a single character, let s = 0; otherwise set s to the                                          // 1401
    // kern amount for the nucleus followed by the \skewchar of its font."                                           // 1402
    // Note that our skew metrics are just the kern between each character                                           // 1403
    // and the skewchar.                                                                                             // 1404
    var skew;                                                                                                        // 1405
    if (isCharacterBox(base)) {                                                                                      // 1406
        // If the base is a character box, then we want the skew of the                                              // 1407
        // innermost character. To do that, we find the innermost character:                                         // 1408
        var baseChar = getBaseElem(base);                                                                            // 1409
        // Then, we render its group to get the symbol inside it                                                     // 1410
        var baseGroup = buildGroup(                                                                                  // 1411
            baseChar, options.withStyle(style.cramp()));                                                             // 1412
        // Finally, we pull the skew off of the symbol.                                                              // 1413
        skew = baseGroup.skew;                                                                                       // 1414
        // Note that we now throw away baseGroup, because the layers we                                              // 1415
        // removed with getBaseElem might contain things like \color which                                           // 1416
        // we can't get rid of.                                                                                      // 1417
        // TODO(emily): Find a better way to get the skew                                                            // 1418
    } else {                                                                                                         // 1419
        skew = 0;                                                                                                    // 1420
    }                                                                                                                // 1421
                                                                                                                     // 1422
    // calculate the amount of space between the body and the accent                                                 // 1423
    var clearance = Math.min(                                                                                        // 1424
        body.height,                                                                                                 // 1425
        style.metrics.xHeight);                                                                                      // 1426
                                                                                                                     // 1427
    // Build the accent                                                                                              // 1428
    var accent = buildCommon.makeSymbol(                                                                             // 1429
        group.value.accent, "Main-Regular", "math", options);                                                        // 1430
    // Remove the italic correction of the accent, because it only serves to                                         // 1431
    // shift the accent over to a place we don't want.                                                               // 1432
    accent.italic = 0;                                                                                               // 1433
                                                                                                                     // 1434
    // The \vec character that the fonts use is a combining character, and                                           // 1435
    // thus shows up much too far to the left. To account for this, we add a                                         // 1436
    // specific class which shifts the accent over to where we want it.                                              // 1437
    // TODO(emily): Fix this in a better way, like by changing the font                                              // 1438
    var vecClass = group.value.accent === "\\vec" ? "accent-vec" : null;                                             // 1439
                                                                                                                     // 1440
    var accentBody = makeSpan(["accent-body", vecClass], [                                                           // 1441
        makeSpan([], [accent])]);                                                                                    // 1442
                                                                                                                     // 1443
    accentBody = buildCommon.makeVList([                                                                             // 1444
        {type: "elem", elem: body},                                                                                  // 1445
        {type: "kern", size: -clearance},                                                                            // 1446
        {type: "elem", elem: accentBody}                                                                             // 1447
    ], "firstBaseline", null, options);                                                                              // 1448
                                                                                                                     // 1449
    // Shift the accent over by the skew. Note we shift by twice the skew                                            // 1450
    // because we are centering the accent, so by adding 2*skew to the left,                                         // 1451
    // we shift it to the right by 1*skew.                                                                           // 1452
    accentBody.children[1].style.marginLeft = 2 * skew + "em";                                                       // 1453
                                                                                                                     // 1454
    var accentWrap = makeSpan(["mord", "accent"], [accentBody], options);                                            // 1455
                                                                                                                     // 1456
    if (supsubGroup) {                                                                                               // 1457
        // Here, we replace the "base" child of the supsub with our newly                                            // 1458
        // generated accent.                                                                                         // 1459
        supsubGroup.children[0] = accentWrap;                                                                        // 1460
                                                                                                                     // 1461
        // Since we don't rerun the height calculation after replacing the                                           // 1462
        // accent, we manually recalculate height.                                                                   // 1463
        supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);                                        // 1464
                                                                                                                     // 1465
        // Accents should always be ords, even when their innards are not.                                           // 1466
        supsubGroup.classes[0] = "mord";                                                                             // 1467
                                                                                                                     // 1468
        return supsubGroup;                                                                                          // 1469
    } else {                                                                                                         // 1470
        return accentWrap;                                                                                           // 1471
    }                                                                                                                // 1472
};                                                                                                                   // 1473
                                                                                                                     // 1474
groupTypes.phantom = function(group, options) {                                                                      // 1475
    var elements = buildExpression(                                                                                  // 1476
        group.value.value,                                                                                           // 1477
        options.withPhantom(),                                                                                       // 1478
        false                                                                                                        // 1479
    );                                                                                                               // 1480
                                                                                                                     // 1481
    // \phantom isn't supposed to affect the elements it contains.                                                   // 1482
    // See "color" for more details.                                                                                 // 1483
    return new buildCommon.makeFragment(elements);                                                                   // 1484
};                                                                                                                   // 1485
                                                                                                                     // 1486
groupTypes.mclass = function(group, options) {                                                                       // 1487
    var elements = buildExpression(group.value.value, options, true);                                                // 1488
                                                                                                                     // 1489
    return makeSpan([group.value.mclass], elements, options);                                                        // 1490
};                                                                                                                   // 1491
                                                                                                                     // 1492
/**                                                                                                                  // 1493
 * buildGroup is the function that takes a group and calls the correct groupType                                     // 1494
 * function for it. It also handles the interaction of size and style changes                                        // 1495
 * between parents and children.                                                                                     // 1496
 */                                                                                                                  // 1497
var buildGroup = function(group, options) {                                                                          // 1498
    if (!group) {                                                                                                    // 1499
        return makeSpan();                                                                                           // 1500
    }                                                                                                                // 1501
                                                                                                                     // 1502
    if (groupTypes[group.type]) {                                                                                    // 1503
        // Call the groupTypes function                                                                              // 1504
        var groupNode = groupTypes[group.type](group, options);                                                      // 1505
        var multiplier;                                                                                              // 1506
                                                                                                                     // 1507
        // If the style changed between the parent and the current group,                                            // 1508
        // account for the size difference                                                                           // 1509
        if (options.style !== options.parentStyle) {                                                                 // 1510
            multiplier = options.style.sizeMultiplier /                                                              // 1511
                    options.parentStyle.sizeMultiplier;                                                              // 1512
                                                                                                                     // 1513
            groupNode.height *= multiplier;                                                                          // 1514
            groupNode.depth *= multiplier;                                                                           // 1515
        }                                                                                                            // 1516
                                                                                                                     // 1517
        // If the size changed between the parent and the current group, account                                     // 1518
        // for that size difference.                                                                                 // 1519
        if (options.size !== options.parentSize) {                                                                   // 1520
            multiplier = buildCommon.sizingMultiplier[options.size] /                                                // 1521
                    buildCommon.sizingMultiplier[options.parentSize];                                                // 1522
                                                                                                                     // 1523
            groupNode.height *= multiplier;                                                                          // 1524
            groupNode.depth *= multiplier;                                                                           // 1525
        }                                                                                                            // 1526
                                                                                                                     // 1527
        return groupNode;                                                                                            // 1528
    } else {                                                                                                         // 1529
        throw new ParseError(                                                                                        // 1530
            "Got group of unknown type: '" + group.type + "'");                                                      // 1531
    }                                                                                                                // 1532
};                                                                                                                   // 1533
                                                                                                                     // 1534
/**                                                                                                                  // 1535
 * Take an entire parse tree, and build it into an appropriate set of HTML                                           // 1536
 * nodes.                                                                                                            // 1537
 */                                                                                                                  // 1538
var buildHTML = function(tree, options) {                                                                            // 1539
    // buildExpression is destructive, so we need to make a clone                                                    // 1540
    // of the incoming tree so that it isn't accidentally changed                                                    // 1541
    tree = JSON.parse(JSON.stringify(tree));                                                                         // 1542
                                                                                                                     // 1543
    // Build the expression contained in the tree                                                                    // 1544
    var expression = buildExpression(tree, options, true);                                                           // 1545
    var body = makeSpan(["base", options.style.cls()], expression, options);                                         // 1546
                                                                                                                     // 1547
    // Add struts, which ensure that the top of the HTML element falls at the                                        // 1548
    // height of the expression, and the bottom of the HTML element falls at the                                     // 1549
    // depth of the expression.                                                                                      // 1550
    var topStrut = makeSpan(["strut"]);                                                                              // 1551
    var bottomStrut = makeSpan(["strut", "bottom"]);                                                                 // 1552
                                                                                                                     // 1553
    topStrut.style.height = body.height + "em";                                                                      // 1554
    bottomStrut.style.height = (body.height + body.depth) + "em";                                                    // 1555
    // We'd like to use `vertical-align: top` but in IE 9 this lowers the                                            // 1556
    // baseline of the box to the bottom of this strut (instead staying in the                                       // 1557
    // normal place) so we use an absolute value for vertical-align instead                                          // 1558
    bottomStrut.style.verticalAlign = -body.depth + "em";                                                            // 1559
                                                                                                                     // 1560
    // Wrap the struts and body together                                                                             // 1561
    var htmlNode = makeSpan(["katex-html"], [topStrut, bottomStrut, body]);                                          // 1562
                                                                                                                     // 1563
    htmlNode.setAttribute("aria-hidden", "true");                                                                    // 1564
                                                                                                                     // 1565
    return htmlNode;                                                                                                 // 1566
};                                                                                                                   // 1567
                                                                                                                     // 1568
module.exports = buildHTML;                                                                                          // 1569
                                                                                                                     // 1570
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Style.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/Style.js                                              //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file contains information and classes for the various kinds of styles                                        // 2
 * used in TeX. It provides a generic `Style` class, which holds information                                         // 3
 * about a specific style. It then provides instances of all the different kinds                                     // 4
 * of styles possible, and provides functions to move between them and get                                           // 5
 * information about them.                                                                                           // 6
 */                                                                                                                  // 7
                                                                                                                     // 8
var sigmas = require("./fontMetrics.js").sigmas;                                                                     // 9
                                                                                                                     // 10
var metrics = [{}, {}, {}];                                                                                          // 11
var i;                                                                                                               // 12
for (var key in sigmas) {                                                                                            // 13
    if (sigmas.hasOwnProperty(key)) {                                                                                // 14
        for (i = 0; i < 3; i++) {                                                                                    // 15
            metrics[i][key] = sigmas[key][i];                                                                        // 16
        }                                                                                                            // 17
    }                                                                                                                // 18
}                                                                                                                    // 19
for (i = 0; i < 3; i++) {                                                                                            // 20
    metrics[i].emPerEx = sigmas.xHeight[i] / sigmas.quad[i];                                                         // 21
}                                                                                                                    // 22
                                                                                                                     // 23
/**                                                                                                                  // 24
 * The main style class. Contains a unique id for the style, a size (which is                                        // 25
 * the same for cramped and uncramped version of a style), a cramped flag, and a                                     // 26
 * size multiplier, which gives the size difference between a style and                                              // 27
 * textstyle.                                                                                                        // 28
 */                                                                                                                  // 29
function Style(id, size, multiplier, cramped) {                                                                      // 30
    this.id = id;                                                                                                    // 31
    this.size = size;                                                                                                // 32
    this.cramped = cramped;                                                                                          // 33
    this.sizeMultiplier = multiplier;                                                                                // 34
    this.metrics = metrics[size > 0 ? size - 1 : 0];                                                                 // 35
}                                                                                                                    // 36
                                                                                                                     // 37
/**                                                                                                                  // 38
 * Get the style of a superscript given a base in the current style.                                                 // 39
 */                                                                                                                  // 40
Style.prototype.sup = function() {                                                                                   // 41
    return styles[sup[this.id]];                                                                                     // 42
};                                                                                                                   // 43
                                                                                                                     // 44
/**                                                                                                                  // 45
 * Get the style of a subscript given a base in the current style.                                                   // 46
 */                                                                                                                  // 47
Style.prototype.sub = function() {                                                                                   // 48
    return styles[sub[this.id]];                                                                                     // 49
};                                                                                                                   // 50
                                                                                                                     // 51
/**                                                                                                                  // 52
 * Get the style of a fraction numerator given the fraction in the current                                           // 53
 * style.                                                                                                            // 54
 */                                                                                                                  // 55
Style.prototype.fracNum = function() {                                                                               // 56
    return styles[fracNum[this.id]];                                                                                 // 57
};                                                                                                                   // 58
                                                                                                                     // 59
/**                                                                                                                  // 60
 * Get the style of a fraction denominator given the fraction in the current                                         // 61
 * style.                                                                                                            // 62
 */                                                                                                                  // 63
Style.prototype.fracDen = function() {                                                                               // 64
    return styles[fracDen[this.id]];                                                                                 // 65
};                                                                                                                   // 66
                                                                                                                     // 67
/**                                                                                                                  // 68
 * Get the cramped version of a style (in particular, cramping a cramped style                                       // 69
 * doesn't change the style).                                                                                        // 70
 */                                                                                                                  // 71
Style.prototype.cramp = function() {                                                                                 // 72
    return styles[cramp[this.id]];                                                                                   // 73
};                                                                                                                   // 74
                                                                                                                     // 75
/**                                                                                                                  // 76
 * HTML class name, like "displaystyle cramped"                                                                      // 77
 */                                                                                                                  // 78
Style.prototype.cls = function() {                                                                                   // 79
    return sizeNames[this.size] + (this.cramped ? " cramped" : " uncramped");                                        // 80
};                                                                                                                   // 81
                                                                                                                     // 82
/**                                                                                                                  // 83
 * HTML Reset class name, like "reset-textstyle"                                                                     // 84
 */                                                                                                                  // 85
Style.prototype.reset = function() {                                                                                 // 86
    return resetNames[this.size];                                                                                    // 87
};                                                                                                                   // 88
                                                                                                                     // 89
/**                                                                                                                  // 90
 * Return if this style is tightly spaced (scriptstyle/scriptscriptstyle)                                            // 91
 */                                                                                                                  // 92
Style.prototype.isTight = function() {                                                                               // 93
    return this.size >= 2;                                                                                           // 94
};                                                                                                                   // 95
                                                                                                                     // 96
// IDs of the different styles                                                                                       // 97
var D = 0;                                                                                                           // 98
var Dc = 1;                                                                                                          // 99
var T = 2;                                                                                                           // 100
var Tc = 3;                                                                                                          // 101
var S = 4;                                                                                                           // 102
var Sc = 5;                                                                                                          // 103
var SS = 6;                                                                                                          // 104
var SSc = 7;                                                                                                         // 105
                                                                                                                     // 106
// String names for the different sizes                                                                              // 107
var sizeNames = [                                                                                                    // 108
    "displaystyle textstyle",                                                                                        // 109
    "textstyle",                                                                                                     // 110
    "scriptstyle",                                                                                                   // 111
    "scriptscriptstyle"                                                                                              // 112
];                                                                                                                   // 113
                                                                                                                     // 114
// Reset names for the different sizes                                                                               // 115
var resetNames = [                                                                                                   // 116
    "reset-textstyle",                                                                                               // 117
    "reset-textstyle",                                                                                               // 118
    "reset-scriptstyle",                                                                                             // 119
    "reset-scriptscriptstyle"                                                                                        // 120
];                                                                                                                   // 121
                                                                                                                     // 122
// Instances of the different styles                                                                                 // 123
var styles = [                                                                                                       // 124
    new Style(D, 0, 1.0, false),                                                                                     // 125
    new Style(Dc, 0, 1.0, true),                                                                                     // 126
    new Style(T, 1, 1.0, false),                                                                                     // 127
    new Style(Tc, 1, 1.0, true),                                                                                     // 128
    new Style(S, 2, 0.7, false),                                                                                     // 129
    new Style(Sc, 2, 0.7, true),                                                                                     // 130
    new Style(SS, 3, 0.5, false),                                                                                    // 131
    new Style(SSc, 3, 0.5, true)                                                                                     // 132
];                                                                                                                   // 133
                                                                                                                     // 134
// Lookup tables for switching from one style to another                                                             // 135
var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];                                                                          // 136
var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];                                                                      // 137
var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];                                                                      // 138
var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];                                                                  // 139
var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];                                                                      // 140
                                                                                                                     // 141
// We only export some of the styles. Also, we don't export the `Style` class so                                     // 142
// no more styles can be generated.                                                                                  // 143
module.exports = {                                                                                                   // 144
    DISPLAY: styles[D],                                                                                              // 145
    TEXT: styles[T],                                                                                                 // 146
    SCRIPT: styles[S],                                                                                               // 147
    SCRIPTSCRIPT: styles[SS]                                                                                         // 148
};                                                                                                                   // 149
                                                                                                                     // 150
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fontMetrics.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/fontMetrics.js                                        //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* eslint no-unused-vars:0 */                                                                                        // 1
                                                                                                                     // 2
var Style = require("./Style");                                                                                      // 3
var cjkRegex = require("./unicodeRegexes").cjkRegex;                                                                 // 4
                                                                                                                     // 5
/**                                                                                                                  // 6
 * This file contains metrics regarding fonts and individual symbols. The sigma                                      // 7
 * and xi variables, as well as the metricMap map contain data extracted from                                        // 8
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the                                     // 9
 * `metrics` variable and the getCharacterMetrics function.                                                          // 10
 */                                                                                                                  // 11
                                                                                                                     // 12
// In TeX, there are actually three sets of dimensions, one for each of                                              // 13
// textstyle, scriptstyle, and scriptscriptstyle.  These are provided in the                                         // 14
// the arrays below, in that order.                                                                                  // 15
//                                                                                                                   // 16
// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.                                      // 17
// This was determined by running the folllowing script:                                                             // 18
//                                                                                                                   // 19
//     latex -interaction=nonstopmode \
//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
//     '$a$ \expandafter\show\the\textfont2' \
//     '\expandafter\show\the\scriptfont2' \
//     '\expandafter\show\the\scriptscriptfont2' \
//     '\stop'                                                                                                       // 25
//                                                                                                                   // 26
// The metrics themselves were retreived using the following commands:                                               // 27
//                                                                                                                   // 28
//     tftopl cmsy10                                                                                                 // 29
//     tftopl cmsy7                                                                                                  // 30
//     tftopl cmsy5                                                                                                  // 31
//                                                                                                                   // 32
// The output of each of these commands is quite lengthy.  The only part we                                          // 33
// care about is the FONTDIMEN section. Each value is measured in EMs.                                               // 34
var sigmas = {                                                                                                       // 35
    slant: [0.250, 0.250, 0.250],       // sigma1                                                                    // 36
    space: [0.000, 0.000, 0.000],       // sigma2                                                                    // 37
    stretch: [0.000, 0.000, 0.000],     // sigma3                                                                    // 38
    shrink: [0.000, 0.000, 0.000],      // sigma4                                                                    // 39
    xHeight: [0.431, 0.431, 0.431],     // sigma5                                                                    // 40
    quad: [1.000, 1.171, 1.472],        // sigma6                                                                    // 41
    extraSpace: [0.000, 0.000, 0.000],  // sigma7                                                                    // 42
    num1: [0.677, 0.732, 0.925],        // sigma8                                                                    // 43
    num2: [0.394, 0.384, 0.387],        // sigma9                                                                    // 44
    num3: [0.444, 0.471, 0.504],        // sigma10                                                                   // 45
    denom1: [0.686, 0.752, 1.025],      // sigma11                                                                   // 46
    denom2: [0.345, 0.344, 0.532],      // sigma12                                                                   // 47
    sup1: [0.413, 0.503, 0.504],        // sigma13                                                                   // 48
    sup2: [0.363, 0.431, 0.404],        // sigma14                                                                   // 49
    sup3: [0.289, 0.286, 0.294],        // sigma15                                                                   // 50
    sub1: [0.150, 0.143, 0.200],        // sigma16                                                                   // 51
    sub2: [0.247, 0.286, 0.400],        // sigma17                                                                   // 52
    supDrop: [0.386, 0.353, 0.494],     // sigma18                                                                   // 53
    subDrop: [0.050, 0.071, 0.100],     // sigma19                                                                   // 54
    delim1: [2.390, 1.700, 1.980],      // sigma20                                                                   // 55
    delim2: [1.010, 1.157, 1.420],      // sigma21                                                                   // 56
    axisHeight: [0.250, 0.250, 0.250]  // sigma22                                                                    // 57
};                                                                                                                   // 58
                                                                                                                     // 59
// These font metrics are extracted from TeX by using                                                                // 60
// \font\a=cmex10                                                                                                    // 61
// \showthe\fontdimenX\a                                                                                             // 62
// where X is the corresponding variable number. These correspond to the font                                        // 63
// parameters of the extension fonts (family 3). See the TeXbook, page 441.                                          // 64
var xi1 = 0;                                                                                                         // 65
var xi2 = 0;                                                                                                         // 66
var xi3 = 0;                                                                                                         // 67
var xi4 = 0;                                                                                                         // 68
var xi5 = 0.431;                                                                                                     // 69
var xi6 = 1;                                                                                                         // 70
var xi7 = 0;                                                                                                         // 71
var xi8 = 0.04;                                                                                                      // 72
var xi9 = 0.111;                                                                                                     // 73
var xi10 = 0.166;                                                                                                    // 74
var xi11 = 0.2;                                                                                                      // 75
var xi12 = 0.6;                                                                                                      // 76
var xi13 = 0.1;                                                                                                      // 77
                                                                                                                     // 78
// This value determines how large a pt is, for metrics which are defined in                                         // 79
// terms of pts.                                                                                                     // 80
// This value is also used in katex.less; if you change it make sure the values                                      // 81
// match.                                                                                                            // 82
var ptPerEm = 10.0;                                                                                                  // 83
                                                                                                                     // 84
// The space between adjacent `|` columns in an array definition. From                                               // 85
// `\showthe\doublerulesep` in LaTeX.                                                                                // 86
var doubleRuleSep = 2.0 / ptPerEm;                                                                                   // 87
                                                                                                                     // 88
/**                                                                                                                  // 89
 * This is just a mapping from common names to real metrics                                                          // 90
 */                                                                                                                  // 91
var metrics = {                                                                                                      // 92
    defaultRuleThickness: xi8,                                                                                       // 93
    bigOpSpacing1: xi9,                                                                                              // 94
    bigOpSpacing2: xi10,                                                                                             // 95
    bigOpSpacing3: xi11,                                                                                             // 96
    bigOpSpacing4: xi12,                                                                                             // 97
    bigOpSpacing5: xi13,                                                                                             // 98
    ptPerEm: ptPerEm,                                                                                                // 99
    doubleRuleSep: doubleRuleSep                                                                                     // 100
};                                                                                                                   // 101
                                                                                                                     // 102
// This map contains a mapping from font name and character code to character                                        // 103
// metrics, including height, depth, italic correction, and skew (kern from the                                      // 104
// character to the corresponding \skewchar)                                                                         // 105
// This map is generated via `make metrics`. It should not be changed manually.                                      // 106
var metricMap = require("./fontMetricsData");                                                                        // 107
                                                                                                                     // 108
// These are very rough approximations.  We default to Times New Roman which                                         // 109
// should have Latin-1 and Cyrillic characters, but may not depending on the                                         // 110
// operating system.  The metrics do not account for extra height from the                                           // 111
// accents.  In the case of Cyrillic characters which have both ascenders and                                        // 112
// descenders we prefer approximations with ascenders, primarily to prevent                                          // 113
// the fraction bar or root line from intersecting the glyph.                                                        // 114
// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.                                           // 115
var extraCharacterMap = {                                                                                            // 116
    // Latin-1                                                                                                       // 117
    'À': 'A',                                                                                                        // 118
    'Á': 'A',                                                                                                        // 119
    'Â': 'A',                                                                                                        // 120
    'Ã': 'A',                                                                                                        // 121
    'Ä': 'A',                                                                                                        // 122
    'Å': 'A',                                                                                                        // 123
    'Æ': 'A',                                                                                                        // 124
    'Ç': 'C',                                                                                                        // 125
    'È': 'E',                                                                                                        // 126
    'É': 'E',                                                                                                        // 127
    'Ê': 'E',                                                                                                        // 128
    'Ë': 'E',                                                                                                        // 129
    'Ì': 'I',                                                                                                        // 130
    'Í': 'I',                                                                                                        // 131
    'Î': 'I',                                                                                                        // 132
    'Ï': 'I',                                                                                                        // 133
    'Ð': 'D',                                                                                                        // 134
    'Ñ': 'N',                                                                                                        // 135
    'Ò': 'O',                                                                                                        // 136
    'Ó': 'O',                                                                                                        // 137
    'Ô': 'O',                                                                                                        // 138
    'Õ': 'O',                                                                                                        // 139
    'Ö': 'O',                                                                                                        // 140
    'Ø': 'O',                                                                                                        // 141
    'Ù': 'U',                                                                                                        // 142
    'Ú': 'U',                                                                                                        // 143
    'Û': 'U',                                                                                                        // 144
    'Ü': 'U',                                                                                                        // 145
    'Ý': 'Y',                                                                                                        // 146
    'Þ': 'o',                                                                                                        // 147
    'ß': 'B',                                                                                                        // 148
    'à': 'a',                                                                                                        // 149
    'á': 'a',                                                                                                        // 150
    'â': 'a',                                                                                                        // 151
    'ã': 'a',                                                                                                        // 152
    'ä': 'a',                                                                                                        // 153
    'å': 'a',                                                                                                        // 154
    'æ': 'a',                                                                                                        // 155
    'ç': 'c',                                                                                                        // 156
    'è': 'e',                                                                                                        // 157
    'é': 'e',                                                                                                        // 158
    'ê': 'e',                                                                                                        // 159
    'ë': 'e',                                                                                                        // 160
    'ì': 'i',                                                                                                        // 161
    'í': 'i',                                                                                                        // 162
    'î': 'i',                                                                                                        // 163
    'ï': 'i',                                                                                                        // 164
    'ð': 'd',                                                                                                        // 165
    'ñ': 'n',                                                                                                        // 166
    'ò': 'o',                                                                                                        // 167
    'ó': 'o',                                                                                                        // 168
    'ô': 'o',                                                                                                        // 169
    'õ': 'o',                                                                                                        // 170
    'ö': 'o',                                                                                                        // 171
    'ø': 'o',                                                                                                        // 172
    'ù': 'u',                                                                                                        // 173
    'ú': 'u',                                                                                                        // 174
    'û': 'u',                                                                                                        // 175
    'ü': 'u',                                                                                                        // 176
    'ý': 'y',                                                                                                        // 177
    'þ': 'o',                                                                                                        // 178
    'ÿ': 'y',                                                                                                        // 179
                                                                                                                     // 180
    // Cyrillic                                                                                                      // 181
    'А': 'A',                                                                                                        // 182
    'Б': 'B',                                                                                                        // 183
    'В': 'B',                                                                                                        // 184
    'Г': 'F',                                                                                                        // 185
    'Д': 'A',                                                                                                        // 186
    'Е': 'E',                                                                                                        // 187
    'Ж': 'K',                                                                                                        // 188
    'З': '3',                                                                                                        // 189
    'И': 'N',                                                                                                        // 190
    'Й': 'N',                                                                                                        // 191
    'К': 'K',                                                                                                        // 192
    'Л': 'N',                                                                                                        // 193
    'М': 'M',                                                                                                        // 194
    'Н': 'H',                                                                                                        // 195
    'О': 'O',                                                                                                        // 196
    'П': 'N',                                                                                                        // 197
    'Р': 'P',                                                                                                        // 198
    'С': 'C',                                                                                                        // 199
    'Т': 'T',                                                                                                        // 200
    'У': 'y',                                                                                                        // 201
    'Ф': 'O',                                                                                                        // 202
    'Х': 'X',                                                                                                        // 203
    'Ц': 'U',                                                                                                        // 204
    'Ч': 'h',                                                                                                        // 205
    'Ш': 'W',                                                                                                        // 206
    'Щ': 'W',                                                                                                        // 207
    'Ъ': 'B',                                                                                                        // 208
    'Ы': 'X',                                                                                                        // 209
    'Ь': 'B',                                                                                                        // 210
    'Э': '3',                                                                                                        // 211
    'Ю': 'X',                                                                                                        // 212
    'Я': 'R',                                                                                                        // 213
    'а': 'a',                                                                                                        // 214
    'б': 'b',                                                                                                        // 215
    'в': 'a',                                                                                                        // 216
    'г': 'r',                                                                                                        // 217
    'д': 'y',                                                                                                        // 218
    'е': 'e',                                                                                                        // 219
    'ж': 'm',                                                                                                        // 220
    'з': 'e',                                                                                                        // 221
    'и': 'n',                                                                                                        // 222
    'й': 'n',                                                                                                        // 223
    'к': 'n',                                                                                                        // 224
    'л': 'n',                                                                                                        // 225
    'м': 'm',                                                                                                        // 226
    'н': 'n',                                                                                                        // 227
    'о': 'o',                                                                                                        // 228
    'п': 'n',                                                                                                        // 229
    'р': 'p',                                                                                                        // 230
    'с': 'c',                                                                                                        // 231
    'т': 'o',                                                                                                        // 232
    'у': 'y',                                                                                                        // 233
    'ф': 'b',                                                                                                        // 234
    'х': 'x',                                                                                                        // 235
    'ц': 'n',                                                                                                        // 236
    'ч': 'n',                                                                                                        // 237
    'ш': 'w',                                                                                                        // 238
    'щ': 'w',                                                                                                        // 239
    'ъ': 'a',                                                                                                        // 240
    'ы': 'm',                                                                                                        // 241
    'ь': 'a',                                                                                                        // 242
    'э': 'e',                                                                                                        // 243
    'ю': 'm',                                                                                                        // 244
    'я': 'r'                                                                                                         // 245
};                                                                                                                   // 246
                                                                                                                     // 247
/**                                                                                                                  // 248
 * This function is a convenience function for looking up information in the                                         // 249
 * metricMap table. It takes a character as a string, and a style.                                                   // 250
 *                                                                                                                   // 251
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't                                          // 252
 * built using `Make extended_metrics`.                                                                              // 253
 */                                                                                                                  // 254
var getCharacterMetrics = function(character, style) {                                                               // 255
    var ch = character.charCodeAt(0);                                                                                // 256
    if (character[0] in extraCharacterMap) {                                                                         // 257
        ch = extraCharacterMap[character[0]].charCodeAt(0);                                                          // 258
    } else if (cjkRegex.test(character[0])) {                                                                        // 259
        ch = 'M'.charCodeAt(0);                                                                                      // 260
    }                                                                                                                // 261
    var metrics = metricMap[style][ch];                                                                              // 262
    if (metrics) {                                                                                                   // 263
        return {                                                                                                     // 264
            depth: metrics[0],                                                                                       // 265
            height: metrics[1],                                                                                      // 266
            italic: metrics[2],                                                                                      // 267
            skew: metrics[3],                                                                                        // 268
            width: metrics[4]                                                                                        // 269
        };                                                                                                           // 270
    }                                                                                                                // 271
};                                                                                                                   // 272
                                                                                                                     // 273
module.exports = {                                                                                                   // 274
    metrics: metrics,                                                                                                // 275
    sigmas: sigmas,                                                                                                  // 276
    getCharacterMetrics: getCharacterMetrics                                                                         // 277
};                                                                                                                   // 278
                                                                                                                     // 279
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unicodeRegexes.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/unicodeRegexes.js                                     //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var hangulRegex = /[\uAC00-\uD7AF]/;                                                                                 // 1
                                                                                                                     // 2
// This regex combines                                                                                               // 3
// - Hiragana: [\u3040-\u309F]                                                                                       // 4
// - Katakana: [\u30A0-\u30FF]                                                                                       // 5
// - CJK ideograms: [\u4E00-\u9FAF]                                                                                  // 6
// - Hangul syllables: [\uAC00-\uD7AF]                                                                               // 7
// Notably missing are halfwidth Katakana and Romanji glyphs.                                                        // 8
var cjkRegex =                                                                                                       // 9
    /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/;                                               // 10
                                                                                                                     // 11
module.exports = {                                                                                                   // 12
    cjkRegex: cjkRegex,                                                                                              // 13
    hangulRegex: hangulRegex                                                                                         // 14
};                                                                                                                   // 15
                                                                                                                     // 16
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fontMetricsData.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/fontMetricsData.js                                    //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
module.exports = {                                                                                                   // 1
    "AMS-Regular": {                                                                                                 // 2
        "65": [0, 0.68889, 0, 0],                                                                                    // 3
        "66": [0, 0.68889, 0, 0],                                                                                    // 4
        "67": [0, 0.68889, 0, 0],                                                                                    // 5
        "68": [0, 0.68889, 0, 0],                                                                                    // 6
        "69": [0, 0.68889, 0, 0],                                                                                    // 7
        "70": [0, 0.68889, 0, 0],                                                                                    // 8
        "71": [0, 0.68889, 0, 0],                                                                                    // 9
        "72": [0, 0.68889, 0, 0],                                                                                    // 10
        "73": [0, 0.68889, 0, 0],                                                                                    // 11
        "74": [0.16667, 0.68889, 0, 0],                                                                              // 12
        "75": [0, 0.68889, 0, 0],                                                                                    // 13
        "76": [0, 0.68889, 0, 0],                                                                                    // 14
        "77": [0, 0.68889, 0, 0],                                                                                    // 15
        "78": [0, 0.68889, 0, 0],                                                                                    // 16
        "79": [0.16667, 0.68889, 0, 0],                                                                              // 17
        "80": [0, 0.68889, 0, 0],                                                                                    // 18
        "81": [0.16667, 0.68889, 0, 0],                                                                              // 19
        "82": [0, 0.68889, 0, 0],                                                                                    // 20
        "83": [0, 0.68889, 0, 0],                                                                                    // 21
        "84": [0, 0.68889, 0, 0],                                                                                    // 22
        "85": [0, 0.68889, 0, 0],                                                                                    // 23
        "86": [0, 0.68889, 0, 0],                                                                                    // 24
        "87": [0, 0.68889, 0, 0],                                                                                    // 25
        "88": [0, 0.68889, 0, 0],                                                                                    // 26
        "89": [0, 0.68889, 0, 0],                                                                                    // 27
        "90": [0, 0.68889, 0, 0],                                                                                    // 28
        "107": [0, 0.68889, 0, 0],                                                                                   // 29
        "165": [0, 0.675, 0.025, 0],                                                                                 // 30
        "174": [0.15559, 0.69224, 0, 0],                                                                             // 31
        "240": [0, 0.68889, 0, 0],                                                                                   // 32
        "295": [0, 0.68889, 0, 0],                                                                                   // 33
        "710": [0, 0.825, 0, 0],                                                                                     // 34
        "732": [0, 0.9, 0, 0],                                                                                       // 35
        "770": [0, 0.825, 0, 0],                                                                                     // 36
        "771": [0, 0.9, 0, 0],                                                                                       // 37
        "989": [0.08167, 0.58167, 0, 0],                                                                             // 38
        "1008": [0, 0.43056, 0.04028, 0],                                                                            // 39
        "8245": [0, 0.54986, 0, 0],                                                                                  // 40
        "8463": [0, 0.68889, 0, 0],                                                                                  // 41
        "8487": [0, 0.68889, 0, 0],                                                                                  // 42
        "8498": [0, 0.68889, 0, 0],                                                                                  // 43
        "8502": [0, 0.68889, 0, 0],                                                                                  // 44
        "8503": [0, 0.68889, 0, 0],                                                                                  // 45
        "8504": [0, 0.68889, 0, 0],                                                                                  // 46
        "8513": [0, 0.68889, 0, 0],                                                                                  // 47
        "8592": [-0.03598, 0.46402, 0, 0],                                                                           // 48
        "8594": [-0.03598, 0.46402, 0, 0],                                                                           // 49
        "8602": [-0.13313, 0.36687, 0, 0],                                                                           // 50
        "8603": [-0.13313, 0.36687, 0, 0],                                                                           // 51
        "8606": [0.01354, 0.52239, 0, 0],                                                                            // 52
        "8608": [0.01354, 0.52239, 0, 0],                                                                            // 53
        "8610": [0.01354, 0.52239, 0, 0],                                                                            // 54
        "8611": [0.01354, 0.52239, 0, 0],                                                                            // 55
        "8619": [0, 0.54986, 0, 0],                                                                                  // 56
        "8620": [0, 0.54986, 0, 0],                                                                                  // 57
        "8621": [-0.13313, 0.37788, 0, 0],                                                                           // 58
        "8622": [-0.13313, 0.36687, 0, 0],                                                                           // 59
        "8624": [0, 0.69224, 0, 0],                                                                                  // 60
        "8625": [0, 0.69224, 0, 0],                                                                                  // 61
        "8630": [0, 0.43056, 0, 0],                                                                                  // 62
        "8631": [0, 0.43056, 0, 0],                                                                                  // 63
        "8634": [0.08198, 0.58198, 0, 0],                                                                            // 64
        "8635": [0.08198, 0.58198, 0, 0],                                                                            // 65
        "8638": [0.19444, 0.69224, 0, 0],                                                                            // 66
        "8639": [0.19444, 0.69224, 0, 0],                                                                            // 67
        "8642": [0.19444, 0.69224, 0, 0],                                                                            // 68
        "8643": [0.19444, 0.69224, 0, 0],                                                                            // 69
        "8644": [0.1808, 0.675, 0, 0],                                                                               // 70
        "8646": [0.1808, 0.675, 0, 0],                                                                               // 71
        "8647": [0.1808, 0.675, 0, 0],                                                                               // 72
        "8648": [0.19444, 0.69224, 0, 0],                                                                            // 73
        "8649": [0.1808, 0.675, 0, 0],                                                                               // 74
        "8650": [0.19444, 0.69224, 0, 0],                                                                            // 75
        "8651": [0.01354, 0.52239, 0, 0],                                                                            // 76
        "8652": [0.01354, 0.52239, 0, 0],                                                                            // 77
        "8653": [-0.13313, 0.36687, 0, 0],                                                                           // 78
        "8654": [-0.13313, 0.36687, 0, 0],                                                                           // 79
        "8655": [-0.13313, 0.36687, 0, 0],                                                                           // 80
        "8666": [0.13667, 0.63667, 0, 0],                                                                            // 81
        "8667": [0.13667, 0.63667, 0, 0],                                                                            // 82
        "8669": [-0.13313, 0.37788, 0, 0],                                                                           // 83
        "8672": [-0.064, 0.437, 0, 0],                                                                               // 84
        "8674": [-0.064, 0.437, 0, 0],                                                                               // 85
        "8705": [0, 0.825, 0, 0],                                                                                    // 86
        "8708": [0, 0.68889, 0, 0],                                                                                  // 87
        "8709": [0.08167, 0.58167, 0, 0],                                                                            // 88
        "8717": [0, 0.43056, 0, 0],                                                                                  // 89
        "8722": [-0.03598, 0.46402, 0, 0],                                                                           // 90
        "8724": [0.08198, 0.69224, 0, 0],                                                                            // 91
        "8726": [0.08167, 0.58167, 0, 0],                                                                            // 92
        "8733": [0, 0.69224, 0, 0],                                                                                  // 93
        "8736": [0, 0.69224, 0, 0],                                                                                  // 94
        "8737": [0, 0.69224, 0, 0],                                                                                  // 95
        "8738": [0.03517, 0.52239, 0, 0],                                                                            // 96
        "8739": [0.08167, 0.58167, 0, 0],                                                                            // 97
        "8740": [0.25142, 0.74111, 0, 0],                                                                            // 98
        "8741": [0.08167, 0.58167, 0, 0],                                                                            // 99
        "8742": [0.25142, 0.74111, 0, 0],                                                                            // 100
        "8756": [0, 0.69224, 0, 0],                                                                                  // 101
        "8757": [0, 0.69224, 0, 0],                                                                                  // 102
        "8764": [-0.13313, 0.36687, 0, 0],                                                                           // 103
        "8765": [-0.13313, 0.37788, 0, 0],                                                                           // 104
        "8769": [-0.13313, 0.36687, 0, 0],                                                                           // 105
        "8770": [-0.03625, 0.46375, 0, 0],                                                                           // 106
        "8774": [0.30274, 0.79383, 0, 0],                                                                            // 107
        "8776": [-0.01688, 0.48312, 0, 0],                                                                           // 108
        "8778": [0.08167, 0.58167, 0, 0],                                                                            // 109
        "8782": [0.06062, 0.54986, 0, 0],                                                                            // 110
        "8783": [0.06062, 0.54986, 0, 0],                                                                            // 111
        "8785": [0.08198, 0.58198, 0, 0],                                                                            // 112
        "8786": [0.08198, 0.58198, 0, 0],                                                                            // 113
        "8787": [0.08198, 0.58198, 0, 0],                                                                            // 114
        "8790": [0, 0.69224, 0, 0],                                                                                  // 115
        "8791": [0.22958, 0.72958, 0, 0],                                                                            // 116
        "8796": [0.08198, 0.91667, 0, 0],                                                                            // 117
        "8806": [0.25583, 0.75583, 0, 0],                                                                            // 118
        "8807": [0.25583, 0.75583, 0, 0],                                                                            // 119
        "8808": [0.25142, 0.75726, 0, 0],                                                                            // 120
        "8809": [0.25142, 0.75726, 0, 0],                                                                            // 121
        "8812": [0.25583, 0.75583, 0, 0],                                                                            // 122
        "8814": [0.20576, 0.70576, 0, 0],                                                                            // 123
        "8815": [0.20576, 0.70576, 0, 0],                                                                            // 124
        "8816": [0.30274, 0.79383, 0, 0],                                                                            // 125
        "8817": [0.30274, 0.79383, 0, 0],                                                                            // 126
        "8818": [0.22958, 0.72958, 0, 0],                                                                            // 127
        "8819": [0.22958, 0.72958, 0, 0],                                                                            // 128
        "8822": [0.1808, 0.675, 0, 0],                                                                               // 129
        "8823": [0.1808, 0.675, 0, 0],                                                                               // 130
        "8828": [0.13667, 0.63667, 0, 0],                                                                            // 131
        "8829": [0.13667, 0.63667, 0, 0],                                                                            // 132
        "8830": [0.22958, 0.72958, 0, 0],                                                                            // 133
        "8831": [0.22958, 0.72958, 0, 0],                                                                            // 134
        "8832": [0.20576, 0.70576, 0, 0],                                                                            // 135
        "8833": [0.20576, 0.70576, 0, 0],                                                                            // 136
        "8840": [0.30274, 0.79383, 0, 0],                                                                            // 137
        "8841": [0.30274, 0.79383, 0, 0],                                                                            // 138
        "8842": [0.13597, 0.63597, 0, 0],                                                                            // 139
        "8843": [0.13597, 0.63597, 0, 0],                                                                            // 140
        "8847": [0.03517, 0.54986, 0, 0],                                                                            // 141
        "8848": [0.03517, 0.54986, 0, 0],                                                                            // 142
        "8858": [0.08198, 0.58198, 0, 0],                                                                            // 143
        "8859": [0.08198, 0.58198, 0, 0],                                                                            // 144
        "8861": [0.08198, 0.58198, 0, 0],                                                                            // 145
        "8862": [0, 0.675, 0, 0],                                                                                    // 146
        "8863": [0, 0.675, 0, 0],                                                                                    // 147
        "8864": [0, 0.675, 0, 0],                                                                                    // 148
        "8865": [0, 0.675, 0, 0],                                                                                    // 149
        "8872": [0, 0.69224, 0, 0],                                                                                  // 150
        "8873": [0, 0.69224, 0, 0],                                                                                  // 151
        "8874": [0, 0.69224, 0, 0],                                                                                  // 152
        "8876": [0, 0.68889, 0, 0],                                                                                  // 153
        "8877": [0, 0.68889, 0, 0],                                                                                  // 154
        "8878": [0, 0.68889, 0, 0],                                                                                  // 155
        "8879": [0, 0.68889, 0, 0],                                                                                  // 156
        "8882": [0.03517, 0.54986, 0, 0],                                                                            // 157
        "8883": [0.03517, 0.54986, 0, 0],                                                                            // 158
        "8884": [0.13667, 0.63667, 0, 0],                                                                            // 159
        "8885": [0.13667, 0.63667, 0, 0],                                                                            // 160
        "8888": [0, 0.54986, 0, 0],                                                                                  // 161
        "8890": [0.19444, 0.43056, 0, 0],                                                                            // 162
        "8891": [0.19444, 0.69224, 0, 0],                                                                            // 163
        "8892": [0.19444, 0.69224, 0, 0],                                                                            // 164
        "8901": [0, 0.54986, 0, 0],                                                                                  // 165
        "8903": [0.08167, 0.58167, 0, 0],                                                                            // 166
        "8905": [0.08167, 0.58167, 0, 0],                                                                            // 167
        "8906": [0.08167, 0.58167, 0, 0],                                                                            // 168
        "8907": [0, 0.69224, 0, 0],                                                                                  // 169
        "8908": [0, 0.69224, 0, 0],                                                                                  // 170
        "8909": [-0.03598, 0.46402, 0, 0],                                                                           // 171
        "8910": [0, 0.54986, 0, 0],                                                                                  // 172
        "8911": [0, 0.54986, 0, 0],                                                                                  // 173
        "8912": [0.03517, 0.54986, 0, 0],                                                                            // 174
        "8913": [0.03517, 0.54986, 0, 0],                                                                            // 175
        "8914": [0, 0.54986, 0, 0],                                                                                  // 176
        "8915": [0, 0.54986, 0, 0],                                                                                  // 177
        "8916": [0, 0.69224, 0, 0],                                                                                  // 178
        "8918": [0.0391, 0.5391, 0, 0],                                                                              // 179
        "8919": [0.0391, 0.5391, 0, 0],                                                                              // 180
        "8920": [0.03517, 0.54986, 0, 0],                                                                            // 181
        "8921": [0.03517, 0.54986, 0, 0],                                                                            // 182
        "8922": [0.38569, 0.88569, 0, 0],                                                                            // 183
        "8923": [0.38569, 0.88569, 0, 0],                                                                            // 184
        "8926": [0.13667, 0.63667, 0, 0],                                                                            // 185
        "8927": [0.13667, 0.63667, 0, 0],                                                                            // 186
        "8928": [0.30274, 0.79383, 0, 0],                                                                            // 187
        "8929": [0.30274, 0.79383, 0, 0],                                                                            // 188
        "8934": [0.23222, 0.74111, 0, 0],                                                                            // 189
        "8935": [0.23222, 0.74111, 0, 0],                                                                            // 190
        "8936": [0.23222, 0.74111, 0, 0],                                                                            // 191
        "8937": [0.23222, 0.74111, 0, 0],                                                                            // 192
        "8938": [0.20576, 0.70576, 0, 0],                                                                            // 193
        "8939": [0.20576, 0.70576, 0, 0],                                                                            // 194
        "8940": [0.30274, 0.79383, 0, 0],                                                                            // 195
        "8941": [0.30274, 0.79383, 0, 0],                                                                            // 196
        "8994": [0.19444, 0.69224, 0, 0],                                                                            // 197
        "8995": [0.19444, 0.69224, 0, 0],                                                                            // 198
        "9416": [0.15559, 0.69224, 0, 0],                                                                            // 199
        "9484": [0, 0.69224, 0, 0],                                                                                  // 200
        "9488": [0, 0.69224, 0, 0],                                                                                  // 201
        "9492": [0, 0.37788, 0, 0],                                                                                  // 202
        "9496": [0, 0.37788, 0, 0],                                                                                  // 203
        "9585": [0.19444, 0.68889, 0, 0],                                                                            // 204
        "9586": [0.19444, 0.74111, 0, 0],                                                                            // 205
        "9632": [0, 0.675, 0, 0],                                                                                    // 206
        "9633": [0, 0.675, 0, 0],                                                                                    // 207
        "9650": [0, 0.54986, 0, 0],                                                                                  // 208
        "9651": [0, 0.54986, 0, 0],                                                                                  // 209
        "9654": [0.03517, 0.54986, 0, 0],                                                                            // 210
        "9660": [0, 0.54986, 0, 0],                                                                                  // 211
        "9661": [0, 0.54986, 0, 0],                                                                                  // 212
        "9664": [0.03517, 0.54986, 0, 0],                                                                            // 213
        "9674": [0.11111, 0.69224, 0, 0],                                                                            // 214
        "9733": [0.19444, 0.69224, 0, 0],                                                                            // 215
        "10003": [0, 0.69224, 0, 0],                                                                                 // 216
        "10016": [0, 0.69224, 0, 0],                                                                                 // 217
        "10731": [0.11111, 0.69224, 0, 0],                                                                           // 218
        "10846": [0.19444, 0.75583, 0, 0],                                                                           // 219
        "10877": [0.13667, 0.63667, 0, 0],                                                                           // 220
        "10878": [0.13667, 0.63667, 0, 0],                                                                           // 221
        "10885": [0.25583, 0.75583, 0, 0],                                                                           // 222
        "10886": [0.25583, 0.75583, 0, 0],                                                                           // 223
        "10887": [0.13597, 0.63597, 0, 0],                                                                           // 224
        "10888": [0.13597, 0.63597, 0, 0],                                                                           // 225
        "10889": [0.26167, 0.75726, 0, 0],                                                                           // 226
        "10890": [0.26167, 0.75726, 0, 0],                                                                           // 227
        "10891": [0.48256, 0.98256, 0, 0],                                                                           // 228
        "10892": [0.48256, 0.98256, 0, 0],                                                                           // 229
        "10901": [0.13667, 0.63667, 0, 0],                                                                           // 230
        "10902": [0.13667, 0.63667, 0, 0],                                                                           // 231
        "10933": [0.25142, 0.75726, 0, 0],                                                                           // 232
        "10934": [0.25142, 0.75726, 0, 0],                                                                           // 233
        "10935": [0.26167, 0.75726, 0, 0],                                                                           // 234
        "10936": [0.26167, 0.75726, 0, 0],                                                                           // 235
        "10937": [0.26167, 0.75726, 0, 0],                                                                           // 236
        "10938": [0.26167, 0.75726, 0, 0],                                                                           // 237
        "10949": [0.25583, 0.75583, 0, 0],                                                                           // 238
        "10950": [0.25583, 0.75583, 0, 0],                                                                           // 239
        "10955": [0.28481, 0.79383, 0, 0],                                                                           // 240
        "10956": [0.28481, 0.79383, 0, 0],                                                                           // 241
        "57350": [0.08167, 0.58167, 0, 0],                                                                           // 242
        "57351": [0.08167, 0.58167, 0, 0],                                                                           // 243
        "57352": [0.08167, 0.58167, 0, 0],                                                                           // 244
        "57353": [0, 0.43056, 0.04028, 0],                                                                           // 245
        "57356": [0.25142, 0.75726, 0, 0],                                                                           // 246
        "57357": [0.25142, 0.75726, 0, 0],                                                                           // 247
        "57358": [0.41951, 0.91951, 0, 0],                                                                           // 248
        "57359": [0.30274, 0.79383, 0, 0],                                                                           // 249
        "57360": [0.30274, 0.79383, 0, 0],                                                                           // 250
        "57361": [0.41951, 0.91951, 0, 0],                                                                           // 251
        "57366": [0.25142, 0.75726, 0, 0],                                                                           // 252
        "57367": [0.25142, 0.75726, 0, 0],                                                                           // 253
        "57368": [0.25142, 0.75726, 0, 0],                                                                           // 254
        "57369": [0.25142, 0.75726, 0, 0],                                                                           // 255
        "57370": [0.13597, 0.63597, 0, 0],                                                                           // 256
        "57371": [0.13597, 0.63597, 0, 0]                                                                            // 257
    },                                                                                                               // 258
    "Caligraphic-Regular": {                                                                                         // 259
        "48": [0, 0.43056, 0, 0],                                                                                    // 260
        "49": [0, 0.43056, 0, 0],                                                                                    // 261
        "50": [0, 0.43056, 0, 0],                                                                                    // 262
        "51": [0.19444, 0.43056, 0, 0],                                                                              // 263
        "52": [0.19444, 0.43056, 0, 0],                                                                              // 264
        "53": [0.19444, 0.43056, 0, 0],                                                                              // 265
        "54": [0, 0.64444, 0, 0],                                                                                    // 266
        "55": [0.19444, 0.43056, 0, 0],                                                                              // 267
        "56": [0, 0.64444, 0, 0],                                                                                    // 268
        "57": [0.19444, 0.43056, 0, 0],                                                                              // 269
        "65": [0, 0.68333, 0, 0.19445],                                                                              // 270
        "66": [0, 0.68333, 0.03041, 0.13889],                                                                        // 271
        "67": [0, 0.68333, 0.05834, 0.13889],                                                                        // 272
        "68": [0, 0.68333, 0.02778, 0.08334],                                                                        // 273
        "69": [0, 0.68333, 0.08944, 0.11111],                                                                        // 274
        "70": [0, 0.68333, 0.09931, 0.11111],                                                                        // 275
        "71": [0.09722, 0.68333, 0.0593, 0.11111],                                                                   // 276
        "72": [0, 0.68333, 0.00965, 0.11111],                                                                        // 277
        "73": [0, 0.68333, 0.07382, 0],                                                                              // 278
        "74": [0.09722, 0.68333, 0.18472, 0.16667],                                                                  // 279
        "75": [0, 0.68333, 0.01445, 0.05556],                                                                        // 280
        "76": [0, 0.68333, 0, 0.13889],                                                                              // 281
        "77": [0, 0.68333, 0, 0.13889],                                                                              // 282
        "78": [0, 0.68333, 0.14736, 0.08334],                                                                        // 283
        "79": [0, 0.68333, 0.02778, 0.11111],                                                                        // 284
        "80": [0, 0.68333, 0.08222, 0.08334],                                                                        // 285
        "81": [0.09722, 0.68333, 0, 0.11111],                                                                        // 286
        "82": [0, 0.68333, 0, 0.08334],                                                                              // 287
        "83": [0, 0.68333, 0.075, 0.13889],                                                                          // 288
        "84": [0, 0.68333, 0.25417, 0],                                                                              // 289
        "85": [0, 0.68333, 0.09931, 0.08334],                                                                        // 290
        "86": [0, 0.68333, 0.08222, 0],                                                                              // 291
        "87": [0, 0.68333, 0.08222, 0.08334],                                                                        // 292
        "88": [0, 0.68333, 0.14643, 0.13889],                                                                        // 293
        "89": [0.09722, 0.68333, 0.08222, 0.08334],                                                                  // 294
        "90": [0, 0.68333, 0.07944, 0.13889]                                                                         // 295
    },                                                                                                               // 296
    "Fraktur-Regular": {                                                                                             // 297
        "33": [0, 0.69141, 0, 0],                                                                                    // 298
        "34": [0, 0.69141, 0, 0],                                                                                    // 299
        "38": [0, 0.69141, 0, 0],                                                                                    // 300
        "39": [0, 0.69141, 0, 0],                                                                                    // 301
        "40": [0.24982, 0.74947, 0, 0],                                                                              // 302
        "41": [0.24982, 0.74947, 0, 0],                                                                              // 303
        "42": [0, 0.62119, 0, 0],                                                                                    // 304
        "43": [0.08319, 0.58283, 0, 0],                                                                              // 305
        "44": [0, 0.10803, 0, 0],                                                                                    // 306
        "45": [0.08319, 0.58283, 0, 0],                                                                              // 307
        "46": [0, 0.10803, 0, 0],                                                                                    // 308
        "47": [0.24982, 0.74947, 0, 0],                                                                              // 309
        "48": [0, 0.47534, 0, 0],                                                                                    // 310
        "49": [0, 0.47534, 0, 0],                                                                                    // 311
        "50": [0, 0.47534, 0, 0],                                                                                    // 312
        "51": [0.18906, 0.47534, 0, 0],                                                                              // 313
        "52": [0.18906, 0.47534, 0, 0],                                                                              // 314
        "53": [0.18906, 0.47534, 0, 0],                                                                              // 315
        "54": [0, 0.69141, 0, 0],                                                                                    // 316
        "55": [0.18906, 0.47534, 0, 0],                                                                              // 317
        "56": [0, 0.69141, 0, 0],                                                                                    // 318
        "57": [0.18906, 0.47534, 0, 0],                                                                              // 319
        "58": [0, 0.47534, 0, 0],                                                                                    // 320
        "59": [0.12604, 0.47534, 0, 0],                                                                              // 321
        "61": [-0.13099, 0.36866, 0, 0],                                                                             // 322
        "63": [0, 0.69141, 0, 0],                                                                                    // 323
        "65": [0, 0.69141, 0, 0],                                                                                    // 324
        "66": [0, 0.69141, 0, 0],                                                                                    // 325
        "67": [0, 0.69141, 0, 0],                                                                                    // 326
        "68": [0, 0.69141, 0, 0],                                                                                    // 327
        "69": [0, 0.69141, 0, 0],                                                                                    // 328
        "70": [0.12604, 0.69141, 0, 0],                                                                              // 329
        "71": [0, 0.69141, 0, 0],                                                                                    // 330
        "72": [0.06302, 0.69141, 0, 0],                                                                              // 331
        "73": [0, 0.69141, 0, 0],                                                                                    // 332
        "74": [0.12604, 0.69141, 0, 0],                                                                              // 333
        "75": [0, 0.69141, 0, 0],                                                                                    // 334
        "76": [0, 0.69141, 0, 0],                                                                                    // 335
        "77": [0, 0.69141, 0, 0],                                                                                    // 336
        "78": [0, 0.69141, 0, 0],                                                                                    // 337
        "79": [0, 0.69141, 0, 0],                                                                                    // 338
        "80": [0.18906, 0.69141, 0, 0],                                                                              // 339
        "81": [0.03781, 0.69141, 0, 0],                                                                              // 340
        "82": [0, 0.69141, 0, 0],                                                                                    // 341
        "83": [0, 0.69141, 0, 0],                                                                                    // 342
        "84": [0, 0.69141, 0, 0],                                                                                    // 343
        "85": [0, 0.69141, 0, 0],                                                                                    // 344
        "86": [0, 0.69141, 0, 0],                                                                                    // 345
        "87": [0, 0.69141, 0, 0],                                                                                    // 346
        "88": [0, 0.69141, 0, 0],                                                                                    // 347
        "89": [0.18906, 0.69141, 0, 0],                                                                              // 348
        "90": [0.12604, 0.69141, 0, 0],                                                                              // 349
        "91": [0.24982, 0.74947, 0, 0],                                                                              // 350
        "93": [0.24982, 0.74947, 0, 0],                                                                              // 351
        "94": [0, 0.69141, 0, 0],                                                                                    // 352
        "97": [0, 0.47534, 0, 0],                                                                                    // 353
        "98": [0, 0.69141, 0, 0],                                                                                    // 354
        "99": [0, 0.47534, 0, 0],                                                                                    // 355
        "100": [0, 0.62119, 0, 0],                                                                                   // 356
        "101": [0, 0.47534, 0, 0],                                                                                   // 357
        "102": [0.18906, 0.69141, 0, 0],                                                                             // 358
        "103": [0.18906, 0.47534, 0, 0],                                                                             // 359
        "104": [0.18906, 0.69141, 0, 0],                                                                             // 360
        "105": [0, 0.69141, 0, 0],                                                                                   // 361
        "106": [0, 0.69141, 0, 0],                                                                                   // 362
        "107": [0, 0.69141, 0, 0],                                                                                   // 363
        "108": [0, 0.69141, 0, 0],                                                                                   // 364
        "109": [0, 0.47534, 0, 0],                                                                                   // 365
        "110": [0, 0.47534, 0, 0],                                                                                   // 366
        "111": [0, 0.47534, 0, 0],                                                                                   // 367
        "112": [0.18906, 0.52396, 0, 0],                                                                             // 368
        "113": [0.18906, 0.47534, 0, 0],                                                                             // 369
        "114": [0, 0.47534, 0, 0],                                                                                   // 370
        "115": [0, 0.47534, 0, 0],                                                                                   // 371
        "116": [0, 0.62119, 0, 0],                                                                                   // 372
        "117": [0, 0.47534, 0, 0],                                                                                   // 373
        "118": [0, 0.52396, 0, 0],                                                                                   // 374
        "119": [0, 0.52396, 0, 0],                                                                                   // 375
        "120": [0.18906, 0.47534, 0, 0],                                                                             // 376
        "121": [0.18906, 0.47534, 0, 0],                                                                             // 377
        "122": [0.18906, 0.47534, 0, 0],                                                                             // 378
        "8216": [0, 0.69141, 0, 0],                                                                                  // 379
        "8217": [0, 0.69141, 0, 0],                                                                                  // 380
        "58112": [0, 0.62119, 0, 0],                                                                                 // 381
        "58113": [0, 0.62119, 0, 0],                                                                                 // 382
        "58114": [0.18906, 0.69141, 0, 0],                                                                           // 383
        "58115": [0.18906, 0.69141, 0, 0],                                                                           // 384
        "58116": [0.18906, 0.47534, 0, 0],                                                                           // 385
        "58117": [0, 0.69141, 0, 0],                                                                                 // 386
        "58118": [0, 0.62119, 0, 0],                                                                                 // 387
        "58119": [0, 0.47534, 0, 0]                                                                                  // 388
    },                                                                                                               // 389
    "Main-Bold": {                                                                                                   // 390
        "33": [0, 0.69444, 0, 0],                                                                                    // 391
        "34": [0, 0.69444, 0, 0],                                                                                    // 392
        "35": [0.19444, 0.69444, 0, 0],                                                                              // 393
        "36": [0.05556, 0.75, 0, 0],                                                                                 // 394
        "37": [0.05556, 0.75, 0, 0],                                                                                 // 395
        "38": [0, 0.69444, 0, 0],                                                                                    // 396
        "39": [0, 0.69444, 0, 0],                                                                                    // 397
        "40": [0.25, 0.75, 0, 0],                                                                                    // 398
        "41": [0.25, 0.75, 0, 0],                                                                                    // 399
        "42": [0, 0.75, 0, 0],                                                                                       // 400
        "43": [0.13333, 0.63333, 0, 0],                                                                              // 401
        "44": [0.19444, 0.15556, 0, 0],                                                                              // 402
        "45": [0, 0.44444, 0, 0],                                                                                    // 403
        "46": [0, 0.15556, 0, 0],                                                                                    // 404
        "47": [0.25, 0.75, 0, 0],                                                                                    // 405
        "48": [0, 0.64444, 0, 0],                                                                                    // 406
        "49": [0, 0.64444, 0, 0],                                                                                    // 407
        "50": [0, 0.64444, 0, 0],                                                                                    // 408
        "51": [0, 0.64444, 0, 0],                                                                                    // 409
        "52": [0, 0.64444, 0, 0],                                                                                    // 410
        "53": [0, 0.64444, 0, 0],                                                                                    // 411
        "54": [0, 0.64444, 0, 0],                                                                                    // 412
        "55": [0, 0.64444, 0, 0],                                                                                    // 413
        "56": [0, 0.64444, 0, 0],                                                                                    // 414
        "57": [0, 0.64444, 0, 0],                                                                                    // 415
        "58": [0, 0.44444, 0, 0],                                                                                    // 416
        "59": [0.19444, 0.44444, 0, 0],                                                                              // 417
        "60": [0.08556, 0.58556, 0, 0],                                                                              // 418
        "61": [-0.10889, 0.39111, 0, 0],                                                                             // 419
        "62": [0.08556, 0.58556, 0, 0],                                                                              // 420
        "63": [0, 0.69444, 0, 0],                                                                                    // 421
        "64": [0, 0.69444, 0, 0],                                                                                    // 422
        "65": [0, 0.68611, 0, 0],                                                                                    // 423
        "66": [0, 0.68611, 0, 0],                                                                                    // 424
        "67": [0, 0.68611, 0, 0],                                                                                    // 425
        "68": [0, 0.68611, 0, 0],                                                                                    // 426
        "69": [0, 0.68611, 0, 0],                                                                                    // 427
        "70": [0, 0.68611, 0, 0],                                                                                    // 428
        "71": [0, 0.68611, 0, 0],                                                                                    // 429
        "72": [0, 0.68611, 0, 0],                                                                                    // 430
        "73": [0, 0.68611, 0, 0],                                                                                    // 431
        "74": [0, 0.68611, 0, 0],                                                                                    // 432
        "75": [0, 0.68611, 0, 0],                                                                                    // 433
        "76": [0, 0.68611, 0, 0],                                                                                    // 434
        "77": [0, 0.68611, 0, 0],                                                                                    // 435
        "78": [0, 0.68611, 0, 0],                                                                                    // 436
        "79": [0, 0.68611, 0, 0],                                                                                    // 437
        "80": [0, 0.68611, 0, 0],                                                                                    // 438
        "81": [0.19444, 0.68611, 0, 0],                                                                              // 439
        "82": [0, 0.68611, 0, 0],                                                                                    // 440
        "83": [0, 0.68611, 0, 0],                                                                                    // 441
        "84": [0, 0.68611, 0, 0],                                                                                    // 442
        "85": [0, 0.68611, 0, 0],                                                                                    // 443
        "86": [0, 0.68611, 0.01597, 0],                                                                              // 444
        "87": [0, 0.68611, 0.01597, 0],                                                                              // 445
        "88": [0, 0.68611, 0, 0],                                                                                    // 446
        "89": [0, 0.68611, 0.02875, 0],                                                                              // 447
        "90": [0, 0.68611, 0, 0],                                                                                    // 448
        "91": [0.25, 0.75, 0, 0],                                                                                    // 449
        "92": [0.25, 0.75, 0, 0],                                                                                    // 450
        "93": [0.25, 0.75, 0, 0],                                                                                    // 451
        "94": [0, 0.69444, 0, 0],                                                                                    // 452
        "95": [0.31, 0.13444, 0.03194, 0],                                                                           // 453
        "96": [0, 0.69444, 0, 0],                                                                                    // 454
        "97": [0, 0.44444, 0, 0],                                                                                    // 455
        "98": [0, 0.69444, 0, 0],                                                                                    // 456
        "99": [0, 0.44444, 0, 0],                                                                                    // 457
        "100": [0, 0.69444, 0, 0],                                                                                   // 458
        "101": [0, 0.44444, 0, 0],                                                                                   // 459
        "102": [0, 0.69444, 0.10903, 0],                                                                             // 460
        "103": [0.19444, 0.44444, 0.01597, 0],                                                                       // 461
        "104": [0, 0.69444, 0, 0],                                                                                   // 462
        "105": [0, 0.69444, 0, 0],                                                                                   // 463
        "106": [0.19444, 0.69444, 0, 0],                                                                             // 464
        "107": [0, 0.69444, 0, 0],                                                                                   // 465
        "108": [0, 0.69444, 0, 0],                                                                                   // 466
        "109": [0, 0.44444, 0, 0],                                                                                   // 467
        "110": [0, 0.44444, 0, 0],                                                                                   // 468
        "111": [0, 0.44444, 0, 0],                                                                                   // 469
        "112": [0.19444, 0.44444, 0, 0],                                                                             // 470
        "113": [0.19444, 0.44444, 0, 0],                                                                             // 471
        "114": [0, 0.44444, 0, 0],                                                                                   // 472
        "115": [0, 0.44444, 0, 0],                                                                                   // 473
        "116": [0, 0.63492, 0, 0],                                                                                   // 474
        "117": [0, 0.44444, 0, 0],                                                                                   // 475
        "118": [0, 0.44444, 0.01597, 0],                                                                             // 476
        "119": [0, 0.44444, 0.01597, 0],                                                                             // 477
        "120": [0, 0.44444, 0, 0],                                                                                   // 478
        "121": [0.19444, 0.44444, 0.01597, 0],                                                                       // 479
        "122": [0, 0.44444, 0, 0],                                                                                   // 480
        "123": [0.25, 0.75, 0, 0],                                                                                   // 481
        "124": [0.25, 0.75, 0, 0],                                                                                   // 482
        "125": [0.25, 0.75, 0, 0],                                                                                   // 483
        "126": [0.35, 0.34444, 0, 0],                                                                                // 484
        "168": [0, 0.69444, 0, 0],                                                                                   // 485
        "172": [0, 0.44444, 0, 0],                                                                                   // 486
        "175": [0, 0.59611, 0, 0],                                                                                   // 487
        "176": [0, 0.69444, 0, 0],                                                                                   // 488
        "177": [0.13333, 0.63333, 0, 0],                                                                             // 489
        "180": [0, 0.69444, 0, 0],                                                                                   // 490
        "215": [0.13333, 0.63333, 0, 0],                                                                             // 491
        "247": [0.13333, 0.63333, 0, 0],                                                                             // 492
        "305": [0, 0.44444, 0, 0],                                                                                   // 493
        "567": [0.19444, 0.44444, 0, 0],                                                                             // 494
        "710": [0, 0.69444, 0, 0],                                                                                   // 495
        "711": [0, 0.63194, 0, 0],                                                                                   // 496
        "713": [0, 0.59611, 0, 0],                                                                                   // 497
        "714": [0, 0.69444, 0, 0],                                                                                   // 498
        "715": [0, 0.69444, 0, 0],                                                                                   // 499
        "728": [0, 0.69444, 0, 0],                                                                                   // 500
        "729": [0, 0.69444, 0, 0],                                                                                   // 501
        "730": [0, 0.69444, 0, 0],                                                                                   // 502
        "732": [0, 0.69444, 0, 0],                                                                                   // 503
        "768": [0, 0.69444, 0, 0],                                                                                   // 504
        "769": [0, 0.69444, 0, 0],                                                                                   // 505
        "770": [0, 0.69444, 0, 0],                                                                                   // 506
        "771": [0, 0.69444, 0, 0],                                                                                   // 507
        "772": [0, 0.59611, 0, 0],                                                                                   // 508
        "774": [0, 0.69444, 0, 0],                                                                                   // 509
        "775": [0, 0.69444, 0, 0],                                                                                   // 510
        "776": [0, 0.69444, 0, 0],                                                                                   // 511
        "778": [0, 0.69444, 0, 0],                                                                                   // 512
        "779": [0, 0.69444, 0, 0],                                                                                   // 513
        "780": [0, 0.63194, 0, 0],                                                                                   // 514
        "824": [0.19444, 0.69444, 0, 0],                                                                             // 515
        "915": [0, 0.68611, 0, 0],                                                                                   // 516
        "916": [0, 0.68611, 0, 0],                                                                                   // 517
        "920": [0, 0.68611, 0, 0],                                                                                   // 518
        "923": [0, 0.68611, 0, 0],                                                                                   // 519
        "926": [0, 0.68611, 0, 0],                                                                                   // 520
        "928": [0, 0.68611, 0, 0],                                                                                   // 521
        "931": [0, 0.68611, 0, 0],                                                                                   // 522
        "933": [0, 0.68611, 0, 0],                                                                                   // 523
        "934": [0, 0.68611, 0, 0],                                                                                   // 524
        "936": [0, 0.68611, 0, 0],                                                                                   // 525
        "937": [0, 0.68611, 0, 0],                                                                                   // 526
        "8211": [0, 0.44444, 0.03194, 0],                                                                            // 527
        "8212": [0, 0.44444, 0.03194, 0],                                                                            // 528
        "8216": [0, 0.69444, 0, 0],                                                                                  // 529
        "8217": [0, 0.69444, 0, 0],                                                                                  // 530
        "8220": [0, 0.69444, 0, 0],                                                                                  // 531
        "8221": [0, 0.69444, 0, 0],                                                                                  // 532
        "8224": [0.19444, 0.69444, 0, 0],                                                                            // 533
        "8225": [0.19444, 0.69444, 0, 0],                                                                            // 534
        "8242": [0, 0.55556, 0, 0],                                                                                  // 535
        "8407": [0, 0.72444, 0.15486, 0],                                                                            // 536
        "8463": [0, 0.69444, 0, 0],                                                                                  // 537
        "8465": [0, 0.69444, 0, 0],                                                                                  // 538
        "8467": [0, 0.69444, 0, 0],                                                                                  // 539
        "8472": [0.19444, 0.44444, 0, 0],                                                                            // 540
        "8476": [0, 0.69444, 0, 0],                                                                                  // 541
        "8501": [0, 0.69444, 0, 0],                                                                                  // 542
        "8592": [-0.10889, 0.39111, 0, 0],                                                                           // 543
        "8593": [0.19444, 0.69444, 0, 0],                                                                            // 544
        "8594": [-0.10889, 0.39111, 0, 0],                                                                           // 545
        "8595": [0.19444, 0.69444, 0, 0],                                                                            // 546
        "8596": [-0.10889, 0.39111, 0, 0],                                                                           // 547
        "8597": [0.25, 0.75, 0, 0],                                                                                  // 548
        "8598": [0.19444, 0.69444, 0, 0],                                                                            // 549
        "8599": [0.19444, 0.69444, 0, 0],                                                                            // 550
        "8600": [0.19444, 0.69444, 0, 0],                                                                            // 551
        "8601": [0.19444, 0.69444, 0, 0],                                                                            // 552
        "8636": [-0.10889, 0.39111, 0, 0],                                                                           // 553
        "8637": [-0.10889, 0.39111, 0, 0],                                                                           // 554
        "8640": [-0.10889, 0.39111, 0, 0],                                                                           // 555
        "8641": [-0.10889, 0.39111, 0, 0],                                                                           // 556
        "8656": [-0.10889, 0.39111, 0, 0],                                                                           // 557
        "8657": [0.19444, 0.69444, 0, 0],                                                                            // 558
        "8658": [-0.10889, 0.39111, 0, 0],                                                                           // 559
        "8659": [0.19444, 0.69444, 0, 0],                                                                            // 560
        "8660": [-0.10889, 0.39111, 0, 0],                                                                           // 561
        "8661": [0.25, 0.75, 0, 0],                                                                                  // 562
        "8704": [0, 0.69444, 0, 0],                                                                                  // 563
        "8706": [0, 0.69444, 0.06389, 0],                                                                            // 564
        "8707": [0, 0.69444, 0, 0],                                                                                  // 565
        "8709": [0.05556, 0.75, 0, 0],                                                                               // 566
        "8711": [0, 0.68611, 0, 0],                                                                                  // 567
        "8712": [0.08556, 0.58556, 0, 0],                                                                            // 568
        "8715": [0.08556, 0.58556, 0, 0],                                                                            // 569
        "8722": [0.13333, 0.63333, 0, 0],                                                                            // 570
        "8723": [0.13333, 0.63333, 0, 0],                                                                            // 571
        "8725": [0.25, 0.75, 0, 0],                                                                                  // 572
        "8726": [0.25, 0.75, 0, 0],                                                                                  // 573
        "8727": [-0.02778, 0.47222, 0, 0],                                                                           // 574
        "8728": [-0.02639, 0.47361, 0, 0],                                                                           // 575
        "8729": [-0.02639, 0.47361, 0, 0],                                                                           // 576
        "8730": [0.18, 0.82, 0, 0],                                                                                  // 577
        "8733": [0, 0.44444, 0, 0],                                                                                  // 578
        "8734": [0, 0.44444, 0, 0],                                                                                  // 579
        "8736": [0, 0.69224, 0, 0],                                                                                  // 580
        "8739": [0.25, 0.75, 0, 0],                                                                                  // 581
        "8741": [0.25, 0.75, 0, 0],                                                                                  // 582
        "8743": [0, 0.55556, 0, 0],                                                                                  // 583
        "8744": [0, 0.55556, 0, 0],                                                                                  // 584
        "8745": [0, 0.55556, 0, 0],                                                                                  // 585
        "8746": [0, 0.55556, 0, 0],                                                                                  // 586
        "8747": [0.19444, 0.69444, 0.12778, 0],                                                                      // 587
        "8764": [-0.10889, 0.39111, 0, 0],                                                                           // 588
        "8768": [0.19444, 0.69444, 0, 0],                                                                            // 589
        "8771": [0.00222, 0.50222, 0, 0],                                                                            // 590
        "8776": [0.02444, 0.52444, 0, 0],                                                                            // 591
        "8781": [0.00222, 0.50222, 0, 0],                                                                            // 592
        "8801": [0.00222, 0.50222, 0, 0],                                                                            // 593
        "8804": [0.19667, 0.69667, 0, 0],                                                                            // 594
        "8805": [0.19667, 0.69667, 0, 0],                                                                            // 595
        "8810": [0.08556, 0.58556, 0, 0],                                                                            // 596
        "8811": [0.08556, 0.58556, 0, 0],                                                                            // 597
        "8826": [0.08556, 0.58556, 0, 0],                                                                            // 598
        "8827": [0.08556, 0.58556, 0, 0],                                                                            // 599
        "8834": [0.08556, 0.58556, 0, 0],                                                                            // 600
        "8835": [0.08556, 0.58556, 0, 0],                                                                            // 601
        "8838": [0.19667, 0.69667, 0, 0],                                                                            // 602
        "8839": [0.19667, 0.69667, 0, 0],                                                                            // 603
        "8846": [0, 0.55556, 0, 0],                                                                                  // 604
        "8849": [0.19667, 0.69667, 0, 0],                                                                            // 605
        "8850": [0.19667, 0.69667, 0, 0],                                                                            // 606
        "8851": [0, 0.55556, 0, 0],                                                                                  // 607
        "8852": [0, 0.55556, 0, 0],                                                                                  // 608
        "8853": [0.13333, 0.63333, 0, 0],                                                                            // 609
        "8854": [0.13333, 0.63333, 0, 0],                                                                            // 610
        "8855": [0.13333, 0.63333, 0, 0],                                                                            // 611
        "8856": [0.13333, 0.63333, 0, 0],                                                                            // 612
        "8857": [0.13333, 0.63333, 0, 0],                                                                            // 613
        "8866": [0, 0.69444, 0, 0],                                                                                  // 614
        "8867": [0, 0.69444, 0, 0],                                                                                  // 615
        "8868": [0, 0.69444, 0, 0],                                                                                  // 616
        "8869": [0, 0.69444, 0, 0],                                                                                  // 617
        "8900": [-0.02639, 0.47361, 0, 0],                                                                           // 618
        "8901": [-0.02639, 0.47361, 0, 0],                                                                           // 619
        "8902": [-0.02778, 0.47222, 0, 0],                                                                           // 620
        "8968": [0.25, 0.75, 0, 0],                                                                                  // 621
        "8969": [0.25, 0.75, 0, 0],                                                                                  // 622
        "8970": [0.25, 0.75, 0, 0],                                                                                  // 623
        "8971": [0.25, 0.75, 0, 0],                                                                                  // 624
        "8994": [-0.13889, 0.36111, 0, 0],                                                                           // 625
        "8995": [-0.13889, 0.36111, 0, 0],                                                                           // 626
        "9651": [0.19444, 0.69444, 0, 0],                                                                            // 627
        "9657": [-0.02778, 0.47222, 0, 0],                                                                           // 628
        "9661": [0.19444, 0.69444, 0, 0],                                                                            // 629
        "9667": [-0.02778, 0.47222, 0, 0],                                                                           // 630
        "9711": [0.19444, 0.69444, 0, 0],                                                                            // 631
        "9824": [0.12963, 0.69444, 0, 0],                                                                            // 632
        "9825": [0.12963, 0.69444, 0, 0],                                                                            // 633
        "9826": [0.12963, 0.69444, 0, 0],                                                                            // 634
        "9827": [0.12963, 0.69444, 0, 0],                                                                            // 635
        "9837": [0, 0.75, 0, 0],                                                                                     // 636
        "9838": [0.19444, 0.69444, 0, 0],                                                                            // 637
        "9839": [0.19444, 0.69444, 0, 0],                                                                            // 638
        "10216": [0.25, 0.75, 0, 0],                                                                                 // 639
        "10217": [0.25, 0.75, 0, 0],                                                                                 // 640
        "10815": [0, 0.68611, 0, 0],                                                                                 // 641
        "10927": [0.19667, 0.69667, 0, 0],                                                                           // 642
        "10928": [0.19667, 0.69667, 0, 0]                                                                            // 643
    },                                                                                                               // 644
    "Main-Italic": {                                                                                                 // 645
        "33": [0, 0.69444, 0.12417, 0],                                                                              // 646
        "34": [0, 0.69444, 0.06961, 0],                                                                              // 647
        "35": [0.19444, 0.69444, 0.06616, 0],                                                                        // 648
        "37": [0.05556, 0.75, 0.13639, 0],                                                                           // 649
        "38": [0, 0.69444, 0.09694, 0],                                                                              // 650
        "39": [0, 0.69444, 0.12417, 0],                                                                              // 651
        "40": [0.25, 0.75, 0.16194, 0],                                                                              // 652
        "41": [0.25, 0.75, 0.03694, 0],                                                                              // 653
        "42": [0, 0.75, 0.14917, 0],                                                                                 // 654
        "43": [0.05667, 0.56167, 0.03694, 0],                                                                        // 655
        "44": [0.19444, 0.10556, 0, 0],                                                                              // 656
        "45": [0, 0.43056, 0.02826, 0],                                                                              // 657
        "46": [0, 0.10556, 0, 0],                                                                                    // 658
        "47": [0.25, 0.75, 0.16194, 0],                                                                              // 659
        "48": [0, 0.64444, 0.13556, 0],                                                                              // 660
        "49": [0, 0.64444, 0.13556, 0],                                                                              // 661
        "50": [0, 0.64444, 0.13556, 0],                                                                              // 662
        "51": [0, 0.64444, 0.13556, 0],                                                                              // 663
        "52": [0.19444, 0.64444, 0.13556, 0],                                                                        // 664
        "53": [0, 0.64444, 0.13556, 0],                                                                              // 665
        "54": [0, 0.64444, 0.13556, 0],                                                                              // 666
        "55": [0.19444, 0.64444, 0.13556, 0],                                                                        // 667
        "56": [0, 0.64444, 0.13556, 0],                                                                              // 668
        "57": [0, 0.64444, 0.13556, 0],                                                                              // 669
        "58": [0, 0.43056, 0.0582, 0],                                                                               // 670
        "59": [0.19444, 0.43056, 0.0582, 0],                                                                         // 671
        "61": [-0.13313, 0.36687, 0.06616, 0],                                                                       // 672
        "63": [0, 0.69444, 0.1225, 0],                                                                               // 673
        "64": [0, 0.69444, 0.09597, 0],                                                                              // 674
        "65": [0, 0.68333, 0, 0],                                                                                    // 675
        "66": [0, 0.68333, 0.10257, 0],                                                                              // 676
        "67": [0, 0.68333, 0.14528, 0],                                                                              // 677
        "68": [0, 0.68333, 0.09403, 0],                                                                              // 678
        "69": [0, 0.68333, 0.12028, 0],                                                                              // 679
        "70": [0, 0.68333, 0.13305, 0],                                                                              // 680
        "71": [0, 0.68333, 0.08722, 0],                                                                              // 681
        "72": [0, 0.68333, 0.16389, 0],                                                                              // 682
        "73": [0, 0.68333, 0.15806, 0],                                                                              // 683
        "74": [0, 0.68333, 0.14028, 0],                                                                              // 684
        "75": [0, 0.68333, 0.14528, 0],                                                                              // 685
        "76": [0, 0.68333, 0, 0],                                                                                    // 686
        "77": [0, 0.68333, 0.16389, 0],                                                                              // 687
        "78": [0, 0.68333, 0.16389, 0],                                                                              // 688
        "79": [0, 0.68333, 0.09403, 0],                                                                              // 689
        "80": [0, 0.68333, 0.10257, 0],                                                                              // 690
        "81": [0.19444, 0.68333, 0.09403, 0],                                                                        // 691
        "82": [0, 0.68333, 0.03868, 0],                                                                              // 692
        "83": [0, 0.68333, 0.11972, 0],                                                                              // 693
        "84": [0, 0.68333, 0.13305, 0],                                                                              // 694
        "85": [0, 0.68333, 0.16389, 0],                                                                              // 695
        "86": [0, 0.68333, 0.18361, 0],                                                                              // 696
        "87": [0, 0.68333, 0.18361, 0],                                                                              // 697
        "88": [0, 0.68333, 0.15806, 0],                                                                              // 698
        "89": [0, 0.68333, 0.19383, 0],                                                                              // 699
        "90": [0, 0.68333, 0.14528, 0],                                                                              // 700
        "91": [0.25, 0.75, 0.1875, 0],                                                                               // 701
        "93": [0.25, 0.75, 0.10528, 0],                                                                              // 702
        "94": [0, 0.69444, 0.06646, 0],                                                                              // 703
        "95": [0.31, 0.12056, 0.09208, 0],                                                                           // 704
        "97": [0, 0.43056, 0.07671, 0],                                                                              // 705
        "98": [0, 0.69444, 0.06312, 0],                                                                              // 706
        "99": [0, 0.43056, 0.05653, 0],                                                                              // 707
        "100": [0, 0.69444, 0.10333, 0],                                                                             // 708
        "101": [0, 0.43056, 0.07514, 0],                                                                             // 709
        "102": [0.19444, 0.69444, 0.21194, 0],                                                                       // 710
        "103": [0.19444, 0.43056, 0.08847, 0],                                                                       // 711
        "104": [0, 0.69444, 0.07671, 0],                                                                             // 712
        "105": [0, 0.65536, 0.1019, 0],                                                                              // 713
        "106": [0.19444, 0.65536, 0.14467, 0],                                                                       // 714
        "107": [0, 0.69444, 0.10764, 0],                                                                             // 715
        "108": [0, 0.69444, 0.10333, 0],                                                                             // 716
        "109": [0, 0.43056, 0.07671, 0],                                                                             // 717
        "110": [0, 0.43056, 0.07671, 0],                                                                             // 718
        "111": [0, 0.43056, 0.06312, 0],                                                                             // 719
        "112": [0.19444, 0.43056, 0.06312, 0],                                                                       // 720
        "113": [0.19444, 0.43056, 0.08847, 0],                                                                       // 721
        "114": [0, 0.43056, 0.10764, 0],                                                                             // 722
        "115": [0, 0.43056, 0.08208, 0],                                                                             // 723
        "116": [0, 0.61508, 0.09486, 0],                                                                             // 724
        "117": [0, 0.43056, 0.07671, 0],                                                                             // 725
        "118": [0, 0.43056, 0.10764, 0],                                                                             // 726
        "119": [0, 0.43056, 0.10764, 0],                                                                             // 727
        "120": [0, 0.43056, 0.12042, 0],                                                                             // 728
        "121": [0.19444, 0.43056, 0.08847, 0],                                                                       // 729
        "122": [0, 0.43056, 0.12292, 0],                                                                             // 730
        "126": [0.35, 0.31786, 0.11585, 0],                                                                          // 731
        "163": [0, 0.69444, 0, 0],                                                                                   // 732
        "305": [0, 0.43056, 0, 0.02778],                                                                             // 733
        "567": [0.19444, 0.43056, 0, 0.08334],                                                                       // 734
        "768": [0, 0.69444, 0, 0],                                                                                   // 735
        "769": [0, 0.69444, 0.09694, 0],                                                                             // 736
        "770": [0, 0.69444, 0.06646, 0],                                                                             // 737
        "771": [0, 0.66786, 0.11585, 0],                                                                             // 738
        "772": [0, 0.56167, 0.10333, 0],                                                                             // 739
        "774": [0, 0.69444, 0.10806, 0],                                                                             // 740
        "775": [0, 0.66786, 0.11752, 0],                                                                             // 741
        "776": [0, 0.66786, 0.10474, 0],                                                                             // 742
        "778": [0, 0.69444, 0, 0],                                                                                   // 743
        "779": [0, 0.69444, 0.1225, 0],                                                                              // 744
        "780": [0, 0.62847, 0.08295, 0],                                                                             // 745
        "915": [0, 0.68333, 0.13305, 0],                                                                             // 746
        "916": [0, 0.68333, 0, 0],                                                                                   // 747
        "920": [0, 0.68333, 0.09403, 0],                                                                             // 748
        "923": [0, 0.68333, 0, 0],                                                                                   // 749
        "926": [0, 0.68333, 0.15294, 0],                                                                             // 750
        "928": [0, 0.68333, 0.16389, 0],                                                                             // 751
        "931": [0, 0.68333, 0.12028, 0],                                                                             // 752
        "933": [0, 0.68333, 0.11111, 0],                                                                             // 753
        "934": [0, 0.68333, 0.05986, 0],                                                                             // 754
        "936": [0, 0.68333, 0.11111, 0],                                                                             // 755
        "937": [0, 0.68333, 0.10257, 0],                                                                             // 756
        "8211": [0, 0.43056, 0.09208, 0],                                                                            // 757
        "8212": [0, 0.43056, 0.09208, 0],                                                                            // 758
        "8216": [0, 0.69444, 0.12417, 0],                                                                            // 759
        "8217": [0, 0.69444, 0.12417, 0],                                                                            // 760
        "8220": [0, 0.69444, 0.1685, 0],                                                                             // 761
        "8221": [0, 0.69444, 0.06961, 0],                                                                            // 762
        "8463": [0, 0.68889, 0, 0]                                                                                   // 763
    },                                                                                                               // 764
    "Main-Regular": {                                                                                                // 765
        "32": [0, 0, 0, 0],                                                                                          // 766
        "33": [0, 0.69444, 0, 0],                                                                                    // 767
        "34": [0, 0.69444, 0, 0],                                                                                    // 768
        "35": [0.19444, 0.69444, 0, 0],                                                                              // 769
        "36": [0.05556, 0.75, 0, 0],                                                                                 // 770
        "37": [0.05556, 0.75, 0, 0],                                                                                 // 771
        "38": [0, 0.69444, 0, 0],                                                                                    // 772
        "39": [0, 0.69444, 0, 0],                                                                                    // 773
        "40": [0.25, 0.75, 0, 0],                                                                                    // 774
        "41": [0.25, 0.75, 0, 0],                                                                                    // 775
        "42": [0, 0.75, 0, 0],                                                                                       // 776
        "43": [0.08333, 0.58333, 0, 0],                                                                              // 777
        "44": [0.19444, 0.10556, 0, 0],                                                                              // 778
        "45": [0, 0.43056, 0, 0],                                                                                    // 779
        "46": [0, 0.10556, 0, 0],                                                                                    // 780
        "47": [0.25, 0.75, 0, 0],                                                                                    // 781
        "48": [0, 0.64444, 0, 0],                                                                                    // 782
        "49": [0, 0.64444, 0, 0],                                                                                    // 783
        "50": [0, 0.64444, 0, 0],                                                                                    // 784
        "51": [0, 0.64444, 0, 0],                                                                                    // 785
        "52": [0, 0.64444, 0, 0],                                                                                    // 786
        "53": [0, 0.64444, 0, 0],                                                                                    // 787
        "54": [0, 0.64444, 0, 0],                                                                                    // 788
        "55": [0, 0.64444, 0, 0],                                                                                    // 789
        "56": [0, 0.64444, 0, 0],                                                                                    // 790
        "57": [0, 0.64444, 0, 0],                                                                                    // 791
        "58": [0, 0.43056, 0, 0],                                                                                    // 792
        "59": [0.19444, 0.43056, 0, 0],                                                                              // 793
        "60": [0.0391, 0.5391, 0, 0],                                                                                // 794
        "61": [-0.13313, 0.36687, 0, 0],                                                                             // 795
        "62": [0.0391, 0.5391, 0, 0],                                                                                // 796
        "63": [0, 0.69444, 0, 0],                                                                                    // 797
        "64": [0, 0.69444, 0, 0],                                                                                    // 798
        "65": [0, 0.68333, 0, 0],                                                                                    // 799
        "66": [0, 0.68333, 0, 0],                                                                                    // 800
        "67": [0, 0.68333, 0, 0],                                                                                    // 801
        "68": [0, 0.68333, 0, 0],                                                                                    // 802
        "69": [0, 0.68333, 0, 0],                                                                                    // 803
        "70": [0, 0.68333, 0, 0],                                                                                    // 804
        "71": [0, 0.68333, 0, 0],                                                                                    // 805
        "72": [0, 0.68333, 0, 0],                                                                                    // 806
        "73": [0, 0.68333, 0, 0],                                                                                    // 807
        "74": [0, 0.68333, 0, 0],                                                                                    // 808
        "75": [0, 0.68333, 0, 0],                                                                                    // 809
        "76": [0, 0.68333, 0, 0],                                                                                    // 810
        "77": [0, 0.68333, 0, 0],                                                                                    // 811
        "78": [0, 0.68333, 0, 0],                                                                                    // 812
        "79": [0, 0.68333, 0, 0],                                                                                    // 813
        "80": [0, 0.68333, 0, 0],                                                                                    // 814
        "81": [0.19444, 0.68333, 0, 0],                                                                              // 815
        "82": [0, 0.68333, 0, 0],                                                                                    // 816
        "83": [0, 0.68333, 0, 0],                                                                                    // 817
        "84": [0, 0.68333, 0, 0],                                                                                    // 818
        "85": [0, 0.68333, 0, 0],                                                                                    // 819
        "86": [0, 0.68333, 0.01389, 0],                                                                              // 820
        "87": [0, 0.68333, 0.01389, 0],                                                                              // 821
        "88": [0, 0.68333, 0, 0],                                                                                    // 822
        "89": [0, 0.68333, 0.025, 0],                                                                                // 823
        "90": [0, 0.68333, 0, 0],                                                                                    // 824
        "91": [0.25, 0.75, 0, 0],                                                                                    // 825
        "92": [0.25, 0.75, 0, 0],                                                                                    // 826
        "93": [0.25, 0.75, 0, 0],                                                                                    // 827
        "94": [0, 0.69444, 0, 0],                                                                                    // 828
        "95": [0.31, 0.12056, 0.02778, 0],                                                                           // 829
        "96": [0, 0.69444, 0, 0],                                                                                    // 830
        "97": [0, 0.43056, 0, 0],                                                                                    // 831
        "98": [0, 0.69444, 0, 0],                                                                                    // 832
        "99": [0, 0.43056, 0, 0],                                                                                    // 833
        "100": [0, 0.69444, 0, 0],                                                                                   // 834
        "101": [0, 0.43056, 0, 0],                                                                                   // 835
        "102": [0, 0.69444, 0.07778, 0],                                                                             // 836
        "103": [0.19444, 0.43056, 0.01389, 0],                                                                       // 837
        "104": [0, 0.69444, 0, 0],                                                                                   // 838
        "105": [0, 0.66786, 0, 0],                                                                                   // 839
        "106": [0.19444, 0.66786, 0, 0],                                                                             // 840
        "107": [0, 0.69444, 0, 0],                                                                                   // 841
        "108": [0, 0.69444, 0, 0],                                                                                   // 842
        "109": [0, 0.43056, 0, 0],                                                                                   // 843
        "110": [0, 0.43056, 0, 0],                                                                                   // 844
        "111": [0, 0.43056, 0, 0],                                                                                   // 845
        "112": [0.19444, 0.43056, 0, 0],                                                                             // 846
        "113": [0.19444, 0.43056, 0, 0],                                                                             // 847
        "114": [0, 0.43056, 0, 0],                                                                                   // 848
        "115": [0, 0.43056, 0, 0],                                                                                   // 849
        "116": [0, 0.61508, 0, 0],                                                                                   // 850
        "117": [0, 0.43056, 0, 0],                                                                                   // 851
        "118": [0, 0.43056, 0.01389, 0],                                                                             // 852
        "119": [0, 0.43056, 0.01389, 0],                                                                             // 853
        "120": [0, 0.43056, 0, 0],                                                                                   // 854
        "121": [0.19444, 0.43056, 0.01389, 0],                                                                       // 855
        "122": [0, 0.43056, 0, 0],                                                                                   // 856
        "123": [0.25, 0.75, 0, 0],                                                                                   // 857
        "124": [0.25, 0.75, 0, 0],                                                                                   // 858
        "125": [0.25, 0.75, 0, 0],                                                                                   // 859
        "126": [0.35, 0.31786, 0, 0],                                                                                // 860
        "160": [0, 0, 0, 0],                                                                                         // 861
        "168": [0, 0.66786, 0, 0],                                                                                   // 862
        "172": [0, 0.43056, 0, 0],                                                                                   // 863
        "175": [0, 0.56778, 0, 0],                                                                                   // 864
        "176": [0, 0.69444, 0, 0],                                                                                   // 865
        "177": [0.08333, 0.58333, 0, 0],                                                                             // 866
        "180": [0, 0.69444, 0, 0],                                                                                   // 867
        "215": [0.08333, 0.58333, 0, 0],                                                                             // 868
        "247": [0.08333, 0.58333, 0, 0],                                                                             // 869
        "305": [0, 0.43056, 0, 0],                                                                                   // 870
        "567": [0.19444, 0.43056, 0, 0],                                                                             // 871
        "710": [0, 0.69444, 0, 0],                                                                                   // 872
        "711": [0, 0.62847, 0, 0],                                                                                   // 873
        "713": [0, 0.56778, 0, 0],                                                                                   // 874
        "714": [0, 0.69444, 0, 0],                                                                                   // 875
        "715": [0, 0.69444, 0, 0],                                                                                   // 876
        "728": [0, 0.69444, 0, 0],                                                                                   // 877
        "729": [0, 0.66786, 0, 0],                                                                                   // 878
        "730": [0, 0.69444, 0, 0],                                                                                   // 879
        "732": [0, 0.66786, 0, 0],                                                                                   // 880
        "768": [0, 0.69444, 0, 0],                                                                                   // 881
        "769": [0, 0.69444, 0, 0],                                                                                   // 882
        "770": [0, 0.69444, 0, 0],                                                                                   // 883
        "771": [0, 0.66786, 0, 0],                                                                                   // 884
        "772": [0, 0.56778, 0, 0],                                                                                   // 885
        "774": [0, 0.69444, 0, 0],                                                                                   // 886
        "775": [0, 0.66786, 0, 0],                                                                                   // 887
        "776": [0, 0.66786, 0, 0],                                                                                   // 888
        "778": [0, 0.69444, 0, 0],                                                                                   // 889
        "779": [0, 0.69444, 0, 0],                                                                                   // 890
        "780": [0, 0.62847, 0, 0],                                                                                   // 891
        "824": [0.19444, 0.69444, 0, 0],                                                                             // 892
        "915": [0, 0.68333, 0, 0],                                                                                   // 893
        "916": [0, 0.68333, 0, 0],                                                                                   // 894
        "920": [0, 0.68333, 0, 0],                                                                                   // 895
        "923": [0, 0.68333, 0, 0],                                                                                   // 896
        "926": [0, 0.68333, 0, 0],                                                                                   // 897
        "928": [0, 0.68333, 0, 0],                                                                                   // 898
        "931": [0, 0.68333, 0, 0],                                                                                   // 899
        "933": [0, 0.68333, 0, 0],                                                                                   // 900
        "934": [0, 0.68333, 0, 0],                                                                                   // 901
        "936": [0, 0.68333, 0, 0],                                                                                   // 902
        "937": [0, 0.68333, 0, 0],                                                                                   // 903
        "8211": [0, 0.43056, 0.02778, 0],                                                                            // 904
        "8212": [0, 0.43056, 0.02778, 0],                                                                            // 905
        "8216": [0, 0.69444, 0, 0],                                                                                  // 906
        "8217": [0, 0.69444, 0, 0],                                                                                  // 907
        "8220": [0, 0.69444, 0, 0],                                                                                  // 908
        "8221": [0, 0.69444, 0, 0],                                                                                  // 909
        "8224": [0.19444, 0.69444, 0, 0],                                                                            // 910
        "8225": [0.19444, 0.69444, 0, 0],                                                                            // 911
        "8230": [0, 0.12, 0, 0],                                                                                     // 912
        "8242": [0, 0.55556, 0, 0],                                                                                  // 913
        "8407": [0, 0.71444, 0.15382, 0],                                                                            // 914
        "8463": [0, 0.68889, 0, 0],                                                                                  // 915
        "8465": [0, 0.69444, 0, 0],                                                                                  // 916
        "8467": [0, 0.69444, 0, 0.11111],                                                                            // 917
        "8472": [0.19444, 0.43056, 0, 0.11111],                                                                      // 918
        "8476": [0, 0.69444, 0, 0],                                                                                  // 919
        "8501": [0, 0.69444, 0, 0],                                                                                  // 920
        "8592": [-0.13313, 0.36687, 0, 0],                                                                           // 921
        "8593": [0.19444, 0.69444, 0, 0],                                                                            // 922
        "8594": [-0.13313, 0.36687, 0, 0],                                                                           // 923
        "8595": [0.19444, 0.69444, 0, 0],                                                                            // 924
        "8596": [-0.13313, 0.36687, 0, 0],                                                                           // 925
        "8597": [0.25, 0.75, 0, 0],                                                                                  // 926
        "8598": [0.19444, 0.69444, 0, 0],                                                                            // 927
        "8599": [0.19444, 0.69444, 0, 0],                                                                            // 928
        "8600": [0.19444, 0.69444, 0, 0],                                                                            // 929
        "8601": [0.19444, 0.69444, 0, 0],                                                                            // 930
        "8614": [0.011, 0.511, 0, 0],                                                                                // 931
        "8617": [0.011, 0.511, 0, 0],                                                                                // 932
        "8618": [0.011, 0.511, 0, 0],                                                                                // 933
        "8636": [-0.13313, 0.36687, 0, 0],                                                                           // 934
        "8637": [-0.13313, 0.36687, 0, 0],                                                                           // 935
        "8640": [-0.13313, 0.36687, 0, 0],                                                                           // 936
        "8641": [-0.13313, 0.36687, 0, 0],                                                                           // 937
        "8652": [0.011, 0.671, 0, 0],                                                                                // 938
        "8656": [-0.13313, 0.36687, 0, 0],                                                                           // 939
        "8657": [0.19444, 0.69444, 0, 0],                                                                            // 940
        "8658": [-0.13313, 0.36687, 0, 0],                                                                           // 941
        "8659": [0.19444, 0.69444, 0, 0],                                                                            // 942
        "8660": [-0.13313, 0.36687, 0, 0],                                                                           // 943
        "8661": [0.25, 0.75, 0, 0],                                                                                  // 944
        "8704": [0, 0.69444, 0, 0],                                                                                  // 945
        "8706": [0, 0.69444, 0.05556, 0.08334],                                                                      // 946
        "8707": [0, 0.69444, 0, 0],                                                                                  // 947
        "8709": [0.05556, 0.75, 0, 0],                                                                               // 948
        "8711": [0, 0.68333, 0, 0],                                                                                  // 949
        "8712": [0.0391, 0.5391, 0, 0],                                                                              // 950
        "8715": [0.0391, 0.5391, 0, 0],                                                                              // 951
        "8722": [0.08333, 0.58333, 0, 0],                                                                            // 952
        "8723": [0.08333, 0.58333, 0, 0],                                                                            // 953
        "8725": [0.25, 0.75, 0, 0],                                                                                  // 954
        "8726": [0.25, 0.75, 0, 0],                                                                                  // 955
        "8727": [-0.03472, 0.46528, 0, 0],                                                                           // 956
        "8728": [-0.05555, 0.44445, 0, 0],                                                                           // 957
        "8729": [-0.05555, 0.44445, 0, 0],                                                                           // 958
        "8730": [0.2, 0.8, 0, 0],                                                                                    // 959
        "8733": [0, 0.43056, 0, 0],                                                                                  // 960
        "8734": [0, 0.43056, 0, 0],                                                                                  // 961
        "8736": [0, 0.69224, 0, 0],                                                                                  // 962
        "8739": [0.25, 0.75, 0, 0],                                                                                  // 963
        "8741": [0.25, 0.75, 0, 0],                                                                                  // 964
        "8743": [0, 0.55556, 0, 0],                                                                                  // 965
        "8744": [0, 0.55556, 0, 0],                                                                                  // 966
        "8745": [0, 0.55556, 0, 0],                                                                                  // 967
        "8746": [0, 0.55556, 0, 0],                                                                                  // 968
        "8747": [0.19444, 0.69444, 0.11111, 0],                                                                      // 969
        "8764": [-0.13313, 0.36687, 0, 0],                                                                           // 970
        "8768": [0.19444, 0.69444, 0, 0],                                                                            // 971
        "8771": [-0.03625, 0.46375, 0, 0],                                                                           // 972
        "8773": [-0.022, 0.589, 0, 0],                                                                               // 973
        "8776": [-0.01688, 0.48312, 0, 0],                                                                           // 974
        "8781": [-0.03625, 0.46375, 0, 0],                                                                           // 975
        "8784": [-0.133, 0.67, 0, 0],                                                                                // 976
        "8800": [0.215, 0.716, 0, 0],                                                                                // 977
        "8801": [-0.03625, 0.46375, 0, 0],                                                                           // 978
        "8804": [0.13597, 0.63597, 0, 0],                                                                            // 979
        "8805": [0.13597, 0.63597, 0, 0],                                                                            // 980
        "8810": [0.0391, 0.5391, 0, 0],                                                                              // 981
        "8811": [0.0391, 0.5391, 0, 0],                                                                              // 982
        "8826": [0.0391, 0.5391, 0, 0],                                                                              // 983
        "8827": [0.0391, 0.5391, 0, 0],                                                                              // 984
        "8834": [0.0391, 0.5391, 0, 0],                                                                              // 985
        "8835": [0.0391, 0.5391, 0, 0],                                                                              // 986
        "8838": [0.13597, 0.63597, 0, 0],                                                                            // 987
        "8839": [0.13597, 0.63597, 0, 0],                                                                            // 988
        "8846": [0, 0.55556, 0, 0],                                                                                  // 989
        "8849": [0.13597, 0.63597, 0, 0],                                                                            // 990
        "8850": [0.13597, 0.63597, 0, 0],                                                                            // 991
        "8851": [0, 0.55556, 0, 0],                                                                                  // 992
        "8852": [0, 0.55556, 0, 0],                                                                                  // 993
        "8853": [0.08333, 0.58333, 0, 0],                                                                            // 994
        "8854": [0.08333, 0.58333, 0, 0],                                                                            // 995
        "8855": [0.08333, 0.58333, 0, 0],                                                                            // 996
        "8856": [0.08333, 0.58333, 0, 0],                                                                            // 997
        "8857": [0.08333, 0.58333, 0, 0],                                                                            // 998
        "8866": [0, 0.69444, 0, 0],                                                                                  // 999
        "8867": [0, 0.69444, 0, 0],                                                                                  // 1000
        "8868": [0, 0.69444, 0, 0],                                                                                  // 1001
        "8869": [0, 0.69444, 0, 0],                                                                                  // 1002
        "8872": [0.249, 0.75, 0, 0],                                                                                 // 1003
        "8900": [-0.05555, 0.44445, 0, 0],                                                                           // 1004
        "8901": [-0.05555, 0.44445, 0, 0],                                                                           // 1005
        "8902": [-0.03472, 0.46528, 0, 0],                                                                           // 1006
        "8904": [0.005, 0.505, 0, 0],                                                                                // 1007
        "8942": [0.03, 0.9, 0, 0],                                                                                   // 1008
        "8943": [-0.19, 0.31, 0, 0],                                                                                 // 1009
        "8945": [-0.1, 0.82, 0, 0],                                                                                  // 1010
        "8968": [0.25, 0.75, 0, 0],                                                                                  // 1011
        "8969": [0.25, 0.75, 0, 0],                                                                                  // 1012
        "8970": [0.25, 0.75, 0, 0],                                                                                  // 1013
        "8971": [0.25, 0.75, 0, 0],                                                                                  // 1014
        "8994": [-0.14236, 0.35764, 0, 0],                                                                           // 1015
        "8995": [-0.14236, 0.35764, 0, 0],                                                                           // 1016
        "9136": [0.244, 0.744, 0, 0],                                                                                // 1017
        "9137": [0.244, 0.744, 0, 0],                                                                                // 1018
        "9651": [0.19444, 0.69444, 0, 0],                                                                            // 1019
        "9657": [-0.03472, 0.46528, 0, 0],                                                                           // 1020
        "9661": [0.19444, 0.69444, 0, 0],                                                                            // 1021
        "9667": [-0.03472, 0.46528, 0, 0],                                                                           // 1022
        "9711": [0.19444, 0.69444, 0, 0],                                                                            // 1023
        "9824": [0.12963, 0.69444, 0, 0],                                                                            // 1024
        "9825": [0.12963, 0.69444, 0, 0],                                                                            // 1025
        "9826": [0.12963, 0.69444, 0, 0],                                                                            // 1026
        "9827": [0.12963, 0.69444, 0, 0],                                                                            // 1027
        "9837": [0, 0.75, 0, 0],                                                                                     // 1028
        "9838": [0.19444, 0.69444, 0, 0],                                                                            // 1029
        "9839": [0.19444, 0.69444, 0, 0],                                                                            // 1030
        "10216": [0.25, 0.75, 0, 0],                                                                                 // 1031
        "10217": [0.25, 0.75, 0, 0],                                                                                 // 1032
        "10222": [0.244, 0.744, 0, 0],                                                                               // 1033
        "10223": [0.244, 0.744, 0, 0],                                                                               // 1034
        "10229": [0.011, 0.511, 0, 0],                                                                               // 1035
        "10230": [0.011, 0.511, 0, 0],                                                                               // 1036
        "10231": [0.011, 0.511, 0, 0],                                                                               // 1037
        "10232": [0.024, 0.525, 0, 0],                                                                               // 1038
        "10233": [0.024, 0.525, 0, 0],                                                                               // 1039
        "10234": [0.024, 0.525, 0, 0],                                                                               // 1040
        "10236": [0.011, 0.511, 0, 0],                                                                               // 1041
        "10815": [0, 0.68333, 0, 0],                                                                                 // 1042
        "10927": [0.13597, 0.63597, 0, 0],                                                                           // 1043
        "10928": [0.13597, 0.63597, 0, 0]                                                                            // 1044
    },                                                                                                               // 1045
    "Math-BoldItalic": {                                                                                             // 1046
        "47": [0.19444, 0.69444, 0, 0],                                                                              // 1047
        "65": [0, 0.68611, 0, 0],                                                                                    // 1048
        "66": [0, 0.68611, 0.04835, 0],                                                                              // 1049
        "67": [0, 0.68611, 0.06979, 0],                                                                              // 1050
        "68": [0, 0.68611, 0.03194, 0],                                                                              // 1051
        "69": [0, 0.68611, 0.05451, 0],                                                                              // 1052
        "70": [0, 0.68611, 0.15972, 0],                                                                              // 1053
        "71": [0, 0.68611, 0, 0],                                                                                    // 1054
        "72": [0, 0.68611, 0.08229, 0],                                                                              // 1055
        "73": [0, 0.68611, 0.07778, 0],                                                                              // 1056
        "74": [0, 0.68611, 0.10069, 0],                                                                              // 1057
        "75": [0, 0.68611, 0.06979, 0],                                                                              // 1058
        "76": [0, 0.68611, 0, 0],                                                                                    // 1059
        "77": [0, 0.68611, 0.11424, 0],                                                                              // 1060
        "78": [0, 0.68611, 0.11424, 0],                                                                              // 1061
        "79": [0, 0.68611, 0.03194, 0],                                                                              // 1062
        "80": [0, 0.68611, 0.15972, 0],                                                                              // 1063
        "81": [0.19444, 0.68611, 0, 0],                                                                              // 1064
        "82": [0, 0.68611, 0.00421, 0],                                                                              // 1065
        "83": [0, 0.68611, 0.05382, 0],                                                                              // 1066
        "84": [0, 0.68611, 0.15972, 0],                                                                              // 1067
        "85": [0, 0.68611, 0.11424, 0],                                                                              // 1068
        "86": [0, 0.68611, 0.25555, 0],                                                                              // 1069
        "87": [0, 0.68611, 0.15972, 0],                                                                              // 1070
        "88": [0, 0.68611, 0.07778, 0],                                                                              // 1071
        "89": [0, 0.68611, 0.25555, 0],                                                                              // 1072
        "90": [0, 0.68611, 0.06979, 0],                                                                              // 1073
        "97": [0, 0.44444, 0, 0],                                                                                    // 1074
        "98": [0, 0.69444, 0, 0],                                                                                    // 1075
        "99": [0, 0.44444, 0, 0],                                                                                    // 1076
        "100": [0, 0.69444, 0, 0],                                                                                   // 1077
        "101": [0, 0.44444, 0, 0],                                                                                   // 1078
        "102": [0.19444, 0.69444, 0.11042, 0],                                                                       // 1079
        "103": [0.19444, 0.44444, 0.03704, 0],                                                                       // 1080
        "104": [0, 0.69444, 0, 0],                                                                                   // 1081
        "105": [0, 0.69326, 0, 0],                                                                                   // 1082
        "106": [0.19444, 0.69326, 0.0622, 0],                                                                        // 1083
        "107": [0, 0.69444, 0.01852, 0],                                                                             // 1084
        "108": [0, 0.69444, 0.0088, 0],                                                                              // 1085
        "109": [0, 0.44444, 0, 0],                                                                                   // 1086
        "110": [0, 0.44444, 0, 0],                                                                                   // 1087
        "111": [0, 0.44444, 0, 0],                                                                                   // 1088
        "112": [0.19444, 0.44444, 0, 0],                                                                             // 1089
        "113": [0.19444, 0.44444, 0.03704, 0],                                                                       // 1090
        "114": [0, 0.44444, 0.03194, 0],                                                                             // 1091
        "115": [0, 0.44444, 0, 0],                                                                                   // 1092
        "116": [0, 0.63492, 0, 0],                                                                                   // 1093
        "117": [0, 0.44444, 0, 0],                                                                                   // 1094
        "118": [0, 0.44444, 0.03704, 0],                                                                             // 1095
        "119": [0, 0.44444, 0.02778, 0],                                                                             // 1096
        "120": [0, 0.44444, 0, 0],                                                                                   // 1097
        "121": [0.19444, 0.44444, 0.03704, 0],                                                                       // 1098
        "122": [0, 0.44444, 0.04213, 0],                                                                             // 1099
        "915": [0, 0.68611, 0.15972, 0],                                                                             // 1100
        "916": [0, 0.68611, 0, 0],                                                                                   // 1101
        "920": [0, 0.68611, 0.03194, 0],                                                                             // 1102
        "923": [0, 0.68611, 0, 0],                                                                                   // 1103
        "926": [0, 0.68611, 0.07458, 0],                                                                             // 1104
        "928": [0, 0.68611, 0.08229, 0],                                                                             // 1105
        "931": [0, 0.68611, 0.05451, 0],                                                                             // 1106
        "933": [0, 0.68611, 0.15972, 0],                                                                             // 1107
        "934": [0, 0.68611, 0, 0],                                                                                   // 1108
        "936": [0, 0.68611, 0.11653, 0],                                                                             // 1109
        "937": [0, 0.68611, 0.04835, 0],                                                                             // 1110
        "945": [0, 0.44444, 0, 0],                                                                                   // 1111
        "946": [0.19444, 0.69444, 0.03403, 0],                                                                       // 1112
        "947": [0.19444, 0.44444, 0.06389, 0],                                                                       // 1113
        "948": [0, 0.69444, 0.03819, 0],                                                                             // 1114
        "949": [0, 0.44444, 0, 0],                                                                                   // 1115
        "950": [0.19444, 0.69444, 0.06215, 0],                                                                       // 1116
        "951": [0.19444, 0.44444, 0.03704, 0],                                                                       // 1117
        "952": [0, 0.69444, 0.03194, 0],                                                                             // 1118
        "953": [0, 0.44444, 0, 0],                                                                                   // 1119
        "954": [0, 0.44444, 0, 0],                                                                                   // 1120
        "955": [0, 0.69444, 0, 0],                                                                                   // 1121
        "956": [0.19444, 0.44444, 0, 0],                                                                             // 1122
        "957": [0, 0.44444, 0.06898, 0],                                                                             // 1123
        "958": [0.19444, 0.69444, 0.03021, 0],                                                                       // 1124
        "959": [0, 0.44444, 0, 0],                                                                                   // 1125
        "960": [0, 0.44444, 0.03704, 0],                                                                             // 1126
        "961": [0.19444, 0.44444, 0, 0],                                                                             // 1127
        "962": [0.09722, 0.44444, 0.07917, 0],                                                                       // 1128
        "963": [0, 0.44444, 0.03704, 0],                                                                             // 1129
        "964": [0, 0.44444, 0.13472, 0],                                                                             // 1130
        "965": [0, 0.44444, 0.03704, 0],                                                                             // 1131
        "966": [0.19444, 0.44444, 0, 0],                                                                             // 1132
        "967": [0.19444, 0.44444, 0, 0],                                                                             // 1133
        "968": [0.19444, 0.69444, 0.03704, 0],                                                                       // 1134
        "969": [0, 0.44444, 0.03704, 0],                                                                             // 1135
        "977": [0, 0.69444, 0, 0],                                                                                   // 1136
        "981": [0.19444, 0.69444, 0, 0],                                                                             // 1137
        "982": [0, 0.44444, 0.03194, 0],                                                                             // 1138
        "1009": [0.19444, 0.44444, 0, 0],                                                                            // 1139
        "1013": [0, 0.44444, 0, 0]                                                                                   // 1140
    },                                                                                                               // 1141
    "Math-Italic": {                                                                                                 // 1142
        "47": [0.19444, 0.69444, 0, 0],                                                                              // 1143
        "65": [0, 0.68333, 0, 0.13889],                                                                              // 1144
        "66": [0, 0.68333, 0.05017, 0.08334],                                                                        // 1145
        "67": [0, 0.68333, 0.07153, 0.08334],                                                                        // 1146
        "68": [0, 0.68333, 0.02778, 0.05556],                                                                        // 1147
        "69": [0, 0.68333, 0.05764, 0.08334],                                                                        // 1148
        "70": [0, 0.68333, 0.13889, 0.08334],                                                                        // 1149
        "71": [0, 0.68333, 0, 0.08334],                                                                              // 1150
        "72": [0, 0.68333, 0.08125, 0.05556],                                                                        // 1151
        "73": [0, 0.68333, 0.07847, 0.11111],                                                                        // 1152
        "74": [0, 0.68333, 0.09618, 0.16667],                                                                        // 1153
        "75": [0, 0.68333, 0.07153, 0.05556],                                                                        // 1154
        "76": [0, 0.68333, 0, 0.02778],                                                                              // 1155
        "77": [0, 0.68333, 0.10903, 0.08334],                                                                        // 1156
        "78": [0, 0.68333, 0.10903, 0.08334],                                                                        // 1157
        "79": [0, 0.68333, 0.02778, 0.08334],                                                                        // 1158
        "80": [0, 0.68333, 0.13889, 0.08334],                                                                        // 1159
        "81": [0.19444, 0.68333, 0, 0.08334],                                                                        // 1160
        "82": [0, 0.68333, 0.00773, 0.08334],                                                                        // 1161
        "83": [0, 0.68333, 0.05764, 0.08334],                                                                        // 1162
        "84": [0, 0.68333, 0.13889, 0.08334],                                                                        // 1163
        "85": [0, 0.68333, 0.10903, 0.02778],                                                                        // 1164
        "86": [0, 0.68333, 0.22222, 0],                                                                              // 1165
        "87": [0, 0.68333, 0.13889, 0],                                                                              // 1166
        "88": [0, 0.68333, 0.07847, 0.08334],                                                                        // 1167
        "89": [0, 0.68333, 0.22222, 0],                                                                              // 1168
        "90": [0, 0.68333, 0.07153, 0.08334],                                                                        // 1169
        "97": [0, 0.43056, 0, 0],                                                                                    // 1170
        "98": [0, 0.69444, 0, 0],                                                                                    // 1171
        "99": [0, 0.43056, 0, 0.05556],                                                                              // 1172
        "100": [0, 0.69444, 0, 0.16667],                                                                             // 1173
        "101": [0, 0.43056, 0, 0.05556],                                                                             // 1174
        "102": [0.19444, 0.69444, 0.10764, 0.16667],                                                                 // 1175
        "103": [0.19444, 0.43056, 0.03588, 0.02778],                                                                 // 1176
        "104": [0, 0.69444, 0, 0],                                                                                   // 1177
        "105": [0, 0.65952, 0, 0],                                                                                   // 1178
        "106": [0.19444, 0.65952, 0.05724, 0],                                                                       // 1179
        "107": [0, 0.69444, 0.03148, 0],                                                                             // 1180
        "108": [0, 0.69444, 0.01968, 0.08334],                                                                       // 1181
        "109": [0, 0.43056, 0, 0],                                                                                   // 1182
        "110": [0, 0.43056, 0, 0],                                                                                   // 1183
        "111": [0, 0.43056, 0, 0.05556],                                                                             // 1184
        "112": [0.19444, 0.43056, 0, 0.08334],                                                                       // 1185
        "113": [0.19444, 0.43056, 0.03588, 0.08334],                                                                 // 1186
        "114": [0, 0.43056, 0.02778, 0.05556],                                                                       // 1187
        "115": [0, 0.43056, 0, 0.05556],                                                                             // 1188
        "116": [0, 0.61508, 0, 0.08334],                                                                             // 1189
        "117": [0, 0.43056, 0, 0.02778],                                                                             // 1190
        "118": [0, 0.43056, 0.03588, 0.02778],                                                                       // 1191
        "119": [0, 0.43056, 0.02691, 0.08334],                                                                       // 1192
        "120": [0, 0.43056, 0, 0.02778],                                                                             // 1193
        "121": [0.19444, 0.43056, 0.03588, 0.05556],                                                                 // 1194
        "122": [0, 0.43056, 0.04398, 0.05556],                                                                       // 1195
        "915": [0, 0.68333, 0.13889, 0.08334],                                                                       // 1196
        "916": [0, 0.68333, 0, 0.16667],                                                                             // 1197
        "920": [0, 0.68333, 0.02778, 0.08334],                                                                       // 1198
        "923": [0, 0.68333, 0, 0.16667],                                                                             // 1199
        "926": [0, 0.68333, 0.07569, 0.08334],                                                                       // 1200
        "928": [0, 0.68333, 0.08125, 0.05556],                                                                       // 1201
        "931": [0, 0.68333, 0.05764, 0.08334],                                                                       // 1202
        "933": [0, 0.68333, 0.13889, 0.05556],                                                                       // 1203
        "934": [0, 0.68333, 0, 0.08334],                                                                             // 1204
        "936": [0, 0.68333, 0.11, 0.05556],                                                                          // 1205
        "937": [0, 0.68333, 0.05017, 0.08334],                                                                       // 1206
        "945": [0, 0.43056, 0.0037, 0.02778],                                                                        // 1207
        "946": [0.19444, 0.69444, 0.05278, 0.08334],                                                                 // 1208
        "947": [0.19444, 0.43056, 0.05556, 0],                                                                       // 1209
        "948": [0, 0.69444, 0.03785, 0.05556],                                                                       // 1210
        "949": [0, 0.43056, 0, 0.08334],                                                                             // 1211
        "950": [0.19444, 0.69444, 0.07378, 0.08334],                                                                 // 1212
        "951": [0.19444, 0.43056, 0.03588, 0.05556],                                                                 // 1213
        "952": [0, 0.69444, 0.02778, 0.08334],                                                                       // 1214
        "953": [0, 0.43056, 0, 0.05556],                                                                             // 1215
        "954": [0, 0.43056, 0, 0],                                                                                   // 1216
        "955": [0, 0.69444, 0, 0],                                                                                   // 1217
        "956": [0.19444, 0.43056, 0, 0.02778],                                                                       // 1218
        "957": [0, 0.43056, 0.06366, 0.02778],                                                                       // 1219
        "958": [0.19444, 0.69444, 0.04601, 0.11111],                                                                 // 1220
        "959": [0, 0.43056, 0, 0.05556],                                                                             // 1221
        "960": [0, 0.43056, 0.03588, 0],                                                                             // 1222
        "961": [0.19444, 0.43056, 0, 0.08334],                                                                       // 1223
        "962": [0.09722, 0.43056, 0.07986, 0.08334],                                                                 // 1224
        "963": [0, 0.43056, 0.03588, 0],                                                                             // 1225
        "964": [0, 0.43056, 0.1132, 0.02778],                                                                        // 1226
        "965": [0, 0.43056, 0.03588, 0.02778],                                                                       // 1227
        "966": [0.19444, 0.43056, 0, 0.08334],                                                                       // 1228
        "967": [0.19444, 0.43056, 0, 0.05556],                                                                       // 1229
        "968": [0.19444, 0.69444, 0.03588, 0.11111],                                                                 // 1230
        "969": [0, 0.43056, 0.03588, 0],                                                                             // 1231
        "977": [0, 0.69444, 0, 0.08334],                                                                             // 1232
        "981": [0.19444, 0.69444, 0, 0.08334],                                                                       // 1233
        "982": [0, 0.43056, 0.02778, 0],                                                                             // 1234
        "1009": [0.19444, 0.43056, 0, 0.08334],                                                                      // 1235
        "1013": [0, 0.43056, 0, 0.05556]                                                                             // 1236
    },                                                                                                               // 1237
    "Math-Regular": {                                                                                                // 1238
        "65": [0, 0.68333, 0, 0.13889],                                                                              // 1239
        "66": [0, 0.68333, 0.05017, 0.08334],                                                                        // 1240
        "67": [0, 0.68333, 0.07153, 0.08334],                                                                        // 1241
        "68": [0, 0.68333, 0.02778, 0.05556],                                                                        // 1242
        "69": [0, 0.68333, 0.05764, 0.08334],                                                                        // 1243
        "70": [0, 0.68333, 0.13889, 0.08334],                                                                        // 1244
        "71": [0, 0.68333, 0, 0.08334],                                                                              // 1245
        "72": [0, 0.68333, 0.08125, 0.05556],                                                                        // 1246
        "73": [0, 0.68333, 0.07847, 0.11111],                                                                        // 1247
        "74": [0, 0.68333, 0.09618, 0.16667],                                                                        // 1248
        "75": [0, 0.68333, 0.07153, 0.05556],                                                                        // 1249
        "76": [0, 0.68333, 0, 0.02778],                                                                              // 1250
        "77": [0, 0.68333, 0.10903, 0.08334],                                                                        // 1251
        "78": [0, 0.68333, 0.10903, 0.08334],                                                                        // 1252
        "79": [0, 0.68333, 0.02778, 0.08334],                                                                        // 1253
        "80": [0, 0.68333, 0.13889, 0.08334],                                                                        // 1254
        "81": [0.19444, 0.68333, 0, 0.08334],                                                                        // 1255
        "82": [0, 0.68333, 0.00773, 0.08334],                                                                        // 1256
        "83": [0, 0.68333, 0.05764, 0.08334],                                                                        // 1257
        "84": [0, 0.68333, 0.13889, 0.08334],                                                                        // 1258
        "85": [0, 0.68333, 0.10903, 0.02778],                                                                        // 1259
        "86": [0, 0.68333, 0.22222, 0],                                                                              // 1260
        "87": [0, 0.68333, 0.13889, 0],                                                                              // 1261
        "88": [0, 0.68333, 0.07847, 0.08334],                                                                        // 1262
        "89": [0, 0.68333, 0.22222, 0],                                                                              // 1263
        "90": [0, 0.68333, 0.07153, 0.08334],                                                                        // 1264
        "97": [0, 0.43056, 0, 0],                                                                                    // 1265
        "98": [0, 0.69444, 0, 0],                                                                                    // 1266
        "99": [0, 0.43056, 0, 0.05556],                                                                              // 1267
        "100": [0, 0.69444, 0, 0.16667],                                                                             // 1268
        "101": [0, 0.43056, 0, 0.05556],                                                                             // 1269
        "102": [0.19444, 0.69444, 0.10764, 0.16667],                                                                 // 1270
        "103": [0.19444, 0.43056, 0.03588, 0.02778],                                                                 // 1271
        "104": [0, 0.69444, 0, 0],                                                                                   // 1272
        "105": [0, 0.65952, 0, 0],                                                                                   // 1273
        "106": [0.19444, 0.65952, 0.05724, 0],                                                                       // 1274
        "107": [0, 0.69444, 0.03148, 0],                                                                             // 1275
        "108": [0, 0.69444, 0.01968, 0.08334],                                                                       // 1276
        "109": [0, 0.43056, 0, 0],                                                                                   // 1277
        "110": [0, 0.43056, 0, 0],                                                                                   // 1278
        "111": [0, 0.43056, 0, 0.05556],                                                                             // 1279
        "112": [0.19444, 0.43056, 0, 0.08334],                                                                       // 1280
        "113": [0.19444, 0.43056, 0.03588, 0.08334],                                                                 // 1281
        "114": [0, 0.43056, 0.02778, 0.05556],                                                                       // 1282
        "115": [0, 0.43056, 0, 0.05556],                                                                             // 1283
        "116": [0, 0.61508, 0, 0.08334],                                                                             // 1284
        "117": [0, 0.43056, 0, 0.02778],                                                                             // 1285
        "118": [0, 0.43056, 0.03588, 0.02778],                                                                       // 1286
        "119": [0, 0.43056, 0.02691, 0.08334],                                                                       // 1287
        "120": [0, 0.43056, 0, 0.02778],                                                                             // 1288
        "121": [0.19444, 0.43056, 0.03588, 0.05556],                                                                 // 1289
        "122": [0, 0.43056, 0.04398, 0.05556],                                                                       // 1290
        "915": [0, 0.68333, 0.13889, 0.08334],                                                                       // 1291
        "916": [0, 0.68333, 0, 0.16667],                                                                             // 1292
        "920": [0, 0.68333, 0.02778, 0.08334],                                                                       // 1293
        "923": [0, 0.68333, 0, 0.16667],                                                                             // 1294
        "926": [0, 0.68333, 0.07569, 0.08334],                                                                       // 1295
        "928": [0, 0.68333, 0.08125, 0.05556],                                                                       // 1296
        "931": [0, 0.68333, 0.05764, 0.08334],                                                                       // 1297
        "933": [0, 0.68333, 0.13889, 0.05556],                                                                       // 1298
        "934": [0, 0.68333, 0, 0.08334],                                                                             // 1299
        "936": [0, 0.68333, 0.11, 0.05556],                                                                          // 1300
        "937": [0, 0.68333, 0.05017, 0.08334],                                                                       // 1301
        "945": [0, 0.43056, 0.0037, 0.02778],                                                                        // 1302
        "946": [0.19444, 0.69444, 0.05278, 0.08334],                                                                 // 1303
        "947": [0.19444, 0.43056, 0.05556, 0],                                                                       // 1304
        "948": [0, 0.69444, 0.03785, 0.05556],                                                                       // 1305
        "949": [0, 0.43056, 0, 0.08334],                                                                             // 1306
        "950": [0.19444, 0.69444, 0.07378, 0.08334],                                                                 // 1307
        "951": [0.19444, 0.43056, 0.03588, 0.05556],                                                                 // 1308
        "952": [0, 0.69444, 0.02778, 0.08334],                                                                       // 1309
        "953": [0, 0.43056, 0, 0.05556],                                                                             // 1310
        "954": [0, 0.43056, 0, 0],                                                                                   // 1311
        "955": [0, 0.69444, 0, 0],                                                                                   // 1312
        "956": [0.19444, 0.43056, 0, 0.02778],                                                                       // 1313
        "957": [0, 0.43056, 0.06366, 0.02778],                                                                       // 1314
        "958": [0.19444, 0.69444, 0.04601, 0.11111],                                                                 // 1315
        "959": [0, 0.43056, 0, 0.05556],                                                                             // 1316
        "960": [0, 0.43056, 0.03588, 0],                                                                             // 1317
        "961": [0.19444, 0.43056, 0, 0.08334],                                                                       // 1318
        "962": [0.09722, 0.43056, 0.07986, 0.08334],                                                                 // 1319
        "963": [0, 0.43056, 0.03588, 0],                                                                             // 1320
        "964": [0, 0.43056, 0.1132, 0.02778],                                                                        // 1321
        "965": [0, 0.43056, 0.03588, 0.02778],                                                                       // 1322
        "966": [0.19444, 0.43056, 0, 0.08334],                                                                       // 1323
        "967": [0.19444, 0.43056, 0, 0.05556],                                                                       // 1324
        "968": [0.19444, 0.69444, 0.03588, 0.11111],                                                                 // 1325
        "969": [0, 0.43056, 0.03588, 0],                                                                             // 1326
        "977": [0, 0.69444, 0, 0.08334],                                                                             // 1327
        "981": [0.19444, 0.69444, 0, 0.08334],                                                                       // 1328
        "982": [0, 0.43056, 0.02778, 0],                                                                             // 1329
        "1009": [0.19444, 0.43056, 0, 0.08334],                                                                      // 1330
        "1013": [0, 0.43056, 0, 0.05556]                                                                             // 1331
    },                                                                                                               // 1332
    "SansSerif-Regular": {                                                                                           // 1333
        "33": [0, 0.69444, 0, 0],                                                                                    // 1334
        "34": [0, 0.69444, 0, 0],                                                                                    // 1335
        "35": [0.19444, 0.69444, 0, 0],                                                                              // 1336
        "36": [0.05556, 0.75, 0, 0],                                                                                 // 1337
        "37": [0.05556, 0.75, 0, 0],                                                                                 // 1338
        "38": [0, 0.69444, 0, 0],                                                                                    // 1339
        "39": [0, 0.69444, 0, 0],                                                                                    // 1340
        "40": [0.25, 0.75, 0, 0],                                                                                    // 1341
        "41": [0.25, 0.75, 0, 0],                                                                                    // 1342
        "42": [0, 0.75, 0, 0],                                                                                       // 1343
        "43": [0.08333, 0.58333, 0, 0],                                                                              // 1344
        "44": [0.125, 0.08333, 0, 0],                                                                                // 1345
        "45": [0, 0.44444, 0, 0],                                                                                    // 1346
        "46": [0, 0.08333, 0, 0],                                                                                    // 1347
        "47": [0.25, 0.75, 0, 0],                                                                                    // 1348
        "48": [0, 0.65556, 0, 0],                                                                                    // 1349
        "49": [0, 0.65556, 0, 0],                                                                                    // 1350
        "50": [0, 0.65556, 0, 0],                                                                                    // 1351
        "51": [0, 0.65556, 0, 0],                                                                                    // 1352
        "52": [0, 0.65556, 0, 0],                                                                                    // 1353
        "53": [0, 0.65556, 0, 0],                                                                                    // 1354
        "54": [0, 0.65556, 0, 0],                                                                                    // 1355
        "55": [0, 0.65556, 0, 0],                                                                                    // 1356
        "56": [0, 0.65556, 0, 0],                                                                                    // 1357
        "57": [0, 0.65556, 0, 0],                                                                                    // 1358
        "58": [0, 0.44444, 0, 0],                                                                                    // 1359
        "59": [0.125, 0.44444, 0, 0],                                                                                // 1360
        "61": [-0.13, 0.37, 0, 0],                                                                                   // 1361
        "63": [0, 0.69444, 0, 0],                                                                                    // 1362
        "64": [0, 0.69444, 0, 0],                                                                                    // 1363
        "65": [0, 0.69444, 0, 0],                                                                                    // 1364
        "66": [0, 0.69444, 0, 0],                                                                                    // 1365
        "67": [0, 0.69444, 0, 0],                                                                                    // 1366
        "68": [0, 0.69444, 0, 0],                                                                                    // 1367
        "69": [0, 0.69444, 0, 0],                                                                                    // 1368
        "70": [0, 0.69444, 0, 0],                                                                                    // 1369
        "71": [0, 0.69444, 0, 0],                                                                                    // 1370
        "72": [0, 0.69444, 0, 0],                                                                                    // 1371
        "73": [0, 0.69444, 0, 0],                                                                                    // 1372
        "74": [0, 0.69444, 0, 0],                                                                                    // 1373
        "75": [0, 0.69444, 0, 0],                                                                                    // 1374
        "76": [0, 0.69444, 0, 0],                                                                                    // 1375
        "77": [0, 0.69444, 0, 0],                                                                                    // 1376
        "78": [0, 0.69444, 0, 0],                                                                                    // 1377
        "79": [0, 0.69444, 0, 0],                                                                                    // 1378
        "80": [0, 0.69444, 0, 0],                                                                                    // 1379
        "81": [0.125, 0.69444, 0, 0],                                                                                // 1380
        "82": [0, 0.69444, 0, 0],                                                                                    // 1381
        "83": [0, 0.69444, 0, 0],                                                                                    // 1382
        "84": [0, 0.69444, 0, 0],                                                                                    // 1383
        "85": [0, 0.69444, 0, 0],                                                                                    // 1384
        "86": [0, 0.69444, 0.01389, 0],                                                                              // 1385
        "87": [0, 0.69444, 0.01389, 0],                                                                              // 1386
        "88": [0, 0.69444, 0, 0],                                                                                    // 1387
        "89": [0, 0.69444, 0.025, 0],                                                                                // 1388
        "90": [0, 0.69444, 0, 0],                                                                                    // 1389
        "91": [0.25, 0.75, 0, 0],                                                                                    // 1390
        "93": [0.25, 0.75, 0, 0],                                                                                    // 1391
        "94": [0, 0.69444, 0, 0],                                                                                    // 1392
        "95": [0.35, 0.09444, 0.02778, 0],                                                                           // 1393
        "97": [0, 0.44444, 0, 0],                                                                                    // 1394
        "98": [0, 0.69444, 0, 0],                                                                                    // 1395
        "99": [0, 0.44444, 0, 0],                                                                                    // 1396
        "100": [0, 0.69444, 0, 0],                                                                                   // 1397
        "101": [0, 0.44444, 0, 0],                                                                                   // 1398
        "102": [0, 0.69444, 0.06944, 0],                                                                             // 1399
        "103": [0.19444, 0.44444, 0.01389, 0],                                                                       // 1400
        "104": [0, 0.69444, 0, 0],                                                                                   // 1401
        "105": [0, 0.67937, 0, 0],                                                                                   // 1402
        "106": [0.19444, 0.67937, 0, 0],                                                                             // 1403
        "107": [0, 0.69444, 0, 0],                                                                                   // 1404
        "108": [0, 0.69444, 0, 0],                                                                                   // 1405
        "109": [0, 0.44444, 0, 0],                                                                                   // 1406
        "110": [0, 0.44444, 0, 0],                                                                                   // 1407
        "111": [0, 0.44444, 0, 0],                                                                                   // 1408
        "112": [0.19444, 0.44444, 0, 0],                                                                             // 1409
        "113": [0.19444, 0.44444, 0, 0],                                                                             // 1410
        "114": [0, 0.44444, 0.01389, 0],                                                                             // 1411
        "115": [0, 0.44444, 0, 0],                                                                                   // 1412
        "116": [0, 0.57143, 0, 0],                                                                                   // 1413
        "117": [0, 0.44444, 0, 0],                                                                                   // 1414
        "118": [0, 0.44444, 0.01389, 0],                                                                             // 1415
        "119": [0, 0.44444, 0.01389, 0],                                                                             // 1416
        "120": [0, 0.44444, 0, 0],                                                                                   // 1417
        "121": [0.19444, 0.44444, 0.01389, 0],                                                                       // 1418
        "122": [0, 0.44444, 0, 0],                                                                                   // 1419
        "126": [0.35, 0.32659, 0, 0],                                                                                // 1420
        "305": [0, 0.44444, 0, 0],                                                                                   // 1421
        "567": [0.19444, 0.44444, 0, 0],                                                                             // 1422
        "768": [0, 0.69444, 0, 0],                                                                                   // 1423
        "769": [0, 0.69444, 0, 0],                                                                                   // 1424
        "770": [0, 0.69444, 0, 0],                                                                                   // 1425
        "771": [0, 0.67659, 0, 0],                                                                                   // 1426
        "772": [0, 0.60889, 0, 0],                                                                                   // 1427
        "774": [0, 0.69444, 0, 0],                                                                                   // 1428
        "775": [0, 0.67937, 0, 0],                                                                                   // 1429
        "776": [0, 0.67937, 0, 0],                                                                                   // 1430
        "778": [0, 0.69444, 0, 0],                                                                                   // 1431
        "779": [0, 0.69444, 0, 0],                                                                                   // 1432
        "780": [0, 0.63194, 0, 0],                                                                                   // 1433
        "915": [0, 0.69444, 0, 0],                                                                                   // 1434
        "916": [0, 0.69444, 0, 0],                                                                                   // 1435
        "920": [0, 0.69444, 0, 0],                                                                                   // 1436
        "923": [0, 0.69444, 0, 0],                                                                                   // 1437
        "926": [0, 0.69444, 0, 0],                                                                                   // 1438
        "928": [0, 0.69444, 0, 0],                                                                                   // 1439
        "931": [0, 0.69444, 0, 0],                                                                                   // 1440
        "933": [0, 0.69444, 0, 0],                                                                                   // 1441
        "934": [0, 0.69444, 0, 0],                                                                                   // 1442
        "936": [0, 0.69444, 0, 0],                                                                                   // 1443
        "937": [0, 0.69444, 0, 0],                                                                                   // 1444
        "8211": [0, 0.44444, 0.02778, 0],                                                                            // 1445
        "8212": [0, 0.44444, 0.02778, 0],                                                                            // 1446
        "8216": [0, 0.69444, 0, 0],                                                                                  // 1447
        "8217": [0, 0.69444, 0, 0],                                                                                  // 1448
        "8220": [0, 0.69444, 0, 0],                                                                                  // 1449
        "8221": [0, 0.69444, 0, 0]                                                                                   // 1450
    },                                                                                                               // 1451
    "Script-Regular": {                                                                                              // 1452
        "65": [0, 0.7, 0.22925, 0],                                                                                  // 1453
        "66": [0, 0.7, 0.04087, 0],                                                                                  // 1454
        "67": [0, 0.7, 0.1689, 0],                                                                                   // 1455
        "68": [0, 0.7, 0.09371, 0],                                                                                  // 1456
        "69": [0, 0.7, 0.18583, 0],                                                                                  // 1457
        "70": [0, 0.7, 0.13634, 0],                                                                                  // 1458
        "71": [0, 0.7, 0.17322, 0],                                                                                  // 1459
        "72": [0, 0.7, 0.29694, 0],                                                                                  // 1460
        "73": [0, 0.7, 0.19189, 0],                                                                                  // 1461
        "74": [0.27778, 0.7, 0.19189, 0],                                                                            // 1462
        "75": [0, 0.7, 0.31259, 0],                                                                                  // 1463
        "76": [0, 0.7, 0.19189, 0],                                                                                  // 1464
        "77": [0, 0.7, 0.15981, 0],                                                                                  // 1465
        "78": [0, 0.7, 0.3525, 0],                                                                                   // 1466
        "79": [0, 0.7, 0.08078, 0],                                                                                  // 1467
        "80": [0, 0.7, 0.08078, 0],                                                                                  // 1468
        "81": [0, 0.7, 0.03305, 0],                                                                                  // 1469
        "82": [0, 0.7, 0.06259, 0],                                                                                  // 1470
        "83": [0, 0.7, 0.19189, 0],                                                                                  // 1471
        "84": [0, 0.7, 0.29087, 0],                                                                                  // 1472
        "85": [0, 0.7, 0.25815, 0],                                                                                  // 1473
        "86": [0, 0.7, 0.27523, 0],                                                                                  // 1474
        "87": [0, 0.7, 0.27523, 0],                                                                                  // 1475
        "88": [0, 0.7, 0.26006, 0],                                                                                  // 1476
        "89": [0, 0.7, 0.2939, 0],                                                                                   // 1477
        "90": [0, 0.7, 0.24037, 0]                                                                                   // 1478
    },                                                                                                               // 1479
    "Size1-Regular": {                                                                                               // 1480
        "40": [0.35001, 0.85, 0, 0],                                                                                 // 1481
        "41": [0.35001, 0.85, 0, 0],                                                                                 // 1482
        "47": [0.35001, 0.85, 0, 0],                                                                                 // 1483
        "91": [0.35001, 0.85, 0, 0],                                                                                 // 1484
        "92": [0.35001, 0.85, 0, 0],                                                                                 // 1485
        "93": [0.35001, 0.85, 0, 0],                                                                                 // 1486
        "123": [0.35001, 0.85, 0, 0],                                                                                // 1487
        "125": [0.35001, 0.85, 0, 0],                                                                                // 1488
        "710": [0, 0.72222, 0, 0],                                                                                   // 1489
        "732": [0, 0.72222, 0, 0],                                                                                   // 1490
        "770": [0, 0.72222, 0, 0],                                                                                   // 1491
        "771": [0, 0.72222, 0, 0],                                                                                   // 1492
        "8214": [-0.00099, 0.601, 0, 0],                                                                             // 1493
        "8593": [1e-05, 0.6, 0, 0],                                                                                  // 1494
        "8595": [1e-05, 0.6, 0, 0],                                                                                  // 1495
        "8657": [1e-05, 0.6, 0, 0],                                                                                  // 1496
        "8659": [1e-05, 0.6, 0, 0],                                                                                  // 1497
        "8719": [0.25001, 0.75, 0, 0],                                                                               // 1498
        "8720": [0.25001, 0.75, 0, 0],                                                                               // 1499
        "8721": [0.25001, 0.75, 0, 0],                                                                               // 1500
        "8730": [0.35001, 0.85, 0, 0],                                                                               // 1501
        "8739": [-0.00599, 0.606, 0, 0],                                                                             // 1502
        "8741": [-0.00599, 0.606, 0, 0],                                                                             // 1503
        "8747": [0.30612, 0.805, 0.19445, 0],                                                                        // 1504
        "8748": [0.306, 0.805, 0.19445, 0],                                                                          // 1505
        "8749": [0.306, 0.805, 0.19445, 0],                                                                          // 1506
        "8750": [0.30612, 0.805, 0.19445, 0],                                                                        // 1507
        "8896": [0.25001, 0.75, 0, 0],                                                                               // 1508
        "8897": [0.25001, 0.75, 0, 0],                                                                               // 1509
        "8898": [0.25001, 0.75, 0, 0],                                                                               // 1510
        "8899": [0.25001, 0.75, 0, 0],                                                                               // 1511
        "8968": [0.35001, 0.85, 0, 0],                                                                               // 1512
        "8969": [0.35001, 0.85, 0, 0],                                                                               // 1513
        "8970": [0.35001, 0.85, 0, 0],                                                                               // 1514
        "8971": [0.35001, 0.85, 0, 0],                                                                               // 1515
        "9168": [-0.00099, 0.601, 0, 0],                                                                             // 1516
        "10216": [0.35001, 0.85, 0, 0],                                                                              // 1517
        "10217": [0.35001, 0.85, 0, 0],                                                                              // 1518
        "10752": [0.25001, 0.75, 0, 0],                                                                              // 1519
        "10753": [0.25001, 0.75, 0, 0],                                                                              // 1520
        "10754": [0.25001, 0.75, 0, 0],                                                                              // 1521
        "10756": [0.25001, 0.75, 0, 0],                                                                              // 1522
        "10758": [0.25001, 0.75, 0, 0]                                                                               // 1523
    },                                                                                                               // 1524
    "Size2-Regular": {                                                                                               // 1525
        "40": [0.65002, 1.15, 0, 0],                                                                                 // 1526
        "41": [0.65002, 1.15, 0, 0],                                                                                 // 1527
        "47": [0.65002, 1.15, 0, 0],                                                                                 // 1528
        "91": [0.65002, 1.15, 0, 0],                                                                                 // 1529
        "92": [0.65002, 1.15, 0, 0],                                                                                 // 1530
        "93": [0.65002, 1.15, 0, 0],                                                                                 // 1531
        "123": [0.65002, 1.15, 0, 0],                                                                                // 1532
        "125": [0.65002, 1.15, 0, 0],                                                                                // 1533
        "710": [0, 0.75, 0, 0],                                                                                      // 1534
        "732": [0, 0.75, 0, 0],                                                                                      // 1535
        "770": [0, 0.75, 0, 0],                                                                                      // 1536
        "771": [0, 0.75, 0, 0],                                                                                      // 1537
        "8719": [0.55001, 1.05, 0, 0],                                                                               // 1538
        "8720": [0.55001, 1.05, 0, 0],                                                                               // 1539
        "8721": [0.55001, 1.05, 0, 0],                                                                               // 1540
        "8730": [0.65002, 1.15, 0, 0],                                                                               // 1541
        "8747": [0.86225, 1.36, 0.44445, 0],                                                                         // 1542
        "8748": [0.862, 1.36, 0.44445, 0],                                                                           // 1543
        "8749": [0.862, 1.36, 0.44445, 0],                                                                           // 1544
        "8750": [0.86225, 1.36, 0.44445, 0],                                                                         // 1545
        "8896": [0.55001, 1.05, 0, 0],                                                                               // 1546
        "8897": [0.55001, 1.05, 0, 0],                                                                               // 1547
        "8898": [0.55001, 1.05, 0, 0],                                                                               // 1548
        "8899": [0.55001, 1.05, 0, 0],                                                                               // 1549
        "8968": [0.65002, 1.15, 0, 0],                                                                               // 1550
        "8969": [0.65002, 1.15, 0, 0],                                                                               // 1551
        "8970": [0.65002, 1.15, 0, 0],                                                                               // 1552
        "8971": [0.65002, 1.15, 0, 0],                                                                               // 1553
        "10216": [0.65002, 1.15, 0, 0],                                                                              // 1554
        "10217": [0.65002, 1.15, 0, 0],                                                                              // 1555
        "10752": [0.55001, 1.05, 0, 0],                                                                              // 1556
        "10753": [0.55001, 1.05, 0, 0],                                                                              // 1557
        "10754": [0.55001, 1.05, 0, 0],                                                                              // 1558
        "10756": [0.55001, 1.05, 0, 0],                                                                              // 1559
        "10758": [0.55001, 1.05, 0, 0]                                                                               // 1560
    },                                                                                                               // 1561
    "Size3-Regular": {                                                                                               // 1562
        "40": [0.95003, 1.45, 0, 0],                                                                                 // 1563
        "41": [0.95003, 1.45, 0, 0],                                                                                 // 1564
        "47": [0.95003, 1.45, 0, 0],                                                                                 // 1565
        "91": [0.95003, 1.45, 0, 0],                                                                                 // 1566
        "92": [0.95003, 1.45, 0, 0],                                                                                 // 1567
        "93": [0.95003, 1.45, 0, 0],                                                                                 // 1568
        "123": [0.95003, 1.45, 0, 0],                                                                                // 1569
        "125": [0.95003, 1.45, 0, 0],                                                                                // 1570
        "710": [0, 0.75, 0, 0],                                                                                      // 1571
        "732": [0, 0.75, 0, 0],                                                                                      // 1572
        "770": [0, 0.75, 0, 0],                                                                                      // 1573
        "771": [0, 0.75, 0, 0],                                                                                      // 1574
        "8730": [0.95003, 1.45, 0, 0],                                                                               // 1575
        "8968": [0.95003, 1.45, 0, 0],                                                                               // 1576
        "8969": [0.95003, 1.45, 0, 0],                                                                               // 1577
        "8970": [0.95003, 1.45, 0, 0],                                                                               // 1578
        "8971": [0.95003, 1.45, 0, 0],                                                                               // 1579
        "10216": [0.95003, 1.45, 0, 0],                                                                              // 1580
        "10217": [0.95003, 1.45, 0, 0]                                                                               // 1581
    },                                                                                                               // 1582
    "Size4-Regular": {                                                                                               // 1583
        "40": [1.25003, 1.75, 0, 0],                                                                                 // 1584
        "41": [1.25003, 1.75, 0, 0],                                                                                 // 1585
        "47": [1.25003, 1.75, 0, 0],                                                                                 // 1586
        "91": [1.25003, 1.75, 0, 0],                                                                                 // 1587
        "92": [1.25003, 1.75, 0, 0],                                                                                 // 1588
        "93": [1.25003, 1.75, 0, 0],                                                                                 // 1589
        "123": [1.25003, 1.75, 0, 0],                                                                                // 1590
        "125": [1.25003, 1.75, 0, 0],                                                                                // 1591
        "710": [0, 0.825, 0, 0],                                                                                     // 1592
        "732": [0, 0.825, 0, 0],                                                                                     // 1593
        "770": [0, 0.825, 0, 0],                                                                                     // 1594
        "771": [0, 0.825, 0, 0],                                                                                     // 1595
        "8730": [1.25003, 1.75, 0, 0],                                                                               // 1596
        "8968": [1.25003, 1.75, 0, 0],                                                                               // 1597
        "8969": [1.25003, 1.75, 0, 0],                                                                               // 1598
        "8970": [1.25003, 1.75, 0, 0],                                                                               // 1599
        "8971": [1.25003, 1.75, 0, 0],                                                                               // 1600
        "9115": [0.64502, 1.155, 0, 0],                                                                              // 1601
        "9116": [1e-05, 0.6, 0, 0],                                                                                  // 1602
        "9117": [0.64502, 1.155, 0, 0],                                                                              // 1603
        "9118": [0.64502, 1.155, 0, 0],                                                                              // 1604
        "9119": [1e-05, 0.6, 0, 0],                                                                                  // 1605
        "9120": [0.64502, 1.155, 0, 0],                                                                              // 1606
        "9121": [0.64502, 1.155, 0, 0],                                                                              // 1607
        "9122": [-0.00099, 0.601, 0, 0],                                                                             // 1608
        "9123": [0.64502, 1.155, 0, 0],                                                                              // 1609
        "9124": [0.64502, 1.155, 0, 0],                                                                              // 1610
        "9125": [-0.00099, 0.601, 0, 0],                                                                             // 1611
        "9126": [0.64502, 1.155, 0, 0],                                                                              // 1612
        "9127": [1e-05, 0.9, 0, 0],                                                                                  // 1613
        "9128": [0.65002, 1.15, 0, 0],                                                                               // 1614
        "9129": [0.90001, 0, 0, 0],                                                                                  // 1615
        "9130": [0, 0.3, 0, 0],                                                                                      // 1616
        "9131": [1e-05, 0.9, 0, 0],                                                                                  // 1617
        "9132": [0.65002, 1.15, 0, 0],                                                                               // 1618
        "9133": [0.90001, 0, 0, 0],                                                                                  // 1619
        "9143": [0.88502, 0.915, 0, 0],                                                                              // 1620
        "10216": [1.25003, 1.75, 0, 0],                                                                              // 1621
        "10217": [1.25003, 1.75, 0, 0],                                                                              // 1622
        "57344": [-0.00499, 0.605, 0, 0],                                                                            // 1623
        "57345": [-0.00499, 0.605, 0, 0],                                                                            // 1624
        "57680": [0, 0.12, 0, 0],                                                                                    // 1625
        "57681": [0, 0.12, 0, 0],                                                                                    // 1626
        "57682": [0, 0.12, 0, 0],                                                                                    // 1627
        "57683": [0, 0.12, 0, 0]                                                                                     // 1628
    },                                                                                                               // 1629
    "Typewriter-Regular": {                                                                                          // 1630
        "33": [0, 0.61111, 0, 0],                                                                                    // 1631
        "34": [0, 0.61111, 0, 0],                                                                                    // 1632
        "35": [0, 0.61111, 0, 0],                                                                                    // 1633
        "36": [0.08333, 0.69444, 0, 0],                                                                              // 1634
        "37": [0.08333, 0.69444, 0, 0],                                                                              // 1635
        "38": [0, 0.61111, 0, 0],                                                                                    // 1636
        "39": [0, 0.61111, 0, 0],                                                                                    // 1637
        "40": [0.08333, 0.69444, 0, 0],                                                                              // 1638
        "41": [0.08333, 0.69444, 0, 0],                                                                              // 1639
        "42": [0, 0.52083, 0, 0],                                                                                    // 1640
        "43": [-0.08056, 0.53055, 0, 0],                                                                             // 1641
        "44": [0.13889, 0.125, 0, 0],                                                                                // 1642
        "45": [-0.08056, 0.53055, 0, 0],                                                                             // 1643
        "46": [0, 0.125, 0, 0],                                                                                      // 1644
        "47": [0.08333, 0.69444, 0, 0],                                                                              // 1645
        "48": [0, 0.61111, 0, 0],                                                                                    // 1646
        "49": [0, 0.61111, 0, 0],                                                                                    // 1647
        "50": [0, 0.61111, 0, 0],                                                                                    // 1648
        "51": [0, 0.61111, 0, 0],                                                                                    // 1649
        "52": [0, 0.61111, 0, 0],                                                                                    // 1650
        "53": [0, 0.61111, 0, 0],                                                                                    // 1651
        "54": [0, 0.61111, 0, 0],                                                                                    // 1652
        "55": [0, 0.61111, 0, 0],                                                                                    // 1653
        "56": [0, 0.61111, 0, 0],                                                                                    // 1654
        "57": [0, 0.61111, 0, 0],                                                                                    // 1655
        "58": [0, 0.43056, 0, 0],                                                                                    // 1656
        "59": [0.13889, 0.43056, 0, 0],                                                                              // 1657
        "60": [-0.05556, 0.55556, 0, 0],                                                                             // 1658
        "61": [-0.19549, 0.41562, 0, 0],                                                                             // 1659
        "62": [-0.05556, 0.55556, 0, 0],                                                                             // 1660
        "63": [0, 0.61111, 0, 0],                                                                                    // 1661
        "64": [0, 0.61111, 0, 0],                                                                                    // 1662
        "65": [0, 0.61111, 0, 0],                                                                                    // 1663
        "66": [0, 0.61111, 0, 0],                                                                                    // 1664
        "67": [0, 0.61111, 0, 0],                                                                                    // 1665
        "68": [0, 0.61111, 0, 0],                                                                                    // 1666
        "69": [0, 0.61111, 0, 0],                                                                                    // 1667
        "70": [0, 0.61111, 0, 0],                                                                                    // 1668
        "71": [0, 0.61111, 0, 0],                                                                                    // 1669
        "72": [0, 0.61111, 0, 0],                                                                                    // 1670
        "73": [0, 0.61111, 0, 0],                                                                                    // 1671
        "74": [0, 0.61111, 0, 0],                                                                                    // 1672
        "75": [0, 0.61111, 0, 0],                                                                                    // 1673
        "76": [0, 0.61111, 0, 0],                                                                                    // 1674
        "77": [0, 0.61111, 0, 0],                                                                                    // 1675
        "78": [0, 0.61111, 0, 0],                                                                                    // 1676
        "79": [0, 0.61111, 0, 0],                                                                                    // 1677
        "80": [0, 0.61111, 0, 0],                                                                                    // 1678
        "81": [0.13889, 0.61111, 0, 0],                                                                              // 1679
        "82": [0, 0.61111, 0, 0],                                                                                    // 1680
        "83": [0, 0.61111, 0, 0],                                                                                    // 1681
        "84": [0, 0.61111, 0, 0],                                                                                    // 1682
        "85": [0, 0.61111, 0, 0],                                                                                    // 1683
        "86": [0, 0.61111, 0, 0],                                                                                    // 1684
        "87": [0, 0.61111, 0, 0],                                                                                    // 1685
        "88": [0, 0.61111, 0, 0],                                                                                    // 1686
        "89": [0, 0.61111, 0, 0],                                                                                    // 1687
        "90": [0, 0.61111, 0, 0],                                                                                    // 1688
        "91": [0.08333, 0.69444, 0, 0],                                                                              // 1689
        "92": [0.08333, 0.69444, 0, 0],                                                                              // 1690
        "93": [0.08333, 0.69444, 0, 0],                                                                              // 1691
        "94": [0, 0.61111, 0, 0],                                                                                    // 1692
        "95": [0.09514, 0, 0, 0],                                                                                    // 1693
        "96": [0, 0.61111, 0, 0],                                                                                    // 1694
        "97": [0, 0.43056, 0, 0],                                                                                    // 1695
        "98": [0, 0.61111, 0, 0],                                                                                    // 1696
        "99": [0, 0.43056, 0, 0],                                                                                    // 1697
        "100": [0, 0.61111, 0, 0],                                                                                   // 1698
        "101": [0, 0.43056, 0, 0],                                                                                   // 1699
        "102": [0, 0.61111, 0, 0],                                                                                   // 1700
        "103": [0.22222, 0.43056, 0, 0],                                                                             // 1701
        "104": [0, 0.61111, 0, 0],                                                                                   // 1702
        "105": [0, 0.61111, 0, 0],                                                                                   // 1703
        "106": [0.22222, 0.61111, 0, 0],                                                                             // 1704
        "107": [0, 0.61111, 0, 0],                                                                                   // 1705
        "108": [0, 0.61111, 0, 0],                                                                                   // 1706
        "109": [0, 0.43056, 0, 0],                                                                                   // 1707
        "110": [0, 0.43056, 0, 0],                                                                                   // 1708
        "111": [0, 0.43056, 0, 0],                                                                                   // 1709
        "112": [0.22222, 0.43056, 0, 0],                                                                             // 1710
        "113": [0.22222, 0.43056, 0, 0],                                                                             // 1711
        "114": [0, 0.43056, 0, 0],                                                                                   // 1712
        "115": [0, 0.43056, 0, 0],                                                                                   // 1713
        "116": [0, 0.55358, 0, 0],                                                                                   // 1714
        "117": [0, 0.43056, 0, 0],                                                                                   // 1715
        "118": [0, 0.43056, 0, 0],                                                                                   // 1716
        "119": [0, 0.43056, 0, 0],                                                                                   // 1717
        "120": [0, 0.43056, 0, 0],                                                                                   // 1718
        "121": [0.22222, 0.43056, 0, 0],                                                                             // 1719
        "122": [0, 0.43056, 0, 0],                                                                                   // 1720
        "123": [0.08333, 0.69444, 0, 0],                                                                             // 1721
        "124": [0.08333, 0.69444, 0, 0],                                                                             // 1722
        "125": [0.08333, 0.69444, 0, 0],                                                                             // 1723
        "126": [0, 0.61111, 0, 0],                                                                                   // 1724
        "127": [0, 0.61111, 0, 0],                                                                                   // 1725
        "305": [0, 0.43056, 0, 0],                                                                                   // 1726
        "567": [0.22222, 0.43056, 0, 0],                                                                             // 1727
        "768": [0, 0.61111, 0, 0],                                                                                   // 1728
        "769": [0, 0.61111, 0, 0],                                                                                   // 1729
        "770": [0, 0.61111, 0, 0],                                                                                   // 1730
        "771": [0, 0.61111, 0, 0],                                                                                   // 1731
        "772": [0, 0.56555, 0, 0],                                                                                   // 1732
        "774": [0, 0.61111, 0, 0],                                                                                   // 1733
        "776": [0, 0.61111, 0, 0],                                                                                   // 1734
        "778": [0, 0.61111, 0, 0],                                                                                   // 1735
        "780": [0, 0.56597, 0, 0],                                                                                   // 1736
        "915": [0, 0.61111, 0, 0],                                                                                   // 1737
        "916": [0, 0.61111, 0, 0],                                                                                   // 1738
        "920": [0, 0.61111, 0, 0],                                                                                   // 1739
        "923": [0, 0.61111, 0, 0],                                                                                   // 1740
        "926": [0, 0.61111, 0, 0],                                                                                   // 1741
        "928": [0, 0.61111, 0, 0],                                                                                   // 1742
        "931": [0, 0.61111, 0, 0],                                                                                   // 1743
        "933": [0, 0.61111, 0, 0],                                                                                   // 1744
        "934": [0, 0.61111, 0, 0],                                                                                   // 1745
        "936": [0, 0.61111, 0, 0],                                                                                   // 1746
        "937": [0, 0.61111, 0, 0],                                                                                   // 1747
        "2018": [0, 0.61111, 0, 0],                                                                                  // 1748
        "2019": [0, 0.61111, 0, 0],                                                                                  // 1749
        "8242": [0, 0.61111, 0, 0]                                                                                   // 1750
    }                                                                                                                // 1751
};                                                                                                                   // 1752
                                                                                                                     // 1753
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"buildCommon.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/buildCommon.js                                        //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* eslint no-console:0 */                                                                                            // 1
/**                                                                                                                  // 2
 * This module contains general functions that can be used for building                                              // 3
 * different kinds of domTree nodes in a consistent manner.                                                          // 4
 */                                                                                                                  // 5
                                                                                                                     // 6
var domTree = require("./domTree");                                                                                  // 7
var fontMetrics = require("./fontMetrics");                                                                          // 8
var symbols = require("./symbols");                                                                                  // 9
var utils = require("./utils");                                                                                      // 10
                                                                                                                     // 11
var greekCapitals = [                                                                                                // 12
    "\\Gamma",                                                                                                       // 13
    "\\Delta",                                                                                                       // 14
    "\\Theta",                                                                                                       // 15
    "\\Lambda",                                                                                                      // 16
    "\\Xi",                                                                                                          // 17
    "\\Pi",                                                                                                          // 18
    "\\Sigma",                                                                                                       // 19
    "\\Upsilon",                                                                                                     // 20
    "\\Phi",                                                                                                         // 21
    "\\Psi",                                                                                                         // 22
    "\\Omega"                                                                                                        // 23
];                                                                                                                   // 24
                                                                                                                     // 25
// The following have to be loaded from Main-Italic font, using class mainit                                         // 26
var mainitLetters = [                                                                                                // 27
    "\u0131",   // dotless i, \imath                                                                                 // 28
    "\u0237",   // dotless j, \jmath                                                                                 // 29
    "\u00a3"   // \pounds                                                                                            // 30
];                                                                                                                   // 31
                                                                                                                     // 32
/**                                                                                                                  // 33
 * Makes a symbolNode after translation via the list of symbols in symbols.js.                                       // 34
 * Correctly pulls out metrics for the character, and optionally takes a list of                                     // 35
 * classes to be attached to the node.                                                                               // 36
 *                                                                                                                   // 37
 * TODO: make argument order closer to makeSpan                                                                      // 38
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which                                          // 39
 * should if present come first in `classes`.                                                                        // 40
 */                                                                                                                  // 41
var makeSymbol = function(value, fontFamily, mode, options, classes) {                                               // 42
    // Replace the value with its replaced value from symbol.js                                                      // 43
    if (symbols[mode][value] && symbols[mode][value].replace) {                                                      // 44
        value = symbols[mode][value].replace;                                                                        // 45
    }                                                                                                                // 46
                                                                                                                     // 47
    var metrics = fontMetrics.getCharacterMetrics(value, fontFamily);                                                // 48
                                                                                                                     // 49
    var symbolNode;                                                                                                  // 50
    if (metrics) {                                                                                                   // 51
        var italic = metrics.italic;                                                                                 // 52
        if (mode === "text") {                                                                                       // 53
            italic = 0;                                                                                              // 54
        }                                                                                                            // 55
        symbolNode = new domTree.symbolNode(                                                                         // 56
            value, metrics.height, metrics.depth, italic, metrics.skew,                                              // 57
            classes);                                                                                                // 58
    } else {                                                                                                         // 59
        // TODO(emily): Figure out a good way to only print this in development                                      // 60
        typeof console !== "undefined" && console.warn(                                                              // 61
            "No character metrics for '" + value + "' in style '" +                                                  // 62
                fontFamily + "'");                                                                                   // 63
        symbolNode = new domTree.symbolNode(value, 0, 0, 0, 0, classes);                                             // 64
    }                                                                                                                // 65
                                                                                                                     // 66
    if (options) {                                                                                                   // 67
        if (options.style.isTight()) {                                                                               // 68
            symbolNode.classes.push("mtight");                                                                       // 69
        }                                                                                                            // 70
        if (options.getColor()) {                                                                                    // 71
            symbolNode.style.color = options.getColor();                                                             // 72
        }                                                                                                            // 73
    }                                                                                                                // 74
                                                                                                                     // 75
    return symbolNode;                                                                                               // 76
};                                                                                                                   // 77
                                                                                                                     // 78
/**                                                                                                                  // 79
 * Makes a symbol in Main-Regular or AMS-Regular.                                                                    // 80
 * Used for rel, bin, open, close, inner, and punct.                                                                 // 81
 */                                                                                                                  // 82
var mathsym = function(value, mode, options, classes) {                                                              // 83
    // Decide what font to render the symbol in by its entry in the symbols                                          // 84
    // table.                                                                                                        // 85
    // Have a special case for when the value = \ because the \ is used as a                                         // 86
    // textord in unsupported command errors but cannot be parsed as a regular                                       // 87
    // text ordinal and is therefore not present as a symbol in the symbols                                          // 88
    // table for text                                                                                                // 89
    if (value === "\\" || symbols[mode][value].font === "main") {                                                    // 90
        return makeSymbol(value, "Main-Regular", mode, options, classes);                                            // 91
    } else {                                                                                                         // 92
        return makeSymbol(                                                                                           // 93
            value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));                                         // 94
    }                                                                                                                // 95
};                                                                                                                   // 96
                                                                                                                     // 97
/**                                                                                                                  // 98
 * Makes a symbol in the default font for mathords and textords.                                                     // 99
 */                                                                                                                  // 100
var mathDefault = function(value, mode, options, classes, type) {                                                    // 101
    if (type === "mathord") {                                                                                        // 102
        return mathit(value, mode, options, classes);                                                                // 103
    } else if (type === "textord") {                                                                                 // 104
        return makeSymbol(                                                                                           // 105
            value, "Main-Regular", mode, options, classes.concat(["mathrm"]));                                       // 106
    } else {                                                                                                         // 107
        throw new Error("unexpected type: " + type + " in mathDefault");                                             // 108
    }                                                                                                                // 109
};                                                                                                                   // 110
                                                                                                                     // 111
/**                                                                                                                  // 112
 * Makes a symbol in the italic math font.                                                                           // 113
 */                                                                                                                  // 114
var mathit = function(value, mode, options, classes) {                                                               // 115
    if (/[0-9]/.test(value.charAt(0)) ||                                                                             // 116
            // glyphs for \imath and \jmath do not exist in Math-Italic so we                                        // 117
            // need to use Main-Italic instead                                                                       // 118
            utils.contains(mainitLetters, value) ||                                                                  // 119
            utils.contains(greekCapitals, value)) {                                                                  // 120
        return makeSymbol(                                                                                           // 121
            value, "Main-Italic", mode, options, classes.concat(["mainit"]));                                        // 122
    } else {                                                                                                         // 123
        return makeSymbol(                                                                                           // 124
            value, "Math-Italic", mode, options, classes.concat(["mathit"]));                                        // 125
    }                                                                                                                // 126
};                                                                                                                   // 127
                                                                                                                     // 128
/**                                                                                                                  // 129
 * Makes either a mathord or textord in the correct font and color.                                                  // 130
 */                                                                                                                  // 131
var makeOrd = function(group, options, type) {                                                                       // 132
    var mode = group.mode;                                                                                           // 133
    var value = group.value;                                                                                         // 134
    if (symbols[mode][value] && symbols[mode][value].replace) {                                                      // 135
        value = symbols[mode][value].replace;                                                                        // 136
    }                                                                                                                // 137
                                                                                                                     // 138
    var classes = ["mord"];                                                                                          // 139
                                                                                                                     // 140
    var font = options.font;                                                                                         // 141
    if (font) {                                                                                                      // 142
        if (font === "mathit" || utils.contains(mainitLetters, value)) {                                             // 143
            return mathit(value, mode, options, classes);                                                            // 144
        } else {                                                                                                     // 145
            var fontName = fontMap[font].fontName;                                                                   // 146
            if (fontMetrics.getCharacterMetrics(value, fontName)) {                                                  // 147
                return makeSymbol(                                                                                   // 148
                    value, fontName, mode, options, classes.concat([font]));                                         // 149
            } else {                                                                                                 // 150
                return mathDefault(value, mode, options, classes, type);                                             // 151
            }                                                                                                        // 152
        }                                                                                                            // 153
    } else {                                                                                                         // 154
        return mathDefault(value, mode, options, classes, type);                                                     // 155
    }                                                                                                                // 156
};                                                                                                                   // 157
                                                                                                                     // 158
/**                                                                                                                  // 159
 * Calculate the height, depth, and maxFontSize of an element based on its                                           // 160
 * children.                                                                                                         // 161
 */                                                                                                                  // 162
var sizeElementFromChildren = function(elem) {                                                                       // 163
    var height = 0;                                                                                                  // 164
    var depth = 0;                                                                                                   // 165
    var maxFontSize = 0;                                                                                             // 166
                                                                                                                     // 167
    if (elem.children) {                                                                                             // 168
        for (var i = 0; i < elem.children.length; i++) {                                                             // 169
            if (elem.children[i].height > height) {                                                                  // 170
                height = elem.children[i].height;                                                                    // 171
            }                                                                                                        // 172
            if (elem.children[i].depth > depth) {                                                                    // 173
                depth = elem.children[i].depth;                                                                      // 174
            }                                                                                                        // 175
            if (elem.children[i].maxFontSize > maxFontSize) {                                                        // 176
                maxFontSize = elem.children[i].maxFontSize;                                                          // 177
            }                                                                                                        // 178
        }                                                                                                            // 179
    }                                                                                                                // 180
                                                                                                                     // 181
    elem.height = height;                                                                                            // 182
    elem.depth = depth;                                                                                              // 183
    elem.maxFontSize = maxFontSize;                                                                                  // 184
};                                                                                                                   // 185
                                                                                                                     // 186
/**                                                                                                                  // 187
 * Makes a span with the given list of classes, list of children, and options.                                       // 188
 *                                                                                                                   // 189
 * TODO: Ensure that `options` is always provided (currently some call sites                                         // 190
 * don't pass it).                                                                                                   // 191
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which                                          // 192
 * should if present come first in `classes`.                                                                        // 193
 */                                                                                                                  // 194
var makeSpan = function(classes, children, options) {                                                                // 195
    var span = new domTree.span(classes, children, options);                                                         // 196
                                                                                                                     // 197
    sizeElementFromChildren(span);                                                                                   // 198
                                                                                                                     // 199
    return span;                                                                                                     // 200
};                                                                                                                   // 201
                                                                                                                     // 202
/**                                                                                                                  // 203
 * Prepends the given children to the given span, updating height, depth, and                                        // 204
 * maxFontSize.                                                                                                      // 205
 */                                                                                                                  // 206
var prependChildren = function(span, children) {                                                                     // 207
    span.children = children.concat(span.children);                                                                  // 208
                                                                                                                     // 209
    sizeElementFromChildren(span);                                                                                   // 210
};                                                                                                                   // 211
                                                                                                                     // 212
/**                                                                                                                  // 213
 * Makes a document fragment with the given list of children.                                                        // 214
 */                                                                                                                  // 215
var makeFragment = function(children) {                                                                              // 216
    var fragment = new domTree.documentFragment(children);                                                           // 217
                                                                                                                     // 218
    sizeElementFromChildren(fragment);                                                                               // 219
                                                                                                                     // 220
    return fragment;                                                                                                 // 221
};                                                                                                                   // 222
                                                                                                                     // 223
/**                                                                                                                  // 224
 * Makes an element placed in each of the vlist elements to ensure that each                                         // 225
 * element has the same max font size. To do this, we create a zero-width space                                      // 226
 * with the correct font size.                                                                                       // 227
 */                                                                                                                  // 228
var makeFontSizer = function(options, fontSize) {                                                                    // 229
    var fontSizeInner = makeSpan([], [new domTree.symbolNode("\u200b")]);                                            // 230
    fontSizeInner.style.fontSize =                                                                                   // 231
        (fontSize / options.style.sizeMultiplier) + "em";                                                            // 232
                                                                                                                     // 233
    var fontSizer = makeSpan(                                                                                        // 234
        ["fontsize-ensurer", "reset-" + options.size, "size5"],                                                      // 235
        [fontSizeInner]);                                                                                            // 236
                                                                                                                     // 237
    return fontSizer;                                                                                                // 238
};                                                                                                                   // 239
                                                                                                                     // 240
/**                                                                                                                  // 241
 * Makes a vertical list by stacking elements and kerns on top of each other.                                        // 242
 * Allows for many different ways of specifying the positioning method.                                              // 243
 *                                                                                                                   // 244
 * Arguments:                                                                                                        // 245
 *  - children: A list of child or kern nodes to be stacked on top of each other                                     // 246
 *              (i.e. the first element will be at the bottom, and the last at                                       // 247
 *              the top). Element nodes are specified as                                                             // 248
 *                {type: "elem", elem: node}                                                                         // 249
 *              while kern nodes are specified as                                                                    // 250
 *                {type: "kern", size: size}                                                                         // 251
 *  - positionType: The method by which the vlist should be positioned. Valid                                        // 252
 *                  values are:                                                                                      // 253
 *                   - "individualShift": The children list only contains elem                                       // 254
 *                                        nodes, and each node contains an extra                                     // 255
 *                                        "shift" value of how much it should be                                     // 256
 *                                        shifted (note that shifting is always                                      // 257
 *                                        moving downwards). positionData is                                         // 258
 *                                        ignored.                                                                   // 259
 *                   - "top": The positionData specifies the topmost point of                                        // 260
 *                            the vlist (note this is expected to be a height,                                       // 261
 *                            so positive values move up)                                                            // 262
 *                   - "bottom": The positionData specifies the bottommost point                                     // 263
 *                               of the vlist (note this is expected to be a                                         // 264
 *                               depth, so positive values move down                                                 // 265
 *                   - "shift": The vlist will be positioned such that its                                           // 266
 *                              baseline is positionData away from the baseline                                      // 267
 *                              of the first child. Positive values move                                             // 268
 *                              downwards.                                                                           // 269
 *                   - "firstBaseline": The vlist will be positioned such that                                       // 270
 *                                      its baseline is aligned with the                                             // 271
 *                                      baseline of the first child.                                                 // 272
 *                                      positionData is ignored. (this is                                            // 273
 *                                      equivalent to "shift" with                                                   // 274
 *                                      positionData=0)                                                              // 275
 *  - positionData: Data used in different ways depending on positionType                                            // 276
 *  - options: An Options object                                                                                     // 277
 *                                                                                                                   // 278
 */                                                                                                                  // 279
var makeVList = function(children, positionType, positionData, options) {                                            // 280
    var depth;                                                                                                       // 281
    var currPos;                                                                                                     // 282
    var i;                                                                                                           // 283
    if (positionType === "individualShift") {                                                                        // 284
        var oldChildren = children;                                                                                  // 285
        children = [oldChildren[0]];                                                                                 // 286
                                                                                                                     // 287
        // Add in kerns to the list of children to get each element to be                                            // 288
        // shifted to the correct specified shift                                                                    // 289
        depth = -oldChildren[0].shift - oldChildren[0].elem.depth;                                                   // 290
        currPos = depth;                                                                                             // 291
        for (i = 1; i < oldChildren.length; i++) {                                                                   // 292
            var diff = -oldChildren[i].shift - currPos -                                                             // 293
                oldChildren[i].elem.depth;                                                                           // 294
            var size = diff -                                                                                        // 295
                (oldChildren[i - 1].elem.height +                                                                    // 296
                 oldChildren[i - 1].elem.depth);                                                                     // 297
                                                                                                                     // 298
            currPos = currPos + diff;                                                                                // 299
                                                                                                                     // 300
            children.push({type: "kern", size: size});                                                               // 301
            children.push(oldChildren[i]);                                                                           // 302
        }                                                                                                            // 303
    } else if (positionType === "top") {                                                                             // 304
        // We always start at the bottom, so calculate the bottom by adding up                                       // 305
        // all the sizes                                                                                             // 306
        var bottom = positionData;                                                                                   // 307
        for (i = 0; i < children.length; i++) {                                                                      // 308
            if (children[i].type === "kern") {                                                                       // 309
                bottom -= children[i].size;                                                                          // 310
            } else {                                                                                                 // 311
                bottom -= children[i].elem.height + children[i].elem.depth;                                          // 312
            }                                                                                                        // 313
        }                                                                                                            // 314
        depth = bottom;                                                                                              // 315
    } else if (positionType === "bottom") {                                                                          // 316
        depth = -positionData;                                                                                       // 317
    } else if (positionType === "shift") {                                                                           // 318
        depth = -children[0].elem.depth - positionData;                                                              // 319
    } else if (positionType === "firstBaseline") {                                                                   // 320
        depth = -children[0].elem.depth;                                                                             // 321
    } else {                                                                                                         // 322
        depth = 0;                                                                                                   // 323
    }                                                                                                                // 324
                                                                                                                     // 325
    // Make the fontSizer                                                                                            // 326
    var maxFontSize = 0;                                                                                             // 327
    for (i = 0; i < children.length; i++) {                                                                          // 328
        if (children[i].type === "elem") {                                                                           // 329
            maxFontSize = Math.max(maxFontSize, children[i].elem.maxFontSize);                                       // 330
        }                                                                                                            // 331
    }                                                                                                                // 332
    var fontSizer = makeFontSizer(options, maxFontSize);                                                             // 333
                                                                                                                     // 334
    // Create a new list of actual children at the correct offsets                                                   // 335
    var realChildren = [];                                                                                           // 336
    currPos = depth;                                                                                                 // 337
    for (i = 0; i < children.length; i++) {                                                                          // 338
        if (children[i].type === "kern") {                                                                           // 339
            currPos += children[i].size;                                                                             // 340
        } else {                                                                                                     // 341
            var child = children[i].elem;                                                                            // 342
                                                                                                                     // 343
            var shift = -child.depth - currPos;                                                                      // 344
            currPos += child.height + child.depth;                                                                   // 345
                                                                                                                     // 346
            var childWrap = makeSpan([], [fontSizer, child]);                                                        // 347
            childWrap.height -= shift;                                                                               // 348
            childWrap.depth += shift;                                                                                // 349
            childWrap.style.top = shift + "em";                                                                      // 350
                                                                                                                     // 351
            realChildren.push(childWrap);                                                                            // 352
        }                                                                                                            // 353
    }                                                                                                                // 354
                                                                                                                     // 355
    // Add in an element at the end with no offset to fix the calculation of                                         // 356
    // baselines in some browsers (namely IE, sometimes safari)                                                      // 357
    var baselineFix = makeSpan(                                                                                      // 358
        ["baseline-fix"], [fontSizer, new domTree.symbolNode("\u200b")]);                                            // 359
    realChildren.push(baselineFix);                                                                                  // 360
                                                                                                                     // 361
    var vlist = makeSpan(["vlist"], realChildren);                                                                   // 362
    // Fix the final height and depth, in case there were kerns at the ends                                          // 363
    // since the makeSpan calculation won't take that in to account.                                                 // 364
    vlist.height = Math.max(currPos, vlist.height);                                                                  // 365
    vlist.depth = Math.max(-depth, vlist.depth);                                                                     // 366
    return vlist;                                                                                                    // 367
};                                                                                                                   // 368
                                                                                                                     // 369
// A table of size -> font size for the different sizing functions                                                   // 370
var sizingMultiplier = {                                                                                             // 371
    size1: 0.5,                                                                                                      // 372
    size2: 0.7,                                                                                                      // 373
    size3: 0.8,                                                                                                      // 374
    size4: 0.9,                                                                                                      // 375
    size5: 1.0,                                                                                                      // 376
    size6: 1.2,                                                                                                      // 377
    size7: 1.44,                                                                                                     // 378
    size8: 1.73,                                                                                                     // 379
    size9: 2.07,                                                                                                     // 380
    size10: 2.49                                                                                                     // 381
};                                                                                                                   // 382
                                                                                                                     // 383
// A map of spacing functions to their attributes, like size and corresponding                                       // 384
// CSS class                                                                                                         // 385
var spacingFunctions = {                                                                                             // 386
    "\\qquad": {                                                                                                     // 387
        size: "2em",                                                                                                 // 388
        className: "qquad"                                                                                           // 389
    },                                                                                                               // 390
    "\\quad": {                                                                                                      // 391
        size: "1em",                                                                                                 // 392
        className: "quad"                                                                                            // 393
    },                                                                                                               // 394
    "\\enspace": {                                                                                                   // 395
        size: "0.5em",                                                                                               // 396
        className: "enspace"                                                                                         // 397
    },                                                                                                               // 398
    "\\;": {                                                                                                         // 399
        size: "0.277778em",                                                                                          // 400
        className: "thickspace"                                                                                      // 401
    },                                                                                                               // 402
    "\\:": {                                                                                                         // 403
        size: "0.22222em",                                                                                           // 404
        className: "mediumspace"                                                                                     // 405
    },                                                                                                               // 406
    "\\,": {                                                                                                         // 407
        size: "0.16667em",                                                                                           // 408
        className: "thinspace"                                                                                       // 409
    },                                                                                                               // 410
    "\\!": {                                                                                                         // 411
        size: "-0.16667em",                                                                                          // 412
        className: "negativethinspace"                                                                               // 413
    }                                                                                                                // 414
};                                                                                                                   // 415
                                                                                                                     // 416
/**                                                                                                                  // 417
 * Maps TeX font commands to objects containing:                                                                     // 418
 * - variant: string used for "mathvariant" attribute in buildMathML.js                                              // 419
 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics                                              // 420
 */                                                                                                                  // 421
// A map between tex font commands an MathML mathvariant attribute values                                            // 422
var fontMap = {                                                                                                      // 423
    // styles                                                                                                        // 424
    "mathbf": {                                                                                                      // 425
        variant: "bold",                                                                                             // 426
        fontName: "Main-Bold"                                                                                        // 427
    },                                                                                                               // 428
    "mathrm": {                                                                                                      // 429
        variant: "normal",                                                                                           // 430
        fontName: "Main-Regular"                                                                                     // 431
    },                                                                                                               // 432
    "textit": {                                                                                                      // 433
        variant: "italic",                                                                                           // 434
        fontName: "Main-Italic"                                                                                      // 435
    },                                                                                                               // 436
                                                                                                                     // 437
    // "mathit" is missing because it requires the use of two fonts: Main-Italic                                     // 438
    // and Math-Italic.  This is handled by a special case in makeOrd which ends                                     // 439
    // up calling mathit.                                                                                            // 440
                                                                                                                     // 441
    // families                                                                                                      // 442
    "mathbb": {                                                                                                      // 443
        variant: "double-struck",                                                                                    // 444
        fontName: "AMS-Regular"                                                                                      // 445
    },                                                                                                               // 446
    "mathcal": {                                                                                                     // 447
        variant: "script",                                                                                           // 448
        fontName: "Caligraphic-Regular"                                                                              // 449
    },                                                                                                               // 450
    "mathfrak": {                                                                                                    // 451
        variant: "fraktur",                                                                                          // 452
        fontName: "Fraktur-Regular"                                                                                  // 453
    },                                                                                                               // 454
    "mathscr": {                                                                                                     // 455
        variant: "script",                                                                                           // 456
        fontName: "Script-Regular"                                                                                   // 457
    },                                                                                                               // 458
    "mathsf": {                                                                                                      // 459
        variant: "sans-serif",                                                                                       // 460
        fontName: "SansSerif-Regular"                                                                                // 461
    },                                                                                                               // 462
    "mathtt": {                                                                                                      // 463
        variant: "monospace",                                                                                        // 464
        fontName: "Typewriter-Regular"                                                                               // 465
    }                                                                                                                // 466
};                                                                                                                   // 467
                                                                                                                     // 468
module.exports = {                                                                                                   // 469
    fontMap: fontMap,                                                                                                // 470
    makeSymbol: makeSymbol,                                                                                          // 471
    mathsym: mathsym,                                                                                                // 472
    makeSpan: makeSpan,                                                                                              // 473
    makeFragment: makeFragment,                                                                                      // 474
    makeVList: makeVList,                                                                                            // 475
    makeOrd: makeOrd,                                                                                                // 476
    prependChildren: prependChildren,                                                                                // 477
    sizingMultiplier: sizingMultiplier,                                                                              // 478
    spacingFunctions: spacingFunctions                                                                               // 479
};                                                                                                                   // 480
                                                                                                                     // 481
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"domTree.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/domTree.js                                            //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * These objects store the data about the DOM nodes we create, as well as some                                       // 2
 * extra data. They can then be transformed into real DOM nodes with the                                             // 3
 * `toNode` function or HTML markup using `toMarkup`. They are useful for both                                       // 4
 * storing extra properties on the nodes, as well as providing a way to easily                                       // 5
 * work with the DOM.                                                                                                // 6
 *                                                                                                                   // 7
 * Similar functions for working with MathML nodes exist in mathMLTree.js.                                           // 8
 */                                                                                                                  // 9
var unicodeRegexes = require("./unicodeRegexes");                                                                    // 10
var utils = require("./utils");                                                                                      // 11
                                                                                                                     // 12
/**                                                                                                                  // 13
 * Create an HTML className based on a list of classes. In addition to joining                                       // 14
 * with spaces, we also remove null or empty classes.                                                                // 15
 */                                                                                                                  // 16
var createClass = function(classes) {                                                                                // 17
    classes = classes.slice();                                                                                       // 18
    for (var i = classes.length - 1; i >= 0; i--) {                                                                  // 19
        if (!classes[i]) {                                                                                           // 20
            classes.splice(i, 1);                                                                                    // 21
        }                                                                                                            // 22
    }                                                                                                                // 23
                                                                                                                     // 24
    return classes.join(" ");                                                                                        // 25
};                                                                                                                   // 26
                                                                                                                     // 27
/**                                                                                                                  // 28
 * This node represents a span node, with a className, a list of children, and                                       // 29
 * an inline style. It also contains information about its height, depth, and                                        // 30
 * maxFontSize.                                                                                                      // 31
 */                                                                                                                  // 32
function span(classes, children, options) {                                                                          // 33
    this.classes = classes || [];                                                                                    // 34
    this.children = children || [];                                                                                  // 35
    this.height = 0;                                                                                                 // 36
    this.depth = 0;                                                                                                  // 37
    this.maxFontSize = 0;                                                                                            // 38
    this.style = {};                                                                                                 // 39
    this.attributes = {};                                                                                            // 40
    if (options) {                                                                                                   // 41
        if (options.style.isTight()) {                                                                               // 42
            this.classes.push("mtight");                                                                             // 43
        }                                                                                                            // 44
        if (options.getColor()) {                                                                                    // 45
            this.style.color = options.getColor();                                                                   // 46
        }                                                                                                            // 47
    }                                                                                                                // 48
}                                                                                                                    // 49
                                                                                                                     // 50
/**                                                                                                                  // 51
 * Sets an arbitrary attribute on the span. Warning: use this wisely. Not all                                        // 52
 * browsers support attributes the same, and having too many custom attributes                                       // 53
 * is probably bad.                                                                                                  // 54
 */                                                                                                                  // 55
span.prototype.setAttribute = function(attribute, value) {                                                           // 56
    this.attributes[attribute] = value;                                                                              // 57
};                                                                                                                   // 58
                                                                                                                     // 59
span.prototype.tryCombine = function(sibling) {                                                                      // 60
    return false;                                                                                                    // 61
};                                                                                                                   // 62
                                                                                                                     // 63
/**                                                                                                                  // 64
 * Convert the span into an HTML node                                                                                // 65
 */                                                                                                                  // 66
span.prototype.toNode = function() {                                                                                 // 67
    var span = document.createElement("span");                                                                       // 68
                                                                                                                     // 69
    // Apply the class                                                                                               // 70
    span.className = createClass(this.classes);                                                                      // 71
                                                                                                                     // 72
    // Apply inline styles                                                                                           // 73
    for (var style in this.style) {                                                                                  // 74
        if (Object.prototype.hasOwnProperty.call(this.style, style)) {                                               // 75
            span.style[style] = this.style[style];                                                                   // 76
        }                                                                                                            // 77
    }                                                                                                                // 78
                                                                                                                     // 79
    // Apply attributes                                                                                              // 80
    for (var attr in this.attributes) {                                                                              // 81
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {                                           // 82
            span.setAttribute(attr, this.attributes[attr]);                                                          // 83
        }                                                                                                            // 84
    }                                                                                                                // 85
                                                                                                                     // 86
    // Append the children, also as HTML nodes                                                                       // 87
    for (var i = 0; i < this.children.length; i++) {                                                                 // 88
        span.appendChild(this.children[i].toNode());                                                                 // 89
    }                                                                                                                // 90
                                                                                                                     // 91
    return span;                                                                                                     // 92
};                                                                                                                   // 93
                                                                                                                     // 94
/**                                                                                                                  // 95
 * Convert the span into an HTML markup string                                                                       // 96
 */                                                                                                                  // 97
span.prototype.toMarkup = function() {                                                                               // 98
    var markup = "<span";                                                                                            // 99
                                                                                                                     // 100
    // Add the class                                                                                                 // 101
    if (this.classes.length) {                                                                                       // 102
        markup += " class=\"";                                                                                       // 103
        markup += utils.escape(createClass(this.classes));                                                           // 104
        markup += "\"";                                                                                              // 105
    }                                                                                                                // 106
                                                                                                                     // 107
    var styles = "";                                                                                                 // 108
                                                                                                                     // 109
    // Add the styles, after hyphenation                                                                             // 110
    for (var style in this.style) {                                                                                  // 111
        if (this.style.hasOwnProperty(style)) {                                                                      // 112
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";                                        // 113
        }                                                                                                            // 114
    }                                                                                                                // 115
                                                                                                                     // 116
    if (styles) {                                                                                                    // 117
        markup += " style=\"" + utils.escape(styles) + "\"";                                                         // 118
    }                                                                                                                // 119
                                                                                                                     // 120
    // Add the attributes                                                                                            // 121
    for (var attr in this.attributes) {                                                                              // 122
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {                                           // 123
            markup += " " + attr + "=\"";                                                                            // 124
            markup += utils.escape(this.attributes[attr]);                                                           // 125
            markup += "\"";                                                                                          // 126
        }                                                                                                            // 127
    }                                                                                                                // 128
                                                                                                                     // 129
    markup += ">";                                                                                                   // 130
                                                                                                                     // 131
    // Add the markup of the children, also as markup                                                                // 132
    for (var i = 0; i < this.children.length; i++) {                                                                 // 133
        markup += this.children[i].toMarkup();                                                                       // 134
    }                                                                                                                // 135
                                                                                                                     // 136
    markup += "</span>";                                                                                             // 137
                                                                                                                     // 138
    return markup;                                                                                                   // 139
};                                                                                                                   // 140
                                                                                                                     // 141
/**                                                                                                                  // 142
 * This node represents a document fragment, which contains elements, but when                                       // 143
 * placed into the DOM doesn't have any representation itself. Thus, it only                                         // 144
 * contains children and doesn't have any HTML properties. It also keeps track                                       // 145
 * of a height, depth, and maxFontSize.                                                                              // 146
 */                                                                                                                  // 147
function documentFragment(children) {                                                                                // 148
    this.children = children || [];                                                                                  // 149
    this.height = 0;                                                                                                 // 150
    this.depth = 0;                                                                                                  // 151
    this.maxFontSize = 0;                                                                                            // 152
}                                                                                                                    // 153
                                                                                                                     // 154
/**                                                                                                                  // 155
 * Convert the fragment into a node                                                                                  // 156
 */                                                                                                                  // 157
documentFragment.prototype.toNode = function() {                                                                     // 158
    // Create a fragment                                                                                             // 159
    var frag = document.createDocumentFragment();                                                                    // 160
                                                                                                                     // 161
    // Append the children                                                                                           // 162
    for (var i = 0; i < this.children.length; i++) {                                                                 // 163
        frag.appendChild(this.children[i].toNode());                                                                 // 164
    }                                                                                                                // 165
                                                                                                                     // 166
    return frag;                                                                                                     // 167
};                                                                                                                   // 168
                                                                                                                     // 169
/**                                                                                                                  // 170
 * Convert the fragment into HTML markup                                                                             // 171
 */                                                                                                                  // 172
documentFragment.prototype.toMarkup = function() {                                                                   // 173
    var markup = "";                                                                                                 // 174
                                                                                                                     // 175
    // Simply concatenate the markup for the children together                                                       // 176
    for (var i = 0; i < this.children.length; i++) {                                                                 // 177
        markup += this.children[i].toMarkup();                                                                       // 178
    }                                                                                                                // 179
                                                                                                                     // 180
    return markup;                                                                                                   // 181
};                                                                                                                   // 182
                                                                                                                     // 183
var iCombinations = {                                                                                                // 184
    'î': '\u0131\u0302',                                                                                             // 185
    'ï': '\u0131\u0308',                                                                                             // 186
    'í': '\u0131\u0301',                                                                                             // 187
    // 'ī': '\u0131\u0304', // enable when we add Extended Latin                                                     // 188
    'ì': '\u0131\u0300'                                                                                              // 189
};                                                                                                                   // 190
                                                                                                                     // 191
/**                                                                                                                  // 192
 * A symbol node contains information about a single symbol. It either renders                                       // 193
 * to a single text node, or a span with a single text node in it, depending on                                      // 194
 * whether it has CSS classes, styles, or needs italic correction.                                                   // 195
 */                                                                                                                  // 196
function symbolNode(value, height, depth, italic, skew, classes, style) {                                            // 197
    this.value = value || "";                                                                                        // 198
    this.height = height || 0;                                                                                       // 199
    this.depth = depth || 0;                                                                                         // 200
    this.italic = italic || 0;                                                                                       // 201
    this.skew = skew || 0;                                                                                           // 202
    this.classes = classes || [];                                                                                    // 203
    this.style = style || {};                                                                                        // 204
    this.maxFontSize = 0;                                                                                            // 205
                                                                                                                     // 206
    // Mark CJK characters with specific classes so that we can specify which                                        // 207
    // fonts to use.  This allows us to render these characters with a serif                                         // 208
    // font in situations where the browser would either default to a sans serif                                     // 209
    // or render a placeholder character.                                                                            // 210
    if (unicodeRegexes.cjkRegex.test(value)) {                                                                       // 211
        // I couldn't find any fonts that contained Hangul as well as all of                                         // 212
        // the other characters we wanted to test there for it gets its own                                          // 213
        // CSS class.                                                                                                // 214
        if (unicodeRegexes.hangulRegex.test(value)) {                                                                // 215
            this.classes.push('hangul_fallback');                                                                    // 216
        } else {                                                                                                     // 217
            this.classes.push('cjk_fallback');                                                                       // 218
        }                                                                                                            // 219
    }                                                                                                                // 220
                                                                                                                     // 221
    if (/[îïíì]/.test(this.value)) {    // add ī when we add Extended Latin                                          // 222
        this.value = iCombinations[this.value];                                                                      // 223
    }                                                                                                                // 224
}                                                                                                                    // 225
                                                                                                                     // 226
symbolNode.prototype.tryCombine = function(sibling) {                                                                // 227
    if (!sibling                                                                                                     // 228
        || !(sibling instanceof symbolNode)                                                                          // 229
        || this.italic > 0                                                                                           // 230
        || createClass(this.classes) !== createClass(sibling.classes)                                                // 231
        || this.skew !== sibling.skew                                                                                // 232
        || this.maxFontSize !== sibling.maxFontSize) {                                                               // 233
        return false;                                                                                                // 234
    }                                                                                                                // 235
    for (var style in this.style) {                                                                                  // 236
        if (this.style.hasOwnProperty(style)                                                                         // 237
            && this.style[style] !== sibling.style[style]) {                                                         // 238
            return false;                                                                                            // 239
        }                                                                                                            // 240
    }                                                                                                                // 241
    for (style in sibling.style) {                                                                                   // 242
        if (sibling.style.hasOwnProperty(style)                                                                      // 243
            && this.style[style] !== sibling.style[style]) {                                                         // 244
            return false;                                                                                            // 245
        }                                                                                                            // 246
    }                                                                                                                // 247
    this.value += sibling.value;                                                                                     // 248
    this.height = Math.max(this.height, sibling.height);                                                             // 249
    this.depth = Math.max(this.depth, sibling.depth);                                                                // 250
    this.italic = sibling.italic;                                                                                    // 251
    return true;                                                                                                     // 252
};                                                                                                                   // 253
                                                                                                                     // 254
/**                                                                                                                  // 255
 * Creates a text node or span from a symbol node. Note that a span is only                                          // 256
 * created if it is needed.                                                                                          // 257
 */                                                                                                                  // 258
symbolNode.prototype.toNode = function() {                                                                           // 259
    var node = document.createTextNode(this.value);                                                                  // 260
    var span = null;                                                                                                 // 261
                                                                                                                     // 262
    if (this.italic > 0) {                                                                                           // 263
        span = document.createElement("span");                                                                       // 264
        span.style.marginRight = this.italic + "em";                                                                 // 265
    }                                                                                                                // 266
                                                                                                                     // 267
    if (this.classes.length > 0) {                                                                                   // 268
        span = span || document.createElement("span");                                                               // 269
        span.className = createClass(this.classes);                                                                  // 270
    }                                                                                                                // 271
                                                                                                                     // 272
    for (var style in this.style) {                                                                                  // 273
        if (this.style.hasOwnProperty(style)) {                                                                      // 274
            span = span || document.createElement("span");                                                           // 275
            span.style[style] = this.style[style];                                                                   // 276
        }                                                                                                            // 277
    }                                                                                                                // 278
                                                                                                                     // 279
    if (span) {                                                                                                      // 280
        span.appendChild(node);                                                                                      // 281
        return span;                                                                                                 // 282
    } else {                                                                                                         // 283
        return node;                                                                                                 // 284
    }                                                                                                                // 285
};                                                                                                                   // 286
                                                                                                                     // 287
/**                                                                                                                  // 288
 * Creates markup for a symbol node.                                                                                 // 289
 */                                                                                                                  // 290
symbolNode.prototype.toMarkup = function() {                                                                         // 291
    // TODO(alpert): More duplication than I'd like from                                                             // 292
    // span.prototype.toMarkup and symbolNode.prototype.toNode...                                                    // 293
    var needsSpan = false;                                                                                           // 294
                                                                                                                     // 295
    var markup = "<span";                                                                                            // 296
                                                                                                                     // 297
    if (this.classes.length) {                                                                                       // 298
        needsSpan = true;                                                                                            // 299
        markup += " class=\"";                                                                                       // 300
        markup += utils.escape(createClass(this.classes));                                                           // 301
        markup += "\"";                                                                                              // 302
    }                                                                                                                // 303
                                                                                                                     // 304
    var styles = "";                                                                                                 // 305
                                                                                                                     // 306
    if (this.italic > 0) {                                                                                           // 307
        styles += "margin-right:" + this.italic + "em;";                                                             // 308
    }                                                                                                                // 309
    for (var style in this.style) {                                                                                  // 310
        if (this.style.hasOwnProperty(style)) {                                                                      // 311
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";                                        // 312
        }                                                                                                            // 313
    }                                                                                                                // 314
                                                                                                                     // 315
    if (styles) {                                                                                                    // 316
        needsSpan = true;                                                                                            // 317
        markup += " style=\"" + utils.escape(styles) + "\"";                                                         // 318
    }                                                                                                                // 319
                                                                                                                     // 320
    var escaped = utils.escape(this.value);                                                                          // 321
    if (needsSpan) {                                                                                                 // 322
        markup += ">";                                                                                               // 323
        markup += escaped;                                                                                           // 324
        markup += "</span>";                                                                                         // 325
        return markup;                                                                                               // 326
    } else {                                                                                                         // 327
        return escaped;                                                                                              // 328
    }                                                                                                                // 329
};                                                                                                                   // 330
                                                                                                                     // 331
module.exports = {                                                                                                   // 332
    span: span,                                                                                                      // 333
    documentFragment: documentFragment,                                                                              // 334
    symbolNode: symbolNode                                                                                           // 335
};                                                                                                                   // 336
                                                                                                                     // 337
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/utils.js                                              //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file contains a list of utility functions which are useful in other                                          // 2
 * files.                                                                                                            // 3
 */                                                                                                                  // 4
                                                                                                                     // 5
/**                                                                                                                  // 6
 * Provide an `indexOf` function which works in IE8, but defers to native if                                         // 7
 * possible.                                                                                                         // 8
 */                                                                                                                  // 9
var nativeIndexOf = Array.prototype.indexOf;                                                                         // 10
var indexOf = function(list, elem) {                                                                                 // 11
    if (list == null) {                                                                                              // 12
        return -1;                                                                                                   // 13
    }                                                                                                                // 14
    if (nativeIndexOf && list.indexOf === nativeIndexOf) {                                                           // 15
        return list.indexOf(elem);                                                                                   // 16
    }                                                                                                                // 17
    var i = 0;                                                                                                       // 18
    var l = list.length;                                                                                             // 19
    for (; i < l; i++) {                                                                                             // 20
        if (list[i] === elem) {                                                                                      // 21
            return i;                                                                                                // 22
        }                                                                                                            // 23
    }                                                                                                                // 24
    return -1;                                                                                                       // 25
};                                                                                                                   // 26
                                                                                                                     // 27
/**                                                                                                                  // 28
 * Return whether an element is contained in a list                                                                  // 29
 */                                                                                                                  // 30
var contains = function(list, elem) {                                                                                // 31
    return indexOf(list, elem) !== -1;                                                                               // 32
};                                                                                                                   // 33
                                                                                                                     // 34
/**                                                                                                                  // 35
 * Provide a default value if a setting is undefined                                                                 // 36
 */                                                                                                                  // 37
var deflt = function(setting, defaultIfUndefined) {                                                                  // 38
    return setting === undefined ? defaultIfUndefined : setting;                                                     // 39
};                                                                                                                   // 40
                                                                                                                     // 41
// hyphenate and escape adapted from Facebook's React under Apache 2 license                                         // 42
                                                                                                                     // 43
var uppercase = /([A-Z])/g;                                                                                          // 44
var hyphenate = function(str) {                                                                                      // 45
    return str.replace(uppercase, "-$1").toLowerCase();                                                              // 46
};                                                                                                                   // 47
                                                                                                                     // 48
var ESCAPE_LOOKUP = {                                                                                                // 49
    "&": "&amp;",                                                                                                    // 50
    ">": "&gt;",                                                                                                     // 51
    "<": "&lt;",                                                                                                     // 52
    "\"": "&quot;",                                                                                                  // 53
    "'": "&#x27;"                                                                                                    // 54
};                                                                                                                   // 55
                                                                                                                     // 56
var ESCAPE_REGEX = /[&><"']/g;                                                                                       // 57
                                                                                                                     // 58
function escaper(match) {                                                                                            // 59
    return ESCAPE_LOOKUP[match];                                                                                     // 60
}                                                                                                                    // 61
                                                                                                                     // 62
/**                                                                                                                  // 63
 * Escapes text to prevent scripting attacks.                                                                        // 64
 *                                                                                                                   // 65
 * @param {*} text Text value to escape.                                                                             // 66
 * @return {string} An escaped string.                                                                               // 67
 */                                                                                                                  // 68
function escape(text) {                                                                                              // 69
    return ("" + text).replace(ESCAPE_REGEX, escaper);                                                               // 70
}                                                                                                                    // 71
                                                                                                                     // 72
/**                                                                                                                  // 73
 * A function to set the text content of a DOM element in all supported                                              // 74
 * browsers. Note that we don't define this if there is no document.                                                 // 75
 */                                                                                                                  // 76
var setTextContent;                                                                                                  // 77
if (typeof document !== "undefined") {                                                                               // 78
    var testNode = document.createElement("span");                                                                   // 79
    if ("textContent" in testNode) {                                                                                 // 80
        setTextContent = function(node, text) {                                                                      // 81
            node.textContent = text;                                                                                 // 82
        };                                                                                                           // 83
    } else {                                                                                                         // 84
        setTextContent = function(node, text) {                                                                      // 85
            node.innerText = text;                                                                                   // 86
        };                                                                                                           // 87
    }                                                                                                                // 88
}                                                                                                                    // 89
                                                                                                                     // 90
/**                                                                                                                  // 91
 * A function to clear a node.                                                                                       // 92
 */                                                                                                                  // 93
function clearNode(node) {                                                                                           // 94
    setTextContent(node, "");                                                                                        // 95
}                                                                                                                    // 96
                                                                                                                     // 97
module.exports = {                                                                                                   // 98
    contains: contains,                                                                                              // 99
    deflt: deflt,                                                                                                    // 100
    escape: escape,                                                                                                  // 101
    hyphenate: hyphenate,                                                                                            // 102
    indexOf: indexOf,                                                                                                // 103
    setTextContent: setTextContent,                                                                                  // 104
    clearNode: clearNode                                                                                             // 105
};                                                                                                                   // 106
                                                                                                                     // 107
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"symbols.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/symbols.js                                            //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file holds a list of all no-argument functions and single-character                                          // 2
 * symbols (like 'a' or ';').                                                                                        // 3
 *                                                                                                                   // 4
 * For each of the symbols, there are three properties they can have:                                                // 5
 * - font (required): the font to be used for this symbol. Either "main" (the                                        // 6
     normal font), or "ams" (the ams fonts).                                                                         // 7
 * - group (required): the ParseNode group type the symbol should have (i.e.                                         // 8
     "textord", "mathord", etc).                                                                                     // 9
     See https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types                                                // 10
 * - replace: the character that this symbol or function should be                                                   // 11
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi                                             // 12
 *   character in the main font).                                                                                    // 13
 *                                                                                                                   // 14
 * The outermost map in the table indicates what mode the symbols should be                                          // 15
 * accepted in (e.g. "math" or "text").                                                                              // 16
 */                                                                                                                  // 17
                                                                                                                     // 18
module.exports = {                                                                                                   // 19
    math: {},                                                                                                        // 20
    text: {}                                                                                                         // 21
};                                                                                                                   // 22
                                                                                                                     // 23
function defineSymbol(mode, font, group, replace, name) {                                                            // 24
    module.exports[mode][name] = {                                                                                   // 25
        font: font,                                                                                                  // 26
        group: group,                                                                                                // 27
        replace: replace                                                                                             // 28
    };                                                                                                               // 29
}                                                                                                                    // 30
                                                                                                                     // 31
// Some abbreviations for commonly used strings.                                                                     // 32
// This helps minify the code, and also spotting typos using jshint.                                                 // 33
                                                                                                                     // 34
// modes:                                                                                                            // 35
var math = "math";                                                                                                   // 36
var text = "text";                                                                                                   // 37
                                                                                                                     // 38
// fonts:                                                                                                            // 39
var main = "main";                                                                                                   // 40
var ams = "ams";                                                                                                     // 41
                                                                                                                     // 42
// groups:                                                                                                           // 43
var accent = "accent";                                                                                               // 44
var bin = "bin";                                                                                                     // 45
var close = "close";                                                                                                 // 46
var inner = "inner";                                                                                                 // 47
var mathord = "mathord";                                                                                             // 48
var op = "op";                                                                                                       // 49
var open = "open";                                                                                                   // 50
var punct = "punct";                                                                                                 // 51
var rel = "rel";                                                                                                     // 52
var spacing = "spacing";                                                                                             // 53
var textord = "textord";                                                                                             // 54
                                                                                                                     // 55
// Now comes the symbol table                                                                                        // 56
                                                                                                                     // 57
// Relation Symbols                                                                                                  // 58
defineSymbol(math, main, rel, "\u2261", "\\equiv");                                                                  // 59
defineSymbol(math, main, rel, "\u227a", "\\prec");                                                                   // 60
defineSymbol(math, main, rel, "\u227b", "\\succ");                                                                   // 61
defineSymbol(math, main, rel, "\u223c", "\\sim");                                                                    // 62
defineSymbol(math, main, rel, "\u22a5", "\\perp");                                                                   // 63
defineSymbol(math, main, rel, "\u2aaf", "\\preceq");                                                                 // 64
defineSymbol(math, main, rel, "\u2ab0", "\\succeq");                                                                 // 65
defineSymbol(math, main, rel, "\u2243", "\\simeq");                                                                  // 66
defineSymbol(math, main, rel, "\u2223", "\\mid");                                                                    // 67
defineSymbol(math, main, rel, "\u226a", "\\ll");                                                                     // 68
defineSymbol(math, main, rel, "\u226b", "\\gg");                                                                     // 69
defineSymbol(math, main, rel, "\u224d", "\\asymp");                                                                  // 70
defineSymbol(math, main, rel, "\u2225", "\\parallel");                                                               // 71
defineSymbol(math, main, rel, "\u22c8", "\\bowtie");                                                                 // 72
defineSymbol(math, main, rel, "\u2323", "\\smile");                                                                  // 73
defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq");                                                             // 74
defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq");                                                             // 75
defineSymbol(math, main, rel, "\u2250", "\\doteq");                                                                  // 76
defineSymbol(math, main, rel, "\u2322", "\\frown");                                                                  // 77
defineSymbol(math, main, rel, "\u220b", "\\ni");                                                                     // 78
defineSymbol(math, main, rel, "\u221d", "\\propto");                                                                 // 79
defineSymbol(math, main, rel, "\u22a2", "\\vdash");                                                                  // 80
defineSymbol(math, main, rel, "\u22a3", "\\dashv");                                                                  // 81
defineSymbol(math, main, rel, "\u220b", "\\owns");                                                                   // 82
                                                                                                                     // 83
// Punctuation                                                                                                       // 84
defineSymbol(math, main, punct, "\u002e", "\\ldotp");                                                                // 85
defineSymbol(math, main, punct, "\u22c5", "\\cdotp");                                                                // 86
                                                                                                                     // 87
// Misc Symbols                                                                                                      // 88
defineSymbol(math, main, textord, "\u0023", "\\#");                                                                  // 89
defineSymbol(text, main, textord, "\u0023", "\\#");                                                                  // 90
defineSymbol(math, main, textord, "\u0026", "\\&");                                                                  // 91
defineSymbol(text, main, textord, "\u0026", "\\&");                                                                  // 92
defineSymbol(math, main, textord, "\u2135", "\\aleph");                                                              // 93
defineSymbol(math, main, textord, "\u2200", "\\forall");                                                             // 94
defineSymbol(math, main, textord, "\u210f", "\\hbar");                                                               // 95
defineSymbol(math, main, textord, "\u2203", "\\exists");                                                             // 96
defineSymbol(math, main, textord, "\u2207", "\\nabla");                                                              // 97
defineSymbol(math, main, textord, "\u266d", "\\flat");                                                               // 98
defineSymbol(math, main, textord, "\u2113", "\\ell");                                                                // 99
defineSymbol(math, main, textord, "\u266e", "\\natural");                                                            // 100
defineSymbol(math, main, textord, "\u2663", "\\clubsuit");                                                           // 101
defineSymbol(math, main, textord, "\u2118", "\\wp");                                                                 // 102
defineSymbol(math, main, textord, "\u266f", "\\sharp");                                                              // 103
defineSymbol(math, main, textord, "\u2662", "\\diamondsuit");                                                        // 104
defineSymbol(math, main, textord, "\u211c", "\\Re");                                                                 // 105
defineSymbol(math, main, textord, "\u2661", "\\heartsuit");                                                          // 106
defineSymbol(math, main, textord, "\u2111", "\\Im");                                                                 // 107
defineSymbol(math, main, textord, "\u2660", "\\spadesuit");                                                          // 108
                                                                                                                     // 109
// Math and Text                                                                                                     // 110
defineSymbol(math, main, textord, "\u2020", "\\dag");                                                                // 111
defineSymbol(math, main, textord, "\u2021", "\\ddag");                                                               // 112
                                                                                                                     // 113
// Large Delimiters                                                                                                  // 114
defineSymbol(math, main, close, "\u23b1", "\\rmoustache");                                                           // 115
defineSymbol(math, main, open, "\u23b0", "\\lmoustache");                                                            // 116
defineSymbol(math, main, close, "\u27ef", "\\rgroup");                                                               // 117
defineSymbol(math, main, open, "\u27ee", "\\lgroup");                                                                // 118
                                                                                                                     // 119
// Binary Operators                                                                                                  // 120
defineSymbol(math, main, bin, "\u2213", "\\mp");                                                                     // 121
defineSymbol(math, main, bin, "\u2296", "\\ominus");                                                                 // 122
defineSymbol(math, main, bin, "\u228e", "\\uplus");                                                                  // 123
defineSymbol(math, main, bin, "\u2293", "\\sqcap");                                                                  // 124
defineSymbol(math, main, bin, "\u2217", "\\ast");                                                                    // 125
defineSymbol(math, main, bin, "\u2294", "\\sqcup");                                                                  // 126
defineSymbol(math, main, bin, "\u25ef", "\\bigcirc");                                                                // 127
defineSymbol(math, main, bin, "\u2219", "\\bullet");                                                                 // 128
defineSymbol(math, main, bin, "\u2021", "\\ddagger");                                                                // 129
defineSymbol(math, main, bin, "\u2240", "\\wr");                                                                     // 130
defineSymbol(math, main, bin, "\u2a3f", "\\amalg");                                                                  // 131
                                                                                                                     // 132
// Arrow Symbols                                                                                                     // 133
defineSymbol(math, main, rel, "\u27f5", "\\longleftarrow");                                                          // 134
defineSymbol(math, main, rel, "\u21d0", "\\Leftarrow");                                                              // 135
defineSymbol(math, main, rel, "\u27f8", "\\Longleftarrow");                                                          // 136
defineSymbol(math, main, rel, "\u27f6", "\\longrightarrow");                                                         // 137
defineSymbol(math, main, rel, "\u21d2", "\\Rightarrow");                                                             // 138
defineSymbol(math, main, rel, "\u27f9", "\\Longrightarrow");                                                         // 139
defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow");                                                         // 140
defineSymbol(math, main, rel, "\u27f7", "\\longleftrightarrow");                                                     // 141
defineSymbol(math, main, rel, "\u21d4", "\\Leftrightarrow");                                                         // 142
defineSymbol(math, main, rel, "\u27fa", "\\Longleftrightarrow");                                                     // 143
defineSymbol(math, main, rel, "\u21a6", "\\mapsto");                                                                 // 144
defineSymbol(math, main, rel, "\u27fc", "\\longmapsto");                                                             // 145
defineSymbol(math, main, rel, "\u2197", "\\nearrow");                                                                // 146
defineSymbol(math, main, rel, "\u21a9", "\\hookleftarrow");                                                          // 147
defineSymbol(math, main, rel, "\u21aa", "\\hookrightarrow");                                                         // 148
defineSymbol(math, main, rel, "\u2198", "\\searrow");                                                                // 149
defineSymbol(math, main, rel, "\u21bc", "\\leftharpoonup");                                                          // 150
defineSymbol(math, main, rel, "\u21c0", "\\rightharpoonup");                                                         // 151
defineSymbol(math, main, rel, "\u2199", "\\swarrow");                                                                // 152
defineSymbol(math, main, rel, "\u21bd", "\\leftharpoondown");                                                        // 153
defineSymbol(math, main, rel, "\u21c1", "\\rightharpoondown");                                                       // 154
defineSymbol(math, main, rel, "\u2196", "\\nwarrow");                                                                // 155
defineSymbol(math, main, rel, "\u21cc", "\\rightleftharpoons");                                                      // 156
                                                                                                                     // 157
// AMS Negated Binary Relations                                                                                      // 158
defineSymbol(math, ams, rel, "\u226e", "\\nless");                                                                   // 159
defineSymbol(math, ams, rel, "\ue010", "\\nleqslant");                                                               // 160
defineSymbol(math, ams, rel, "\ue011", "\\nleqq");                                                                   // 161
defineSymbol(math, ams, rel, "\u2a87", "\\lneq");                                                                    // 162
defineSymbol(math, ams, rel, "\u2268", "\\lneqq");                                                                   // 163
defineSymbol(math, ams, rel, "\ue00c", "\\lvertneqq");                                                               // 164
defineSymbol(math, ams, rel, "\u22e6", "\\lnsim");                                                                   // 165
defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox");                                                                // 166
defineSymbol(math, ams, rel, "\u2280", "\\nprec");                                                                   // 167
defineSymbol(math, ams, rel, "\u22e0", "\\npreceq");                                                                 // 168
defineSymbol(math, ams, rel, "\u22e8", "\\precnsim");                                                                // 169
defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox");                                                             // 170
defineSymbol(math, ams, rel, "\u2241", "\\nsim");                                                                    // 171
defineSymbol(math, ams, rel, "\ue006", "\\nshortmid");                                                               // 172
defineSymbol(math, ams, rel, "\u2224", "\\nmid");                                                                    // 173
defineSymbol(math, ams, rel, "\u22ac", "\\nvdash");                                                                  // 174
defineSymbol(math, ams, rel, "\u22ad", "\\nvDash");                                                                  // 175
defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");                                                           // 176
defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq");                                                         // 177
defineSymbol(math, ams, rel, "\u228a", "\\subsetneq");                                                               // 178
defineSymbol(math, ams, rel, "\ue01a", "\\varsubsetneq");                                                            // 179
defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq");                                                              // 180
defineSymbol(math, ams, rel, "\ue017", "\\varsubsetneqq");                                                           // 181
defineSymbol(math, ams, rel, "\u226f", "\\ngtr");                                                                    // 182
defineSymbol(math, ams, rel, "\ue00f", "\\ngeqslant");                                                               // 183
defineSymbol(math, ams, rel, "\ue00e", "\\ngeqq");                                                                   // 184
defineSymbol(math, ams, rel, "\u2a88", "\\gneq");                                                                    // 185
defineSymbol(math, ams, rel, "\u2269", "\\gneqq");                                                                   // 186
defineSymbol(math, ams, rel, "\ue00d", "\\gvertneqq");                                                               // 187
defineSymbol(math, ams, rel, "\u22e7", "\\gnsim");                                                                   // 188
defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox");                                                                // 189
defineSymbol(math, ams, rel, "\u2281", "\\nsucc");                                                                   // 190
defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq");                                                                 // 191
defineSymbol(math, ams, rel, "\u22e9", "\\succnsim");                                                                // 192
defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox");                                                             // 193
defineSymbol(math, ams, rel, "\u2246", "\\ncong");                                                                   // 194
defineSymbol(math, ams, rel, "\ue007", "\\nshortparallel");                                                          // 195
defineSymbol(math, ams, rel, "\u2226", "\\nparallel");                                                               // 196
defineSymbol(math, ams, rel, "\u22af", "\\nVDash");                                                                  // 197
defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");                                                          // 198
defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq");                                                        // 199
defineSymbol(math, ams, rel, "\ue018", "\\nsupseteqq");                                                              // 200
defineSymbol(math, ams, rel, "\u228b", "\\supsetneq");                                                               // 201
defineSymbol(math, ams, rel, "\ue01b", "\\varsupsetneq");                                                            // 202
defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq");                                                              // 203
defineSymbol(math, ams, rel, "\ue019", "\\varsupsetneqq");                                                           // 204
defineSymbol(math, ams, rel, "\u22ae", "\\nVdash");                                                                  // 205
defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq");                                                                // 206
defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq");                                                                // 207
defineSymbol(math, ams, rel, "\ue016", "\\nsubseteqq");                                                              // 208
defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");                                                                   // 209
defineSymbol(math, ams, bin, "\u22b5", "\\unrhd");                                                                   // 210
                                                                                                                     // 211
// AMS Negated Arrows                                                                                                // 212
defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow");                                                              // 213
defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow");                                                             // 214
defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow");                                                              // 215
defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow");                                                             // 216
defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow");                                                         // 217
defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow");                                                         // 218
                                                                                                                     // 219
// AMS Misc                                                                                                          // 220
defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");                                                             // 221
defineSymbol(math, ams, textord, "\u210f", "\\hslash");                                                              // 222
defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");                                                        // 223
defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");                                                             // 224
defineSymbol(math, ams, textord, "\u24c8", "\\circledS");                                                            // 225
defineSymbol(math, ams, textord, "\u00ae", "\\circledR");                                                            // 226
defineSymbol(math, ams, textord, "\u2221", "\\measuredangle");                                                       // 227
defineSymbol(math, ams, textord, "\u2204", "\\nexists");                                                             // 228
defineSymbol(math, ams, textord, "\u2127", "\\mho");                                                                 // 229
defineSymbol(math, ams, textord, "\u2132", "\\Finv");                                                                // 230
defineSymbol(math, ams, textord, "\u2141", "\\Game");                                                                // 231
defineSymbol(math, ams, textord, "\u006b", "\\Bbbk");                                                                // 232
defineSymbol(math, ams, textord, "\u2035", "\\backprime");                                                           // 233
defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");                                                       // 234
defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");                                                   // 235
defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");                                                         // 236
defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");                                                        // 237
defineSymbol(math, ams, textord, "\u2605", "\\bigstar");                                                             // 238
defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle");                                                      // 239
defineSymbol(math, ams, textord, "\u2201", "\\complement");                                                          // 240
defineSymbol(math, ams, textord, "\u00f0", "\\eth");                                                                 // 241
defineSymbol(math, ams, textord, "\u2571", "\\diagup");                                                              // 242
defineSymbol(math, ams, textord, "\u2572", "\\diagdown");                                                            // 243
defineSymbol(math, ams, textord, "\u25a1", "\\square");                                                              // 244
defineSymbol(math, ams, textord, "\u25a1", "\\Box");                                                                 // 245
defineSymbol(math, ams, textord, "\u25ca", "\\Diamond");                                                             // 246
defineSymbol(math, ams, textord, "\u00a5", "\\yen");                                                                 // 247
defineSymbol(math, ams, textord, "\u2713", "\\checkmark");                                                           // 248
                                                                                                                     // 249
// AMS Hebrew                                                                                                        // 250
defineSymbol(math, ams, textord, "\u2136", "\\beth");                                                                // 251
defineSymbol(math, ams, textord, "\u2138", "\\daleth");                                                              // 252
defineSymbol(math, ams, textord, "\u2137", "\\gimel");                                                               // 253
                                                                                                                     // 254
// AMS Greek                                                                                                         // 255
defineSymbol(math, ams, textord, "\u03dd", "\\digamma");                                                             // 256
defineSymbol(math, ams, textord, "\u03f0", "\\varkappa");                                                            // 257
                                                                                                                     // 258
// AMS Delimiters                                                                                                    // 259
defineSymbol(math, ams, open, "\u250c", "\\ulcorner");                                                               // 260
defineSymbol(math, ams, close, "\u2510", "\\urcorner");                                                              // 261
defineSymbol(math, ams, open, "\u2514", "\\llcorner");                                                               // 262
defineSymbol(math, ams, close, "\u2518", "\\lrcorner");                                                              // 263
                                                                                                                     // 264
// AMS Binary Relations                                                                                              // 265
defineSymbol(math, ams, rel, "\u2266", "\\leqq");                                                                    // 266
defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant");                                                                // 267
defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless");                                                             // 268
defineSymbol(math, ams, rel, "\u2272", "\\lesssim");                                                                 // 269
defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox");                                                              // 270
defineSymbol(math, ams, rel, "\u224a", "\\approxeq");                                                                // 271
defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");                                                                 // 272
defineSymbol(math, ams, rel, "\u22d8", "\\lll");                                                                     // 273
defineSymbol(math, ams, rel, "\u2276", "\\lessgtr");                                                                 // 274
defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr");                                                               // 275
defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr");                                                              // 276
defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");                                                                // 277
defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq");                                                            // 278
defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq");                                                           // 279
defineSymbol(math, ams, rel, "\u223d", "\\backsim");                                                                 // 280
defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq");                                                               // 281
defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq");                                                               // 282
defineSymbol(math, ams, rel, "\u22d0", "\\Subset");                                                                  // 283
defineSymbol(math, ams, rel, "\u228f", "\\sqsubset");                                                                // 284
defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq");                                                             // 285
defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec");                                                             // 286
defineSymbol(math, ams, rel, "\u227e", "\\precsim");                                                                 // 287
defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox");                                                              // 288
defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");                                                         // 289
defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");                                                          // 290
defineSymbol(math, ams, rel, "\u22a8", "\\vDash");                                                                   // 291
defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash");                                                                  // 292
defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");                                                              // 293
defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");                                                              // 294
defineSymbol(math, ams, rel, "\u224f", "\\bumpeq");                                                                  // 295
defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq");                                                                  // 296
defineSymbol(math, ams, rel, "\u2267", "\\geqq");                                                                    // 297
defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant");                                                                // 298
defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr");                                                              // 299
defineSymbol(math, ams, rel, "\u2273", "\\gtrsim");                                                                  // 300
defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox");                                                               // 301
defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");                                                                  // 302
defineSymbol(math, ams, rel, "\u22d9", "\\ggg");                                                                     // 303
defineSymbol(math, ams, rel, "\u2277", "\\gtrless");                                                                 // 304
defineSymbol(math, ams, rel, "\u22db", "\\gtreqless");                                                               // 305
defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless");                                                              // 306
defineSymbol(math, ams, rel, "\u2256", "\\eqcirc");                                                                  // 307
defineSymbol(math, ams, rel, "\u2257", "\\circeq");                                                                  // 308
defineSymbol(math, ams, rel, "\u225c", "\\triangleq");                                                               // 309
defineSymbol(math, ams, rel, "\u223c", "\\thicksim");                                                                // 310
defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");                                                             // 311
defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq");                                                               // 312
defineSymbol(math, ams, rel, "\u22d1", "\\Supset");                                                                  // 313
defineSymbol(math, ams, rel, "\u2290", "\\sqsupset");                                                                // 314
defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq");                                                             // 315
defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc");                                                             // 316
defineSymbol(math, ams, rel, "\u227f", "\\succsim");                                                                 // 317
defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox");                                                              // 318
defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");                                                        // 319
defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");                                                         // 320
defineSymbol(math, ams, rel, "\u22a9", "\\Vdash");                                                                   // 321
defineSymbol(math, ams, rel, "\u2223", "\\shortmid");                                                                // 322
defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");                                                           // 323
defineSymbol(math, ams, rel, "\u226c", "\\between");                                                                 // 324
defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork");                                                               // 325
defineSymbol(math, ams, rel, "\u221d", "\\varpropto");                                                               // 326
defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft");                                                       // 327
defineSymbol(math, ams, rel, "\u2234", "\\therefore");                                                               // 328
defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");                                                             // 329
defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright");                                                      // 330
defineSymbol(math, ams, rel, "\u2235", "\\because");                                                                 // 331
defineSymbol(math, ams, rel, "\u22d8", "\\llless");                                                                  // 332
defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");                                                                   // 333
defineSymbol(math, ams, bin, "\u22b2", "\\lhd");                                                                     // 334
defineSymbol(math, ams, bin, "\u22b3", "\\rhd");                                                                     // 335
defineSymbol(math, ams, rel, "\u2242", "\\eqsim");                                                                   // 336
defineSymbol(math, main, rel, "\u22c8", "\\Join");                                                                   // 337
defineSymbol(math, ams, rel, "\u2251", "\\Doteq");                                                                   // 338
                                                                                                                     // 339
// AMS Binary Operators                                                                                              // 340
defineSymbol(math, ams, bin, "\u2214", "\\dotplus");                                                                 // 341
defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");                                                           // 342
defineSymbol(math, ams, bin, "\u22d2", "\\Cap");                                                                     // 343
defineSymbol(math, ams, bin, "\u22d3", "\\Cup");                                                                     // 344
defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge");                                                          // 345
defineSymbol(math, ams, bin, "\u229f", "\\boxminus");                                                                // 346
defineSymbol(math, ams, bin, "\u229e", "\\boxplus");                                                                 // 347
defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes");                                                           // 348
defineSymbol(math, ams, bin, "\u22c9", "\\ltimes");                                                                  // 349
defineSymbol(math, ams, bin, "\u22ca", "\\rtimes");                                                                  // 350
defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes");                                                          // 351
defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes");                                                         // 352
defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge");                                                              // 353
defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee");                                                                // 354
defineSymbol(math, ams, bin, "\u229d", "\\circleddash");                                                             // 355
defineSymbol(math, ams, bin, "\u229b", "\\circledast");                                                              // 356
defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");                                                               // 357
defineSymbol(math, ams, bin, "\u22ba", "\\intercal");                                                                // 358
defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");                                                               // 359
defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");                                                               // 360
defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes");                                                                // 361
                                                                                                                     // 362
// AMS Arrows                                                                                                        // 363
defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow");                                                          // 364
defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow");                                                           // 365
defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows");                                                          // 366
defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows");                                                         // 367
defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow");                                                              // 368
defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow");                                                        // 369
defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail");                                                           // 370
defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft");                                                           // 371
defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons");                                                       // 372
defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft");                                                          // 373
defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft");                                                         // 374
defineSymbol(math, ams, rel, "\u21b0", "\\Lsh");                                                                     // 375
defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows");                                                              // 376
defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft");                                                           // 377
defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft");                                                         // 378
defineSymbol(math, ams, rel, "\u22b8", "\\multimap");                                                                // 379
defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow");                                                     // 380
defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows");                                                        // 381
defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows");                                                         // 382
defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow");                                                       // 383
defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail");                                                          // 384
defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright");                                                          // 385
defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright");                                                         // 386
defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright");                                                        // 387
defineSymbol(math, ams, rel, "\u21b1", "\\Rsh");                                                                     // 388
defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows");                                                          // 389
defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright");                                                          // 390
defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright");                                                        // 391
defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow");                                                         // 392
defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");                                                                 // 393
defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow");                                                             // 394
defineSymbol(math, ams, rel, "\u21be", "\\restriction");                                                             // 395
                                                                                                                     // 396
defineSymbol(math, main, textord, "\u2018", "`");                                                                    // 397
defineSymbol(math, main, textord, "$", "\\$");                                                                       // 398
defineSymbol(text, main, textord, "$", "\\$");                                                                       // 399
defineSymbol(math, main, textord, "%", "\\%");                                                                       // 400
defineSymbol(text, main, textord, "%", "\\%");                                                                       // 401
defineSymbol(math, main, textord, "_", "\\_");                                                                       // 402
defineSymbol(text, main, textord, "_", "\\_");                                                                       // 403
defineSymbol(math, main, textord, "\u2220", "\\angle");                                                              // 404
defineSymbol(math, main, textord, "\u221e", "\\infty");                                                              // 405
defineSymbol(math, main, textord, "\u2032", "\\prime");                                                              // 406
defineSymbol(math, main, textord, "\u25b3", "\\triangle");                                                           // 407
defineSymbol(math, main, textord, "\u0393", "\\Gamma");                                                              // 408
defineSymbol(math, main, textord, "\u0394", "\\Delta");                                                              // 409
defineSymbol(math, main, textord, "\u0398", "\\Theta");                                                              // 410
defineSymbol(math, main, textord, "\u039b", "\\Lambda");                                                             // 411
defineSymbol(math, main, textord, "\u039e", "\\Xi");                                                                 // 412
defineSymbol(math, main, textord, "\u03a0", "\\Pi");                                                                 // 413
defineSymbol(math, main, textord, "\u03a3", "\\Sigma");                                                              // 414
defineSymbol(math, main, textord, "\u03a5", "\\Upsilon");                                                            // 415
defineSymbol(math, main, textord, "\u03a6", "\\Phi");                                                                // 416
defineSymbol(math, main, textord, "\u03a8", "\\Psi");                                                                // 417
defineSymbol(math, main, textord, "\u03a9", "\\Omega");                                                              // 418
defineSymbol(math, main, textord, "\u00ac", "\\neg");                                                                // 419
defineSymbol(math, main, textord, "\u00ac", "\\lnot");                                                               // 420
defineSymbol(math, main, textord, "\u22a4", "\\top");                                                                // 421
defineSymbol(math, main, textord, "\u22a5", "\\bot");                                                                // 422
defineSymbol(math, main, textord, "\u2205", "\\emptyset");                                                           // 423
defineSymbol(math, ams, textord, "\u2205", "\\varnothing");                                                          // 424
defineSymbol(math, main, mathord, "\u03b1", "\\alpha");                                                              // 425
defineSymbol(math, main, mathord, "\u03b2", "\\beta");                                                               // 426
defineSymbol(math, main, mathord, "\u03b3", "\\gamma");                                                              // 427
defineSymbol(math, main, mathord, "\u03b4", "\\delta");                                                              // 428
defineSymbol(math, main, mathord, "\u03f5", "\\epsilon");                                                            // 429
defineSymbol(math, main, mathord, "\u03b6", "\\zeta");                                                               // 430
defineSymbol(math, main, mathord, "\u03b7", "\\eta");                                                                // 431
defineSymbol(math, main, mathord, "\u03b8", "\\theta");                                                              // 432
defineSymbol(math, main, mathord, "\u03b9", "\\iota");                                                               // 433
defineSymbol(math, main, mathord, "\u03ba", "\\kappa");                                                              // 434
defineSymbol(math, main, mathord, "\u03bb", "\\lambda");                                                             // 435
defineSymbol(math, main, mathord, "\u03bc", "\\mu");                                                                 // 436
defineSymbol(math, main, mathord, "\u03bd", "\\nu");                                                                 // 437
defineSymbol(math, main, mathord, "\u03be", "\\xi");                                                                 // 438
defineSymbol(math, main, mathord, "o", "\\omicron");                                                                 // 439
defineSymbol(math, main, mathord, "\u03c0", "\\pi");                                                                 // 440
defineSymbol(math, main, mathord, "\u03c1", "\\rho");                                                                // 441
defineSymbol(math, main, mathord, "\u03c3", "\\sigma");                                                              // 442
defineSymbol(math, main, mathord, "\u03c4", "\\tau");                                                                // 443
defineSymbol(math, main, mathord, "\u03c5", "\\upsilon");                                                            // 444
defineSymbol(math, main, mathord, "\u03d5", "\\phi");                                                                // 445
defineSymbol(math, main, mathord, "\u03c7", "\\chi");                                                                // 446
defineSymbol(math, main, mathord, "\u03c8", "\\psi");                                                                // 447
defineSymbol(math, main, mathord, "\u03c9", "\\omega");                                                              // 448
defineSymbol(math, main, mathord, "\u03b5", "\\varepsilon");                                                         // 449
defineSymbol(math, main, mathord, "\u03d1", "\\vartheta");                                                           // 450
defineSymbol(math, main, mathord, "\u03d6", "\\varpi");                                                              // 451
defineSymbol(math, main, mathord, "\u03f1", "\\varrho");                                                             // 452
defineSymbol(math, main, mathord, "\u03c2", "\\varsigma");                                                           // 453
defineSymbol(math, main, mathord, "\u03c6", "\\varphi");                                                             // 454
defineSymbol(math, main, bin, "\u2217", "*");                                                                        // 455
defineSymbol(math, main, bin, "+", "+");                                                                             // 456
defineSymbol(math, main, bin, "\u2212", "-");                                                                        // 457
defineSymbol(math, main, bin, "\u22c5", "\\cdot");                                                                   // 458
defineSymbol(math, main, bin, "\u2218", "\\circ");                                                                   // 459
defineSymbol(math, main, bin, "\u00f7", "\\div");                                                                    // 460
defineSymbol(math, main, bin, "\u00b1", "\\pm");                                                                     // 461
defineSymbol(math, main, bin, "\u00d7", "\\times");                                                                  // 462
defineSymbol(math, main, bin, "\u2229", "\\cap");                                                                    // 463
defineSymbol(math, main, bin, "\u222a", "\\cup");                                                                    // 464
defineSymbol(math, main, bin, "\u2216", "\\setminus");                                                               // 465
defineSymbol(math, main, bin, "\u2227", "\\land");                                                                   // 466
defineSymbol(math, main, bin, "\u2228", "\\lor");                                                                    // 467
defineSymbol(math, main, bin, "\u2227", "\\wedge");                                                                  // 468
defineSymbol(math, main, bin, "\u2228", "\\vee");                                                                    // 469
defineSymbol(math, main, textord, "\u221a", "\\surd");                                                               // 470
defineSymbol(math, main, open, "(", "(");                                                                            // 471
defineSymbol(math, main, open, "[", "[");                                                                            // 472
defineSymbol(math, main, open, "\u27e8", "\\langle");                                                                // 473
defineSymbol(math, main, open, "\u2223", "\\lvert");                                                                 // 474
defineSymbol(math, main, open, "\u2225", "\\lVert");                                                                 // 475
defineSymbol(math, main, close, ")", ")");                                                                           // 476
defineSymbol(math, main, close, "]", "]");                                                                           // 477
defineSymbol(math, main, close, "?", "?");                                                                           // 478
defineSymbol(math, main, close, "!", "!");                                                                           // 479
defineSymbol(math, main, close, "\u27e9", "\\rangle");                                                               // 480
defineSymbol(math, main, close, "\u2223", "\\rvert");                                                                // 481
defineSymbol(math, main, close, "\u2225", "\\rVert");                                                                // 482
defineSymbol(math, main, rel, "=", "=");                                                                             // 483
defineSymbol(math, main, rel, "<", "<");                                                                             // 484
defineSymbol(math, main, rel, ">", ">");                                                                             // 485
defineSymbol(math, main, rel, ":", ":");                                                                             // 486
defineSymbol(math, main, rel, "\u2248", "\\approx");                                                                 // 487
defineSymbol(math, main, rel, "\u2245", "\\cong");                                                                   // 488
defineSymbol(math, main, rel, "\u2265", "\\ge");                                                                     // 489
defineSymbol(math, main, rel, "\u2265", "\\geq");                                                                    // 490
defineSymbol(math, main, rel, "\u2190", "\\gets");                                                                   // 491
defineSymbol(math, main, rel, ">", "\\gt");                                                                          // 492
defineSymbol(math, main, rel, "\u2208", "\\in");                                                                     // 493
defineSymbol(math, main, rel, "\u2209", "\\notin");                                                                  // 494
defineSymbol(math, main, rel, "\u2282", "\\subset");                                                                 // 495
defineSymbol(math, main, rel, "\u2283", "\\supset");                                                                 // 496
defineSymbol(math, main, rel, "\u2286", "\\subseteq");                                                               // 497
defineSymbol(math, main, rel, "\u2287", "\\supseteq");                                                               // 498
defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq");                                                               // 499
defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq");                                                               // 500
defineSymbol(math, main, rel, "\u22a8", "\\models");                                                                 // 501
defineSymbol(math, main, rel, "\u2190", "\\leftarrow");                                                              // 502
defineSymbol(math, main, rel, "\u2264", "\\le");                                                                     // 503
defineSymbol(math, main, rel, "\u2264", "\\leq");                                                                    // 504
defineSymbol(math, main, rel, "<", "\\lt");                                                                          // 505
defineSymbol(math, main, rel, "\u2260", "\\ne");                                                                     // 506
defineSymbol(math, main, rel, "\u2260", "\\neq");                                                                    // 507
defineSymbol(math, main, rel, "\u2192", "\\rightarrow");                                                             // 508
defineSymbol(math, main, rel, "\u2192", "\\to");                                                                     // 509
defineSymbol(math, ams, rel, "\u2271", "\\ngeq");                                                                    // 510
defineSymbol(math, ams, rel, "\u2270", "\\nleq");                                                                    // 511
defineSymbol(math, main, spacing, null, "\\!");                                                                      // 512
defineSymbol(math, main, spacing, "\u00a0", "\\ ");                                                                  // 513
defineSymbol(math, main, spacing, "\u00a0", "~");                                                                    // 514
defineSymbol(math, main, spacing, null, "\\,");                                                                      // 515
defineSymbol(math, main, spacing, null, "\\:");                                                                      // 516
defineSymbol(math, main, spacing, null, "\\;");                                                                      // 517
defineSymbol(math, main, spacing, null, "\\enspace");                                                                // 518
defineSymbol(math, main, spacing, null, "\\qquad");                                                                  // 519
defineSymbol(math, main, spacing, null, "\\quad");                                                                   // 520
defineSymbol(math, main, spacing, "\u00a0", "\\space");                                                              // 521
defineSymbol(math, main, punct, ",", ",");                                                                           // 522
defineSymbol(math, main, punct, ";", ";");                                                                           // 523
defineSymbol(math, main, punct, ":", "\\colon");                                                                     // 524
defineSymbol(math, ams, bin, "\u22bc", "\\barwedge");                                                                // 525
defineSymbol(math, ams, bin, "\u22bb", "\\veebar");                                                                  // 526
defineSymbol(math, main, bin, "\u2299", "\\odot");                                                                   // 527
defineSymbol(math, main, bin, "\u2295", "\\oplus");                                                                  // 528
defineSymbol(math, main, bin, "\u2297", "\\otimes");                                                                 // 529
defineSymbol(math, main, textord, "\u2202", "\\partial");                                                            // 530
defineSymbol(math, main, bin, "\u2298", "\\oslash");                                                                 // 531
defineSymbol(math, ams, bin, "\u229a", "\\circledcirc");                                                             // 532
defineSymbol(math, ams, bin, "\u22a1", "\\boxdot");                                                                  // 533
defineSymbol(math, main, bin, "\u25b3", "\\bigtriangleup");                                                          // 534
defineSymbol(math, main, bin, "\u25bd", "\\bigtriangledown");                                                        // 535
defineSymbol(math, main, bin, "\u2020", "\\dagger");                                                                 // 536
defineSymbol(math, main, bin, "\u22c4", "\\diamond");                                                                // 537
defineSymbol(math, main, bin, "\u22c6", "\\star");                                                                   // 538
defineSymbol(math, main, bin, "\u25c3", "\\triangleleft");                                                           // 539
defineSymbol(math, main, bin, "\u25b9", "\\triangleright");                                                          // 540
defineSymbol(math, main, open, "{", "\\{");                                                                          // 541
defineSymbol(text, main, textord, "{", "\\{");                                                                       // 542
defineSymbol(math, main, close, "}", "\\}");                                                                         // 543
defineSymbol(text, main, textord, "}", "\\}");                                                                       // 544
defineSymbol(math, main, open, "{", "\\lbrace");                                                                     // 545
defineSymbol(math, main, close, "}", "\\rbrace");                                                                    // 546
defineSymbol(math, main, open, "[", "\\lbrack");                                                                     // 547
defineSymbol(math, main, close, "]", "\\rbrack");                                                                    // 548
defineSymbol(math, main, open, "\u230a", "\\lfloor");                                                                // 549
defineSymbol(math, main, close, "\u230b", "\\rfloor");                                                               // 550
defineSymbol(math, main, open, "\u2308", "\\lceil");                                                                 // 551
defineSymbol(math, main, close, "\u2309", "\\rceil");                                                                // 552
defineSymbol(math, main, textord, "\\", "\\backslash");                                                              // 553
defineSymbol(math, main, textord, "\u2223", "|");                                                                    // 554
defineSymbol(math, main, textord, "\u2223", "\\vert");                                                               // 555
defineSymbol(math, main, textord, "\u2225", "\\|");                                                                  // 556
defineSymbol(math, main, textord, "\u2225", "\\Vert");                                                               // 557
defineSymbol(math, main, rel, "\u2191", "\\uparrow");                                                                // 558
defineSymbol(math, main, rel, "\u21d1", "\\Uparrow");                                                                // 559
defineSymbol(math, main, rel, "\u2193", "\\downarrow");                                                              // 560
defineSymbol(math, main, rel, "\u21d3", "\\Downarrow");                                                              // 561
defineSymbol(math, main, rel, "\u2195", "\\updownarrow");                                                            // 562
defineSymbol(math, main, rel, "\u21d5", "\\Updownarrow");                                                            // 563
defineSymbol(math, math, op, "\u2210", "\\coprod");                                                                  // 564
defineSymbol(math, math, op, "\u22c1", "\\bigvee");                                                                  // 565
defineSymbol(math, math, op, "\u22c0", "\\bigwedge");                                                                // 566
defineSymbol(math, math, op, "\u2a04", "\\biguplus");                                                                // 567
defineSymbol(math, math, op, "\u22c2", "\\bigcap");                                                                  // 568
defineSymbol(math, math, op, "\u22c3", "\\bigcup");                                                                  // 569
defineSymbol(math, math, op, "\u222b", "\\int");                                                                     // 570
defineSymbol(math, math, op, "\u222b", "\\intop");                                                                   // 571
defineSymbol(math, math, op, "\u222c", "\\iint");                                                                    // 572
defineSymbol(math, math, op, "\u222d", "\\iiint");                                                                   // 573
defineSymbol(math, math, op, "\u220f", "\\prod");                                                                    // 574
defineSymbol(math, math, op, "\u2211", "\\sum");                                                                     // 575
defineSymbol(math, math, op, "\u2a02", "\\bigotimes");                                                               // 576
defineSymbol(math, math, op, "\u2a01", "\\bigoplus");                                                                // 577
defineSymbol(math, math, op, "\u2a00", "\\bigodot");                                                                 // 578
defineSymbol(math, math, op, "\u222e", "\\oint");                                                                    // 579
defineSymbol(math, math, op, "\u2a06", "\\bigsqcup");                                                                // 580
defineSymbol(math, math, op, "\u222b", "\\smallint");                                                                // 581
defineSymbol(text, main, inner, "\u2026", "\\textellipsis");                                                         // 582
defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");                                                         // 583
defineSymbol(text, main, inner, "\u2026", "\\ldots");                                                                // 584
defineSymbol(math, main, inner, "\u2026", "\\ldots");                                                                // 585
defineSymbol(math, main, inner, "\u22ef", "\\cdots");                                                                // 586
defineSymbol(math, main, inner, "\u22f1", "\\ddots");                                                                // 587
defineSymbol(math, main, textord, "\u22ee", "\\vdots");                                                              // 588
defineSymbol(math, main, accent, "\u00b4", "\\acute");                                                               // 589
defineSymbol(math, main, accent, "\u0060", "\\grave");                                                               // 590
defineSymbol(math, main, accent, "\u00a8", "\\ddot");                                                                // 591
defineSymbol(math, main, accent, "\u007e", "\\tilde");                                                               // 592
defineSymbol(math, main, accent, "\u00af", "\\bar");                                                                 // 593
defineSymbol(math, main, accent, "\u02d8", "\\breve");                                                               // 594
defineSymbol(math, main, accent, "\u02c7", "\\check");                                                               // 595
defineSymbol(math, main, accent, "\u005e", "\\hat");                                                                 // 596
defineSymbol(math, main, accent, "\u20d7", "\\vec");                                                                 // 597
defineSymbol(math, main, accent, "\u02d9", "\\dot");                                                                 // 598
defineSymbol(math, main, mathord, "\u0131", "\\imath");                                                              // 599
defineSymbol(math, main, mathord, "\u0237", "\\jmath");                                                              // 600
                                                                                                                     // 601
defineSymbol(text, main, textord, "\u2013", "--");                                                                   // 602
defineSymbol(text, main, textord, "\u2014", "---");                                                                  // 603
defineSymbol(text, main, textord, "\u2018", "`");                                                                    // 604
defineSymbol(text, main, textord, "\u2019", "'");                                                                    // 605
defineSymbol(text, main, textord, "\u201c", "``");                                                                   // 606
defineSymbol(text, main, textord, "\u201d", "''");                                                                   // 607
defineSymbol(math, main, textord, "\u00b0", "\\degree");                                                             // 608
defineSymbol(text, main, textord, "\u00b0", "\\degree");                                                             // 609
defineSymbol(math, main, mathord, "\u00a3", "\\pounds");                                                             // 610
defineSymbol(math, ams, textord, "\u2720", "\\maltese");                                                             // 611
defineSymbol(text, ams, textord, "\u2720", "\\maltese");                                                             // 612
                                                                                                                     // 613
defineSymbol(text, main, spacing, "\u00a0", "\\ ");                                                                  // 614
defineSymbol(text, main, spacing, "\u00a0", " ");                                                                    // 615
defineSymbol(text, main, spacing, "\u00a0", "~");                                                                    // 616
                                                                                                                     // 617
// There are lots of symbols which are the same, so we add them in afterwards.                                       // 618
var i;                                                                                                               // 619
var ch;                                                                                                              // 620
                                                                                                                     // 621
// All of these are textords in math mode                                                                            // 622
var mathTextSymbols = "0123456789/@.\"";                                                                             // 623
for (i = 0; i < mathTextSymbols.length; i++) {                                                                       // 624
    ch = mathTextSymbols.charAt(i);                                                                                  // 625
    defineSymbol(math, main, textord, ch, ch);                                                                       // 626
}                                                                                                                    // 627
                                                                                                                     // 628
// All of these are textords in text mode                                                                            // 629
var textSymbols = "0123456789!@*()-=+[]\";:?/.,";                                                                    // 630
for (i = 0; i < textSymbols.length; i++) {                                                                           // 631
    ch = textSymbols.charAt(i);                                                                                      // 632
    defineSymbol(text, main, textord, ch, ch);                                                                       // 633
}                                                                                                                    // 634
                                                                                                                     // 635
// All of these are textords in text mode, and mathords in math mode                                                 // 636
var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";                                                // 637
for (i = 0; i < letters.length; i++) {                                                                               // 638
    ch = letters.charAt(i);                                                                                          // 639
    defineSymbol(math, main, mathord, ch, ch);                                                                       // 640
    defineSymbol(text, main, textord, ch, ch);                                                                       // 641
}                                                                                                                    // 642
                                                                                                                     // 643
// Latin-1 letters                                                                                                   // 644
for (i = 0x00C0; i <= 0x00D6; i++) {                                                                                 // 645
    ch = String.fromCharCode(i);                                                                                     // 646
    defineSymbol(text, main, textord, ch, ch);                                                                       // 647
}                                                                                                                    // 648
                                                                                                                     // 649
for (i = 0x00D8; i <= 0x00F6; i++) {                                                                                 // 650
    ch = String.fromCharCode(i);                                                                                     // 651
    defineSymbol(text, main, textord, ch, ch);                                                                       // 652
}                                                                                                                    // 653
                                                                                                                     // 654
for (i = 0x00F8; i <= 0x00FF; i++) {                                                                                 // 655
    ch = String.fromCharCode(i);                                                                                     // 656
    defineSymbol(text, main, textord, ch, ch);                                                                       // 657
}                                                                                                                    // 658
                                                                                                                     // 659
// Cyrillic                                                                                                          // 660
for (i = 0x0410; i <= 0x044F; i++) {                                                                                 // 661
    ch = String.fromCharCode(i);                                                                                     // 662
    defineSymbol(text, main, textord, ch, ch);                                                                       // 663
}                                                                                                                    // 664
                                                                                                                     // 665
// Unicode versions of existing characters                                                                           // 666
defineSymbol(text, main, textord, "\u2013", "–");                                                                    // 667
defineSymbol(text, main, textord, "\u2014", "—");                                                                    // 668
defineSymbol(text, main, textord, "\u2018", "‘");                                                                    // 669
defineSymbol(text, main, textord, "\u2019", "’");                                                                    // 670
defineSymbol(text, main, textord, "\u201c", "“");                                                                    // 671
defineSymbol(text, main, textord, "\u201d", "”");                                                                    // 672
                                                                                                                     // 673
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"delimiter.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/delimiter.js                                          //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file deals with creating delimiters of various sizes. The TeXbook                                            // 2
 * discusses these routines on page 441-442, in the "Another subroutine sets box                                     // 3
 * x to a specified variable delimiter" paragraph.                                                                   // 4
 *                                                                                                                   // 5
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the                                     // 6
 * normal font, but in either text, script, or scriptscript style.                                                   // 7
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,                                         // 8
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of                                         // 9
 * smaller pieces that are stacked on top of one another.                                                            // 10
 *                                                                                                                   // 11
 * The functions take a parameter `center`, which determines if the delimiter                                        // 12
 * should be centered around the axis.                                                                               // 13
 *                                                                                                                   // 14
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in                                        // 15
 * one of the given sizes. This is used for things like `\bigl`.                                                     // 16
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is                                       // 17
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate                                              // 18
 * delimiter which surrounds an expression of a given height an depth. It is                                         // 19
 * used in `\left` and `\right`.                                                                                     // 20
 */                                                                                                                  // 21
                                                                                                                     // 22
var ParseError = require("./ParseError");                                                                            // 23
var Style = require("./Style");                                                                                      // 24
                                                                                                                     // 25
var buildCommon = require("./buildCommon");                                                                          // 26
var fontMetrics = require("./fontMetrics");                                                                          // 27
var symbols = require("./symbols");                                                                                  // 28
var utils = require("./utils");                                                                                      // 29
                                                                                                                     // 30
var makeSpan = buildCommon.makeSpan;                                                                                 // 31
                                                                                                                     // 32
/**                                                                                                                  // 33
 * Get the metrics for a given symbol and font, after transformation (i.e.                                           // 34
 * after following replacement from symbols.js)                                                                      // 35
 */                                                                                                                  // 36
var getMetrics = function(symbol, font) {                                                                            // 37
    if (symbols.math[symbol] && symbols.math[symbol].replace) {                                                      // 38
        return fontMetrics.getCharacterMetrics(                                                                      // 39
            symbols.math[symbol].replace, font);                                                                     // 40
    } else {                                                                                                         // 41
        return fontMetrics.getCharacterMetrics(                                                                      // 42
            symbol, font);                                                                                           // 43
    }                                                                                                                // 44
};                                                                                                                   // 45
                                                                                                                     // 46
/**                                                                                                                  // 47
 * Builds a symbol in the given font size (note size is an integer)                                                  // 48
 */                                                                                                                  // 49
var mathrmSize = function(value, size, mode, options) {                                                              // 50
    return buildCommon.makeSymbol(value, "Size" + size + "-Regular",                                                 // 51
        mode, options);                                                                                              // 52
};                                                                                                                   // 53
                                                                                                                     // 54
/**                                                                                                                  // 55
 * Puts a delimiter span in a given style, and adds appropriate height, depth,                                       // 56
 * and maxFontSizes.                                                                                                 // 57
 */                                                                                                                  // 58
var styleWrap = function(delim, toStyle, options, classes) {                                                         // 59
    classes = classes || [];                                                                                         // 60
    var span = makeSpan(                                                                                             // 61
        classes.concat(["style-wrap", options.style.reset(), toStyle.cls()]),                                        // 62
        [delim], options);                                                                                           // 63
                                                                                                                     // 64
    var multiplier = toStyle.sizeMultiplier / options.style.sizeMultiplier;                                          // 65
                                                                                                                     // 66
    span.height *= multiplier;                                                                                       // 67
    span.depth *= multiplier;                                                                                        // 68
    span.maxFontSize = toStyle.sizeMultiplier;                                                                       // 69
                                                                                                                     // 70
    return span;                                                                                                     // 71
};                                                                                                                   // 72
                                                                                                                     // 73
/**                                                                                                                  // 74
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular                                       // 75
 * font, but is restyled to either be in textstyle, scriptstyle, or                                                  // 76
 * scriptscriptstyle.                                                                                                // 77
 */                                                                                                                  // 78
var makeSmallDelim = function(delim, style, center, options, mode, classes) {                                        // 79
    var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);                                         // 80
                                                                                                                     // 81
    var span = styleWrap(text, style, options, classes);                                                             // 82
                                                                                                                     // 83
    if (center) {                                                                                                    // 84
        var shift =                                                                                                  // 85
            (1 - options.style.sizeMultiplier / style.sizeMultiplier) *                                              // 86
            options.style.metrics.axisHeight;                                                                        // 87
                                                                                                                     // 88
        span.style.top = shift + "em";                                                                               // 89
        span.height -= shift;                                                                                        // 90
        span.depth += shift;                                                                                         // 91
    }                                                                                                                // 92
                                                                                                                     // 93
    return span;                                                                                                     // 94
};                                                                                                                   // 95
                                                                                                                     // 96
/**                                                                                                                  // 97
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,                                      // 98
 * Size3, or Size4 fonts. It is always rendered in textstyle.                                                        // 99
 */                                                                                                                  // 100
var makeLargeDelim = function(delim, size, center, options, mode, classes) {                                         // 101
    var inner = mathrmSize(delim, size, mode, options);                                                              // 102
                                                                                                                     // 103
    var span = styleWrap(                                                                                            // 104
        makeSpan(["delimsizing", "size" + size], [inner], options),                                                  // 105
        Style.TEXT, options, classes);                                                                               // 106
                                                                                                                     // 107
    if (center) {                                                                                                    // 108
        var shift = (1 - options.style.sizeMultiplier) *                                                             // 109
            options.style.metrics.axisHeight;                                                                        // 110
                                                                                                                     // 111
        span.style.top = shift + "em";                                                                               // 112
        span.height -= shift;                                                                                        // 113
        span.depth += shift;                                                                                         // 114
    }                                                                                                                // 115
                                                                                                                     // 116
    return span;                                                                                                     // 117
};                                                                                                                   // 118
                                                                                                                     // 119
/**                                                                                                                  // 120
 * Make an inner span with the given offset and in the given font. This is used                                      // 121
 * in `makeStackedDelim` to make the stacking pieces for the delimiter.                                              // 122
 */                                                                                                                  // 123
var makeInner = function(symbol, font, mode) {                                                                       // 124
    var sizeClass;                                                                                                   // 125
    // Apply the correct CSS class to choose the right font.                                                         // 126
    if (font === "Size1-Regular") {                                                                                  // 127
        sizeClass = "delim-size1";                                                                                   // 128
    } else if (font === "Size4-Regular") {                                                                           // 129
        sizeClass = "delim-size4";                                                                                   // 130
    }                                                                                                                // 131
                                                                                                                     // 132
    var inner = makeSpan(                                                                                            // 133
        ["delimsizinginner", sizeClass],                                                                             // 134
        [makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);                                               // 135
                                                                                                                     // 136
    // Since this will be passed into `makeVList` in the end, wrap the element                                       // 137
    // in the appropriate tag that VList uses.                                                                       // 138
    return {type: "elem", elem: inner};                                                                              // 139
};                                                                                                                   // 140
                                                                                                                     // 141
/**                                                                                                                  // 142
 * Make a stacked delimiter out of a given delimiter, with the total height at                                       // 143
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.                                        // 144
 */                                                                                                                  // 145
var makeStackedDelim = function(delim, heightTotal, center, options, mode,                                           // 146
                                classes) {                                                                           // 147
    // There are four parts, the top, an optional middle, a repeated part, and a                                     // 148
    // bottom.                                                                                                       // 149
    var top;                                                                                                         // 150
    var middle;                                                                                                      // 151
    var repeat;                                                                                                      // 152
    var bottom;                                                                                                      // 153
    top = repeat = bottom = delim;                                                                                   // 154
    middle = null;                                                                                                   // 155
    // Also keep track of what font the delimiters are in                                                            // 156
    var font = "Size1-Regular";                                                                                      // 157
                                                                                                                     // 158
    // We set the parts and font based on the symbol. Note that we use                                               // 159
    // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the                                                 // 160
    // repeats of the arrows                                                                                         // 161
    if (delim === "\\uparrow") {                                                                                     // 162
        repeat = bottom = "\u23d0";                                                                                  // 163
    } else if (delim === "\\Uparrow") {                                                                              // 164
        repeat = bottom = "\u2016";                                                                                  // 165
    } else if (delim === "\\downarrow") {                                                                            // 166
        top = repeat = "\u23d0";                                                                                     // 167
    } else if (delim === "\\Downarrow") {                                                                            // 168
        top = repeat = "\u2016";                                                                                     // 169
    } else if (delim === "\\updownarrow") {                                                                          // 170
        top = "\\uparrow";                                                                                           // 171
        repeat = "\u23d0";                                                                                           // 172
        bottom = "\\downarrow";                                                                                      // 173
    } else if (delim === "\\Updownarrow") {                                                                          // 174
        top = "\\Uparrow";                                                                                           // 175
        repeat = "\u2016";                                                                                           // 176
        bottom = "\\Downarrow";                                                                                      // 177
    } else if (delim === "[" || delim === "\\lbrack") {                                                              // 178
        top = "\u23a1";                                                                                              // 179
        repeat = "\u23a2";                                                                                           // 180
        bottom = "\u23a3";                                                                                           // 181
        font = "Size4-Regular";                                                                                      // 182
    } else if (delim === "]" || delim === "\\rbrack") {                                                              // 183
        top = "\u23a4";                                                                                              // 184
        repeat = "\u23a5";                                                                                           // 185
        bottom = "\u23a6";                                                                                           // 186
        font = "Size4-Regular";                                                                                      // 187
    } else if (delim === "\\lfloor") {                                                                               // 188
        repeat = top = "\u23a2";                                                                                     // 189
        bottom = "\u23a3";                                                                                           // 190
        font = "Size4-Regular";                                                                                      // 191
    } else if (delim === "\\lceil") {                                                                                // 192
        top = "\u23a1";                                                                                              // 193
        repeat = bottom = "\u23a2";                                                                                  // 194
        font = "Size4-Regular";                                                                                      // 195
    } else if (delim === "\\rfloor") {                                                                               // 196
        repeat = top = "\u23a5";                                                                                     // 197
        bottom = "\u23a6";                                                                                           // 198
        font = "Size4-Regular";                                                                                      // 199
    } else if (delim === "\\rceil") {                                                                                // 200
        top = "\u23a4";                                                                                              // 201
        repeat = bottom = "\u23a5";                                                                                  // 202
        font = "Size4-Regular";                                                                                      // 203
    } else if (delim === "(") {                                                                                      // 204
        top = "\u239b";                                                                                              // 205
        repeat = "\u239c";                                                                                           // 206
        bottom = "\u239d";                                                                                           // 207
        font = "Size4-Regular";                                                                                      // 208
    } else if (delim === ")") {                                                                                      // 209
        top = "\u239e";                                                                                              // 210
        repeat = "\u239f";                                                                                           // 211
        bottom = "\u23a0";                                                                                           // 212
        font = "Size4-Regular";                                                                                      // 213
    } else if (delim === "\\{" || delim === "\\lbrace") {                                                            // 214
        top = "\u23a7";                                                                                              // 215
        middle = "\u23a8";                                                                                           // 216
        bottom = "\u23a9";                                                                                           // 217
        repeat = "\u23aa";                                                                                           // 218
        font = "Size4-Regular";                                                                                      // 219
    } else if (delim === "\\}" || delim === "\\rbrace") {                                                            // 220
        top = "\u23ab";                                                                                              // 221
        middle = "\u23ac";                                                                                           // 222
        bottom = "\u23ad";                                                                                           // 223
        repeat = "\u23aa";                                                                                           // 224
        font = "Size4-Regular";                                                                                      // 225
    } else if (delim === "\\lgroup") {                                                                               // 226
        top = "\u23a7";                                                                                              // 227
        bottom = "\u23a9";                                                                                           // 228
        repeat = "\u23aa";                                                                                           // 229
        font = "Size4-Regular";                                                                                      // 230
    } else if (delim === "\\rgroup") {                                                                               // 231
        top = "\u23ab";                                                                                              // 232
        bottom = "\u23ad";                                                                                           // 233
        repeat = "\u23aa";                                                                                           // 234
        font = "Size4-Regular";                                                                                      // 235
    } else if (delim === "\\lmoustache") {                                                                           // 236
        top = "\u23a7";                                                                                              // 237
        bottom = "\u23ad";                                                                                           // 238
        repeat = "\u23aa";                                                                                           // 239
        font = "Size4-Regular";                                                                                      // 240
    } else if (delim === "\\rmoustache") {                                                                           // 241
        top = "\u23ab";                                                                                              // 242
        bottom = "\u23a9";                                                                                           // 243
        repeat = "\u23aa";                                                                                           // 244
        font = "Size4-Regular";                                                                                      // 245
    } else if (delim === "\\surd") {                                                                                 // 246
        top = "\ue001";                                                                                              // 247
        bottom = "\u23b7";                                                                                           // 248
        repeat = "\ue000";                                                                                           // 249
        font = "Size4-Regular";                                                                                      // 250
    }                                                                                                                // 251
                                                                                                                     // 252
    // Get the metrics of the four sections                                                                          // 253
    var topMetrics = getMetrics(top, font);                                                                          // 254
    var topHeightTotal = topMetrics.height + topMetrics.depth;                                                       // 255
    var repeatMetrics = getMetrics(repeat, font);                                                                    // 256
    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;                                              // 257
    var bottomMetrics = getMetrics(bottom, font);                                                                    // 258
    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;                                              // 259
    var middleHeightTotal = 0;                                                                                       // 260
    var middleFactor = 1;                                                                                            // 261
    if (middle !== null) {                                                                                           // 262
        var middleMetrics = getMetrics(middle, font);                                                                // 263
        middleHeightTotal = middleMetrics.height + middleMetrics.depth;                                              // 264
        middleFactor = 2; // repeat symmetrically above and below middle                                             // 265
    }                                                                                                                // 266
                                                                                                                     // 267
    // Calcuate the minimal height that the delimiter can have.                                                      // 268
    // It is at least the size of the top, bottom, and optional middle combined.                                     // 269
    var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;                                          // 270
                                                                                                                     // 271
    // Compute the number of copies of the repeat symbol we will need                                                // 272
    var repeatCount = Math.ceil(                                                                                     // 273
        (heightTotal - minHeight) / (middleFactor * repeatHeightTotal));                                             // 274
                                                                                                                     // 275
    // Compute the total height of the delimiter including all the symbols                                           // 276
    var realHeightTotal =                                                                                            // 277
        minHeight + repeatCount * middleFactor * repeatHeightTotal;                                                  // 278
                                                                                                                     // 279
    // The center of the delimiter is placed at the center of the axis. Note                                         // 280
    // that in this context, "center" means that the delimiter should be                                             // 281
    // centered around the axis in the current style, while normally it is                                           // 282
    // centered around the axis in textstyle.                                                                        // 283
    var axisHeight = options.style.metrics.axisHeight;                                                               // 284
    if (center) {                                                                                                    // 285
        axisHeight *= options.style.sizeMultiplier;                                                                  // 286
    }                                                                                                                // 287
    // Calculate the depth                                                                                           // 288
    var depth = realHeightTotal / 2 - axisHeight;                                                                    // 289
                                                                                                                     // 290
    // Now, we start building the pieces that will go into the vlist                                                 // 291
                                                                                                                     // 292
    // Keep a list of the inner pieces                                                                               // 293
    var inners = [];                                                                                                 // 294
                                                                                                                     // 295
    // Add the bottom symbol                                                                                         // 296
    inners.push(makeInner(bottom, font, mode));                                                                      // 297
                                                                                                                     // 298
    var i;                                                                                                           // 299
    if (middle === null) {                                                                                           // 300
        // Add that many symbols                                                                                     // 301
        for (i = 0; i < repeatCount; i++) {                                                                          // 302
            inners.push(makeInner(repeat, font, mode));                                                              // 303
        }                                                                                                            // 304
    } else {                                                                                                         // 305
        // When there is a middle bit, we need the middle part and two repeated                                      // 306
        // sections                                                                                                  // 307
        for (i = 0; i < repeatCount; i++) {                                                                          // 308
            inners.push(makeInner(repeat, font, mode));                                                              // 309
        }                                                                                                            // 310
        inners.push(makeInner(middle, font, mode));                                                                  // 311
        for (i = 0; i < repeatCount; i++) {                                                                          // 312
            inners.push(makeInner(repeat, font, mode));                                                              // 313
        }                                                                                                            // 314
    }                                                                                                                // 315
                                                                                                                     // 316
    // Add the top symbol                                                                                            // 317
    inners.push(makeInner(top, font, mode));                                                                         // 318
                                                                                                                     // 319
    // Finally, build the vlist                                                                                      // 320
    var inner = buildCommon.makeVList(inners, "bottom", depth, options);                                             // 321
                                                                                                                     // 322
    return styleWrap(                                                                                                // 323
        makeSpan(["delimsizing", "mult"], [inner], options),                                                         // 324
        Style.TEXT, options, classes);                                                                               // 325
};                                                                                                                   // 326
                                                                                                                     // 327
// There are three kinds of delimiters, delimiters that stack when they become                                       // 328
// too large                                                                                                         // 329
var stackLargeDelimiters = [                                                                                         // 330
    "(", ")", "[", "\\lbrack", "]", "\\rbrack",                                                                      // 331
    "\\{", "\\lbrace", "\\}", "\\rbrace",                                                                            // 332
    "\\lfloor", "\\rfloor", "\\lceil", "\\rceil",                                                                    // 333
    "\\surd"                                                                                                         // 334
];                                                                                                                   // 335
                                                                                                                     // 336
// delimiters that always stack                                                                                      // 337
var stackAlwaysDelimiters = [                                                                                        // 338
    "\\uparrow", "\\downarrow", "\\updownarrow",                                                                     // 339
    "\\Uparrow", "\\Downarrow", "\\Updownarrow",                                                                     // 340
    "|", "\\|", "\\vert", "\\Vert",                                                                                  // 341
    "\\lvert", "\\rvert", "\\lVert", "\\rVert",                                                                      // 342
    "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache"                                                           // 343
];                                                                                                                   // 344
                                                                                                                     // 345
// and delimiters that never stack                                                                                   // 346
var stackNeverDelimiters = [                                                                                         // 347
    "<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"                                             // 348
];                                                                                                                   // 349
                                                                                                                     // 350
// Metrics of the different sizes. Found by looking at TeX's output of                                               // 351
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$                                                                     // 352
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.                                         // 353
var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];                                                                       // 354
                                                                                                                     // 355
/**                                                                                                                  // 356
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.                                     // 357
 */                                                                                                                  // 358
var makeSizedDelim = function(delim, size, options, mode, classes) {                                                 // 359
    // < and > turn into \langle and \rangle in delimiters                                                           // 360
    if (delim === "<" || delim === "\\lt") {                                                                         // 361
        delim = "\\langle";                                                                                          // 362
    } else if (delim === ">" || delim === "\\gt") {                                                                  // 363
        delim = "\\rangle";                                                                                          // 364
    }                                                                                                                // 365
                                                                                                                     // 366
    // Sized delimiters are never centered.                                                                          // 367
    if (utils.contains(stackLargeDelimiters, delim) ||                                                               // 368
        utils.contains(stackNeverDelimiters, delim)) {                                                               // 369
        return makeLargeDelim(delim, size, false, options, mode, classes);                                           // 370
    } else if (utils.contains(stackAlwaysDelimiters, delim)) {                                                       // 371
        return makeStackedDelim(                                                                                     // 372
            delim, sizeToMaxHeight[size], false, options, mode, classes);                                            // 373
    } else {                                                                                                         // 374
        throw new ParseError("Illegal delimiter: '" + delim + "'");                                                  // 375
    }                                                                                                                // 376
};                                                                                                                   // 377
                                                                                                                     // 378
/**                                                                                                                  // 379
 * There are three different sequences of delimiter sizes that the delimiters                                        // 380
 * follow depending on the kind of delimiter. This is used when creating custom                                      // 381
 * sized delimiters to decide whether to create a small, large, or stacked                                           // 382
 * delimiter.                                                                                                        // 383
 *                                                                                                                   // 384
 * In real TeX, these sequences aren't explicitly defined, but are instead                                           // 385
 * defined inside the font metrics. Since there are only three sequences that                                        // 386
 * are possible for the delimiters that TeX defines, it is easier to just encode                                     // 387
 * them explicitly here.                                                                                             // 388
 */                                                                                                                  // 389
                                                                                                                     // 390
// Delimiters that never stack try small delimiters and large delimiters only                                        // 391
var stackNeverDelimiterSequence = [                                                                                  // 392
    {type: "small", style: Style.SCRIPTSCRIPT},                                                                      // 393
    {type: "small", style: Style.SCRIPT},                                                                            // 394
    {type: "small", style: Style.TEXT},                                                                              // 395
    {type: "large", size: 1},                                                                                        // 396
    {type: "large", size: 2},                                                                                        // 397
    {type: "large", size: 3},                                                                                        // 398
    {type: "large", size: 4}                                                                                         // 399
];                                                                                                                   // 400
                                                                                                                     // 401
// Delimiters that always stack try the small delimiters first, then stack                                           // 402
var stackAlwaysDelimiterSequence = [                                                                                 // 403
    {type: "small", style: Style.SCRIPTSCRIPT},                                                                      // 404
    {type: "small", style: Style.SCRIPT},                                                                            // 405
    {type: "small", style: Style.TEXT},                                                                              // 406
    {type: "stack"}                                                                                                  // 407
];                                                                                                                   // 408
                                                                                                                     // 409
// Delimiters that stack when large try the small and then large delimiters, and                                     // 410
// stack afterwards                                                                                                  // 411
var stackLargeDelimiterSequence = [                                                                                  // 412
    {type: "small", style: Style.SCRIPTSCRIPT},                                                                      // 413
    {type: "small", style: Style.SCRIPT},                                                                            // 414
    {type: "small", style: Style.TEXT},                                                                              // 415
    {type: "large", size: 1},                                                                                        // 416
    {type: "large", size: 2},                                                                                        // 417
    {type: "large", size: 3},                                                                                        // 418
    {type: "large", size: 4},                                                                                        // 419
    {type: "stack"}                                                                                                  // 420
];                                                                                                                   // 421
                                                                                                                     // 422
/**                                                                                                                  // 423
 * Get the font used in a delimiter based on what kind of delimiter it is.                                           // 424
 */                                                                                                                  // 425
var delimTypeToFont = function(type) {                                                                               // 426
    if (type.type === "small") {                                                                                     // 427
        return "Main-Regular";                                                                                       // 428
    } else if (type.type === "large") {                                                                              // 429
        return "Size" + type.size + "-Regular";                                                                      // 430
    } else if (type.type === "stack") {                                                                              // 431
        return "Size4-Regular";                                                                                      // 432
    }                                                                                                                // 433
};                                                                                                                   // 434
                                                                                                                     // 435
/**                                                                                                                  // 436
 * Traverse a sequence of types of delimiters to decide what kind of delimiter                                       // 437
 * should be used to create a delimiter of the given height+depth.                                                   // 438
 */                                                                                                                  // 439
var traverseSequence = function(delim, height, sequence, options) {                                                  // 440
    // Here, we choose the index we should start at in the sequences. In smaller                                     // 441
    // sizes (which correspond to larger numbers in style.size) we start earlier                                     // 442
    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts                                      // 443
    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2                                      // 444
    var start = Math.min(2, 3 - options.style.size);                                                                 // 445
    for (var i = start; i < sequence.length; i++) {                                                                  // 446
        if (sequence[i].type === "stack") {                                                                          // 447
            // This is always the last delimiter, so we just break the loop now.                                     // 448
            break;                                                                                                   // 449
        }                                                                                                            // 450
                                                                                                                     // 451
        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]));                                               // 452
        var heightDepth = metrics.height + metrics.depth;                                                            // 453
                                                                                                                     // 454
        // Small delimiters are scaled down versions of the same font, so we                                         // 455
        // account for the style change size.                                                                        // 456
                                                                                                                     // 457
        if (sequence[i].type === "small") {                                                                          // 458
            heightDepth *= sequence[i].style.sizeMultiplier;                                                         // 459
        }                                                                                                            // 460
                                                                                                                     // 461
        // Check if the delimiter at this size works for the given height.                                           // 462
        if (heightDepth > height) {                                                                                  // 463
            return sequence[i];                                                                                      // 464
        }                                                                                                            // 465
    }                                                                                                                // 466
                                                                                                                     // 467
    // If we reached the end of the sequence, return the last sequence element.                                      // 468
    return sequence[sequence.length - 1];                                                                            // 469
};                                                                                                                   // 470
                                                                                                                     // 471
/**                                                                                                                  // 472
 * Make a delimiter of a given height+depth, with optional centering. Here, we                                       // 473
 * traverse the sequences, and create a delimiter that the sequence tells us to.                                     // 474
 */                                                                                                                  // 475
var makeCustomSizedDelim = function(delim, height, center, options, mode,                                            // 476
                                    classes) {                                                                       // 477
    if (delim === "<" || delim === "\\lt") {                                                                         // 478
        delim = "\\langle";                                                                                          // 479
    } else if (delim === ">" || delim === "\\gt") {                                                                  // 480
        delim = "\\rangle";                                                                                          // 481
    }                                                                                                                // 482
                                                                                                                     // 483
    // Decide what sequence to use                                                                                   // 484
    var sequence;                                                                                                    // 485
    if (utils.contains(stackNeverDelimiters, delim)) {                                                               // 486
        sequence = stackNeverDelimiterSequence;                                                                      // 487
    } else if (utils.contains(stackLargeDelimiters, delim)) {                                                        // 488
        sequence = stackLargeDelimiterSequence;                                                                      // 489
    } else {                                                                                                         // 490
        sequence = stackAlwaysDelimiterSequence;                                                                     // 491
    }                                                                                                                // 492
                                                                                                                     // 493
    // Look through the sequence                                                                                     // 494
    var delimType = traverseSequence(delim, height, sequence, options);                                              // 495
                                                                                                                     // 496
    // Depending on the sequence element we decided on, call the appropriate                                         // 497
    // function.                                                                                                     // 498
    if (delimType.type === "small") {                                                                                // 499
        return makeSmallDelim(delim, delimType.style, center, options, mode,                                         // 500
                              classes);                                                                              // 501
    } else if (delimType.type === "large") {                                                                         // 502
        return makeLargeDelim(delim, delimType.size, center, options, mode,                                          // 503
                              classes);                                                                              // 504
    } else if (delimType.type === "stack") {                                                                         // 505
        return makeStackedDelim(delim, height, center, options, mode, classes);                                      // 506
    }                                                                                                                // 507
};                                                                                                                   // 508
                                                                                                                     // 509
/**                                                                                                                  // 510
 * Make a delimiter for use with `\left` and `\right`, given a height and depth                                      // 511
 * of an expression that the delimiters surround.                                                                    // 512
 */                                                                                                                  // 513
var makeLeftRightDelim = function(delim, height, depth, options, mode,                                               // 514
                                  classes) {                                                                         // 515
    // We always center \left/\right delimiters, so the axis is always shifted                                       // 516
    var axisHeight =                                                                                                 // 517
        options.style.metrics.axisHeight * options.style.sizeMultiplier;                                             // 518
                                                                                                                     // 519
    // Taken from TeX source, tex.web, function make_left_right                                                      // 520
    var delimiterFactor = 901;                                                                                       // 521
    var delimiterExtend = 5.0 / fontMetrics.metrics.ptPerEm;                                                         // 522
                                                                                                                     // 523
    var maxDistFromAxis = Math.max(                                                                                  // 524
        height - axisHeight, depth + axisHeight);                                                                    // 525
                                                                                                                     // 526
    var totalHeight = Math.max(                                                                                      // 527
        // In real TeX, calculations are done using integral values which are                                        // 528
        // 65536 per pt, or 655360 per em. So, the division here truncates in                                        // 529
        // TeX but doesn't here, producing different results. If we wanted to                                        // 530
        // exactly match TeX's calculation, we could do                                                              // 531
        //   Math.floor(655360 * maxDistFromAxis / 500) *                                                            // 532
        //    delimiterFactor / 655360                                                                               // 533
        // (To see the difference, compare                                                                           // 534
        //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}                                                              // 535
        // in TeX and KaTeX)                                                                                         // 536
        maxDistFromAxis / 500 * delimiterFactor,                                                                     // 537
        2 * maxDistFromAxis - delimiterExtend);                                                                      // 538
                                                                                                                     // 539
    // Finally, we defer to `makeCustomSizedDelim` with our calculated total                                         // 540
    // height                                                                                                        // 541
    return makeCustomSizedDelim(delim, totalHeight, true, options, mode,                                             // 542
                                classes);                                                                            // 543
};                                                                                                                   // 544
                                                                                                                     // 545
module.exports = {                                                                                                   // 546
    sizedDelim: makeSizedDelim,                                                                                      // 547
    customSizedDelim: makeCustomSizedDelim,                                                                          // 548
    leftRightDelim: makeLeftRightDelim                                                                               // 549
};                                                                                                                   // 550
                                                                                                                     // 551
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"buildMathML.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/buildMathML.js                                        //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file converts a parse tree into a cooresponding MathML tree. The main                                        // 2
 * entry point is the `buildMathML` function, which takes a parse tree from the                                      // 3
 * parser.                                                                                                           // 4
 */                                                                                                                  // 5
                                                                                                                     // 6
var buildCommon = require("./buildCommon");                                                                          // 7
var fontMetrics = require("./fontMetrics");                                                                          // 8
var mathMLTree = require("./mathMLTree");                                                                            // 9
var ParseError = require("./ParseError");                                                                            // 10
var symbols = require("./symbols");                                                                                  // 11
var utils = require("./utils");                                                                                      // 12
                                                                                                                     // 13
var makeSpan = buildCommon.makeSpan;                                                                                 // 14
var fontMap = buildCommon.fontMap;                                                                                   // 15
                                                                                                                     // 16
/**                                                                                                                  // 17
 * Takes a symbol and converts it into a MathML text node after performing                                           // 18
 * optional replacement from symbols.js.                                                                             // 19
 */                                                                                                                  // 20
var makeText = function(text, mode) {                                                                                // 21
    if (symbols[mode][text] && symbols[mode][text].replace) {                                                        // 22
        text = symbols[mode][text].replace;                                                                          // 23
    }                                                                                                                // 24
                                                                                                                     // 25
    return new mathMLTree.TextNode(text);                                                                            // 26
};                                                                                                                   // 27
                                                                                                                     // 28
/**                                                                                                                  // 29
 * Returns the math variant as a string or null if none is required.                                                 // 30
 */                                                                                                                  // 31
var getVariant = function(group, options) {                                                                          // 32
    var font = options.font;                                                                                         // 33
    if (!font) {                                                                                                     // 34
        return null;                                                                                                 // 35
    }                                                                                                                // 36
                                                                                                                     // 37
    var mode = group.mode;                                                                                           // 38
    if (font === "mathit") {                                                                                         // 39
        return "italic";                                                                                             // 40
    }                                                                                                                // 41
                                                                                                                     // 42
    var value = group.value;                                                                                         // 43
    if (utils.contains(["\\imath", "\\jmath"], value)) {                                                             // 44
        return null;                                                                                                 // 45
    }                                                                                                                // 46
                                                                                                                     // 47
    if (symbols[mode][value] && symbols[mode][value].replace) {                                                      // 48
        value = symbols[mode][value].replace;                                                                        // 49
    }                                                                                                                // 50
                                                                                                                     // 51
    var fontName = fontMap[font].fontName;                                                                           // 52
    if (fontMetrics.getCharacterMetrics(value, fontName)) {                                                          // 53
        return fontMap[options.font].variant;                                                                        // 54
    }                                                                                                                // 55
                                                                                                                     // 56
    return null;                                                                                                     // 57
};                                                                                                                   // 58
                                                                                                                     // 59
/**                                                                                                                  // 60
 * Functions for handling the different types of groups found in the parse                                           // 61
 * tree. Each function should take a parse group and return a MathML node.                                           // 62
 */                                                                                                                  // 63
var groupTypes = {};                                                                                                 // 64
                                                                                                                     // 65
groupTypes.mathord = function(group, options) {                                                                      // 66
    var node = new mathMLTree.MathNode(                                                                              // 67
        "mi",                                                                                                        // 68
        [makeText(group.value, group.mode)]);                                                                        // 69
                                                                                                                     // 70
    var variant = getVariant(group, options);                                                                        // 71
    if (variant) {                                                                                                   // 72
        node.setAttribute("mathvariant", variant);                                                                   // 73
    }                                                                                                                // 74
    return node;                                                                                                     // 75
};                                                                                                                   // 76
                                                                                                                     // 77
groupTypes.textord = function(group, options) {                                                                      // 78
    var text = makeText(group.value, group.mode);                                                                    // 79
                                                                                                                     // 80
    var variant = getVariant(group, options) || "normal";                                                            // 81
                                                                                                                     // 82
    var node;                                                                                                        // 83
    if (/[0-9]/.test(group.value)) {                                                                                 // 84
        // TODO(kevinb) merge adjacent <mn> nodes                                                                    // 85
        // do it as a post processing step                                                                           // 86
        node = new mathMLTree.MathNode("mn", [text]);                                                                // 87
        if (options.font) {                                                                                          // 88
            node.setAttribute("mathvariant", variant);                                                               // 89
        }                                                                                                            // 90
    } else {                                                                                                         // 91
        node = new mathMLTree.MathNode("mi", [text]);                                                                // 92
        node.setAttribute("mathvariant", variant);                                                                   // 93
    }                                                                                                                // 94
                                                                                                                     // 95
    return node;                                                                                                     // 96
};                                                                                                                   // 97
                                                                                                                     // 98
groupTypes.bin = function(group) {                                                                                   // 99
    var node = new mathMLTree.MathNode(                                                                              // 100
        "mo", [makeText(group.value, group.mode)]);                                                                  // 101
                                                                                                                     // 102
    return node;                                                                                                     // 103
};                                                                                                                   // 104
                                                                                                                     // 105
groupTypes.rel = function(group) {                                                                                   // 106
    var node = new mathMLTree.MathNode(                                                                              // 107
        "mo", [makeText(group.value, group.mode)]);                                                                  // 108
                                                                                                                     // 109
    return node;                                                                                                     // 110
};                                                                                                                   // 111
                                                                                                                     // 112
groupTypes.open = function(group) {                                                                                  // 113
    var node = new mathMLTree.MathNode(                                                                              // 114
        "mo", [makeText(group.value, group.mode)]);                                                                  // 115
                                                                                                                     // 116
    return node;                                                                                                     // 117
};                                                                                                                   // 118
                                                                                                                     // 119
groupTypes.close = function(group) {                                                                                 // 120
    var node = new mathMLTree.MathNode(                                                                              // 121
        "mo", [makeText(group.value, group.mode)]);                                                                  // 122
                                                                                                                     // 123
    return node;                                                                                                     // 124
};                                                                                                                   // 125
                                                                                                                     // 126
groupTypes.inner = function(group) {                                                                                 // 127
    var node = new mathMLTree.MathNode(                                                                              // 128
        "mo", [makeText(group.value, group.mode)]);                                                                  // 129
                                                                                                                     // 130
    return node;                                                                                                     // 131
};                                                                                                                   // 132
                                                                                                                     // 133
groupTypes.punct = function(group) {                                                                                 // 134
    var node = new mathMLTree.MathNode(                                                                              // 135
        "mo", [makeText(group.value, group.mode)]);                                                                  // 136
                                                                                                                     // 137
    node.setAttribute("separator", "true");                                                                          // 138
                                                                                                                     // 139
    return node;                                                                                                     // 140
};                                                                                                                   // 141
                                                                                                                     // 142
groupTypes.ordgroup = function(group, options) {                                                                     // 143
    var inner = buildExpression(group.value, options);                                                               // 144
                                                                                                                     // 145
    var node = new mathMLTree.MathNode("mrow", inner);                                                               // 146
                                                                                                                     // 147
    return node;                                                                                                     // 148
};                                                                                                                   // 149
                                                                                                                     // 150
groupTypes.text = function(group, options) {                                                                         // 151
    var inner = buildExpression(group.value.body, options);                                                          // 152
                                                                                                                     // 153
    var node = new mathMLTree.MathNode("mtext", inner);                                                              // 154
                                                                                                                     // 155
    return node;                                                                                                     // 156
};                                                                                                                   // 157
                                                                                                                     // 158
groupTypes.color = function(group, options) {                                                                        // 159
    var inner = buildExpression(group.value.value, options);                                                         // 160
                                                                                                                     // 161
    var node = new mathMLTree.MathNode("mstyle", inner);                                                             // 162
                                                                                                                     // 163
    node.setAttribute("mathcolor", group.value.color);                                                               // 164
                                                                                                                     // 165
    return node;                                                                                                     // 166
};                                                                                                                   // 167
                                                                                                                     // 168
groupTypes.supsub = function(group, options) {                                                                       // 169
    var children = [buildGroup(group.value.base, options)];                                                          // 170
                                                                                                                     // 171
    if (group.value.sub) {                                                                                           // 172
        children.push(buildGroup(group.value.sub, options));                                                         // 173
    }                                                                                                                // 174
                                                                                                                     // 175
    if (group.value.sup) {                                                                                           // 176
        children.push(buildGroup(group.value.sup, options));                                                         // 177
    }                                                                                                                // 178
                                                                                                                     // 179
    var nodeType;                                                                                                    // 180
    if (!group.value.sub) {                                                                                          // 181
        nodeType = "msup";                                                                                           // 182
    } else if (!group.value.sup) {                                                                                   // 183
        nodeType = "msub";                                                                                           // 184
    } else {                                                                                                         // 185
        nodeType = "msubsup";                                                                                        // 186
    }                                                                                                                // 187
                                                                                                                     // 188
    var node = new mathMLTree.MathNode(nodeType, children);                                                          // 189
                                                                                                                     // 190
    return node;                                                                                                     // 191
};                                                                                                                   // 192
                                                                                                                     // 193
groupTypes.genfrac = function(group, options) {                                                                      // 194
    var node = new mathMLTree.MathNode(                                                                              // 195
        "mfrac",                                                                                                     // 196
        [buildGroup(group.value.numer, options),                                                                     // 197
            buildGroup(group.value.denom, options)]);                                                                // 198
                                                                                                                     // 199
    if (!group.value.hasBarLine) {                                                                                   // 200
        node.setAttribute("linethickness", "0px");                                                                   // 201
    }                                                                                                                // 202
                                                                                                                     // 203
    if (group.value.leftDelim != null || group.value.rightDelim != null) {                                           // 204
        var withDelims = [];                                                                                         // 205
                                                                                                                     // 206
        if (group.value.leftDelim != null) {                                                                         // 207
            var leftOp = new mathMLTree.MathNode(                                                                    // 208
                "mo", [new mathMLTree.TextNode(group.value.leftDelim)]);                                             // 209
                                                                                                                     // 210
            leftOp.setAttribute("fence", "true");                                                                    // 211
                                                                                                                     // 212
            withDelims.push(leftOp);                                                                                 // 213
        }                                                                                                            // 214
                                                                                                                     // 215
        withDelims.push(node);                                                                                       // 216
                                                                                                                     // 217
        if (group.value.rightDelim != null) {                                                                        // 218
            var rightOp = new mathMLTree.MathNode(                                                                   // 219
                "mo", [new mathMLTree.TextNode(group.value.rightDelim)]);                                            // 220
                                                                                                                     // 221
            rightOp.setAttribute("fence", "true");                                                                   // 222
                                                                                                                     // 223
            withDelims.push(rightOp);                                                                                // 224
        }                                                                                                            // 225
                                                                                                                     // 226
        var outerNode = new mathMLTree.MathNode("mrow", withDelims);                                                 // 227
                                                                                                                     // 228
        return outerNode;                                                                                            // 229
    }                                                                                                                // 230
                                                                                                                     // 231
    return node;                                                                                                     // 232
};                                                                                                                   // 233
                                                                                                                     // 234
groupTypes.array = function(group, options) {                                                                        // 235
    return new mathMLTree.MathNode(                                                                                  // 236
        "mtable", group.value.body.map(function(row) {                                                               // 237
            return new mathMLTree.MathNode(                                                                          // 238
                "mtr", row.map(function(cell) {                                                                      // 239
                    return new mathMLTree.MathNode(                                                                  // 240
                        "mtd", [buildGroup(cell, options)]);                                                         // 241
                }));                                                                                                 // 242
        }));                                                                                                         // 243
};                                                                                                                   // 244
                                                                                                                     // 245
groupTypes.sqrt = function(group, options) {                                                                         // 246
    var node;                                                                                                        // 247
    if (group.value.index) {                                                                                         // 248
        node = new mathMLTree.MathNode(                                                                              // 249
            "mroot", [                                                                                               // 250
                buildGroup(group.value.body, options),                                                               // 251
                buildGroup(group.value.index, options)                                                               // 252
            ]);                                                                                                      // 253
    } else {                                                                                                         // 254
        node = new mathMLTree.MathNode(                                                                              // 255
            "msqrt", [buildGroup(group.value.body, options)]);                                                       // 256
    }                                                                                                                // 257
                                                                                                                     // 258
    return node;                                                                                                     // 259
};                                                                                                                   // 260
                                                                                                                     // 261
groupTypes.leftright = function(group, options) {                                                                    // 262
    var inner = buildExpression(group.value.body, options);                                                          // 263
                                                                                                                     // 264
    if (group.value.left !== ".") {                                                                                  // 265
        var leftNode = new mathMLTree.MathNode(                                                                      // 266
            "mo", [makeText(group.value.left, group.mode)]);                                                         // 267
                                                                                                                     // 268
        leftNode.setAttribute("fence", "true");                                                                      // 269
                                                                                                                     // 270
        inner.unshift(leftNode);                                                                                     // 271
    }                                                                                                                // 272
                                                                                                                     // 273
    if (group.value.right !== ".") {                                                                                 // 274
        var rightNode = new mathMLTree.MathNode(                                                                     // 275
            "mo", [makeText(group.value.right, group.mode)]);                                                        // 276
                                                                                                                     // 277
        rightNode.setAttribute("fence", "true");                                                                     // 278
                                                                                                                     // 279
        inner.push(rightNode);                                                                                       // 280
    }                                                                                                                // 281
                                                                                                                     // 282
    var outerNode = new mathMLTree.MathNode("mrow", inner);                                                          // 283
                                                                                                                     // 284
    return outerNode;                                                                                                // 285
};                                                                                                                   // 286
                                                                                                                     // 287
groupTypes.middle = function(group, options) {                                                                       // 288
    var middleNode = new mathMLTree.MathNode(                                                                        // 289
        "mo", [makeText(group.value.middle, group.mode)]);                                                           // 290
    middleNode.setAttribute("fence", "true");                                                                        // 291
    return middleNode;                                                                                               // 292
};                                                                                                                   // 293
                                                                                                                     // 294
groupTypes.accent = function(group, options) {                                                                       // 295
    var accentNode = new mathMLTree.MathNode(                                                                        // 296
        "mo", [makeText(group.value.accent, group.mode)]);                                                           // 297
                                                                                                                     // 298
    var node = new mathMLTree.MathNode(                                                                              // 299
        "mover",                                                                                                     // 300
        [buildGroup(group.value.base, options),                                                                      // 301
            accentNode]);                                                                                            // 302
                                                                                                                     // 303
    node.setAttribute("accent", "true");                                                                             // 304
                                                                                                                     // 305
    return node;                                                                                                     // 306
};                                                                                                                   // 307
                                                                                                                     // 308
groupTypes.spacing = function(group) {                                                                               // 309
    var node;                                                                                                        // 310
                                                                                                                     // 311
    if (group.value === "\\ " || group.value === "\\space" ||                                                        // 312
        group.value === " " || group.value === "~") {                                                                // 313
        node = new mathMLTree.MathNode(                                                                              // 314
            "mtext", [new mathMLTree.TextNode("\u00a0")]);                                                           // 315
    } else {                                                                                                         // 316
        node = new mathMLTree.MathNode("mspace");                                                                    // 317
                                                                                                                     // 318
        node.setAttribute(                                                                                           // 319
            "width", buildCommon.spacingFunctions[group.value].size);                                                // 320
    }                                                                                                                // 321
                                                                                                                     // 322
    return node;                                                                                                     // 323
};                                                                                                                   // 324
                                                                                                                     // 325
groupTypes.op = function(group, options) {                                                                           // 326
    var node;                                                                                                        // 327
                                                                                                                     // 328
    // TODO(emily): handle big operators using the `largeop` attribute                                               // 329
                                                                                                                     // 330
    if (group.value.symbol) {                                                                                        // 331
        // This is a symbol. Just add the symbol.                                                                    // 332
        node = new mathMLTree.MathNode(                                                                              // 333
            "mo", [makeText(group.value.body, group.mode)]);                                                         // 334
    } else if (group.value.value) {                                                                                  // 335
        // This is an operator with children. Add them.                                                              // 336
        node = new mathMLTree.MathNode(                                                                              // 337
            "mo", buildExpression(group.value.value, options));                                                      // 338
    } else {                                                                                                         // 339
        // This is a text operator. Add all of the characters from the                                               // 340
        // operator's name.                                                                                          // 341
        // TODO(emily): Add a space in the middle of some of these                                                   // 342
        // operators, like \limsup.                                                                                  // 343
        node = new mathMLTree.MathNode(                                                                              // 344
            "mi", [new mathMLTree.TextNode(group.value.body.slice(1))]);                                             // 345
    }                                                                                                                // 346
                                                                                                                     // 347
    return node;                                                                                                     // 348
};                                                                                                                   // 349
                                                                                                                     // 350
groupTypes.mod = function(group, options) {                                                                          // 351
    var inner = [];                                                                                                  // 352
                                                                                                                     // 353
    if (group.value.modType === "pod" || group.value.modType === "pmod") {                                           // 354
        inner.push(new mathMLTree.MathNode(                                                                          // 355
            "mo", [makeText("(", group.mode)]));                                                                     // 356
    }                                                                                                                // 357
    if (group.value.modType !== "pod") {                                                                             // 358
        inner.push(new mathMLTree.MathNode(                                                                          // 359
            "mo", [makeText("mod", group.mode)]));                                                                   // 360
    }                                                                                                                // 361
    if (group.value.value) {                                                                                         // 362
        var space = new mathMLTree.MathNode("mspace");                                                               // 363
        space.setAttribute("width", "0.333333em");                                                                   // 364
        inner.push(space);                                                                                           // 365
        inner = inner.concat(buildExpression(group.value.value, options));                                           // 366
    }                                                                                                                // 367
    if (group.value.modType === "pod" || group.value.modType === "pmod") {                                           // 368
        inner.push(new mathMLTree.MathNode(                                                                          // 369
            "mo", [makeText(")", group.mode)]));                                                                     // 370
    }                                                                                                                // 371
                                                                                                                     // 372
    return new mathMLTree.MathNode("mo", inner);                                                                     // 373
};                                                                                                                   // 374
                                                                                                                     // 375
groupTypes.katex = function(group) {                                                                                 // 376
    var node = new mathMLTree.MathNode(                                                                              // 377
        "mtext", [new mathMLTree.TextNode("KaTeX")]);                                                                // 378
                                                                                                                     // 379
    return node;                                                                                                     // 380
};                                                                                                                   // 381
                                                                                                                     // 382
groupTypes.font = function(group, options) {                                                                         // 383
    var font = group.value.font;                                                                                     // 384
    return buildGroup(group.value.body, options.withFont(font));                                                     // 385
};                                                                                                                   // 386
                                                                                                                     // 387
groupTypes.delimsizing = function(group) {                                                                           // 388
    var children = [];                                                                                               // 389
                                                                                                                     // 390
    if (group.value.value !== ".") {                                                                                 // 391
        children.push(makeText(group.value.value, group.mode));                                                      // 392
    }                                                                                                                // 393
                                                                                                                     // 394
    var node = new mathMLTree.MathNode("mo", children);                                                              // 395
                                                                                                                     // 396
    if (group.value.mclass === "mopen" ||                                                                            // 397
        group.value.mclass === "mclose") {                                                                           // 398
        // Only some of the delimsizing functions act as fences, and they                                            // 399
        // return "mopen" or "mclose" mclass.                                                                        // 400
        node.setAttribute("fence", "true");                                                                          // 401
    } else {                                                                                                         // 402
        // Explicitly disable fencing if it's not a fence, to override the                                           // 403
        // defaults.                                                                                                 // 404
        node.setAttribute("fence", "false");                                                                         // 405
    }                                                                                                                // 406
                                                                                                                     // 407
    return node;                                                                                                     // 408
};                                                                                                                   // 409
                                                                                                                     // 410
groupTypes.styling = function(group, options) {                                                                      // 411
    var inner = buildExpression(group.value.value, options);                                                         // 412
                                                                                                                     // 413
    var node = new mathMLTree.MathNode("mstyle", inner);                                                             // 414
                                                                                                                     // 415
    var styleAttributes = {                                                                                          // 416
        "display": ["0", "true"],                                                                                    // 417
        "text": ["0", "false"],                                                                                      // 418
        "script": ["1", "false"],                                                                                    // 419
        "scriptscript": ["2", "false"]                                                                               // 420
    };                                                                                                               // 421
                                                                                                                     // 422
    var attr = styleAttributes[group.value.style];                                                                   // 423
                                                                                                                     // 424
    node.setAttribute("scriptlevel", attr[0]);                                                                       // 425
    node.setAttribute("displaystyle", attr[1]);                                                                      // 426
                                                                                                                     // 427
    return node;                                                                                                     // 428
};                                                                                                                   // 429
                                                                                                                     // 430
groupTypes.sizing = function(group, options) {                                                                       // 431
    var inner = buildExpression(group.value.value, options);                                                         // 432
                                                                                                                     // 433
    var node = new mathMLTree.MathNode("mstyle", inner);                                                             // 434
                                                                                                                     // 435
    // TODO(emily): This doesn't produce the correct size for nested size                                            // 436
    // changes, because we don't keep state of what style we're currently                                            // 437
    // in, so we can't reset the size to normal before changing it.  Now                                             // 438
    // that we're passing an options parameter we should be able to fix                                              // 439
    // this.                                                                                                         // 440
    node.setAttribute(                                                                                               // 441
        "mathsize", buildCommon.sizingMultiplier[group.value.size] + "em");                                          // 442
                                                                                                                     // 443
    return node;                                                                                                     // 444
};                                                                                                                   // 445
                                                                                                                     // 446
groupTypes.overline = function(group, options) {                                                                     // 447
    var operator = new mathMLTree.MathNode(                                                                          // 448
        "mo", [new mathMLTree.TextNode("\u203e")]);                                                                  // 449
    operator.setAttribute("stretchy", "true");                                                                       // 450
                                                                                                                     // 451
    var node = new mathMLTree.MathNode(                                                                              // 452
        "mover",                                                                                                     // 453
        [buildGroup(group.value.body, options),                                                                      // 454
            operator]);                                                                                              // 455
    node.setAttribute("accent", "true");                                                                             // 456
                                                                                                                     // 457
    return node;                                                                                                     // 458
};                                                                                                                   // 459
                                                                                                                     // 460
groupTypes.underline = function(group, options) {                                                                    // 461
    var operator = new mathMLTree.MathNode(                                                                          // 462
        "mo", [new mathMLTree.TextNode("\u203e")]);                                                                  // 463
    operator.setAttribute("stretchy", "true");                                                                       // 464
                                                                                                                     // 465
    var node = new mathMLTree.MathNode(                                                                              // 466
        "munder",                                                                                                    // 467
        [buildGroup(group.value.body, options),                                                                      // 468
            operator]);                                                                                              // 469
    node.setAttribute("accentunder", "true");                                                                        // 470
                                                                                                                     // 471
    return node;                                                                                                     // 472
};                                                                                                                   // 473
                                                                                                                     // 474
groupTypes.rule = function(group) {                                                                                  // 475
    // TODO(emily): Figure out if there's an actual way to draw black boxes                                          // 476
    // in MathML.                                                                                                    // 477
    var node = new mathMLTree.MathNode("mrow");                                                                      // 478
                                                                                                                     // 479
    return node;                                                                                                     // 480
};                                                                                                                   // 481
                                                                                                                     // 482
groupTypes.kern = function(group) {                                                                                  // 483
    // TODO(kevin): Figure out if there's a way to add space in MathML                                               // 484
    var node = new mathMLTree.MathNode("mrow");                                                                      // 485
                                                                                                                     // 486
    return node;                                                                                                     // 487
};                                                                                                                   // 488
                                                                                                                     // 489
groupTypes.llap = function(group, options) {                                                                         // 490
    var node = new mathMLTree.MathNode(                                                                              // 491
        "mpadded", [buildGroup(group.value.body, options)]);                                                         // 492
                                                                                                                     // 493
    node.setAttribute("lspace", "-1width");                                                                          // 494
    node.setAttribute("width", "0px");                                                                               // 495
                                                                                                                     // 496
    return node;                                                                                                     // 497
};                                                                                                                   // 498
                                                                                                                     // 499
groupTypes.rlap = function(group, options) {                                                                         // 500
    var node = new mathMLTree.MathNode(                                                                              // 501
        "mpadded", [buildGroup(group.value.body, options)]);                                                         // 502
                                                                                                                     // 503
    node.setAttribute("width", "0px");                                                                               // 504
                                                                                                                     // 505
    return node;                                                                                                     // 506
};                                                                                                                   // 507
                                                                                                                     // 508
groupTypes.phantom = function(group, options) {                                                                      // 509
    var inner = buildExpression(group.value.value, options);                                                         // 510
    return new mathMLTree.MathNode("mphantom", inner);                                                               // 511
};                                                                                                                   // 512
                                                                                                                     // 513
groupTypes.mclass = function(group, options) {                                                                       // 514
    var inner = buildExpression(group.value.value, options);                                                         // 515
    return new mathMLTree.MathNode("mstyle", inner);                                                                 // 516
};                                                                                                                   // 517
                                                                                                                     // 518
/**                                                                                                                  // 519
 * Takes a list of nodes, builds them, and returns a list of the generated                                           // 520
 * MathML nodes. A little simpler than the HTML version because we don't do any                                      // 521
 * previous-node handling.                                                                                           // 522
 */                                                                                                                  // 523
var buildExpression = function(expression, options) {                                                                // 524
    var groups = [];                                                                                                 // 525
    for (var i = 0; i < expression.length; i++) {                                                                    // 526
        var group = expression[i];                                                                                   // 527
        groups.push(buildGroup(group, options));                                                                     // 528
    }                                                                                                                // 529
    return groups;                                                                                                   // 530
};                                                                                                                   // 531
                                                                                                                     // 532
/**                                                                                                                  // 533
 * Takes a group from the parser and calls the appropriate groupTypes function                                       // 534
 * on it to produce a MathML node.                                                                                   // 535
 */                                                                                                                  // 536
var buildGroup = function(group, options) {                                                                          // 537
    if (!group) {                                                                                                    // 538
        return new mathMLTree.MathNode("mrow");                                                                      // 539
    }                                                                                                                // 540
                                                                                                                     // 541
    if (groupTypes[group.type]) {                                                                                    // 542
        // Call the groupTypes function                                                                              // 543
        return groupTypes[group.type](group, options);                                                               // 544
    } else {                                                                                                         // 545
        throw new ParseError(                                                                                        // 546
            "Got group of unknown type: '" + group.type + "'");                                                      // 547
    }                                                                                                                // 548
};                                                                                                                   // 549
                                                                                                                     // 550
/**                                                                                                                  // 551
 * Takes a full parse tree and settings and builds a MathML representation of                                        // 552
 * it. In particular, we put the elements from building the parse tree into a                                        // 553
 * <semantics> tag so we can also include that TeX source as an annotation.                                          // 554
 *                                                                                                                   // 555
 * Note that we actually return a domTree element with a `<math>` inside it so                                       // 556
 * we can do appropriate styling.                                                                                    // 557
 */                                                                                                                  // 558
var buildMathML = function(tree, texExpression, options) {                                                           // 559
    var expression = buildExpression(tree, options);                                                                 // 560
                                                                                                                     // 561
    // Wrap up the expression in an mrow so it is presented in the semantics                                         // 562
    // tag correctly.                                                                                                // 563
    var wrapper = new mathMLTree.MathNode("mrow", expression);                                                       // 564
                                                                                                                     // 565
    // Build a TeX annotation of the source                                                                          // 566
    var annotation = new mathMLTree.MathNode(                                                                        // 567
        "annotation", [new mathMLTree.TextNode(texExpression)]);                                                     // 568
                                                                                                                     // 569
    annotation.setAttribute("encoding", "application/x-tex");                                                        // 570
                                                                                                                     // 571
    var semantics = new mathMLTree.MathNode(                                                                         // 572
        "semantics", [wrapper, annotation]);                                                                         // 573
                                                                                                                     // 574
    var math = new mathMLTree.MathNode("math", [semantics]);                                                         // 575
                                                                                                                     // 576
    // You can't style <math> nodes, so we wrap the node in a span.                                                  // 577
    return makeSpan(["katex-mathml"], [math]);                                                                       // 578
};                                                                                                                   // 579
                                                                                                                     // 580
module.exports = buildMathML;                                                                                        // 581
                                                                                                                     // 582
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mathMLTree.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/mathMLTree.js                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * These objects store data about MathML nodes. This is the MathML equivalent                                        // 2
 * of the types in domTree.js. Since MathML handles its own rendering, and                                           // 3
 * since we're mainly using MathML to improve accessibility, we don't manage                                         // 4
 * any of the styling state that the plain DOM nodes do.                                                             // 5
 *                                                                                                                   // 6
 * The `toNode` and `toMarkup` functions work simlarly to how they do in                                             // 7
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.                                      // 8
 */                                                                                                                  // 9
                                                                                                                     // 10
var utils = require("./utils");                                                                                      // 11
                                                                                                                     // 12
/**                                                                                                                  // 13
 * This node represents a general purpose MathML node of any type. The                                               // 14
 * constructor requires the type of node to create (for example, `"mo"` or                                           // 15
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).                                                         // 16
 */                                                                                                                  // 17
function MathNode(type, children) {                                                                                  // 18
    this.type = type;                                                                                                // 19
    this.attributes = {};                                                                                            // 20
    this.children = children || [];                                                                                  // 21
}                                                                                                                    // 22
                                                                                                                     // 23
/**                                                                                                                  // 24
 * Sets an attribute on a MathML node. MathML depends on attributes to convey a                                      // 25
 * semantic content, so this is used heavily.                                                                        // 26
 */                                                                                                                  // 27
MathNode.prototype.setAttribute = function(name, value) {                                                            // 28
    this.attributes[name] = value;                                                                                   // 29
};                                                                                                                   // 30
                                                                                                                     // 31
/**                                                                                                                  // 32
 * Converts the math node into a MathML-namespaced DOM element.                                                      // 33
 */                                                                                                                  // 34
MathNode.prototype.toNode = function() {                                                                             // 35
    var node = document.createElementNS(                                                                             // 36
        "http://www.w3.org/1998/Math/MathML", this.type);                                                            // 37
                                                                                                                     // 38
    for (var attr in this.attributes) {                                                                              // 39
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {                                           // 40
            node.setAttribute(attr, this.attributes[attr]);                                                          // 41
        }                                                                                                            // 42
    }                                                                                                                // 43
                                                                                                                     // 44
    for (var i = 0; i < this.children.length; i++) {                                                                 // 45
        node.appendChild(this.children[i].toNode());                                                                 // 46
    }                                                                                                                // 47
                                                                                                                     // 48
    return node;                                                                                                     // 49
};                                                                                                                   // 50
                                                                                                                     // 51
/**                                                                                                                  // 52
 * Converts the math node into an HTML markup string.                                                                // 53
 */                                                                                                                  // 54
MathNode.prototype.toMarkup = function() {                                                                           // 55
    var markup = "<" + this.type;                                                                                    // 56
                                                                                                                     // 57
    // Add the attributes                                                                                            // 58
    for (var attr in this.attributes) {                                                                              // 59
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {                                           // 60
            markup += " " + attr + "=\"";                                                                            // 61
            markup += utils.escape(this.attributes[attr]);                                                           // 62
            markup += "\"";                                                                                          // 63
        }                                                                                                            // 64
    }                                                                                                                // 65
                                                                                                                     // 66
    markup += ">";                                                                                                   // 67
                                                                                                                     // 68
    for (var i = 0; i < this.children.length; i++) {                                                                 // 69
        markup += this.children[i].toMarkup();                                                                       // 70
    }                                                                                                                // 71
                                                                                                                     // 72
    markup += "</" + this.type + ">";                                                                                // 73
                                                                                                                     // 74
    return markup;                                                                                                   // 75
};                                                                                                                   // 76
                                                                                                                     // 77
/**                                                                                                                  // 78
 * This node represents a piece of text.                                                                             // 79
 */                                                                                                                  // 80
function TextNode(text) {                                                                                            // 81
    this.text = text;                                                                                                // 82
}                                                                                                                    // 83
                                                                                                                     // 84
/**                                                                                                                  // 85
 * Converts the text node into a DOM text node.                                                                      // 86
 */                                                                                                                  // 87
TextNode.prototype.toNode = function() {                                                                             // 88
    return document.createTextNode(this.text);                                                                       // 89
};                                                                                                                   // 90
                                                                                                                     // 91
/**                                                                                                                  // 92
 * Converts the text node into HTML markup (which is just the text itself).                                          // 93
 */                                                                                                                  // 94
TextNode.prototype.toMarkup = function() {                                                                           // 95
    return utils.escape(this.text);                                                                                  // 96
};                                                                                                                   // 97
                                                                                                                     // 98
module.exports = {                                                                                                   // 99
    MathNode: MathNode,                                                                                              // 100
    TextNode: TextNode                                                                                               // 101
};                                                                                                                   // 102
                                                                                                                     // 103
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Options.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/Options.js                                            //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file contains information about the options that the Parser carries                                          // 2
 * around with it while parsing. Data is held in an `Options` object, and when                                       // 3
 * recursing, a new `Options` object can be created with the `.with*` and                                            // 4
 * `.reset` functions.                                                                                               // 5
 */                                                                                                                  // 6
                                                                                                                     // 7
/**                                                                                                                  // 8
 * This is the main options class. It contains the style, size, color, and font                                      // 9
 * of the current parse level. It also contains the style and size of the parent                                     // 10
 * parse level, so size changes can be handled efficiently.                                                          // 11
 *                                                                                                                   // 12
 * Each of the `.with*` and `.reset` functions passes its current style and size                                     // 13
 * as the parentStyle and parentSize of the new options class, so parent                                             // 14
 * handling is taken care of automatically.                                                                          // 15
 */                                                                                                                  // 16
function Options(data) {                                                                                             // 17
    this.style = data.style;                                                                                         // 18
    this.color = data.color;                                                                                         // 19
    this.size = data.size;                                                                                           // 20
    this.phantom = data.phantom;                                                                                     // 21
    this.font = data.font;                                                                                           // 22
                                                                                                                     // 23
    if (data.parentStyle === undefined) {                                                                            // 24
        this.parentStyle = data.style;                                                                               // 25
    } else {                                                                                                         // 26
        this.parentStyle = data.parentStyle;                                                                         // 27
    }                                                                                                                // 28
                                                                                                                     // 29
    if (data.parentSize === undefined) {                                                                             // 30
        this.parentSize = data.size;                                                                                 // 31
    } else {                                                                                                         // 32
        this.parentSize = data.parentSize;                                                                           // 33
    }                                                                                                                // 34
}                                                                                                                    // 35
                                                                                                                     // 36
/**                                                                                                                  // 37
 * Returns a new options object with the same properties as "this".  Properties                                      // 38
 * from "extension" will be copied to the new options object.                                                        // 39
 */                                                                                                                  // 40
Options.prototype.extend = function(extension) {                                                                     // 41
    var data = {                                                                                                     // 42
        style: this.style,                                                                                           // 43
        size: this.size,                                                                                             // 44
        color: this.color,                                                                                           // 45
        parentStyle: this.style,                                                                                     // 46
        parentSize: this.size,                                                                                       // 47
        phantom: this.phantom,                                                                                       // 48
        font: this.font                                                                                              // 49
    };                                                                                                               // 50
                                                                                                                     // 51
    for (var key in extension) {                                                                                     // 52
        if (extension.hasOwnProperty(key)) {                                                                         // 53
            data[key] = extension[key];                                                                              // 54
        }                                                                                                            // 55
    }                                                                                                                // 56
                                                                                                                     // 57
    return new Options(data);                                                                                        // 58
};                                                                                                                   // 59
                                                                                                                     // 60
/**                                                                                                                  // 61
 * Create a new options object with the given style.                                                                 // 62
 */                                                                                                                  // 63
Options.prototype.withStyle = function(style) {                                                                      // 64
    return this.extend({                                                                                             // 65
        style: style                                                                                                 // 66
    });                                                                                                              // 67
};                                                                                                                   // 68
                                                                                                                     // 69
/**                                                                                                                  // 70
 * Create a new options object with the given size.                                                                  // 71
 */                                                                                                                  // 72
Options.prototype.withSize = function(size) {                                                                        // 73
    return this.extend({                                                                                             // 74
        size: size                                                                                                   // 75
    });                                                                                                              // 76
};                                                                                                                   // 77
                                                                                                                     // 78
/**                                                                                                                  // 79
 * Create a new options object with the given color.                                                                 // 80
 */                                                                                                                  // 81
Options.prototype.withColor = function(color) {                                                                      // 82
    return this.extend({                                                                                             // 83
        color: color                                                                                                 // 84
    });                                                                                                              // 85
};                                                                                                                   // 86
                                                                                                                     // 87
/**                                                                                                                  // 88
 * Create a new options object with "phantom" set to true.                                                           // 89
 */                                                                                                                  // 90
Options.prototype.withPhantom = function() {                                                                         // 91
    return this.extend({                                                                                             // 92
        phantom: true                                                                                                // 93
    });                                                                                                              // 94
};                                                                                                                   // 95
                                                                                                                     // 96
/**                                                                                                                  // 97
 * Create a new options objects with the give font.                                                                  // 98
 */                                                                                                                  // 99
Options.prototype.withFont = function(font) {                                                                        // 100
    return this.extend({                                                                                             // 101
        font: font || this.font                                                                                      // 102
    });                                                                                                              // 103
};                                                                                                                   // 104
                                                                                                                     // 105
/**                                                                                                                  // 106
 * Create a new options object with the same style, size, and color. This is                                         // 107
 * used so that parent style and size changes are handled correctly.                                                 // 108
 */                                                                                                                  // 109
Options.prototype.reset = function() {                                                                               // 110
    return this.extend({});                                                                                          // 111
};                                                                                                                   // 112
                                                                                                                     // 113
/**                                                                                                                  // 114
 * A map of color names to CSS colors.                                                                               // 115
 * TODO(emily): Remove this when we have real macros                                                                 // 116
 */                                                                                                                  // 117
var colorMap = {                                                                                                     // 118
    "katex-blue": "#6495ed",                                                                                         // 119
    "katex-orange": "#ffa500",                                                                                       // 120
    "katex-pink": "#ff00af",                                                                                         // 121
    "katex-red": "#df0030",                                                                                          // 122
    "katex-green": "#28ae7b",                                                                                        // 123
    "katex-gray": "gray",                                                                                            // 124
    "katex-purple": "#9d38bd",                                                                                       // 125
    "katex-blueA": "#ccfaff",                                                                                        // 126
    "katex-blueB": "#80f6ff",                                                                                        // 127
    "katex-blueC": "#63d9ea",                                                                                        // 128
    "katex-blueD": "#11accd",                                                                                        // 129
    "katex-blueE": "#0c7f99",                                                                                        // 130
    "katex-tealA": "#94fff5",                                                                                        // 131
    "katex-tealB": "#26edd5",                                                                                        // 132
    "katex-tealC": "#01d1c1",                                                                                        // 133
    "katex-tealD": "#01a995",                                                                                        // 134
    "katex-tealE": "#208170",                                                                                        // 135
    "katex-greenA": "#b6ffb0",                                                                                       // 136
    "katex-greenB": "#8af281",                                                                                       // 137
    "katex-greenC": "#74cf70",                                                                                       // 138
    "katex-greenD": "#1fab54",                                                                                       // 139
    "katex-greenE": "#0d923f",                                                                                       // 140
    "katex-goldA": "#ffd0a9",                                                                                        // 141
    "katex-goldB": "#ffbb71",                                                                                        // 142
    "katex-goldC": "#ff9c39",                                                                                        // 143
    "katex-goldD": "#e07d10",                                                                                        // 144
    "katex-goldE": "#a75a05",                                                                                        // 145
    "katex-redA": "#fca9a9",                                                                                         // 146
    "katex-redB": "#ff8482",                                                                                         // 147
    "katex-redC": "#f9685d",                                                                                         // 148
    "katex-redD": "#e84d39",                                                                                         // 149
    "katex-redE": "#bc2612",                                                                                         // 150
    "katex-maroonA": "#ffbde0",                                                                                      // 151
    "katex-maroonB": "#ff92c6",                                                                                      // 152
    "katex-maroonC": "#ed5fa6",                                                                                      // 153
    "katex-maroonD": "#ca337c",                                                                                      // 154
    "katex-maroonE": "#9e034e",                                                                                      // 155
    "katex-purpleA": "#ddd7ff",                                                                                      // 156
    "katex-purpleB": "#c6b9fc",                                                                                      // 157
    "katex-purpleC": "#aa87ff",                                                                                      // 158
    "katex-purpleD": "#7854ab",                                                                                      // 159
    "katex-purpleE": "#543b78",                                                                                      // 160
    "katex-mintA": "#f5f9e8",                                                                                        // 161
    "katex-mintB": "#edf2df",                                                                                        // 162
    "katex-mintC": "#e0e5cc",                                                                                        // 163
    "katex-grayA": "#f6f7f7",                                                                                        // 164
    "katex-grayB": "#f0f1f2",                                                                                        // 165
    "katex-grayC": "#e3e5e6",                                                                                        // 166
    "katex-grayD": "#d6d8da",                                                                                        // 167
    "katex-grayE": "#babec2",                                                                                        // 168
    "katex-grayF": "#888d93",                                                                                        // 169
    "katex-grayG": "#626569",                                                                                        // 170
    "katex-grayH": "#3b3e40",                                                                                        // 171
    "katex-grayI": "#21242c",                                                                                        // 172
    "katex-kaBlue": "#314453",                                                                                       // 173
    "katex-kaGreen": "#71B307"                                                                                       // 174
};                                                                                                                   // 175
                                                                                                                     // 176
/**                                                                                                                  // 177
 * Gets the CSS color of the current options object, accounting for the                                              // 178
 * `colorMap`.                                                                                                       // 179
 */                                                                                                                  // 180
Options.prototype.getColor = function() {                                                                            // 181
    if (this.phantom) {                                                                                              // 182
        return "transparent";                                                                                        // 183
    } else {                                                                                                         // 184
        return colorMap[this.color] || this.color;                                                                   // 185
    }                                                                                                                // 186
};                                                                                                                   // 187
                                                                                                                     // 188
module.exports = Options;                                                                                            // 189
                                                                                                                     // 190
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"parseTree.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/parseTree.js                                          //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * Provides a single function for parsing an expression using a Parser                                               // 2
 * TODO(emily): Remove this                                                                                          // 3
 */                                                                                                                  // 4
                                                                                                                     // 5
var Parser = require("./Parser");                                                                                    // 6
                                                                                                                     // 7
/**                                                                                                                  // 8
 * Parses an expression using a Parser, then returns the parsed result.                                              // 9
 */                                                                                                                  // 10
var parseTree = function(toParse, settings) {                                                                        // 11
    if (!(typeof toParse === 'string' || toParse instanceof String)) {                                               // 12
        throw new TypeError('KaTeX can only parse string typed expression');                                         // 13
    }                                                                                                                // 14
    var parser = new Parser(toParse, settings);                                                                      // 15
                                                                                                                     // 16
    return parser.parse();                                                                                           // 17
};                                                                                                                   // 18
                                                                                                                     // 19
module.exports = parseTree;                                                                                          // 20
                                                                                                                     // 21
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Parser.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/Parser.js                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* eslint no-constant-condition:0 */                                                                                 // 1
var functions = require("./functions");                                                                              // 2
var environments = require("./environments");                                                                        // 3
var MacroExpander = require("./MacroExpander");                                                                      // 4
var symbols = require("./symbols");                                                                                  // 5
var utils = require("./utils");                                                                                      // 6
var cjkRegex = require("./unicodeRegexes").cjkRegex;                                                                 // 7
                                                                                                                     // 8
var parseData = require("./parseData");                                                                              // 9
var ParseError = require("./ParseError");                                                                            // 10
                                                                                                                     // 11
/**                                                                                                                  // 12
 * This file contains the parser used to parse out a TeX expression from the                                         // 13
 * input. Since TeX isn't context-free, standard parsers don't work particularly                                     // 14
 * well.                                                                                                             // 15
 *                                                                                                                   // 16
 * The strategy of this parser is as such:                                                                           // 17
 *                                                                                                                   // 18
 * The main functions (the `.parse...` ones) take a position in the current                                          // 19
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at                                        // 20
 * this.lexer) also supports pulling out tokens at arbitrary places. When                                            // 21
 * individual tokens are needed at a position, the lexer is called to pull out a                                     // 22
 * token, which is then used.                                                                                        // 23
 *                                                                                                                   // 24
 * The parser has a property called "mode" indicating the mode that                                                  // 25
 * the parser is currently in. Currently it has to be one of "math" or                                               // 26
 * "text", which denotes whether the current environment is a math-y                                                 // 27
 * one or a text-y one (e.g. inside \text). Currently, this serves to                                                // 28
 * limit the functions which can be used in text mode.                                                               // 29
 *                                                                                                                   // 30
 * The main functions then return an object which contains the useful data that                                      // 31
 * was parsed at its given point, and a new position at the end of the parsed                                        // 32
 * data. The main functions can call each other and continue the parsing by                                          // 33
 * using the returned position as a new starting point.                                                              // 34
 *                                                                                                                   // 35
 * There are also extra `.handle...` functions, which pull out some reused                                           // 36
 * functionality into self-contained functions.                                                                      // 37
 *                                                                                                                   // 38
 * The earlier functions return ParseNodes.                                                                          // 39
 * The later functions (which are called deeper in the parse) sometimes return                                       // 40
 * ParseFuncOrArgument, which contain a ParseNode as well as some data about                                         // 41
 * whether the parsed object is a function which is missing some arguments, or a                                     // 42
 * standalone object which can be used as an argument to another function.                                           // 43
 */                                                                                                                  // 44
                                                                                                                     // 45
/**                                                                                                                  // 46
 * Main Parser class                                                                                                 // 47
 */                                                                                                                  // 48
function Parser(input, settings) {                                                                                   // 49
    // Create a new macro expander (gullet) and (indirectly via that) also a                                         // 50
    // new lexer (mouth) for this parser (stomach, in the language of TeX)                                           // 51
    this.gullet = new MacroExpander(input, settings.macros);                                                         // 52
    // Store the settings for use in parsing                                                                         // 53
    this.settings = settings;                                                                                        // 54
    // Count leftright depth (for \middle errors)                                                                    // 55
    this.leftrightDepth = 0;                                                                                         // 56
}                                                                                                                    // 57
                                                                                                                     // 58
var ParseNode = parseData.ParseNode;                                                                                 // 59
                                                                                                                     // 60
/**                                                                                                                  // 61
 * An initial function (without its arguments), or an argument to a function.                                        // 62
 * The `result` argument should be a ParseNode.                                                                      // 63
 */                                                                                                                  // 64
function ParseFuncOrArgument(result, isFunction, token) {                                                            // 65
    this.result = result;                                                                                            // 66
    // Is this a function (i.e. is it something defined in functions.js)?                                            // 67
    this.isFunction = isFunction;                                                                                    // 68
    this.token = token;                                                                                              // 69
}                                                                                                                    // 70
                                                                                                                     // 71
/**                                                                                                                  // 72
 * Checks a result to make sure it has the right type, and throws an                                                 // 73
 * appropriate error otherwise.                                                                                      // 74
 *                                                                                                                   // 75
 * @param {boolean=} consume whether to consume the expected token,                                                  // 76
 *                           defaults to true                                                                        // 77
 */                                                                                                                  // 78
Parser.prototype.expect = function(text, consume) {                                                                  // 79
    if (this.nextToken.text !== text) {                                                                              // 80
        throw new ParseError(                                                                                        // 81
            "Expected '" + text + "', got '" + this.nextToken.text + "'",                                            // 82
            this.nextToken                                                                                           // 83
        );                                                                                                           // 84
    }                                                                                                                // 85
    if (consume !== false) {                                                                                         // 86
        this.consume();                                                                                              // 87
    }                                                                                                                // 88
};                                                                                                                   // 89
                                                                                                                     // 90
/**                                                                                                                  // 91
 * Considers the current look ahead token as consumed,                                                               // 92
 * and fetches the one after that as the new look ahead.                                                             // 93
 */                                                                                                                  // 94
Parser.prototype.consume = function() {                                                                              // 95
    this.nextToken = this.gullet.get(this.mode === "math");                                                          // 96
};                                                                                                                   // 97
                                                                                                                     // 98
Parser.prototype.switchMode = function(newMode) {                                                                    // 99
    this.gullet.unget(this.nextToken);                                                                               // 100
    this.mode = newMode;                                                                                             // 101
    this.consume();                                                                                                  // 102
};                                                                                                                   // 103
                                                                                                                     // 104
/**                                                                                                                  // 105
 * Main parsing function, which parses an entire input.                                                              // 106
 *                                                                                                                   // 107
 * @return {?Array.<ParseNode>}                                                                                      // 108
 */                                                                                                                  // 109
Parser.prototype.parse = function() {                                                                                // 110
    // Try to parse the input                                                                                        // 111
    this.mode = "math";                                                                                              // 112
    this.consume();                                                                                                  // 113
    var parse = this.parseInput();                                                                                   // 114
    return parse;                                                                                                    // 115
};                                                                                                                   // 116
                                                                                                                     // 117
/**                                                                                                                  // 118
 * Parses an entire input tree.                                                                                      // 119
 */                                                                                                                  // 120
Parser.prototype.parseInput = function() {                                                                           // 121
    // Parse an expression                                                                                           // 122
    var expression = this.parseExpression(false);                                                                    // 123
    // If we succeeded, make sure there's an EOF at the end                                                          // 124
    this.expect("EOF", false);                                                                                       // 125
    return expression;                                                                                               // 126
};                                                                                                                   // 127
                                                                                                                     // 128
var endOfExpression = ["}", "\\end", "\\right", "&", "\\\\", "\\cr"];                                                // 129
                                                                                                                     // 130
/**                                                                                                                  // 131
 * Parses an "expression", which is a list of atoms.                                                                 // 132
 *                                                                                                                   // 133
 * @param {boolean} breakOnInfix  Should the parsing stop when we hit infix                                          // 134
 *                  nodes? This happens when functions have higher precendence                                       // 135
 *                  than infix nodes in implicit parses.                                                             // 136
 *                                                                                                                   // 137
 * @param {?string} breakOnTokenText  The text of the token that the expression                                      // 138
 *                  should end with, or `null` if something else should end the                                      // 139
 *                  expression.                                                                                      // 140
 *                                                                                                                   // 141
 * @return {ParseNode}                                                                                               // 142
 */                                                                                                                  // 143
Parser.prototype.parseExpression = function(breakOnInfix, breakOnTokenText) {                                        // 144
    var body = [];                                                                                                   // 145
    // Keep adding atoms to the body until we can't parse any more atoms (either                                     // 146
    // we reached the end, a }, or a \right)                                                                         // 147
    while (true) {                                                                                                   // 148
        var lex = this.nextToken;                                                                                    // 149
        if (endOfExpression.indexOf(lex.text) !== -1) {                                                              // 150
            break;                                                                                                   // 151
        }                                                                                                            // 152
        if (breakOnTokenText && lex.text === breakOnTokenText) {                                                     // 153
            break;                                                                                                   // 154
        }                                                                                                            // 155
        if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {                                      // 156
            break;                                                                                                   // 157
        }                                                                                                            // 158
        var atom = this.parseAtom();                                                                                 // 159
        if (!atom) {                                                                                                 // 160
            if (!this.settings.throwOnError && lex.text[0] === "\\") {                                               // 161
                var errorNode = this.handleUnsupportedCmd();                                                         // 162
                body.push(errorNode);                                                                                // 163
                continue;                                                                                            // 164
            }                                                                                                        // 165
                                                                                                                     // 166
            break;                                                                                                   // 167
        }                                                                                                            // 168
        body.push(atom);                                                                                             // 169
    }                                                                                                                // 170
    return this.handleInfixNodes(body);                                                                              // 171
};                                                                                                                   // 172
                                                                                                                     // 173
/**                                                                                                                  // 174
 * Rewrites infix operators such as \over with corresponding commands such                                           // 175
 * as \frac.                                                                                                         // 176
 *                                                                                                                   // 177
 * There can only be one infix operator per group.  If there's more than one                                         // 178
 * then the expression is ambiguous.  This can be resolved by adding {}.                                             // 179
 *                                                                                                                   // 180
 * @returns {Array}                                                                                                  // 181
 */                                                                                                                  // 182
Parser.prototype.handleInfixNodes = function(body) {                                                                 // 183
    var overIndex = -1;                                                                                              // 184
    var funcName;                                                                                                    // 185
                                                                                                                     // 186
    for (var i = 0; i < body.length; i++) {                                                                          // 187
        var node = body[i];                                                                                          // 188
        if (node.type === "infix") {                                                                                 // 189
            if (overIndex !== -1) {                                                                                  // 190
                throw new ParseError(                                                                                // 191
                    "only one infix operator per group",                                                             // 192
                    node.value.token);                                                                               // 193
            }                                                                                                        // 194
            overIndex = i;                                                                                           // 195
            funcName = node.value.replaceWith;                                                                       // 196
        }                                                                                                            // 197
    }                                                                                                                // 198
                                                                                                                     // 199
    if (overIndex !== -1) {                                                                                          // 200
        var numerNode;                                                                                               // 201
        var denomNode;                                                                                               // 202
                                                                                                                     // 203
        var numerBody = body.slice(0, overIndex);                                                                    // 204
        var denomBody = body.slice(overIndex + 1);                                                                   // 205
                                                                                                                     // 206
        if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {                                            // 207
            numerNode = numerBody[0];                                                                                // 208
        } else {                                                                                                     // 209
            numerNode = new ParseNode("ordgroup", numerBody, this.mode);                                             // 210
        }                                                                                                            // 211
                                                                                                                     // 212
        if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {                                            // 213
            denomNode = denomBody[0];                                                                                // 214
        } else {                                                                                                     // 215
            denomNode = new ParseNode("ordgroup", denomBody, this.mode);                                             // 216
        }                                                                                                            // 217
                                                                                                                     // 218
        var value = this.callFunction(                                                                               // 219
            funcName, [numerNode, denomNode], null);                                                                 // 220
        return [new ParseNode(value.type, value, this.mode)];                                                        // 221
    } else {                                                                                                         // 222
        return body;                                                                                                 // 223
    }                                                                                                                // 224
};                                                                                                                   // 225
                                                                                                                     // 226
// The greediness of a superscript or subscript                                                                      // 227
var SUPSUB_GREEDINESS = 1;                                                                                           // 228
                                                                                                                     // 229
/**                                                                                                                  // 230
 * Handle a subscript or superscript with nice errors.                                                               // 231
 */                                                                                                                  // 232
Parser.prototype.handleSupSubscript = function(name) {                                                               // 233
    var symbolToken = this.nextToken;                                                                                // 234
    var symbol = symbolToken.text;                                                                                   // 235
    this.consume();                                                                                                  // 236
    var group = this.parseGroup();                                                                                   // 237
                                                                                                                     // 238
    if (!group) {                                                                                                    // 239
        if (!this.settings.throwOnError && this.nextToken.text[0] === "\\") {                                        // 240
            return this.handleUnsupportedCmd();                                                                      // 241
        } else {                                                                                                     // 242
            throw new ParseError(                                                                                    // 243
                "Expected group after '" + symbol + "'",                                                             // 244
                symbolToken                                                                                          // 245
            );                                                                                                       // 246
        }                                                                                                            // 247
    } else if (group.isFunction) {                                                                                   // 248
        // ^ and _ have a greediness, so handle interactions with functions'                                         // 249
        // greediness                                                                                                // 250
        var funcGreediness = functions[group.result].greediness;                                                     // 251
        if (funcGreediness > SUPSUB_GREEDINESS) {                                                                    // 252
            return this.parseFunction(group);                                                                        // 253
        } else {                                                                                                     // 254
            throw new ParseError(                                                                                    // 255
                "Got function '" + group.result + "' with no arguments " +                                           // 256
                    "as " + name, symbolToken);                                                                      // 257
        }                                                                                                            // 258
    } else {                                                                                                         // 259
        return group.result;                                                                                         // 260
    }                                                                                                                // 261
};                                                                                                                   // 262
                                                                                                                     // 263
/**                                                                                                                  // 264
 * Converts the textual input of an unsupported command into a text node                                             // 265
 * contained within a color node whose color is determined by errorColor                                             // 266
 */                                                                                                                  // 267
Parser.prototype.handleUnsupportedCmd = function() {                                                                 // 268
    var text = this.nextToken.text;                                                                                  // 269
    var textordArray = [];                                                                                           // 270
                                                                                                                     // 271
    for (var i = 0; i < text.length; i++) {                                                                          // 272
        textordArray.push(new ParseNode("textord", text[i], "text"));                                                // 273
    }                                                                                                                // 274
                                                                                                                     // 275
    var textNode = new ParseNode(                                                                                    // 276
        "text",                                                                                                      // 277
        {                                                                                                            // 278
            body: textordArray,                                                                                      // 279
            type: "text"                                                                                             // 280
        },                                                                                                           // 281
        this.mode);                                                                                                  // 282
                                                                                                                     // 283
    var colorNode = new ParseNode(                                                                                   // 284
        "color",                                                                                                     // 285
        {                                                                                                            // 286
            color: this.settings.errorColor,                                                                         // 287
            value: [textNode],                                                                                       // 288
            type: "color"                                                                                            // 289
        },                                                                                                           // 290
        this.mode);                                                                                                  // 291
                                                                                                                     // 292
    this.consume();                                                                                                  // 293
    return colorNode;                                                                                                // 294
};                                                                                                                   // 295
                                                                                                                     // 296
/**                                                                                                                  // 297
 * Parses a group with optional super/subscripts.                                                                    // 298
 *                                                                                                                   // 299
 * @return {?ParseNode}                                                                                              // 300
 */                                                                                                                  // 301
Parser.prototype.parseAtom = function() {                                                                            // 302
    // The body of an atom is an implicit group, so that things like                                                 // 303
    // \left(x\right)^2 work correctly.                                                                              // 304
    var base = this.parseImplicitGroup();                                                                            // 305
                                                                                                                     // 306
    // In text mode, we don't have superscripts or subscripts                                                        // 307
    if (this.mode === "text") {                                                                                      // 308
        return base;                                                                                                 // 309
    }                                                                                                                // 310
                                                                                                                     // 311
    // Note that base may be empty (i.e. null) at this point.                                                        // 312
                                                                                                                     // 313
    var superscript;                                                                                                 // 314
    var subscript;                                                                                                   // 315
    while (true) {                                                                                                   // 316
        // Lex the first token                                                                                       // 317
        var lex = this.nextToken;                                                                                    // 318
                                                                                                                     // 319
        if (lex.text === "\\limits" || lex.text === "\\nolimits") {                                                  // 320
            // We got a limit control                                                                                // 321
            if (!base || base.type !== "op") {                                                                       // 322
                throw new ParseError(                                                                                // 323
                    "Limit controls must follow a math operator",                                                    // 324
                    lex);                                                                                            // 325
            } else {                                                                                                 // 326
                var limits = lex.text === "\\limits";                                                                // 327
                base.value.limits = limits;                                                                          // 328
                base.value.alwaysHandleSupSub = true;                                                                // 329
            }                                                                                                        // 330
            this.consume();                                                                                          // 331
        } else if (lex.text === "^") {                                                                               // 332
            // We got a superscript start                                                                            // 333
            if (superscript) {                                                                                       // 334
                throw new ParseError("Double superscript", lex);                                                     // 335
            }                                                                                                        // 336
            superscript = this.handleSupSubscript("superscript");                                                    // 337
        } else if (lex.text === "_") {                                                                               // 338
            // We got a subscript start                                                                              // 339
            if (subscript) {                                                                                         // 340
                throw new ParseError("Double subscript", lex);                                                       // 341
            }                                                                                                        // 342
            subscript = this.handleSupSubscript("subscript");                                                        // 343
        } else if (lex.text === "'") {                                                                               // 344
            // We got a prime                                                                                        // 345
            var prime = new ParseNode("textord", "\\prime", this.mode);                                              // 346
                                                                                                                     // 347
            // Many primes can be grouped together, so we handle this here                                           // 348
            var primes = [prime];                                                                                    // 349
            this.consume();                                                                                          // 350
            // Keep lexing tokens until we get something that's not a prime                                          // 351
            while (this.nextToken.text === "'") {                                                                    // 352
                // For each one, add another prime to the list                                                       // 353
                primes.push(prime);                                                                                  // 354
                this.consume();                                                                                      // 355
            }                                                                                                        // 356
            // Put them into an ordgroup as the superscript                                                          // 357
            superscript = new ParseNode("ordgroup", primes, this.mode);                                              // 358
        } else {                                                                                                     // 359
            // If it wasn't ^, _, or ', stop parsing super/subscripts                                                // 360
            break;                                                                                                   // 361
        }                                                                                                            // 362
    }                                                                                                                // 363
                                                                                                                     // 364
    if (superscript || subscript) {                                                                                  // 365
        // If we got either a superscript or subscript, create a supsub                                              // 366
        return new ParseNode("supsub", {                                                                             // 367
            base: base,                                                                                              // 368
            sup: superscript,                                                                                        // 369
            sub: subscript                                                                                           // 370
        }, this.mode);                                                                                               // 371
    } else {                                                                                                         // 372
        // Otherwise return the original body                                                                        // 373
        return base;                                                                                                 // 374
    }                                                                                                                // 375
};                                                                                                                   // 376
                                                                                                                     // 377
// A list of the size-changing functions, for use in parseImplicitGroup                                              // 378
var sizeFuncs = [                                                                                                    // 379
    "\\tiny", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize",                                           // 380
    "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"                                                              // 381
];                                                                                                                   // 382
                                                                                                                     // 383
// A list of the style-changing functions, for use in parseImplicitGroup                                             // 384
var styleFuncs = [                                                                                                   // 385
    "\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"                                          // 386
];                                                                                                                   // 387
                                                                                                                     // 388
/**                                                                                                                  // 389
 * Parses an implicit group, which is a group that starts at the end of a                                            // 390
 * specified, and ends right before a higher explicit group ends, or at EOL. It                                      // 391
 * is used for functions that appear to affect the current style, like \Large or                                     // 392
 * \textrm, where instead of keeping a style we just pretend that there is an                                        // 393
 * implicit grouping after it until the end of the group. E.g.                                                       // 394
 *   small text {\Large large text} small text again                                                                 // 395
 * It is also used for \left and \right to get the correct grouping.                                                 // 396
 *                                                                                                                   // 397
 * @return {?ParseNode}                                                                                              // 398
 */                                                                                                                  // 399
Parser.prototype.parseImplicitGroup = function() {                                                                   // 400
    var start = this.parseSymbol();                                                                                  // 401
                                                                                                                     // 402
    if (start == null) {                                                                                             // 403
        // If we didn't get anything we handle, fall back to parseFunction                                           // 404
        return this.parseFunction();                                                                                 // 405
    }                                                                                                                // 406
                                                                                                                     // 407
    var func = start.result;                                                                                         // 408
    var body;                                                                                                        // 409
                                                                                                                     // 410
    if (func === "\\left") {                                                                                         // 411
        // If we see a left:                                                                                         // 412
        // Parse the entire left function (including the delimiter)                                                  // 413
        var left = this.parseFunction(start);                                                                        // 414
        // Parse out the implicit body                                                                               // 415
        ++this.leftrightDepth;                                                                                       // 416
        body = this.parseExpression(false);                                                                          // 417
        --this.leftrightDepth;                                                                                       // 418
        // Check the next token                                                                                      // 419
        this.expect("\\right", false);                                                                               // 420
        var right = this.parseFunction();                                                                            // 421
        return new ParseNode("leftright", {                                                                          // 422
            body: body,                                                                                              // 423
            left: left.value.value,                                                                                  // 424
            right: right.value.value                                                                                 // 425
        }, this.mode);                                                                                               // 426
    } else if (func === "\\begin") {                                                                                 // 427
        // begin...end is similar to left...right                                                                    // 428
        var begin = this.parseFunction(start);                                                                       // 429
        var envName = begin.value.name;                                                                              // 430
        if (!environments.hasOwnProperty(envName)) {                                                                 // 431
            throw new ParseError(                                                                                    // 432
                "No such environment: " + envName, begin.value.nameGroup);                                           // 433
        }                                                                                                            // 434
        // Build the environment object. Arguments and other information will                                        // 435
        // be made available to the begin and end methods using properties.                                          // 436
        var env = environments[envName];                                                                             // 437
        var args = this.parseArguments("\\begin{" + envName + "}", env);                                             // 438
        var context = {                                                                                              // 439
            mode: this.mode,                                                                                         // 440
            envName: envName,                                                                                        // 441
            parser: this,                                                                                            // 442
            positions: args.pop()                                                                                    // 443
        };                                                                                                           // 444
        var result = env.handler(context, args);                                                                     // 445
        this.expect("\\end", false);                                                                                 // 446
        var endNameToken = this.nextToken;                                                                           // 447
        var end = this.parseFunction();                                                                              // 448
        if (end.value.name !== envName) {                                                                            // 449
            throw new ParseError(                                                                                    // 450
                "Mismatch: \\begin{" + envName + "} matched " +                                                      // 451
                "by \\end{" + end.value.name + "}",                                                                  // 452
                endNameToken);                                                                                       // 453
        }                                                                                                            // 454
        result.position = end.position;                                                                              // 455
        return result;                                                                                               // 456
    } else if (utils.contains(sizeFuncs, func)) {                                                                    // 457
        // If we see a sizing function, parse out the implict body                                                   // 458
        body = this.parseExpression(false);                                                                          // 459
        return new ParseNode("sizing", {                                                                             // 460
            // Figure out what size to use based on the list of functions above                                      // 461
            size: "size" + (utils.indexOf(sizeFuncs, func) + 1),                                                     // 462
            value: body                                                                                              // 463
        }, this.mode);                                                                                               // 464
    } else if (utils.contains(styleFuncs, func)) {                                                                   // 465
        // If we see a styling function, parse out the implict body                                                  // 466
        body = this.parseExpression(true);                                                                           // 467
        return new ParseNode("styling", {                                                                            // 468
            // Figure out what style to use by pulling out the style from                                            // 469
            // the function name                                                                                     // 470
            style: func.slice(1, func.length - 5),                                                                   // 471
            value: body                                                                                              // 472
        }, this.mode);                                                                                               // 473
    } else {                                                                                                         // 474
        // Defer to parseFunction if it's not a function we handle                                                   // 475
        return this.parseFunction(start);                                                                            // 476
    }                                                                                                                // 477
};                                                                                                                   // 478
                                                                                                                     // 479
/**                                                                                                                  // 480
 * Parses an entire function, including its base and all of its arguments.                                           // 481
 * The base might either have been parsed already, in which case                                                     // 482
 * it is provided as an argument, or it's the next group in the input.                                               // 483
 *                                                                                                                   // 484
 * @param {ParseFuncOrArgument=} baseGroup optional as described above                                               // 485
 * @return {?ParseNode}                                                                                              // 486
 */                                                                                                                  // 487
Parser.prototype.parseFunction = function(baseGroup) {                                                               // 488
    if (!baseGroup) {                                                                                                // 489
        baseGroup = this.parseGroup();                                                                               // 490
    }                                                                                                                // 491
                                                                                                                     // 492
    if (baseGroup) {                                                                                                 // 493
        if (baseGroup.isFunction) {                                                                                  // 494
            var func = baseGroup.result;                                                                             // 495
            var funcData = functions[func];                                                                          // 496
            if (this.mode === "text" && !funcData.allowedInText) {                                                   // 497
                throw new ParseError(                                                                                // 498
                    "Can't use function '" + func + "' in text mode",                                                // 499
                    baseGroup.token);                                                                                // 500
            }                                                                                                        // 501
                                                                                                                     // 502
            var args = this.parseArguments(func, funcData);                                                          // 503
            var token = baseGroup.token;                                                                             // 504
            var result = this.callFunction(func, args, args.pop(), token);                                           // 505
            return new ParseNode(result.type, result, this.mode);                                                    // 506
        } else {                                                                                                     // 507
            return baseGroup.result;                                                                                 // 508
        }                                                                                                            // 509
    } else {                                                                                                         // 510
        return null;                                                                                                 // 511
    }                                                                                                                // 512
};                                                                                                                   // 513
                                                                                                                     // 514
/**                                                                                                                  // 515
 * Call a function handler with a suitable context and arguments.                                                    // 516
 */                                                                                                                  // 517
Parser.prototype.callFunction = function(name, args, positions, token) {                                             // 518
    var context = {                                                                                                  // 519
        funcName: name,                                                                                              // 520
        parser: this,                                                                                                // 521
        positions: positions,                                                                                        // 522
        token: token                                                                                                 // 523
    };                                                                                                               // 524
    return functions[name].handler(context, args);                                                                   // 525
};                                                                                                                   // 526
                                                                                                                     // 527
/**                                                                                                                  // 528
 * Parses the arguments of a function or environment                                                                 // 529
 *                                                                                                                   // 530
 * @param {string} func  "\name" or "\begin{name}"                                                                   // 531
 * @param {{numArgs:number,numOptionalArgs:number|undefined}} funcData                                               // 532
 * @return the array of arguments, with the list of positions as last element                                        // 533
 */                                                                                                                  // 534
Parser.prototype.parseArguments = function(func, funcData) {                                                         // 535
    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;                                                     // 536
    if (totalArgs === 0) {                                                                                           // 537
        return [[this.pos]];                                                                                         // 538
    }                                                                                                                // 539
                                                                                                                     // 540
    var baseGreediness = funcData.greediness;                                                                        // 541
    var positions = [this.pos];                                                                                      // 542
    var args = [];                                                                                                   // 543
                                                                                                                     // 544
    for (var i = 0; i < totalArgs; i++) {                                                                            // 545
        var nextToken = this.nextToken;                                                                              // 546
        var argType = funcData.argTypes && funcData.argTypes[i];                                                     // 547
        var arg;                                                                                                     // 548
        if (i < funcData.numOptionalArgs) {                                                                          // 549
            if (argType) {                                                                                           // 550
                arg = this.parseGroupOfType(argType, true);                                                          // 551
            } else {                                                                                                 // 552
                arg = this.parseGroup(true);                                                                         // 553
            }                                                                                                        // 554
            if (!arg) {                                                                                              // 555
                args.push(null);                                                                                     // 556
                positions.push(this.pos);                                                                            // 557
                continue;                                                                                            // 558
            }                                                                                                        // 559
        } else {                                                                                                     // 560
            if (argType) {                                                                                           // 561
                arg = this.parseGroupOfType(argType);                                                                // 562
            } else {                                                                                                 // 563
                arg = this.parseGroup();                                                                             // 564
            }                                                                                                        // 565
            if (!arg) {                                                                                              // 566
                if (!this.settings.throwOnError &&                                                                   // 567
                    this.nextToken.text[0] === "\\") {                                                               // 568
                    arg = new ParseFuncOrArgument(                                                                   // 569
                        this.handleUnsupportedCmd(this.nextToken.text),                                              // 570
                        false);                                                                                      // 571
                } else {                                                                                             // 572
                    throw new ParseError(                                                                            // 573
                        "Expected group after '" + func + "'", nextToken);                                           // 574
                }                                                                                                    // 575
            }                                                                                                        // 576
        }                                                                                                            // 577
        var argNode;                                                                                                 // 578
        if (arg.isFunction) {                                                                                        // 579
            var argGreediness =                                                                                      // 580
                functions[arg.result].greediness;                                                                    // 581
            if (argGreediness > baseGreediness) {                                                                    // 582
                argNode = this.parseFunction(arg);                                                                   // 583
            } else {                                                                                                 // 584
                throw new ParseError(                                                                                // 585
                    "Got function '" + arg.result + "' as " +                                                        // 586
                    "argument to '" + func + "'", nextToken);                                                        // 587
            }                                                                                                        // 588
        } else {                                                                                                     // 589
            argNode = arg.result;                                                                                    // 590
        }                                                                                                            // 591
        args.push(argNode);                                                                                          // 592
        positions.push(this.pos);                                                                                    // 593
    }                                                                                                                // 594
                                                                                                                     // 595
    args.push(positions);                                                                                            // 596
                                                                                                                     // 597
    return args;                                                                                                     // 598
};                                                                                                                   // 599
                                                                                                                     // 600
                                                                                                                     // 601
/**                                                                                                                  // 602
 * Parses a group when the mode is changing.                                                                         // 603
 *                                                                                                                   // 604
 * @return {?ParseFuncOrArgument}                                                                                    // 605
 */                                                                                                                  // 606
Parser.prototype.parseGroupOfType = function(innerMode, optional) {                                                  // 607
    var outerMode = this.mode;                                                                                       // 608
    // Handle `original` argTypes                                                                                    // 609
    if (innerMode === "original") {                                                                                  // 610
        innerMode = outerMode;                                                                                       // 611
    }                                                                                                                // 612
                                                                                                                     // 613
    if (innerMode === "color") {                                                                                     // 614
        return this.parseColorGroup(optional);                                                                       // 615
    }                                                                                                                // 616
    if (innerMode === "size") {                                                                                      // 617
        return this.parseSizeGroup(optional);                                                                        // 618
    }                                                                                                                // 619
                                                                                                                     // 620
    this.switchMode(innerMode);                                                                                      // 621
    if (innerMode === "text") {                                                                                      // 622
        // text mode is special because it should ignore the whitespace before                                       // 623
        // it                                                                                                        // 624
        while (this.nextToken.text === " ") {                                                                        // 625
            this.consume();                                                                                          // 626
        }                                                                                                            // 627
    }                                                                                                                // 628
    // By the time we get here, innerMode is one of "text" or "math".                                                // 629
    // We switch the mode of the parser, recurse, then restore the old mode.                                         // 630
    var res = this.parseGroup(optional);                                                                             // 631
    this.switchMode(outerMode);                                                                                      // 632
    return res;                                                                                                      // 633
};                                                                                                                   // 634
                                                                                                                     // 635
/**                                                                                                                  // 636
 * Parses a group, essentially returning the string formed by the                                                    // 637
 * brace-enclosed tokens plus some position information.                                                             // 638
 *                                                                                                                   // 639
 * @param {string} modeName  Used to describe the mode in error messages                                             // 640
 * @param {boolean=} optional  Whether the group is optional or required                                             // 641
 */                                                                                                                  // 642
Parser.prototype.parseStringGroup = function(modeName, optional) {                                                   // 643
    if (optional && this.nextToken.text !== "[") {                                                                   // 644
        return null;                                                                                                 // 645
    }                                                                                                                // 646
    var outerMode = this.mode;                                                                                       // 647
    this.mode = "text";                                                                                              // 648
    this.expect(optional ? "[" : "{");                                                                               // 649
    var str = "";                                                                                                    // 650
    var firstToken = this.nextToken;                                                                                 // 651
    var lastToken = firstToken;                                                                                      // 652
    while (this.nextToken.text !== (optional ? "]" : "}")) {                                                         // 653
        if (this.nextToken.text === "EOF") {                                                                         // 654
            throw new ParseError(                                                                                    // 655
                "Unexpected end of input in " + modeName,                                                            // 656
                firstToken.range(this.nextToken, str));                                                              // 657
        }                                                                                                            // 658
        lastToken = this.nextToken;                                                                                  // 659
        str += lastToken.text;                                                                                       // 660
        this.consume();                                                                                              // 661
    }                                                                                                                // 662
    this.mode = outerMode;                                                                                           // 663
    this.expect(optional ? "]" : "}");                                                                               // 664
    return firstToken.range(lastToken, str);                                                                         // 665
};                                                                                                                   // 666
                                                                                                                     // 667
/**                                                                                                                  // 668
 * Parses a regex-delimited group: the largest sequence of tokens                                                    // 669
 * whose concatenated strings match `regex`. Returns the string                                                      // 670
 * formed by the tokens plus some position information.                                                              // 671
 *                                                                                                                   // 672
 * @param {RegExp} regex                                                                                             // 673
 * @param {string} modeName  Used to describe the mode in error messages                                             // 674
 */                                                                                                                  // 675
Parser.prototype.parseRegexGroup = function(regex, modeName) {                                                       // 676
    var outerMode = this.mode;                                                                                       // 677
    this.mode = "text";                                                                                              // 678
    var firstToken = this.nextToken;                                                                                 // 679
    var lastToken = firstToken;                                                                                      // 680
    var str = "";                                                                                                    // 681
    while (this.nextToken.text !== "EOF"                                                                             // 682
           && regex.test(str + this.nextToken.text)) {                                                               // 683
        lastToken = this.nextToken;                                                                                  // 684
        str += lastToken.text;                                                                                       // 685
        this.consume();                                                                                              // 686
    }                                                                                                                // 687
    if (str === "") {                                                                                                // 688
        throw new ParseError(                                                                                        // 689
            "Invalid " + modeName + ": '" + firstToken.text + "'",                                                   // 690
            firstToken);                                                                                             // 691
    }                                                                                                                // 692
    this.mode = outerMode;                                                                                           // 693
    return firstToken.range(lastToken, str);                                                                         // 694
};                                                                                                                   // 695
                                                                                                                     // 696
/**                                                                                                                  // 697
 * Parses a color description.                                                                                       // 698
 */                                                                                                                  // 699
Parser.prototype.parseColorGroup = function(optional) {                                                              // 700
    var res = this.parseStringGroup("color", optional);                                                              // 701
    if (!res) {                                                                                                      // 702
        return null;                                                                                                 // 703
    }                                                                                                                // 704
    var match = (/^(#[a-z0-9]+|[a-z]+)$/i).exec(res.text);                                                           // 705
    if (!match) {                                                                                                    // 706
        throw new ParseError("Invalid color: '" + res.text + "'", res);                                              // 707
    }                                                                                                                // 708
    return new ParseFuncOrArgument(                                                                                  // 709
        new ParseNode("color", match[0], this.mode),                                                                 // 710
        false);                                                                                                      // 711
};                                                                                                                   // 712
                                                                                                                     // 713
/**                                                                                                                  // 714
 * Parses a size specification, consisting of magnitude and unit.                                                    // 715
 */                                                                                                                  // 716
Parser.prototype.parseSizeGroup = function(optional) {                                                               // 717
    var res;                                                                                                         // 718
    if (!optional && this.nextToken.text !== "{") {                                                                  // 719
        res = this.parseRegexGroup(                                                                                  // 720
            /^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2}$/, "size");                                                // 721
    } else {                                                                                                         // 722
        res = this.parseStringGroup("size", optional);                                                               // 723
    }                                                                                                                // 724
    if (!res) {                                                                                                      // 725
        return null;                                                                                                 // 726
    }                                                                                                                // 727
    var match = (/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/).exec(res.text);                                       // 728
    if (!match) {                                                                                                    // 729
        throw new ParseError("Invalid size: '" + res.text + "'", res);                                               // 730
    }                                                                                                                // 731
    var data = {                                                                                                     // 732
        number: +(match[1] + match[2]), // sign + magnitude, cast to number                                          // 733
        unit: match[3]                                                                                               // 734
    };                                                                                                               // 735
    if (data.unit !== "em" && data.unit !== "ex" && data.unit !== "mu") {                                            // 736
        throw new ParseError("Invalid unit: '" + data.unit + "'", res);                                              // 737
    }                                                                                                                // 738
    return new ParseFuncOrArgument(                                                                                  // 739
        new ParseNode("color", data, this.mode),                                                                     // 740
        false);                                                                                                      // 741
};                                                                                                                   // 742
                                                                                                                     // 743
/**                                                                                                                  // 744
 * If the argument is false or absent, this parses an ordinary group,                                                // 745
 * which is either a single nucleus (like "x") or an expression                                                      // 746
 * in braces (like "{x+y}").                                                                                         // 747
 * If the argument is true, it parses either a bracket-delimited expression                                          // 748
 * (like "[x+y]") or returns null to indicate the absence of a                                                       // 749
 * bracket-enclosed group.                                                                                           // 750
 *                                                                                                                   // 751
 * @param {boolean=} optional  Whether the group is optional or required                                             // 752
 * @return {?ParseFuncOrArgument}                                                                                    // 753
 */                                                                                                                  // 754
Parser.prototype.parseGroup = function(optional) {                                                                   // 755
    var firstToken = this.nextToken;                                                                                 // 756
    // Try to parse an open brace                                                                                    // 757
    if (this.nextToken.text === (optional ? "[" : "{")) {                                                            // 758
        // If we get a brace, parse an expression                                                                    // 759
        this.consume();                                                                                              // 760
        var expression = this.parseExpression(false, optional ? "]" : null);                                         // 761
        var lastToken = this.nextToken;                                                                              // 762
        // Make sure we get a close brace                                                                            // 763
        this.expect(optional ? "]" : "}");                                                                           // 764
        if (this.mode === "text") {                                                                                  // 765
            this.formLigatures(expression);                                                                          // 766
        }                                                                                                            // 767
        return new ParseFuncOrArgument(                                                                              // 768
            new ParseNode("ordgroup", expression, this.mode,                                                         // 769
                          firstToken, lastToken),                                                                    // 770
            false);                                                                                                  // 771
    } else {                                                                                                         // 772
        // Otherwise, just return a nucleus, or nothing for an optional group                                        // 773
        return optional ? null : this.parseSymbol();                                                                 // 774
    }                                                                                                                // 775
};                                                                                                                   // 776
                                                                                                                     // 777
/**                                                                                                                  // 778
 * Form ligature-like combinations of characters for text mode.                                                      // 779
 * This includes inputs like "--", "---", "``" and "''".                                                             // 780
 * The result will simply replace multiple textord nodes with a single                                               // 781
 * character in each value by a single textord node having multiple                                                  // 782
 * characters in its value.  The representation is still ASCII source.                                               // 783
 *                                                                                                                   // 784
 * @param {Array.<ParseNode>} group  the nodes of this group,                                                        // 785
 *                                   list will be moified in place                                                   // 786
 */                                                                                                                  // 787
Parser.prototype.formLigatures = function(group) {                                                                   // 788
    var i;                                                                                                           // 789
    var n = group.length - 1;                                                                                        // 790
    for (i = 0; i < n; ++i) {                                                                                        // 791
        var a = group[i];                                                                                            // 792
        var v = a.value;                                                                                             // 793
        if (v === "-" && group[i + 1].value === "-") {                                                               // 794
            if (i + 1 < n && group[i + 2].value === "-") {                                                           // 795
                group.splice(i, 3, new ParseNode(                                                                    // 796
                    "textord", "---", "text", a, group[i + 2]));                                                     // 797
                n -= 2;                                                                                              // 798
            } else {                                                                                                 // 799
                group.splice(i, 2, new ParseNode(                                                                    // 800
                    "textord", "--", "text", a, group[i + 1]));                                                      // 801
                n -= 1;                                                                                              // 802
            }                                                                                                        // 803
        }                                                                                                            // 804
        if ((v === "'" || v === "`") && group[i + 1].value === v) {                                                  // 805
            group.splice(i, 2, new ParseNode(                                                                        // 806
                "textord", v + v, "text", a, group[i + 1]));                                                         // 807
            n -= 1;                                                                                                  // 808
        }                                                                                                            // 809
    }                                                                                                                // 810
};                                                                                                                   // 811
                                                                                                                     // 812
/**                                                                                                                  // 813
 * Parse a single symbol out of the string. Here, we handle both the functions                                       // 814
 * we have defined, as well as the single character symbols                                                          // 815
 *                                                                                                                   // 816
 * @return {?ParseFuncOrArgument}                                                                                    // 817
 */                                                                                                                  // 818
Parser.prototype.parseSymbol = function() {                                                                          // 819
    var nucleus = this.nextToken;                                                                                    // 820
                                                                                                                     // 821
    if (functions[nucleus.text]) {                                                                                   // 822
        this.consume();                                                                                              // 823
        // If there exists a function with this name, we return the function and                                     // 824
        // say that it is a function.                                                                                // 825
        return new ParseFuncOrArgument(                                                                              // 826
            nucleus.text,                                                                                            // 827
            true, nucleus);                                                                                          // 828
    } else if (symbols[this.mode][nucleus.text]) {                                                                   // 829
        this.consume();                                                                                              // 830
        // Otherwise if this is a no-argument function, find the type it                                             // 831
        // corresponds to in the symbols map                                                                         // 832
        return new ParseFuncOrArgument(                                                                              // 833
            new ParseNode(symbols[this.mode][nucleus.text].group,                                                    // 834
                          nucleus.text, this.mode, nucleus),                                                         // 835
            false, nucleus);                                                                                         // 836
    } else if (this.mode === "text" && cjkRegex.test(nucleus.text)) {                                                // 837
        this.consume();                                                                                              // 838
        return new ParseFuncOrArgument(                                                                              // 839
            new ParseNode("textord", nucleus.text, this.mode, nucleus),                                              // 840
            false, nucleus);                                                                                         // 841
    } else {                                                                                                         // 842
        return null;                                                                                                 // 843
    }                                                                                                                // 844
};                                                                                                                   // 845
                                                                                                                     // 846
Parser.prototype.ParseNode = ParseNode;                                                                              // 847
                                                                                                                     // 848
module.exports = Parser;                                                                                             // 849
                                                                                                                     // 850
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"functions.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/functions.js                                          //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var utils = require("./utils");                                                                                      // 1
var ParseError = require("./ParseError");                                                                            // 2
var parseData = require("./parseData");                                                                              // 3
var ParseNode = parseData.ParseNode;                                                                                 // 4
                                                                                                                     // 5
/* This file contains a list of functions that we parse, identified by                                               // 6
 * the calls to defineFunction.                                                                                      // 7
 *                                                                                                                   // 8
 * The first argument to defineFunction is a single name or a list of names.                                         // 9
 * All functions named in such a list will share a single implementation.                                            // 10
 *                                                                                                                   // 11
 * Each declared function can have associated properties, which                                                      // 12
 * include the following:                                                                                            // 13
 *                                                                                                                   // 14
 *  - numArgs: The number of arguments the function takes.                                                           // 15
 *             If this is the only property, it can be passed as a number                                            // 16
 *             instead of an element of a properties object.                                                         // 17
 *  - argTypes: (optional) An array corresponding to each argument of the                                            // 18
 *              function, giving the type of argument that should be parsed. Its                                     // 19
 *              length should be equal to `numArgs + numOptionalArgs`. Valid                                         // 20
 *              types:                                                                                               // 21
 *               - "size": A size-like thing, such as "1em" or "5ex"                                                 // 22
 *               - "color": An html color, like "#abc" or "blue"                                                     // 23
 *               - "original": The same type as the environment that the                                             // 24
 *                             function being parsed is in (e.g. used for the                                        // 25
 *                             bodies of functions like \color where the first                                       // 26
 *                             argument is special and the second argument is                                        // 27
 *                             parsed normally)                                                                      // 28
 *              Other possible types (probably shouldn't be used)                                                    // 29
 *               - "text": Text-like (e.g. \text)                                                                    // 30
 *               - "math": Normal math                                                                               // 31
 *              If undefined, this will be treated as an appropriate length                                          // 32
 *              array of "original" strings                                                                          // 33
 *  - greediness: (optional) The greediness of the function to use ungrouped                                         // 34
 *                arguments.                                                                                         // 35
 *                                                                                                                   // 36
 *                E.g. if you have an expression                                                                     // 37
 *                  \sqrt \frac 1 2                                                                                  // 38
 *                since \frac has greediness=2 vs \sqrt's greediness=1, \frac                                        // 39
 *                will use the two arguments '1' and '2' as its two arguments,                                       // 40
 *                then that whole function will be used as the argument to                                           // 41
 *                \sqrt. On the other hand, the expressions                                                          // 42
 *                  \frac \frac 1 2 3                                                                                // 43
 *                and                                                                                                // 44
 *                  \frac \sqrt 1 2                                                                                  // 45
 *                will fail because \frac and \frac have equal greediness                                            // 46
 *                and \sqrt has a lower greediness than \frac respectively. To                                       // 47
 *                make these parse, we would have to change them to:                                                 // 48
 *                  \frac {\frac 1 2} 3                                                                              // 49
 *                and                                                                                                // 50
 *                  \frac {\sqrt 1} 2                                                                                // 51
 *                                                                                                                   // 52
 *                The default value is `1`                                                                           // 53
 *  - allowedInText: (optional) Whether or not the function is allowed inside                                        // 54
 *                   text mode (default false)                                                                       // 55
 *  - numOptionalArgs: (optional) The number of optional arguments the function                                      // 56
 *                     should parse. If the optional arguments aren't found,                                         // 57
 *                     `null` will be passed to the handler in their place.                                          // 58
 *                     (default 0)                                                                                   // 59
 *  - infix: (optional) Must be true if the function is an infix operator.                                           // 60
 *                                                                                                                   // 61
 * The last argument is that implementation, the handler for the function(s).                                        // 62
 * It is called to handle these functions and their arguments.                                                       // 63
 * It receives two arguments:                                                                                        // 64
 *  - context contains information and references provided by the parser                                             // 65
 *  - args is an array of arguments obtained from TeX input                                                          // 66
 * The context contains the following properties:                                                                    // 67
 *  - funcName: the text (i.e. name) of the function, including \
 *  - parser: the parser object                                                                                      // 69
 *  - lexer: the lexer object                                                                                        // 70
 *  - positions: the positions in the overall string of the function                                                 // 71
 *               and the arguments.                                                                                  // 72
 * The latter three should only be used to produce error messages.                                                   // 73
 *                                                                                                                   // 74
 * The function should return an object with the following keys:                                                     // 75
 *  - type: The type of element that this is. This is then used in                                                   // 76
 *          buildHTML/buildMathML to determine which function                                                        // 77
 *          should be called to build this node into a DOM node                                                      // 78
 * Any other data can be added to the object, which will be passed                                                   // 79
 * in to the function in buildHTML/buildMathML as `group.value`.                                                     // 80
 */                                                                                                                  // 81
                                                                                                                     // 82
function defineFunction(names, props, handler) {                                                                     // 83
    if (typeof names === "string") {                                                                                 // 84
        names = [names];                                                                                             // 85
    }                                                                                                                // 86
    if (typeof props === "number") {                                                                                 // 87
        props = { numArgs: props };                                                                                  // 88
    }                                                                                                                // 89
    // Set default values of functions                                                                               // 90
    var data = {                                                                                                     // 91
        numArgs: props.numArgs,                                                                                      // 92
        argTypes: props.argTypes,                                                                                    // 93
        greediness: (props.greediness === undefined) ? 1 : props.greediness,                                         // 94
        allowedInText: !!props.allowedInText,                                                                        // 95
        numOptionalArgs: props.numOptionalArgs || 0,                                                                 // 96
        infix: !!props.infix,                                                                                        // 97
        handler: handler                                                                                             // 98
    };                                                                                                               // 99
    for (var i = 0; i < names.length; ++i) {                                                                         // 100
        module.exports[names[i]] = data;                                                                             // 101
    }                                                                                                                // 102
}                                                                                                                    // 103
                                                                                                                     // 104
// Since the corresponding buildHTML/buildMathML function expects a                                                  // 105
// list of elements, we normalize for different kinds of arguments                                                   // 106
var ordargument = function(arg) {                                                                                    // 107
    if (arg.type === "ordgroup") {                                                                                   // 108
        return arg.value;                                                                                            // 109
    } else {                                                                                                         // 110
        return [arg];                                                                                                // 111
    }                                                                                                                // 112
};                                                                                                                   // 113
                                                                                                                     // 114
// A normal square root                                                                                              // 115
defineFunction("\\sqrt", {                                                                                           // 116
    numArgs: 1,                                                                                                      // 117
    numOptionalArgs: 1                                                                                               // 118
}, function(context, args) {                                                                                         // 119
    var index = args[0];                                                                                             // 120
    var body = args[1];                                                                                              // 121
    return {                                                                                                         // 122
        type: "sqrt",                                                                                                // 123
        body: body,                                                                                                  // 124
        index: index                                                                                                 // 125
    };                                                                                                               // 126
});                                                                                                                  // 127
                                                                                                                     // 128
// Non-mathy text, possibly in a font                                                                                // 129
var textFunctionStyles = {                                                                                           // 130
    "\\text": undefined, "\\textrm": "mathrm", "\\textsf": "mathsf",                                                 // 131
    "\\texttt": "mathtt", "\\textnormal": "mathrm", "\\textbf": "mathbf",                                            // 132
    "\\textit": "textit"                                                                                             // 133
};                                                                                                                   // 134
                                                                                                                     // 135
defineFunction([                                                                                                     // 136
    "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal",                                                    // 137
    "\\textbf", "\\textit"                                                                                           // 138
], {                                                                                                                 // 139
    numArgs: 1,                                                                                                      // 140
    argTypes: ["text"],                                                                                              // 141
    greediness: 2,                                                                                                   // 142
    allowedInText: true                                                                                              // 143
}, function(context, args) {                                                                                         // 144
    var body = args[0];                                                                                              // 145
    return {                                                                                                         // 146
        type: "text",                                                                                                // 147
        body: ordargument(body),                                                                                     // 148
        style: textFunctionStyles[context.funcName]                                                                  // 149
    };                                                                                                               // 150
});                                                                                                                  // 151
                                                                                                                     // 152
// A two-argument custom color                                                                                       // 153
defineFunction("\\color", {                                                                                          // 154
    numArgs: 2,                                                                                                      // 155
    allowedInText: true,                                                                                             // 156
    greediness: 3,                                                                                                   // 157
    argTypes: ["color", "original"]                                                                                  // 158
}, function(context, args) {                                                                                         // 159
    var color = args[0];                                                                                             // 160
    var body = args[1];                                                                                              // 161
    return {                                                                                                         // 162
        type: "color",                                                                                               // 163
        color: color.value,                                                                                          // 164
        value: ordargument(body)                                                                                     // 165
    };                                                                                                               // 166
});                                                                                                                  // 167
                                                                                                                     // 168
// An overline                                                                                                       // 169
defineFunction("\\overline", {                                                                                       // 170
    numArgs: 1                                                                                                       // 171
}, function(context, args) {                                                                                         // 172
    var body = args[0];                                                                                              // 173
    return {                                                                                                         // 174
        type: "overline",                                                                                            // 175
        body: body                                                                                                   // 176
    };                                                                                                               // 177
});                                                                                                                  // 178
                                                                                                                     // 179
// An underline                                                                                                      // 180
defineFunction("\\underline", {                                                                                      // 181
    numArgs: 1                                                                                                       // 182
}, function(context, args) {                                                                                         // 183
    var body = args[0];                                                                                              // 184
    return {                                                                                                         // 185
        type: "underline",                                                                                           // 186
        body: body                                                                                                   // 187
    };                                                                                                               // 188
});                                                                                                                  // 189
                                                                                                                     // 190
// A box of the width and height                                                                                     // 191
defineFunction("\\rule", {                                                                                           // 192
    numArgs: 2,                                                                                                      // 193
    numOptionalArgs: 1,                                                                                              // 194
    argTypes: ["size", "size", "size"]                                                                               // 195
}, function(context, args) {                                                                                         // 196
    var shift = args[0];                                                                                             // 197
    var width = args[1];                                                                                             // 198
    var height = args[2];                                                                                            // 199
    return {                                                                                                         // 200
        type: "rule",                                                                                                // 201
        shift: shift && shift.value,                                                                                 // 202
        width: width.value,                                                                                          // 203
        height: height.value                                                                                         // 204
    };                                                                                                               // 205
});                                                                                                                  // 206
                                                                                                                     // 207
// TODO: In TeX, \mkern only accepts mu-units, and \kern does not accept                                             // 208
// mu-units. In current KaTeX we relax this; both commands accept any unit.                                          // 209
defineFunction(["\\kern", "\\mkern"], {                                                                              // 210
    numArgs: 1,                                                                                                      // 211
    argTypes: ["size"]                                                                                               // 212
}, function(context, args) {                                                                                         // 213
    return {                                                                                                         // 214
        type: "kern",                                                                                                // 215
        dimension: args[0].value                                                                                     // 216
    };                                                                                                               // 217
});                                                                                                                  // 218
                                                                                                                     // 219
// A KaTeX logo                                                                                                      // 220
defineFunction("\\KaTeX", {                                                                                          // 221
    numArgs: 0                                                                                                       // 222
}, function(context) {                                                                                               // 223
    return {                                                                                                         // 224
        type: "katex"                                                                                                // 225
    };                                                                                                               // 226
});                                                                                                                  // 227
                                                                                                                     // 228
defineFunction("\\phantom", {                                                                                        // 229
    numArgs: 1                                                                                                       // 230
}, function(context, args) {                                                                                         // 231
    var body = args[0];                                                                                              // 232
    return {                                                                                                         // 233
        type: "phantom",                                                                                             // 234
        value: ordargument(body)                                                                                     // 235
    };                                                                                                               // 236
});                                                                                                                  // 237
                                                                                                                     // 238
// Math class commands except \mathop                                                                                // 239
defineFunction([                                                                                                     // 240
    "\\mathord", "\\mathbin", "\\mathrel", "\\mathopen",                                                             // 241
    "\\mathclose", "\\mathpunct", "\\mathinner"                                                                      // 242
], {                                                                                                                 // 243
    numArgs: 1                                                                                                       // 244
}, function(context, args) {                                                                                         // 245
    var body = args[0];                                                                                              // 246
    return {                                                                                                         // 247
        type: "mclass",                                                                                              // 248
        mclass: "m" + context.funcName.substr(5),                                                                    // 249
        value: ordargument(body)                                                                                     // 250
    };                                                                                                               // 251
});                                                                                                                  // 252
                                                                                                                     // 253
// Build a relation by placing one symbol on top of another                                                          // 254
defineFunction("\\stackrel", {                                                                                       // 255
    numArgs: 2                                                                                                       // 256
}, function(context, args) {                                                                                         // 257
    var top = args[0];                                                                                               // 258
    var bottom = args[1];                                                                                            // 259
                                                                                                                     // 260
    var bottomop = new ParseNode("op", {                                                                             // 261
        type: "op",                                                                                                  // 262
        limits: true,                                                                                                // 263
        alwaysHandleSupSub: true,                                                                                    // 264
        symbol: false,                                                                                               // 265
        value: ordargument(bottom)                                                                                   // 266
    }, bottom.mode);                                                                                                 // 267
                                                                                                                     // 268
    var supsub = new ParseNode("supsub", {                                                                           // 269
        base: bottomop,                                                                                              // 270
        sup: top,                                                                                                    // 271
        sub: null                                                                                                    // 272
    }, top.mode);                                                                                                    // 273
                                                                                                                     // 274
    return {                                                                                                         // 275
        type: "mclass",                                                                                              // 276
        mclass: "mrel",                                                                                              // 277
        value: [supsub]                                                                                              // 278
    };                                                                                                               // 279
});                                                                                                                  // 280
                                                                                                                     // 281
// \mod-type functions                                                                                               // 282
defineFunction("\\bmod", {                                                                                           // 283
    numArgs: 0                                                                                                       // 284
}, function(context, args) {                                                                                         // 285
    return {                                                                                                         // 286
        type: "mod",                                                                                                 // 287
        modType: "bmod",                                                                                             // 288
        value: null                                                                                                  // 289
    };                                                                                                               // 290
});                                                                                                                  // 291
                                                                                                                     // 292
defineFunction(["\\pod", "\\pmod", "\\mod"], {                                                                       // 293
    numArgs: 1                                                                                                       // 294
}, function(context, args) {                                                                                         // 295
    var body = args[0];                                                                                              // 296
    return {                                                                                                         // 297
        type: "mod",                                                                                                 // 298
        modType: context.funcName.substr(1),                                                                         // 299
        value: ordargument(body)                                                                                     // 300
    };                                                                                                               // 301
});                                                                                                                  // 302
                                                                                                                     // 303
// Extra data needed for the delimiter handler down below                                                            // 304
var delimiterSizes = {                                                                                               // 305
    "\\bigl" : {mclass: "mopen",    size: 1},                                                                        // 306
    "\\Bigl" : {mclass: "mopen",    size: 2},                                                                        // 307
    "\\biggl": {mclass: "mopen",    size: 3},                                                                        // 308
    "\\Biggl": {mclass: "mopen",    size: 4},                                                                        // 309
    "\\bigr" : {mclass: "mclose",   size: 1},                                                                        // 310
    "\\Bigr" : {mclass: "mclose",   size: 2},                                                                        // 311
    "\\biggr": {mclass: "mclose",   size: 3},                                                                        // 312
    "\\Biggr": {mclass: "mclose",   size: 4},                                                                        // 313
    "\\bigm" : {mclass: "mrel",     size: 1},                                                                        // 314
    "\\Bigm" : {mclass: "mrel",     size: 2},                                                                        // 315
    "\\biggm": {mclass: "mrel",     size: 3},                                                                        // 316
    "\\Biggm": {mclass: "mrel",     size: 4},                                                                        // 317
    "\\big"  : {mclass: "mord",     size: 1},                                                                        // 318
    "\\Big"  : {mclass: "mord",     size: 2},                                                                        // 319
    "\\bigg" : {mclass: "mord",     size: 3},                                                                        // 320
    "\\Bigg" : {mclass: "mord",     size: 4}                                                                         // 321
};                                                                                                                   // 322
                                                                                                                     // 323
var delimiters = [                                                                                                   // 324
    "(", ")", "[", "\\lbrack", "]", "\\rbrack",                                                                      // 325
    "\\{", "\\lbrace", "\\}", "\\rbrace",                                                                            // 326
    "\\lfloor", "\\rfloor", "\\lceil", "\\rceil",                                                                    // 327
    "<", ">", "\\langle", "\\rangle", "\\lt", "\\gt",                                                                // 328
    "\\lvert", "\\rvert", "\\lVert", "\\rVert",                                                                      // 329
    "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache",                                                          // 330
    "/", "\\backslash",                                                                                              // 331
    "|", "\\vert", "\\|", "\\Vert",                                                                                  // 332
    "\\uparrow", "\\Uparrow",                                                                                        // 333
    "\\downarrow", "\\Downarrow",                                                                                    // 334
    "\\updownarrow", "\\Updownarrow",                                                                                // 335
    "."                                                                                                              // 336
];                                                                                                                   // 337
                                                                                                                     // 338
var fontAliases = {                                                                                                  // 339
    "\\Bbb": "\\mathbb",                                                                                             // 340
    "\\bold": "\\mathbf",                                                                                            // 341
    "\\frak": "\\mathfrak"                                                                                           // 342
};                                                                                                                   // 343
                                                                                                                     // 344
// Single-argument color functions                                                                                   // 345
defineFunction([                                                                                                     // 346
    "\\blue", "\\orange", "\\pink", "\\red",                                                                         // 347
    "\\green", "\\gray", "\\purple",                                                                                 // 348
    "\\blueA", "\\blueB", "\\blueC", "\\blueD", "\\blueE",                                                           // 349
    "\\tealA", "\\tealB", "\\tealC", "\\tealD", "\\tealE",                                                           // 350
    "\\greenA", "\\greenB", "\\greenC", "\\greenD", "\\greenE",                                                      // 351
    "\\goldA", "\\goldB", "\\goldC", "\\goldD", "\\goldE",                                                           // 352
    "\\redA", "\\redB", "\\redC", "\\redD", "\\redE",                                                                // 353
    "\\maroonA", "\\maroonB", "\\maroonC", "\\maroonD", "\\maroonE",                                                 // 354
    "\\purpleA", "\\purpleB", "\\purpleC", "\\purpleD", "\\purpleE",                                                 // 355
    "\\mintA", "\\mintB", "\\mintC",                                                                                 // 356
    "\\grayA", "\\grayB", "\\grayC", "\\grayD", "\\grayE",                                                           // 357
    "\\grayF", "\\grayG", "\\grayH", "\\grayI",                                                                      // 358
    "\\kaBlue", "\\kaGreen"                                                                                          // 359
], {                                                                                                                 // 360
    numArgs: 1,                                                                                                      // 361
    allowedInText: true,                                                                                             // 362
    greediness: 3                                                                                                    // 363
}, function(context, args) {                                                                                         // 364
    var body = args[0];                                                                                              // 365
    return {                                                                                                         // 366
        type: "color",                                                                                               // 367
        color: "katex-" + context.funcName.slice(1),                                                                 // 368
        value: ordargument(body)                                                                                     // 369
    };                                                                                                               // 370
});                                                                                                                  // 371
                                                                                                                     // 372
// There are 2 flags for operators; whether they produce limits in                                                   // 373
// displaystyle, and whether they are symbols and should grow in                                                     // 374
// displaystyle. These four groups cover the four possible choices.                                                  // 375
                                                                                                                     // 376
// No limits, not symbols                                                                                            // 377
defineFunction([                                                                                                     // 378
    "\\arcsin", "\\arccos", "\\arctan", "\\arg", "\\cos", "\\cosh",                                                  // 379
    "\\cot", "\\coth", "\\csc", "\\deg", "\\dim", "\\exp", "\\hom",                                                  // 380
    "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh",                                                    // 381
    "\\tan", "\\tanh"                                                                                                // 382
], {                                                                                                                 // 383
    numArgs: 0                                                                                                       // 384
}, function(context) {                                                                                               // 385
    return {                                                                                                         // 386
        type: "op",                                                                                                  // 387
        limits: false,                                                                                               // 388
        symbol: false,                                                                                               // 389
        body: context.funcName                                                                                       // 390
    };                                                                                                               // 391
});                                                                                                                  // 392
                                                                                                                     // 393
// Limits, not symbols                                                                                               // 394
defineFunction([                                                                                                     // 395
    "\\det", "\\gcd", "\\inf", "\\lim", "\\liminf", "\\limsup", "\\max",                                             // 396
    "\\min", "\\Pr", "\\sup"                                                                                         // 397
], {                                                                                                                 // 398
    numArgs: 0                                                                                                       // 399
}, function(context) {                                                                                               // 400
    return {                                                                                                         // 401
        type: "op",                                                                                                  // 402
        limits: true,                                                                                                // 403
        symbol: false,                                                                                               // 404
        body: context.funcName                                                                                       // 405
    };                                                                                                               // 406
});                                                                                                                  // 407
                                                                                                                     // 408
// No limits, symbols                                                                                                // 409
defineFunction([                                                                                                     // 410
    "\\int", "\\iint", "\\iiint", "\\oint"                                                                           // 411
], {                                                                                                                 // 412
    numArgs: 0                                                                                                       // 413
}, function(context) {                                                                                               // 414
    return {                                                                                                         // 415
        type: "op",                                                                                                  // 416
        limits: false,                                                                                               // 417
        symbol: true,                                                                                                // 418
        body: context.funcName                                                                                       // 419
    };                                                                                                               // 420
});                                                                                                                  // 421
                                                                                                                     // 422
// Limits, symbols                                                                                                   // 423
defineFunction([                                                                                                     // 424
    "\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap",                                                  // 425
    "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes",                                                         // 426
    "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint"                                                            // 427
], {                                                                                                                 // 428
    numArgs: 0                                                                                                       // 429
}, function(context) {                                                                                               // 430
    return {                                                                                                         // 431
        type: "op",                                                                                                  // 432
        limits: true,                                                                                                // 433
        symbol: true,                                                                                                // 434
        body: context.funcName                                                                                       // 435
    };                                                                                                               // 436
});                                                                                                                  // 437
                                                                                                                     // 438
// \mathop class command                                                                                             // 439
defineFunction("\\mathop", {                                                                                         // 440
    numArgs: 1                                                                                                       // 441
}, function(context, args) {                                                                                         // 442
    var body = args[0];                                                                                              // 443
    return {                                                                                                         // 444
        type: "op",                                                                                                  // 445
        limits: false,                                                                                               // 446
        symbol: false,                                                                                               // 447
        value: ordargument(body)                                                                                     // 448
    };                                                                                                               // 449
});                                                                                                                  // 450
                                                                                                                     // 451
// Fractions                                                                                                         // 452
defineFunction([                                                                                                     // 453
    "\\dfrac", "\\frac", "\\tfrac",                                                                                  // 454
    "\\dbinom", "\\binom", "\\tbinom",                                                                               // 455
    "\\\\atopfrac" // can’t be entered directly                                                                      // 456
], {                                                                                                                 // 457
    numArgs: 2,                                                                                                      // 458
    greediness: 2                                                                                                    // 459
}, function(context, args) {                                                                                         // 460
    var numer = args[0];                                                                                             // 461
    var denom = args[1];                                                                                             // 462
    var hasBarLine;                                                                                                  // 463
    var leftDelim = null;                                                                                            // 464
    var rightDelim = null;                                                                                           // 465
    var size = "auto";                                                                                               // 466
                                                                                                                     // 467
    switch (context.funcName) {                                                                                      // 468
        case "\\dfrac":                                                                                              // 469
        case "\\frac":                                                                                               // 470
        case "\\tfrac":                                                                                              // 471
            hasBarLine = true;                                                                                       // 472
            break;                                                                                                   // 473
        case "\\\\atopfrac":                                                                                         // 474
            hasBarLine = false;                                                                                      // 475
            break;                                                                                                   // 476
        case "\\dbinom":                                                                                             // 477
        case "\\binom":                                                                                              // 478
        case "\\tbinom":                                                                                             // 479
            hasBarLine = false;                                                                                      // 480
            leftDelim = "(";                                                                                         // 481
            rightDelim = ")";                                                                                        // 482
            break;                                                                                                   // 483
        default:                                                                                                     // 484
            throw new Error("Unrecognized genfrac command");                                                         // 485
    }                                                                                                                // 486
                                                                                                                     // 487
    switch (context.funcName) {                                                                                      // 488
        case "\\dfrac":                                                                                              // 489
        case "\\dbinom":                                                                                             // 490
            size = "display";                                                                                        // 491
            break;                                                                                                   // 492
        case "\\tfrac":                                                                                              // 493
        case "\\tbinom":                                                                                             // 494
            size = "text";                                                                                           // 495
            break;                                                                                                   // 496
    }                                                                                                                // 497
                                                                                                                     // 498
    return {                                                                                                         // 499
        type: "genfrac",                                                                                             // 500
        numer: numer,                                                                                                // 501
        denom: denom,                                                                                                // 502
        hasBarLine: hasBarLine,                                                                                      // 503
        leftDelim: leftDelim,                                                                                        // 504
        rightDelim: rightDelim,                                                                                      // 505
        size: size                                                                                                   // 506
    };                                                                                                               // 507
});                                                                                                                  // 508
                                                                                                                     // 509
// Left and right overlap functions                                                                                  // 510
defineFunction(["\\llap", "\\rlap"], {                                                                               // 511
    numArgs: 1,                                                                                                      // 512
    allowedInText: true                                                                                              // 513
}, function(context, args) {                                                                                         // 514
    var body = args[0];                                                                                              // 515
    return {                                                                                                         // 516
        type: context.funcName.slice(1),                                                                             // 517
        body: body                                                                                                   // 518
    };                                                                                                               // 519
});                                                                                                                  // 520
                                                                                                                     // 521
// Delimiter functions                                                                                               // 522
var checkDelimiter = function(delim, context) {                                                                      // 523
    if (utils.contains(delimiters, delim.value)) {                                                                   // 524
        return delim;                                                                                                // 525
    } else {                                                                                                         // 526
        throw new ParseError(                                                                                        // 527
            "Invalid delimiter: '" + delim.value + "' after '" +                                                     // 528
            context.funcName + "'", delim);                                                                          // 529
    }                                                                                                                // 530
};                                                                                                                   // 531
                                                                                                                     // 532
defineFunction([                                                                                                     // 533
    "\\bigl", "\\Bigl", "\\biggl", "\\Biggl",                                                                        // 534
    "\\bigr", "\\Bigr", "\\biggr", "\\Biggr",                                                                        // 535
    "\\bigm", "\\Bigm", "\\biggm", "\\Biggm",                                                                        // 536
    "\\big",  "\\Big",  "\\bigg",  "\\Bigg"                                                                          // 537
], {                                                                                                                 // 538
    numArgs: 1                                                                                                       // 539
}, function(context, args) {                                                                                         // 540
    var delim = checkDelimiter(args[0], context);                                                                    // 541
                                                                                                                     // 542
    return {                                                                                                         // 543
        type: "delimsizing",                                                                                         // 544
        size: delimiterSizes[context.funcName].size,                                                                 // 545
        mclass: delimiterSizes[context.funcName].mclass,                                                             // 546
        value: delim.value                                                                                           // 547
    };                                                                                                               // 548
});                                                                                                                  // 549
                                                                                                                     // 550
defineFunction([                                                                                                     // 551
    "\\left", "\\right"                                                                                              // 552
], {                                                                                                                 // 553
    numArgs: 1                                                                                                       // 554
}, function(context, args) {                                                                                         // 555
    var delim = checkDelimiter(args[0], context);                                                                    // 556
                                                                                                                     // 557
    // \left and \right are caught somewhere in Parser.js, which is                                                  // 558
    // why this data doesn't match what is in buildHTML.                                                             // 559
    return {                                                                                                         // 560
        type: "leftright",                                                                                           // 561
        value: delim.value                                                                                           // 562
    };                                                                                                               // 563
});                                                                                                                  // 564
                                                                                                                     // 565
defineFunction("\\middle", {                                                                                         // 566
    numArgs: 1                                                                                                       // 567
}, function(context, args) {                                                                                         // 568
    var delim = checkDelimiter(args[0], context);                                                                    // 569
    if (!context.parser.leftrightDepth) {                                                                            // 570
        throw new ParseError("\\middle without preceding \\left", delim);                                            // 571
    }                                                                                                                // 572
                                                                                                                     // 573
    return {                                                                                                         // 574
        type: "middle",                                                                                              // 575
        value: delim.value                                                                                           // 576
    };                                                                                                               // 577
});                                                                                                                  // 578
                                                                                                                     // 579
// Sizing functions (handled in Parser.js explicitly, hence no handler)                                              // 580
defineFunction([                                                                                                     // 581
    "\\tiny", "\\scriptsize", "\\footnotesize", "\\small",                                                           // 582
    "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"                                              // 583
], 0, null);                                                                                                         // 584
                                                                                                                     // 585
// Style changing functions (handled in Parser.js explicitly, hence no                                               // 586
// handler)                                                                                                          // 587
defineFunction([                                                                                                     // 588
    "\\displaystyle", "\\textstyle", "\\scriptstyle",                                                                // 589
    "\\scriptscriptstyle"                                                                                            // 590
], 0, null);                                                                                                         // 591
                                                                                                                     // 592
defineFunction([                                                                                                     // 593
    // styles                                                                                                        // 594
    "\\mathrm", "\\mathit", "\\mathbf",                                                                              // 595
                                                                                                                     // 596
    // families                                                                                                      // 597
    "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf",                                                  // 598
    "\\mathtt",                                                                                                      // 599
                                                                                                                     // 600
    // aliases                                                                                                       // 601
    "\\Bbb", "\\bold", "\\frak"                                                                                      // 602
], {                                                                                                                 // 603
    numArgs: 1,                                                                                                      // 604
    greediness: 2                                                                                                    // 605
}, function(context, args) {                                                                                         // 606
    var body = args[0];                                                                                              // 607
    var func = context.funcName;                                                                                     // 608
    if (func in fontAliases) {                                                                                       // 609
        func = fontAliases[func];                                                                                    // 610
    }                                                                                                                // 611
    return {                                                                                                         // 612
        type: "font",                                                                                                // 613
        font: func.slice(1),                                                                                         // 614
        body: body                                                                                                   // 615
    };                                                                                                               // 616
});                                                                                                                  // 617
                                                                                                                     // 618
// Accents                                                                                                           // 619
defineFunction([                                                                                                     // 620
    "\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve",                                                   // 621
    "\\check", "\\hat", "\\vec", "\\dot"                                                                             // 622
    // We don't support expanding accents yet                                                                        // 623
    // "\\widetilde", "\\widehat"                                                                                    // 624
], {                                                                                                                 // 625
    numArgs: 1                                                                                                       // 626
}, function(context, args) {                                                                                         // 627
    var base = args[0];                                                                                              // 628
    return {                                                                                                         // 629
        type: "accent",                                                                                              // 630
        accent: context.funcName,                                                                                    // 631
        base: base                                                                                                   // 632
    };                                                                                                               // 633
});                                                                                                                  // 634
                                                                                                                     // 635
// Infix generalized fractions                                                                                       // 636
defineFunction(["\\over", "\\choose", "\\atop"], {                                                                   // 637
    numArgs: 0,                                                                                                      // 638
    infix: true                                                                                                      // 639
}, function(context) {                                                                                               // 640
    var replaceWith;                                                                                                 // 641
    switch (context.funcName) {                                                                                      // 642
        case "\\over":                                                                                               // 643
            replaceWith = "\\frac";                                                                                  // 644
            break;                                                                                                   // 645
        case "\\choose":                                                                                             // 646
            replaceWith = "\\binom";                                                                                 // 647
            break;                                                                                                   // 648
        case "\\atop":                                                                                               // 649
            replaceWith = "\\\\atopfrac";                                                                            // 650
            break;                                                                                                   // 651
        default:                                                                                                     // 652
            throw new Error("Unrecognized infix genfrac command");                                                   // 653
    }                                                                                                                // 654
    return {                                                                                                         // 655
        type: "infix",                                                                                               // 656
        replaceWith: replaceWith,                                                                                    // 657
        token: context.token                                                                                         // 658
    };                                                                                                               // 659
});                                                                                                                  // 660
                                                                                                                     // 661
// Row breaks for aligned data                                                                                       // 662
defineFunction(["\\\\", "\\cr"], {                                                                                   // 663
    numArgs: 0,                                                                                                      // 664
    numOptionalArgs: 1,                                                                                              // 665
    argTypes: ["size"]                                                                                               // 666
}, function(context, args) {                                                                                         // 667
    var size = args[0];                                                                                              // 668
    return {                                                                                                         // 669
        type: "cr",                                                                                                  // 670
        size: size                                                                                                   // 671
    };                                                                                                               // 672
});                                                                                                                  // 673
                                                                                                                     // 674
// Environment delimiters                                                                                            // 675
defineFunction(["\\begin", "\\end"], {                                                                               // 676
    numArgs: 1,                                                                                                      // 677
    argTypes: ["text"]                                                                                               // 678
}, function(context, args) {                                                                                         // 679
    var nameGroup = args[0];                                                                                         // 680
    if (nameGroup.type !== "ordgroup") {                                                                             // 681
        throw new ParseError("Invalid environment name", nameGroup);                                                 // 682
    }                                                                                                                // 683
    var name = "";                                                                                                   // 684
    for (var i = 0; i < nameGroup.value.length; ++i) {                                                               // 685
        name += nameGroup.value[i].value;                                                                            // 686
    }                                                                                                                // 687
    return {                                                                                                         // 688
        type: "environment",                                                                                         // 689
        name: name,                                                                                                  // 690
        nameGroup: nameGroup                                                                                         // 691
    };                                                                                                               // 692
});                                                                                                                  // 693
                                                                                                                     // 694
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"parseData.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/parseData.js                                          //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * The resulting parse tree nodes of the parse tree.                                                                 // 2
 *                                                                                                                   // 3
 * It is possible to provide position information, so that a ParseNode can                                           // 4
 * fulfil a role similar to a Token in error reporting.                                                              // 5
 * For details on the corresponding properties see Token constructor.                                                // 6
 * Providing such information can lead to better error reporting.                                                    // 7
 *                                                                                                                   // 8
 * @param {string}  type       type of node, like e.g. "ordgroup"                                                    // 9
 * @param {?object} value      type-specific representation of the node                                              // 10
 * @param {string}  mode       parse mode in action for this node,                                                   // 11
 *                             "math" or "text"                                                                      // 12
 * @param {Token=} firstToken  first token of the input for this node,                                               // 13
 *                             will omit position information if unset                                               // 14
 * @param {Token=} lastToken   last token of the input for this node,                                                // 15
 *                             will default to firstToken if unset                                                   // 16
 */                                                                                                                  // 17
function ParseNode(type, value, mode, firstToken, lastToken) {                                                       // 18
    this.type = type;                                                                                                // 19
    this.value = value;                                                                                              // 20
    this.mode = mode;                                                                                                // 21
    if (firstToken && (!lastToken || lastToken.lexer === firstToken.lexer)) {                                        // 22
        this.lexer = firstToken.lexer;                                                                               // 23
        this.start = firstToken.start;                                                                               // 24
        this.end = (lastToken || firstToken).end;                                                                    // 25
    }                                                                                                                // 26
}                                                                                                                    // 27
                                                                                                                     // 28
module.exports = {                                                                                                   // 29
    ParseNode: ParseNode                                                                                             // 30
};                                                                                                                   // 31
                                                                                                                     // 32
                                                                                                                     // 33
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"environments.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/environments.js                                       //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* eslint no-constant-condition:0 */                                                                                 // 1
var parseData = require("./parseData");                                                                              // 2
var ParseError = require("./ParseError");                                                                            // 3
var Style = require("./Style");                                                                                      // 4
                                                                                                                     // 5
var ParseNode = parseData.ParseNode;                                                                                 // 6
                                                                                                                     // 7
/**                                                                                                                  // 8
 * Parse the body of the environment, with rows delimited by \\ and                                                  // 9
 * columns delimited by &, and create a nested list in row-major order                                               // 10
 * with one group per cell.                                                                                          // 11
 */                                                                                                                  // 12
function parseArray(parser, result) {                                                                                // 13
    var row = [];                                                                                                    // 14
    var body = [row];                                                                                                // 15
    var rowGaps = [];                                                                                                // 16
    while (true) {                                                                                                   // 17
        var cell = parser.parseExpression(false, null);                                                              // 18
        row.push(new ParseNode("ordgroup", cell, parser.mode));                                                      // 19
        var next = parser.nextToken.text;                                                                            // 20
        if (next === "&") {                                                                                          // 21
            parser.consume();                                                                                        // 22
        } else if (next === "\\end") {                                                                               // 23
            break;                                                                                                   // 24
        } else if (next === "\\\\" || next === "\\cr") {                                                             // 25
            var cr = parser.parseFunction();                                                                         // 26
            rowGaps.push(cr.value.size);                                                                             // 27
            row = [];                                                                                                // 28
            body.push(row);                                                                                          // 29
        } else {                                                                                                     // 30
            throw new ParseError("Expected & or \\\\ or \\end",                                                      // 31
                                 parser.nextToken);                                                                  // 32
        }                                                                                                            // 33
    }                                                                                                                // 34
    result.body = body;                                                                                              // 35
    result.rowGaps = rowGaps;                                                                                        // 36
    return new ParseNode(result.type, result, parser.mode);                                                          // 37
}                                                                                                                    // 38
                                                                                                                     // 39
/*                                                                                                                   // 40
 * An environment definition is very similar to a function definition:                                               // 41
 * it is declared with a name or a list of names, a set of properties                                                // 42
 * and a handler containing the actual implementation.                                                               // 43
 *                                                                                                                   // 44
 * The properties include:                                                                                           // 45
 *  - numArgs: The number of arguments after the \begin{name} function.                                              // 46
 *  - argTypes: (optional) Just like for a function                                                                  // 47
 *  - allowedInText: (optional) Whether or not the environment is allowed inside                                     // 48
 *                   text mode (default false) (not enforced yet)                                                    // 49
 *  - numOptionalArgs: (optional) Just like for a function                                                           // 50
 * A bare number instead of that object indicates the numArgs value.                                                 // 51
 *                                                                                                                   // 52
 * The handler function will receive two arguments                                                                   // 53
 *  - context: information and references provided by the parser                                                     // 54
 *  - args: an array of arguments passed to \begin{name}                                                             // 55
 * The context contains the following properties:                                                                    // 56
 *  - envName: the name of the environment, one of the listed names.                                                 // 57
 *  - parser: the parser object                                                                                      // 58
 *  - lexer: the lexer object                                                                                        // 59
 *  - positions: the positions associated with these arguments from args.                                            // 60
 * The handler must return a ParseResult.                                                                            // 61
 */                                                                                                                  // 62
                                                                                                                     // 63
function defineEnvironment(names, props, handler) {                                                                  // 64
    if (typeof names === "string") {                                                                                 // 65
        names = [names];                                                                                             // 66
    }                                                                                                                // 67
    if (typeof props === "number") {                                                                                 // 68
        props = { numArgs: props };                                                                                  // 69
    }                                                                                                                // 70
    // Set default values of environments                                                                            // 71
    var data = {                                                                                                     // 72
        numArgs: props.numArgs || 0,                                                                                 // 73
        argTypes: props.argTypes,                                                                                    // 74
        greediness: 1,                                                                                               // 75
        allowedInText: !!props.allowedInText,                                                                        // 76
        numOptionalArgs: props.numOptionalArgs || 0,                                                                 // 77
        handler: handler                                                                                             // 78
    };                                                                                                               // 79
    for (var i = 0; i < names.length; ++i) {                                                                         // 80
        module.exports[names[i]] = data;                                                                             // 81
    }                                                                                                                // 82
}                                                                                                                    // 83
                                                                                                                     // 84
// Arrays are part of LaTeX, defined in lttab.dtx so its documentation                                               // 85
// is part of the source2e.pdf file of LaTeX2e source documentation.                                                 // 86
defineEnvironment("array", {                                                                                         // 87
    numArgs: 1                                                                                                       // 88
}, function(context, args) {                                                                                         // 89
    var colalign = args[0];                                                                                          // 90
    colalign = colalign.value.map ? colalign.value : [colalign];                                                     // 91
    var cols = colalign.map(function(node) {                                                                         // 92
        var ca = node.value;                                                                                         // 93
        if ("lcr".indexOf(ca) !== -1) {                                                                              // 94
            return {                                                                                                 // 95
                type: "align",                                                                                       // 96
                align: ca                                                                                            // 97
            };                                                                                                       // 98
        } else if (ca === "|") {                                                                                     // 99
            return {                                                                                                 // 100
                type: "separator",                                                                                   // 101
                separator: "|"                                                                                       // 102
            };                                                                                                       // 103
        }                                                                                                            // 104
        throw new ParseError(                                                                                        // 105
            "Unknown column alignment: " + node.value,                                                               // 106
            node);                                                                                                   // 107
    });                                                                                                              // 108
    var res = {                                                                                                      // 109
        type: "array",                                                                                               // 110
        cols: cols,                                                                                                  // 111
        hskipBeforeAndAfter: true // \@preamble in lttab.dtx                                                         // 112
    };                                                                                                               // 113
    res = parseArray(context.parser, res);                                                                           // 114
    return res;                                                                                                      // 115
});                                                                                                                  // 116
                                                                                                                     // 117
// The matrix environments of amsmath builds on the array environment                                                // 118
// of LaTeX, which is discussed above.                                                                               // 119
defineEnvironment([                                                                                                  // 120
    "matrix",                                                                                                        // 121
    "pmatrix",                                                                                                       // 122
    "bmatrix",                                                                                                       // 123
    "Bmatrix",                                                                                                       // 124
    "vmatrix",                                                                                                       // 125
    "Vmatrix"                                                                                                        // 126
], {                                                                                                                 // 127
}, function(context) {                                                                                               // 128
    var delimiters = {                                                                                               // 129
        "matrix": null,                                                                                              // 130
        "pmatrix": ["(", ")"],                                                                                       // 131
        "bmatrix": ["[", "]"],                                                                                       // 132
        "Bmatrix": ["\\{", "\\}"],                                                                                   // 133
        "vmatrix": ["|", "|"],                                                                                       // 134
        "Vmatrix": ["\\Vert", "\\Vert"]                                                                              // 135
    }[context.envName];                                                                                              // 136
    var res = {                                                                                                      // 137
        type: "array",                                                                                               // 138
        hskipBeforeAndAfter: false // \hskip -\arraycolsep in amsmath                                                // 139
    };                                                                                                               // 140
    res = parseArray(context.parser, res);                                                                           // 141
    if (delimiters) {                                                                                                // 142
        res = new ParseNode("leftright", {                                                                           // 143
            body: [res],                                                                                             // 144
            left: delimiters[0],                                                                                     // 145
            right: delimiters[1]                                                                                     // 146
        }, context.mode);                                                                                            // 147
    }                                                                                                                // 148
    return res;                                                                                                      // 149
});                                                                                                                  // 150
                                                                                                                     // 151
// A cases environment (in amsmath.sty) is almost equivalent to                                                      // 152
// \def\arraystretch{1.2}%                                                                                           // 153
// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.                                                       // 154
defineEnvironment("cases", {                                                                                         // 155
}, function(context) {                                                                                               // 156
    var res = {                                                                                                      // 157
        type: "array",                                                                                               // 158
        arraystretch: 1.2,                                                                                           // 159
        cols: [{                                                                                                     // 160
            type: "align",                                                                                           // 161
            align: "l",                                                                                              // 162
            pregap: 0,                                                                                               // 163
            // TODO(kevinb) get the current style.                                                                   // 164
            // For now we use the metrics for TEXT style which is what we were                                       // 165
            // doing before.  Before attempting to get the current style we                                          // 166
            // should look at TeX's behavior especially for \over and matrices.                                      // 167
            postgap: Style.TEXT.metrics.quad                                                                         // 168
        }, {                                                                                                         // 169
            type: "align",                                                                                           // 170
            align: "l",                                                                                              // 171
            pregap: 0,                                                                                               // 172
            postgap: 0                                                                                               // 173
        }]                                                                                                           // 174
    };                                                                                                               // 175
    res = parseArray(context.parser, res);                                                                           // 176
    res = new ParseNode("leftright", {                                                                               // 177
        body: [res],                                                                                                 // 178
        left: "\\{",                                                                                                 // 179
        right: "."                                                                                                   // 180
    }, context.mode);                                                                                                // 181
    return res;                                                                                                      // 182
});                                                                                                                  // 183
                                                                                                                     // 184
// An aligned environment is like the align* environment                                                             // 185
// except it operates within math mode.                                                                              // 186
// Note that we assume \nomallineskiplimit to be zero,                                                               // 187
// so that \strut@ is the same as \strut.                                                                            // 188
defineEnvironment("aligned", {                                                                                       // 189
}, function(context) {                                                                                               // 190
    var res = {                                                                                                      // 191
        type: "array",                                                                                               // 192
        cols: []                                                                                                     // 193
    };                                                                                                               // 194
    res = parseArray(context.parser, res);                                                                           // 195
    var emptyGroup = new ParseNode("ordgroup", [], context.mode);                                                    // 196
    var numCols = 0;                                                                                                 // 197
    res.value.body.forEach(function(row) {                                                                           // 198
        var i;                                                                                                       // 199
        for (i = 1; i < row.length; i += 2) {                                                                        // 200
            row[i].value.unshift(emptyGroup);                                                                        // 201
        }                                                                                                            // 202
        if (numCols < row.length) {                                                                                  // 203
            numCols = row.length;                                                                                    // 204
        }                                                                                                            // 205
    });                                                                                                              // 206
    for (var i = 0; i < numCols; ++i) {                                                                              // 207
        var align = "r";                                                                                             // 208
        var pregap = 0;                                                                                              // 209
        if (i % 2 === 1) {                                                                                           // 210
            align = "l";                                                                                             // 211
        } else if (i > 0) {                                                                                          // 212
            pregap = 2; // one \qquad between columns                                                                // 213
        }                                                                                                            // 214
        res.value.cols[i] = {                                                                                        // 215
            type: "align",                                                                                           // 216
            align: align,                                                                                            // 217
            pregap: pregap,                                                                                          // 218
            postgap: 0                                                                                               // 219
        };                                                                                                           // 220
    }                                                                                                                // 221
    return res;                                                                                                      // 222
});                                                                                                                  // 223
                                                                                                                     // 224
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MacroExpander.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/MacroExpander.js                                      //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * This file contains the “gullet” where macros are expanded                                                         // 2
 * until only non-macro tokens remain.                                                                               // 3
 */                                                                                                                  // 4
                                                                                                                     // 5
var Lexer = require("./Lexer");                                                                                      // 6
                                                                                                                     // 7
function MacroExpander(input, macros) {                                                                              // 8
    this.lexer = new Lexer(input);                                                                                   // 9
    this.macros = macros;                                                                                            // 10
    this.stack = []; // contains tokens in REVERSE order                                                             // 11
    this.discardedWhiteSpace = [];                                                                                   // 12
}                                                                                                                    // 13
                                                                                                                     // 14
/**                                                                                                                  // 15
 * Recursively expand first token, then return first non-expandable token.                                           // 16
 */                                                                                                                  // 17
MacroExpander.prototype.nextToken = function() {                                                                     // 18
    for (;;) {                                                                                                       // 19
        if (this.stack.length === 0) {                                                                               // 20
            this.stack.push(this.lexer.lex());                                                                       // 21
        }                                                                                                            // 22
        var topToken = this.stack.pop();                                                                             // 23
        var name = topToken.text;                                                                                    // 24
        if (!(name.charAt(0) === "\\" && this.macros.hasOwnProperty(name))) {                                        // 25
            return topToken;                                                                                         // 26
        }                                                                                                            // 27
        var expansion = this.macros[name];                                                                           // 28
        if (typeof expansion === "string") {                                                                         // 29
            var bodyLexer = new Lexer(expansion);                                                                    // 30
            expansion = [];                                                                                          // 31
            var tok = bodyLexer.lex();                                                                               // 32
            while (tok.text !== "EOF") {                                                                             // 33
                expansion.push(tok);                                                                                 // 34
                tok = bodyLexer.lex();                                                                               // 35
            }                                                                                                        // 36
            expansion.reverse(); // to fit in with stack using push and pop                                          // 37
            this.macros[name] = expansion;                                                                           // 38
        }                                                                                                            // 39
        this.stack = this.stack.concat(expansion);                                                                   // 40
    }                                                                                                                // 41
};                                                                                                                   // 42
                                                                                                                     // 43
MacroExpander.prototype.get = function(ignoreSpace) {                                                                // 44
    this.discardedWhiteSpace = [];                                                                                   // 45
    var token = this.nextToken();                                                                                    // 46
    if (ignoreSpace) {                                                                                               // 47
        while (token.text === " ") {                                                                                 // 48
            this.discardedWhiteSpace.push(token);                                                                    // 49
            token = this.nextToken();                                                                                // 50
        }                                                                                                            // 51
    }                                                                                                                // 52
    return token;                                                                                                    // 53
};                                                                                                                   // 54
                                                                                                                     // 55
/**                                                                                                                  // 56
 * Undo the effect of the preceding call to the get method.                                                          // 57
 * A call to this method MUST be immediately preceded and immediately followed                                       // 58
 * by a call to get.  Only used during mode switching, i.e. after one token                                          // 59
 * was got in the old mode but should get got again in a new mode                                                    // 60
 * with possibly different whitespace handling.                                                                      // 61
 */                                                                                                                  // 62
MacroExpander.prototype.unget = function(token) {                                                                    // 63
    this.stack.push(token);                                                                                          // 64
    while (this.discardedWhiteSpace.length !== 0) {                                                                  // 65
        this.stack.push(this.discardedWhiteSpace.pop());                                                             // 66
    }                                                                                                                // 67
};                                                                                                                   // 68
                                                                                                                     // 69
module.exports = MacroExpander;                                                                                      // 70
                                                                                                                     // 71
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Lexer.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/katex/src/Lexer.js                                              //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * The Lexer class handles tokenizing the input in various ways. Since our                                           // 2
 * parser expects us to be able to backtrack, the lexer allows lexing from any                                       // 3
 * given starting point.                                                                                             // 4
 *                                                                                                                   // 5
 * Its main exposed function is the `lex` function, which takes a position to                                        // 6
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`                                     // 7
 * function.                                                                                                         // 8
 *                                                                                                                   // 9
 * The various `_innerLex` functions perform the actual lexing of different                                          // 10
 * kinds.                                                                                                            // 11
 */                                                                                                                  // 12
                                                                                                                     // 13
var matchAt = require("match-at");                                                                                   // 14
                                                                                                                     // 15
var ParseError = require("./ParseError");                                                                            // 16
                                                                                                                     // 17
// The main lexer class                                                                                              // 18
function Lexer(input) {                                                                                              // 19
    this.input = input;                                                                                              // 20
    this.pos = 0;                                                                                                    // 21
}                                                                                                                    // 22
                                                                                                                     // 23
/**                                                                                                                  // 24
 * The resulting token returned from `lex`.                                                                          // 25
 *                                                                                                                   // 26
 * It consists of the token text plus some position information.                                                     // 27
 * The position information is essentially a range in an input string,                                               // 28
 * but instead of referencing the bare input string, we refer to the lexer.                                          // 29
 * That way it is possible to attach extra metadata to the input string,                                             // 30
 * like for example a file name or similar.                                                                          // 31
 *                                                                                                                   // 32
 * The position information (all three parameters) is optional,                                                      // 33
 * so it is OK to construct synthetic tokens if appropriate.                                                         // 34
 * Not providing available position information may lead to                                                          // 35
 * degraded error reporting, though.                                                                                 // 36
 *                                                                                                                   // 37
 * @param {string}  text   the text of this token                                                                    // 38
 * @param {number=} start  the start offset, zero-based inclusive                                                    // 39
 * @param {number=} end    the end offset, zero-based exclusive                                                      // 40
 * @param {Lexer=}  lexer  the lexer which in turn holds the input string                                            // 41
 */                                                                                                                  // 42
function Token(text, start, end, lexer) {                                                                            // 43
    this.text = text;                                                                                                // 44
    this.start = start;                                                                                              // 45
    this.end = end;                                                                                                  // 46
    this.lexer = lexer;                                                                                              // 47
}                                                                                                                    // 48
                                                                                                                     // 49
/**                                                                                                                  // 50
 * Given a pair of tokens (this and endToken), compute a “Token” encompassing                                        // 51
 * the whole input range enclosed by these two.                                                                      // 52
 *                                                                                                                   // 53
 * @param {Token}  endToken  last token of the range, inclusive                                                      // 54
 * @param {string} text      the text of the newly constructed token                                                 // 55
 */                                                                                                                  // 56
Token.prototype.range = function(endToken, text) {                                                                   // 57
    if (endToken.lexer !== this.lexer) {                                                                             // 58
        return new Token(text); // sorry, no position information available                                          // 59
    }                                                                                                                // 60
    return new Token(text, this.start, endToken.end, this.lexer);                                                    // 61
};                                                                                                                   // 62
                                                                                                                     // 63
/* The following tokenRegex                                                                                          // 64
 * - matches typical whitespace (but not NBSP etc.) using its first group                                            // 65
 * - does not match any control character \x00-\x1f except whitespace                                                // 66
 * - does not match a bare backslash                                                                                 // 67
 * - matches any ASCII character except those just mentioned                                                         // 68
 * - does not match the BMP private use area \uE000-\uF8FF                                                           // 69
 * - does not match bare surrogate code units                                                                        // 70
 * - matches any BMP character except for those just described                                                       // 71
 * - matches any valid Unicode surrogate pair                                                                        // 72
 * - matches a backslash followed by one or more letters                                                             // 73
 * - matches a backslash followed by any BMP character, including newline                                            // 74
 * Just because the Lexer matches something doesn't mean it's valid input:                                           // 75
 * If there is no matching function or symbol definition, the Parser will                                            // 76
 * still reject the input.                                                                                           // 77
 */                                                                                                                  // 78
var tokenRegex = new RegExp(                                                                                         // 79
    "([ \r\n\t]+)|" +                                 // whitespace                                                  // 80
    "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" +  // single codepoint                                            // 81
    "|[\uD800-\uDBFF][\uDC00-\uDFFF]" +               // surrogate pair                                              // 82
    "|\\\\(?:[a-zA-Z]+|[^\uD800-\uDFFF])" +           // function name                                               // 83
    ")"                                                                                                              // 84
);                                                                                                                   // 85
                                                                                                                     // 86
/**                                                                                                                  // 87
 * This function lexes a single token.                                                                               // 88
 */                                                                                                                  // 89
Lexer.prototype.lex = function() {                                                                                   // 90
    var input = this.input;                                                                                          // 91
    var pos = this.pos;                                                                                              // 92
    if (pos === input.length) {                                                                                      // 93
        return new Token("EOF", pos, pos, this);                                                                     // 94
    }                                                                                                                // 95
    var match = matchAt(tokenRegex, input, pos);                                                                     // 96
    if (match === null) {                                                                                            // 97
        throw new ParseError(                                                                                        // 98
            "Unexpected character: '" + input[pos] + "'",                                                            // 99
            new Token(input[pos], pos, pos + 1, this));                                                              // 100
    }                                                                                                                // 101
    var text = match[2] || " ";                                                                                      // 102
    var start = this.pos;                                                                                            // 103
    this.pos += match[0].length;                                                                                     // 104
    var end = this.pos;                                                                                              // 105
    return new Token(text, start, end, this);                                                                        // 106
};                                                                                                                   // 107
                                                                                                                     // 108
module.exports = Lexer;                                                                                              // 109
                                                                                                                     // 110
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"match-at":{"package.json":function(require,exports){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/match-at/package.json                                                                                //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
exports.name = "match-at";                                                                                           // 1
exports.version = "0.1.0";                                                                                           // 2
exports.main = "lib/matchAt.js";                                                                                     // 3
                                                                                                                     // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"matchAt.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// node_modules/meteor/rocketchat_katex/node_modules/match-at/lib/matchAt.js                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/** @flow */                                                                                                         // 1
                                                                                                                     // 2
"use strict";                                                                                                        // 3
                                                                                                                     // 4
function getRelocatable(re) {                                                                                        // 5
  // In the future, this could use a WeakMap instead of an expando.                                                  // 6
  if (!re.__matchAtRelocatable) {                                                                                    // 7
    // Disjunctions are the lowest-precedence operator, so we can make any                                           // 8
    // pattern match the empty string by appending `|()` to it:                                                      // 9
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns                                            // 10
    var source = re.source + "|()";                                                                                  // 11
                                                                                                                     // 12
    // We always make the new regex global.                                                                          // 13
    var flags = "g" + (re.ignoreCase ? "i" : "") + (re.multiline ? "m" : "") + (re.unicode ? "u" : "")               // 14
    // sticky (/.../y) doesn't make sense in conjunction with our relocation                                         // 15
    // logic, so we ignore it here.                                                                                  // 16
    ;                                                                                                                // 17
                                                                                                                     // 18
    re.__matchAtRelocatable = new RegExp(source, flags);                                                             // 19
  }                                                                                                                  // 20
  return re.__matchAtRelocatable;                                                                                    // 21
}                                                                                                                    // 22
                                                                                                                     // 23
function matchAt(re, str, pos) {                                                                                     // 24
  if (re.global || re.sticky) {                                                                                      // 25
    throw new Error("matchAt(...): Only non-global regexes are supported");                                          // 26
  }                                                                                                                  // 27
  var reloc = getRelocatable(re);                                                                                    // 28
  reloc.lastIndex = pos;                                                                                             // 29
  var match = reloc.exec(str);                                                                                       // 30
  // Last capturing group is our sentinel that indicates whether the regex                                           // 31
  // matched at the given location.                                                                                  // 32
  if (match[match.length - 1] == null) {                                                                             // 33
    // Original regex matched.                                                                                       // 34
    match.length = match.length - 1;                                                                                 // 35
    return match;                                                                                                    // 36
  } else {                                                                                                           // 37
    return null;                                                                                                     // 38
  }                                                                                                                  // 39
}                                                                                                                    // 40
                                                                                                                     // 41
module.exports = matchAt;                                                                                            // 42
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".css"
  ]
});
require("./node_modules/meteor/rocketchat:katex/katex.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['rocketchat:katex'] = {};

})();
