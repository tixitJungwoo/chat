{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:katex/katex.js"],"names":["katex","require","Boundary","length","end","start","extract","str","substr","Katex","delimiters_map","opener","closer","displayMode","enabled","parenthesis_syntax_enabled","dollar_syntax_enabled","find_opening_delimiter","matches","map","results","forEach","op","push","options","pos","indexOf","positions","Math","min","apply","match_index","m","match","get_latex_boundaries","opening_delimiter_match","inner","outer","closer_index","find_latex","trim","extract_latex","before","after","latex","s","unescapeHTML","render_latex","rendered","renderToString","error","e","display_mode","escapeHTML","message","render","render_func","result","parts","render_message","katex_enabled","msg","_","isString","html","tokens","token","Random","id","text","RocketChat","settings","get","cb","bind","callbacks","add","priority","HIGH","Meteor","isClient","Blaze","registerHelper"],"mappings":"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","file":"/packages/rocketchat_katex.js","sourcesContent":["/*\n * KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.\n * https://github.com/Khan/KaTeX\n */\nconst katex = require('katex');\n\nclass Boundary {\n\tconstructor() {}\n\n\tlength() {\n\t\treturn this.end - this.start;\n\t}\n\n\textract(str) {\n\t\treturn str.substr(this.start, this.length());\n\t}\n\n}\n\nclass Katex {\n\tconstructor() {\n\t\tthis.delimiters_map = [\n\t\t\t{\n\t\t\t\topener: '\\\\[',\n\t\t\t\tcloser: '\\\\]',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => {\n\t\t\t\t\treturn this.parenthesis_syntax_enabled();\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\topener: '\\\\(',\n\t\t\t\tcloser: '\\\\)',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => {\n\t\t\t\t\treturn this.parenthesis_syntax_enabled();\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\topener: '$$',\n\t\t\t\tcloser: '$$',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => {\n\t\t\t\t\treturn this.dollar_syntax_enabled();\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\topener: '$',\n\t\t\t\tcloser: '$',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => {\n\t\t\t\t\treturn this.dollar_syntax_enabled();\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t}\n\t// Searches for the first opening delimiter in the string from a given position\n\n\tfind_opening_delimiter(str, start) { // Search the string for each opening delimiter\n\t\tconst matches = (() => {\n\t\t\tconst map = this.delimiters_map;\n\t\t\tconst results = [];\n\n\t\t\tmap.forEach((op) => {\n\t\t\t\tif (op.enabled()) {\n\t\t\t\t\tresults.push({\n\t\t\t\t\t\toptions: op,\n\t\t\t\t\t\tpos: str.indexOf(op.opener, start)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn results;\n\t\t})();\n\n\t\tconst positions = (() => {\n\t\t\tconst results = [];\n\t\t\tmatches.forEach((pos) => {\n\t\t\t\tif (pos.pos >= 0) {\n\t\t\t\t\tresults.push(pos.pos);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn results;\n\t\t})();\n\n\t\t// No opening delimiters were found\n\t\tif (positions.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//Take the first delimiter found\n\t\tconst pos = Math.min.apply(Math, positions);\n\n\t\tconst match_index = (()=> {\n\t\t\tconst results = [];\n\t\t\tmatches.forEach((m) => {\n\t\t\t\tresults.push(m.pos);\n\t\t\t});\n\t\t\treturn results;\n\t\t})().indexOf(pos);\n\n\t\tconst match = matches[match_index];\n\t\treturn match;\n\t}\n\n\t// Returns the outer and inner boundaries of the latex block starting\n\t// at the given opening delimiter\n\tget_latex_boundaries(str, opening_delimiter_match) {\n\t\tconst inner = new Boundary;\n\t\tconst outer = new Boundary;\n\n\t\t// The closing delimiter matching to the opening one\n\t\tconst closer = opening_delimiter_match.options.closer;\n\t\touter.start = opening_delimiter_match.pos;\n\t\tinner.start = opening_delimiter_match.pos + closer.length;\n\n\t\t// Search for a closer delimiter after the opening one\n\t\tconst closer_index = str.substr(inner.start).indexOf(closer);\n\t\tif (closer_index < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tinner.end = inner.start + closer_index;\n\t\touter.end = inner.end + closer.length;\n\t\treturn {\n\t\t\touter,\n\t\t\tinner\n\t\t};\n\t}\n\n\t// Searches for the first latex block in the given string\n\tfind_latex(str) {\n\t\tlet start = 0;\n\t\tlet opening_delimiter_match;\n\n\t\twhile ((opening_delimiter_match = this.find_opening_delimiter(str, start++)) != null) {\n\t\t\tconst match = this.get_latex_boundaries(str, opening_delimiter_match);\n\t\t\tif (match && match.inner.extract(str).trim().length) {\n\t\t\t\tmatch.options = opening_delimiter_match.options;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t// Breaks a message to what comes before, after and to the content of a\n\t// matched latex block\n\textract_latex(str, match) {\n\t\tconst before = str.substr(0, match.outer.start);\n\t\tconst after = str.substr(match.outer.end);\n\t\tlet latex = match.inner.extract(str);\n\t\tlatex = s.unescapeHTML(latex);\n\t\treturn {\n\t\t\tbefore,\n\t\t\tlatex,\n\t\t\tafter\n\t\t};\n\t}\n\n\t// Takes a latex math string and the desired display mode and renders it\n\t// to HTML using the KaTeX library\n\trender_latex(latex, displayMode) {\n\t\tlet rendered;\n\t\ttry {\n\t\t\trendered = katex.renderToString(latex, {\n\t\t\t\tdisplayMode\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconst e = error;\n\t\t\tconst display_mode = displayMode ? 'block' : 'inline';\n\t\t\trendered = `<div class=\"katex-error katex-${ display_mode }-error\">`;\n\t\t\trendered += `${ s.escapeHTML(e.message) }`;\n\t\t\trendered += '</div>';\n\t\t}\n\t\treturn rendered;\n\t}\n\n\t// Takes a string and renders all latex blocks inside it\n\trender(str, render_func) {\n\t\tlet result = '';\n\t\twhile (this.find_latex(str) != null) {\n\t\t\t// Find the first latex block in the string\n\t\t\tconst match = this.find_latex(str);\n\t\t\tconst parts = this.extract_latex(str, match);\n\n\t\t\t// Add to the reuslt what comes before the latex block as well as\n\t\t\t// the rendered latex content\n\t\t\tconst rendered = render_func(parts.latex, match.options.displayMode);\n\t\t\tresult += parts.before + rendered;\n\t\t\t// Set what comes after the latex block to be examined next\n\t\t\tstr = parts.after;\n\t\t}\n\t\treturn result += str;\n\t}\n\n\t// Takes a rocketchat message and renders latex in its content\n\trender_message(message) {\n\t\t//Render only if enabled in admin panel\n\t\tlet render_func;\n\t\tif (this.katex_enabled()) {\n\t\t\tlet msg = message;\n\t\t\tif (!_.isString(message)) {\n\t\t\t\tif (_.trim(message.html)) {\n\t\t\t\t\tmsg = message.html;\n\t\t\t\t} else {\n\t\t\t\t\treturn message;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (_.isString(message)) {\n\t\t\t\trender_func = (latex, displayMode) => {\n\t\t\t\t\treturn this.render_latex(latex, displayMode);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (message.tokens == null) {\n\t\t\t\t\tmessage.tokens = [];\n\t\t\t\t}\n\t\t\t\trender_func = (latex, displayMode) => {\n\t\t\t\t\tconst token = `=!=${ Random.id() }=!=`;\n\t\t\t\t\tmessage.tokens.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: this.render_latex(latex, displayMode)\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t};\n\t\t\t}\n\t\t\tmsg = this.render(msg, render_func);\n\t\t\tif (!_.isString(message)) {\n\t\t\t\tmessage.html = msg;\n\t\t\t} else {\n\t\t\t\tmessage = msg;\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\n\tkatex_enabled() {\n\t\treturn RocketChat.settings.get('Katex_Enabled');\n\t}\n\n\tdollar_syntax_enabled() {\n\t\treturn RocketChat.settings.get('Katex_Dollar_Syntax');\n\t}\n\n\tparenthesis_syntax_enabled() {\n\t\treturn RocketChat.settings.get('Katex_Parenthesis_Syntax');\n\t}\n\n}\n\nRocketChat.katex = new Katex;\n\nconst cb = RocketChat.katex.render_message.bind(RocketChat.katex);\n\nRocketChat.callbacks.add('renderMessage', cb, RocketChat.callbacks.priority.HIGH - 1, 'katex');\n\nif (Meteor.isClient) {\n\tBlaze.registerHelper('RocketChatKatex', function(text) {\n\t\treturn RocketChat.katex.render_message(text);\n\t});\n}\n"]}