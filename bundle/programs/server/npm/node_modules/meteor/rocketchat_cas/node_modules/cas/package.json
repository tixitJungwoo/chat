{
  "_args": [
    [
      {
        "raw": "cas@https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
        "scope": null,
        "escapedName": "cas",
        "name": "cas",
        "rawSpec": "https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
        "spec": "https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
        "type": "remote"
      },
      "/app/lilychat/packages/rocketchat-cas/.npm/package-new-108u4lj"
    ]
  ],
  "_from": "https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
  "_id": "cas@0.0.5",
  "_inCache": true,
  "_location": "/cas",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cas@https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
    "scope": null,
    "escapedName": "cas",
    "name": "cas",
    "rawSpec": "https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
    "spec": "https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
  "_shasum": "00bf26d49615ffb90c11d949d2c2ad275f185e0e",
  "_shrinkwrap": null,
  "_spec": "cas@https://github.com/kcbanner/node-cas/tarball/fcd27dad333223b3b75a048bce27973fb3ca0f62",
  "_where": "/app/lilychat/packages/rocketchat-cas/.npm/package-new-108u4lj",
  "author": {
    "name": "Casey Banner",
    "email": "kcbanner@gmail.com"
  },
  "contributors": [
    {
      "name": "Joshua Chan",
      "email": "joshua@appdevdesigns.net"
    }
  ],
  "dependencies": {
    "cheerio": "0.19.0"
  },
  "description": "Central Authentication Service (CAS) client for Node.js",
  "devDependencies": {
    "chai": "^3.4.1",
    "nock": "^7.0.2",
    "should": "^8.2.1"
  },
  "keywords": [
    "cas",
    "central authentication service",
    "auth",
    "authentication",
    "central",
    "service"
  ],
  "main": "index",
  "name": "cas",
  "optionalDependencies": {},
  "readme": "# cas\n\n  Central Authentication Service (CAS) client for Node.js\n\n  This module handles CAS authentication (with support for proxies and extended attributes), and can also transparently redirect a web page if needed. The ticket validation step is available as its own function for those who wish to handle things manually. Single sign out is also supported with Express/Connect.\n  \n  To start the login process manually, send your users to: `https://cas_base_url/login?service=url_to_handle_ticket_validation`. In the University of Waterloo example below, this url would be: `https://cas.uwaterloo.ca/cas/login?service='my_service'`.\n  \n  Or if you are using standard HTTP req/res objects for a web page, you may use the provided `authenticate()` function to handle the redirection automatically.\n  \n  It is also possible to use this as a standalone CAS PGT callback server that other CAS clients can use.\n  \n  \n\n## Installation\n\nClone this project into `node_modules/cas` and then run `npm install` inside it.\n\n## Usage\n\nSetup:\n\n```javascript\n    var CAS = require('cas');\n    var cas = new CAS({\n        base_url: 'https://cas.uwaterloo.ca/cas', \n        service: 'my_service',\n        version: 2.0\n    });\n```\n\nUsing it in a login route:\n\n```javascript\n    exports.cas_login = function(req, res) {\n      var ticket = req.param('ticket');\n      if (ticket) {\n        cas.validate(ticket, function(err, status, username) {\n          if (err) {\n            // Handle the error\n            res.send({error: err});\n          } else {\n            // Log the user in\n            res.send({status: status, username: username});\n          }\n        });\n      } else {\n        res.redirect('/');\n      }\n    };\n```\n\nUsing the auto redirect authentication:\n\n```javascript\n    exports.cas_login = function(req, res) {\n      cas.authenticate(req, res, function(err, status, username, extended) {\n        if (err) {\n          // Handle the error\n          res.send({error: err});\n        } else {\n          // Log the user in \n          res.send({status: status, username: username, attributes: extended.attributes});\n        }\n      });    \n    }\n```\n\nLonger example with CAS proxy (also see the [wiki](https://github.com/joshchan/node-cas/wiki/CAS-Proxy)):\n\n```javascript\n    var fs = require('fs');\n    var http = require('http');\n\n    // Initialize CAS\n    var CAS = require('cas');\n    var cas = new CAS({\n        base_url: 'https://cas.uwaterloo.ca/cas',\n        version: 2.0,\n        \n        // CAS server will connect to this. It must be accessible on the\n        // public internet.\n        pgt_server: true,\n        ssl_key: fs.readFileSync('/path/to/private_key.pem'),\n        ssl_cert: fs.readFileSync('/path/to/ssl_cert.pem'),\n        pgt_host: 'my-public-domain.example.com',\n        pgt_port: 8989\n    });\n    \n    // Main web server\n    var server = http.createServer();\n    server.addListener('request', function(req, res) {\n\n        var ip = req.connection.remoteAddress\n             || req.socket.remoteAddress \n             || req.connection.socket.remoteAddress;\n        \n        cas.authenticate(req, res, function(err, status, username, extended) {\n            if (err) {\n                res.end(err.message);\n                return;\n            }\n            \n            // At this point the user has been authenticated. In a real web\n            // framework you would want to use sessions to track the info.\n            \n            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.write('<div style=\"border:solid 1px black; padding:1em; margin:1em;\">');\n            res.write('<p>Welcome ' + username + '. Your IP address is ' + ip + '.</p>');\n            res.write('<p>You are here: <b>http://' + req.headers.host + req.url + '</b></p>');\n            \n            // CAS server should return a PGTIOU since we specified a PGT callback\n            var pgtIOU = extended['PGTIOU'];\n            if (pgtIOU) {\n                res.write('<p>');\n                res.write('Your PGTIOU for this session is: ' + pgtIOU + '<br/>');\n                res.write('Your web framework should keep track of this if it wants to use CAS proxied services on your behalf.<br/>');\n                res.write('</p>');\n                \n                // Now you are authorized to fetch a 3rd party service on behalf\n                // of the user.\n                var url = \"http://example.com/user/info\";\n                cas.getProxyTicket(pgtIOU, url, function(err, ticket) {\n                    if (!err) {\n                        url += '?ticket=' + ticket;\n                        request(url, ... )\n                    }\n                    res.write('</div>');\n                    res.end();\n                });\n            }\n            \n            else {\n                res.write('</div>');\n                res.end();\n            }\n        \n        });\n        \n    });\n    server.listen(8080);\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Casey Banner &lt;kcbanner@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "scripts": {
    "test": "make test"
  },
  "version": "0.0.5"
}
