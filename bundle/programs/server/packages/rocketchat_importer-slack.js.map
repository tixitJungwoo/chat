{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_importer-slack/server.coffee","meteor://ðŸ’»app/server.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer-slack/main.coffee"],"names":["bind","fn","me","apply","arguments","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","Importer","Slack","superClass","name","descriptionI18N","mimeType","getSelection","convertSlackMessageToRocketChat","getRocketUser","getSlackChannelFromName","startImport","prepare","userTags","bots","logger","debug","dataURI","sentContentType","fileName","channel","channelsId","contentType","entry","fn1","image","j","len","messagesCount","messagesObj","ref","selectionChannels","selectionUsers","tempChannels","tempMessages","tempUsers","usersId","zip","zipEntries","RocketChatFile","dataURIParse","AdmZip","Buffer","getEntries","_this","channelName","item","k","len1","msgGroupData","results","user","entryName","indexOf","updateProgress","ProgressStep","PREPARING_CHANNELS","JSON","parse","getData","toString","filter","creator","PREPARING_USERS","length","is_bot","push","profile","bot_id","isDirectory","split","error1","warn","collection","insert","importRecord","_id","users","findOne","updateRecord","addCountToTotal","channels","PREPARING_MESSAGES","date","i","messagesId","msgs","splitMsg","messages","Base","getBSONSize","MaxBSONSize","ref1","results1","getBSONSafeArraysFromAnArray","ERROR","getProgress","map","SelectionUser","id","email","deleted","SelectionChannel","is_archived","USER_SELECTION","Selection","importSelection","c","l","len2","len3","m","ref2","ref3","start","startedByUserId","u","Date","now","user_id","do_import","update","$set","channel_id","Meteor","userId","defer","ignoreTypes","len4","len5","len6","missedTypes","n","o","p","ref4","ref5","ref6","ref7","timeTook","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","slack","slackLong","rocket","username","Accounts","createUser","password","toUpperCase","joinDefaultChannelsSilenced","error","url","image_original","image_512","tz_offset","real_name","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","len7","member","q","ref8","ref9","roomUpdate","Rooms","findOneByName","is_general","members","returned","rid","ts","created","_","isEmpty","topic","value","purpose","description","IMPORTING_MESSAGES","botUser","botUsername","details","editedBy","message","msgDataDefaults","msgObj","rcUser","reaction","room","slackChannel","findOneById","fields","usernames","t","len8","r","ref10","ref11","ref12","replace","parseInt","type","subtype","Messages","createUserJoinWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","msg","text","sendMessage","bot","attachments","edited","editedAt","icons","emoji","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","createRoomRenamedWithRoomIdRoomNameAndUser","author_subname","getAvatarUrlFromUsername","createWithTypeRoomIdMessageAndUser","file","url_private_download","message_id","size","mimetype","uploadFile","reactions","console","log","FINISHING","DONE","slackId","userReplace","addImporter"],"mappings":"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","file":"/packages/rocketchat_importer-slack.js","sourcesContent":["Importer.Slack = class Importer.Slack extends Importer.Base\n\tconstructor: (name, descriptionI18N, mimeType) ->\n\t\tsuper(name, descriptionI18N, mimeType)\n\t\t@userTags = []\n\t\t@bots = {}\n\t\t@logger.debug('Constructed a new Slack Importer.')\n\n\tprepare: (dataURI, sentContentType, fileName) =>\n\t\tsuper(dataURI, sentContentType, fileName)\n\n\t\t{image, contentType} = RocketChatFile.dataURIParse dataURI\n\t\tzip = new @AdmZip(new Buffer(image, 'base64'))\n\t\tzipEntries = zip.getEntries()\n\n\t\ttempChannels = []\n\t\ttempUsers = []\n\t\ttempMessages = {}\n\t\tfor entry in zipEntries\n\t\t\tdo (entry) =>\n\t\t\t\tif entry.entryName.indexOf('__MACOSX') > -1\n\t\t\t\t\t#ignore all of the files inside of __MACOSX\n\t\t\t\t\t@logger.debug(\"Ignoring the file: #{entry.entryName}\")\n\t\t\t\telse if entry.entryName == 'channels.json'\n\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_CHANNELS\n\t\t\t\t\ttempChannels = JSON.parse entry.getData().toString()\n\t\t\t\t\ttempChannels = tempChannels.filter (channel) -> channel.creator?\n\t\t\t\telse if entry.entryName == 'users.json'\n\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_USERS\n\t\t\t\t\ttempUsers = JSON.parse entry.getData().toString()\n\n\t\t\t\t\tfor user in tempUsers when user.is_bot\n\t\t\t\t\t\t@bots[user.profile.bot_id] = user\n\n\t\t\t\telse if not entry.isDirectory and entry.entryName.indexOf('/') > -1\n\t\t\t\t\titem = entry.entryName.split('/') #random/2015-10-04.json\n\t\t\t\t\tchannelName = item[0] #random\n\t\t\t\t\tmsgGroupData = item[1].split('.')[0] #2015-10-04\n\t\t\t\t\tif not tempMessages[channelName]\n\t\t\t\t\t\ttempMessages[channelName] = {}\n\t\t\t\t\t# Catch files which aren't valid JSON files, ignore them\n\t\t\t\t\ttry\n\t\t\t\t\t\ttempMessages[channelName][msgGroupData] = JSON.parse entry.getData().toString()\n\t\t\t\t\tcatch\n\t\t\t\t\t\t@logger.warn \"#{entry.entryName} is not a valid JSON file! Unable to import it.\"\n\n\t\t# Insert the users record, eventually this might have to be split into several ones as well\n\t\t# if someone tries to import a several thousands users instance\n\t\tusersId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'users', 'users': tempUsers }\n\t\t@users = @collection.findOne usersId\n\t\t@updateRecord { 'count.users': tempUsers.length }\n\t\t@addCountToTotal tempUsers.length\n\n\t\t# Insert the channels records.\n\t\tchannelsId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'channels', 'channels': tempChannels }\n\t\t@channels = @collection.findOne channelsId\n\t\t@updateRecord { 'count.channels': tempChannels.length }\n\t\t@addCountToTotal tempChannels.length\n\n\t\t# Insert the messages records\n\t\t@updateProgress Importer.ProgressStep.PREPARING_MESSAGES\n\t\tmessagesCount = 0\n\t\tfor channel, messagesObj of tempMessages\n\t\t\tdo (channel, messagesObj) =>\n\t\t\t\tif not @messages[channel]\n\t\t\t\t\t@messages[channel] = {}\n\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\tmessagesCount += msgs.length\n\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}\" }\n\n\t\t\t\t\tif Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize\n\t\t\t\t\t\tfor splitMsg, i in Importer.Base.getBSONSafeArraysFromAnArray(msgs)\n\t\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}.#{i}\", 'messages': splitMsg }\n\t\t\t\t\t\t\t@messages[channel][\"#{date}.#{i}\"] = @collection.findOne messagesId\n\t\t\t\t\telse\n\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}\", 'messages': msgs }\n\t\t\t\t\t\t@messages[channel][date] = @collection.findOne messagesId\n\n\t\t@updateRecord { 'count.messages': messagesCount, 'messagesstatus': null }\n\t\t@addCountToTotal messagesCount\n\n\t\tif tempUsers.length is 0 or tempChannels.length is 0 or messagesCount is 0\n\t\t\t@logger.warn \"The loaded users count #{tempUsers.length}, the loaded channels #{tempChannels.length}, and the loaded messages #{messagesCount}\"\n\t\t\t@updateProgress Importer.ProgressStep.ERROR\n\t\t\treturn @getProgress()\n\n\t\tselectionUsers = tempUsers.map (user) ->\n\t\t\treturn new Importer.SelectionUser user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot\n\t\tselectionChannels = tempChannels.map (channel) ->\n\t\t\treturn new Importer.SelectionChannel channel.id, channel.name, channel.is_archived, true, false\n\n\t\t@updateProgress Importer.ProgressStep.USER_SELECTION\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n\n\tstartImport: (importSelection) =>\n\t\tsuper(importSelection)\n\t\tstart = Date.now()\n\n\t\tfor user in importSelection.users\n\t\t\tfor u in @users.users when u.id is user.user_id\n\t\t\t\tu.do_import = user.do_import\n\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\tfor channel in importSelection.channels\n\t\t\tfor c in @channels.channels when c.id is channel.channel_id\n\t\t\t\tc.do_import = channel.do_import\n\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\tstartedByUserId = Meteor.userId()\n\t\tMeteor.defer =>\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_USERS\n\t\t\tfor user in @users.users when user.do_import\n\t\t\t\tdo (user) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByEmailAddress user.profile.email\n\t\t\t\t\t\tif not existantUser\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername user.name\n\n\t\t\t\t\t\tif existantUser\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id\n\t\t\t\t\t\t\tRocketChat.models.Users.update { _id: user.rocketId }, { $addToSet: { importIds: user.id } }\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\tslack: \"<@#{user.id}>\"\n\t\t\t\t\t\t\t\tslackLong: \"<@#{user.id}|#{user.name}>\"\n\t\t\t\t\t\t\t\trocket: \"@#{existantUser.username}\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif user.profile.email\n\t\t\t\t\t\t\t\tuserId = Accounts.createUser { email: user.profile.email, password: Date.now() + user.name + user.profile.email.toUpperCase() }\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tuserId = Accounts.createUser { username: user.name, password: Date.now() + user.name, joinDefaultChannelsSilenced: true }\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\tMeteor.call 'setUsername', user.name, {joinDefaultChannelsSilenced: true}\n\t\t\t\t\t\t\t\turl = null\n\t\t\t\t\t\t\t\tif user.profile.image_original\n\t\t\t\t\t\t\t\t\turl = user.profile.image_original\n\t\t\t\t\t\t\t\telse if user.profile.image_512\n\t\t\t\t\t\t\t\t\turl = user.profile.image_512\n\n\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t  Meteor.call 'setAvatarFromService', url, undefined, 'url'\n\t\t\t\t\t\t\t\tcatch error\n\t\t\t\t\t\t\t\t  this.logger.warn \"Failed to set #{user.name}'s avatar from url #{url}\"\n\n\t\t\t\t\t\t\t\t# Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600\n\t\t\t\t\t\t\t\tif user.tz_offset\n\t\t\t\t\t\t\t\t\tMeteor.call 'userSetUtcOffset', user.tz_offset / 3600\n\n\t\t\t\t\t\t\tRocketChat.models.Users.update { _id: userId }, { $addToSet: { importIds: user.id } }\n\n\t\t\t\t\t\t\tif user.profile.real_name\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName userId, user.profile.real_name\n\t\t\t\t\t\t\t#Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif user.deleted\n\t\t\t\t\t\t\t\tMeteor.call 'setUserActiveStatus', userId, false\n\t\t\t\t\t\t\t#TODO: Maybe send emails?\n\t\t\t\t\t\t\tuser.rocketId = userId\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\tslack: \"<@#{user.id}>\"\n\t\t\t\t\t\t\t\tslackLong: \"<@#{user.id}|#{user.name}>\"\n\t\t\t\t\t\t\t\trocket: \"@#{user.name}\"\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_CHANNELS\n\t\t\tfor channel in @channels.channels when channel.do_import\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\texistantRoom = RocketChat.models.Rooms.findOneByName channel.name\n\t\t\t\t\t\tif existantRoom or channel.is_general\n\t\t\t\t\t\t\tif channel.is_general and channel.name isnt existantRoom?.name\n\t\t\t\t\t\t\t\tMeteor.call 'saveRoomSettings', 'GENERAL', 'roomName', channel.name\n\t\t\t\t\t\t\tchannel.rocketId = if channel.is_general then 'GENERAL' else existantRoom._id\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update { _id: channel.rocketId }, { $addToSet: { importIds: channel.id } }\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tusers = []\n\t\t\t\t\t\t\tfor member in channel.members when member isnt channel.creator\n\t\t\t\t\t\t\t\tuser = @getRocketUser member\n\t\t\t\t\t\t\t\tif user?\n\t\t\t\t\t\t\t\t\tusers.push user.username\n\n\t\t\t\t\t\t\tuserId = startedByUserId\n\t\t\t\t\t\t\tfor user in @users.users when user.id is channel.creator and user.do_import\n\t\t\t\t\t\t\t\tuserId = user.rocketId\n\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\treturned = Meteor.call 'createChannel', channel.name, users\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid\n\n\t\t\t\t\t\t\t# @TODO implement model specific function\n\t\t\t\t\t\t\troomUpdate =\n\t\t\t\t\t\t\t\tts: new Date(channel.created * 1000)\n\n\t\t\t\t\t\t\tif not _.isEmpty channel.topic?.value\n\t\t\t\t\t\t\t\troomUpdate.topic = channel.topic.value\n\n\t\t\t\t\t\t\tif not _.isEmpty(channel.purpose?.value)\n\t\t\t\t\t\t\t\troomUpdate.description = channel.purpose.value\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update { _id: channel.rocketId }, { $set: roomUpdate, $addToSet: { importIds: channel.id } }\n\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\t\tmissedTypes = {}\n\t\t\tignoreTypes = { 'bot_add': true, 'file_comment': true, 'file_mention': true }\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_MESSAGES\n\t\t\tfor channel, messagesObj of @messages\n\t\t\t\tdo (channel, messagesObj) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tslackChannel = @getSlackChannelFromName channel\n\t\t\t\t\t\tif slackChannel?.do_import\n\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById slackChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } }\n\t\t\t\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}.#{msgs.messages.length}\" }\n\t\t\t\t\t\t\t\tfor message in msgs.messages\n\t\t\t\t\t\t\t\t\tmsgDataDefaults =\n\t\t\t\t\t\t\t\t\t\t_id: \"slack-#{slackChannel.id}-#{message.ts.replace(/\\./g, '-')}\"\n\t\t\t\t\t\t\t\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000)\n\n\t\t\t\t\t\t\t\t\tif message.type is 'message'\n\t\t\t\t\t\t\t\t\t\tif message.subtype?\n\t\t\t\t\t\t\t\t\t\t\tif message.subtype is 'channel_join'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser room._id, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_leave'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser room._id, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'me_message'\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg: \"_#{@convertSlackMessageToRocketChat(message.text)}_\"\n\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage @getRocketUser(message.user), msgObj, room, true\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'bot_message' or message.subtype is 'slackbot_response'\n\t\t\t\t\t\t\t\t\t\t\t\tbotUser = RocketChat.models.Users.findOneById 'rocket.cat', { fields: { username: 1 }}\n\t\t\t\t\t\t\t\t\t\t\t\tbotUsername = if @bots[message.bot_id] then @bots[message.bot_id]?.name else message.username\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg: @convertSlackMessageToRocketChat(message.text)\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t\tbot: true\n\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: message.attachments\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: if botUsername then botUsername else undefined\n\n\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\n\t\t\t\t\t\t\t\t\t\t\t\tif message.edited?\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t\t\t\t\t\t\t\teditedBy = @getRocketUser(message.edited.user)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif editedBy?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username\n\n\t\t\t\t\t\t\t\t\t\t\t\tif message.icons?\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.emoji = message.icons.emoji\n\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage botUser, msgObj, room, true\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_purpose'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser 'room_changed_description', room._id, message.purpose, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_topic'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser 'room_changed_topic', room._id, message.topic, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_name'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser room._id, message.name, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'pinned_item'\n\t\t\t\t\t\t\t\t\t\t\t\tif message.attachments\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"text\" : @convertSlackMessageToRocketChat message.attachments[0].text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"author_name\" : message.attachments[0].author_subname\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"author_icon\" : getAvatarUrlFromUsername(message.attachments[0].author_subname)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgObj\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t#TODO: make this better\n\t\t\t\t\t\t\t\t\t\t\t\t\t@logger.debug('Pinned item with no attachment, needs work.');\n\t\t\t\t\t\t\t\t\t\t\t\t\t#RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'file_share'\n\t\t\t\t\t\t\t\t\t\t\t\tif message.file?.url_private_download isnt undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\tdetails =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage_id: \"slack-#{message.ts.replace(/\\./g, '-')}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: message.file.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize: message.file.size\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: message.file.mimetype\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t\t@uploadFile details, message.file.url_private_download, @getRocketUser(message.user), room, new Date(parseInt(message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tif not missedTypes[message.subtype] and not ignoreTypes[message.subtype]\n\t\t\t\t\t\t\t\t\t\t\t\t\tmissedTypes[message.subtype] = message\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tuser = @getRocketUser(message.user)\n\t\t\t\t\t\t\t\t\t\t\tif user?\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg: @convertSlackMessageToRocketChat message.text\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t\tu:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\n\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\n\t\t\t\t\t\t\t\t\t\t\t\tif message.edited?\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t\t\t\t\t\t\t\teditedBy = @getRocketUser(message.edited.user)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif editedBy?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username\n\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage @getRocketUser(message.user), msgObj, room, true\n\n\t\t\t\t\t\t\t\t\t# Process the reactions\n\t\t\t\t\t\t\t\t\tif RocketChat.models.Messages.findOneById(msgDataDefaults._id)? and message.reactions?.length > 0\n\t\t\t\t\t\t\t\t\t\tfor reaction in message.reactions\n\t\t\t\t\t\t\t\t\t\t\tfor u in reaction.users\n\t\t\t\t\t\t\t\t\t\t\t\trcUser = @getRocketUser(u)\n\t\t\t\t\t\t\t\t\t\t\t\tif rcUser?\n\t\t\t\t\t\t\t\t\t\t\t\t\tMeteor.runAsUser rcUser._id, () =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMeteor.call 'setReaction', \":#{reaction.name}:\", msgDataDefaults._id\n\n\t\t\t\t\t\t\t\t\t@addCountCompleted 1\n\n\t\t\tif not _.isEmpty missedTypes\n\t\t\t\tconsole.log 'Missed import types:', missedTypes\n\n\t\t\t@updateProgress Importer.ProgressStep.FINISHING\n\t\t\tfor channel in @channels.channels when channel.do_import and channel.is_archived\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tMeteor.call 'archiveRoom', channel.rocketId\n\n\t\t\t@updateProgress Importer.ProgressStep.DONE\n\t\t\ttimeTook = Date.now() - start\n\t\t\t@logger.log \"Import took #{timeTook} milliseconds.\"\n\n\t\treturn @getProgress()\n\n\tgetSlackChannelFromName: (channelName) =>\n\t\tfor channel in @channels.channels when channel.name is channelName\n\t\t\treturn channel\n\n\tgetRocketUser: (slackId) =>\n\t\tfor user in @users.users when user.id is slackId\n\t\t\treturn RocketChat.models.Users.findOneById user.rocketId, { fields: { username: 1, name: 1 }}\n\n\tconvertSlackMessageToRocketChat: (message) =>\n\t\tif message?\n\t\t\tmessage = message.replace /<!everyone>/g, '@all'\n\t\t\tmessage = message.replace /<!channel>/g, '@all'\n\t\t\tmessage = message.replace /<!here>/g, '@here'\n\t\t\tmessage = message.replace /&gt;/g, '>'\n\t\t\tmessage = message.replace /&lt;/g, '<'\n\t\t\tmessage = message.replace /&amp;/g, '&'\n\t\t\tmessage = message.replace /:simple_smile:/g, ':smile:'\n\t\t\tmessage = message.replace /:memo:/g, ':pencil:'\n\t\t\tmessage = message.replace /:piggy:/g, ':pig:'\n\t\t\tmessage = message.replace /:uk:/g, ':gb:'\n\t\t\tmessage = message.replace /<(http[s]?:[^>]*)>/g, '$1'\n\t\t\tfor userReplace in @userTags\n\t\t\t\tmessage = message.replace userReplace.slack, userReplace.rocket\n\t\t\t\tmessage = message.replace userReplace.slackLong, userReplace.rocket\n\t\telse\n\t\t\tmessage = ''\n\t\treturn message\n\n\tgetSelection: () =>\n\t\tselectionUsers = @users.users.map (user) ->\n\t\t\treturn new Importer.SelectionUser user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot\n\t\tselectionChannels = @channels.channels.map (channel) ->\n\t\t\treturn new Importer.SelectionChannel channel.id, channel.name, channel.is_archived, true, false\n\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n","var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nImporter.Slack = Importer.Slack = (function(superClass) {\n  extend(Slack, superClass);\n\n  function Slack(name, descriptionI18N, mimeType) {\n    this.getSelection = bind(this.getSelection, this);\n    this.convertSlackMessageToRocketChat = bind(this.convertSlackMessageToRocketChat, this);\n    this.getRocketUser = bind(this.getRocketUser, this);\n    this.getSlackChannelFromName = bind(this.getSlackChannelFromName, this);\n    this.startImport = bind(this.startImport, this);\n    this.prepare = bind(this.prepare, this);\n    Slack.__super__.constructor.call(this, name, descriptionI18N, mimeType);\n    this.userTags = [];\n    this.bots = {};\n    this.logger.debug('Constructed a new Slack Importer.');\n  }\n\n  Slack.prototype.prepare = function(dataURI, sentContentType, fileName) {\n    var channel, channelsId, contentType, entry, fn, fn1, image, j, len, messagesCount, messagesObj, ref, selectionChannels, selectionUsers, tempChannels, tempMessages, tempUsers, usersId, zip, zipEntries;\n    Slack.__super__.prepare.call(this, dataURI, sentContentType, fileName);\n    ref = RocketChatFile.dataURIParse(dataURI), image = ref.image, contentType = ref.contentType;\n    zip = new this.AdmZip(new Buffer(image, 'base64'));\n    zipEntries = zip.getEntries();\n    tempChannels = [];\n    tempUsers = [];\n    tempMessages = {};\n    fn = (function(_this) {\n      return function(entry) {\n        var channelName, item, k, len1, msgGroupData, results, user;\n        if (entry.entryName.indexOf('__MACOSX') > -1) {\n          return _this.logger.debug(\"Ignoring the file: \" + entry.entryName);\n        } else if (entry.entryName === 'channels.json') {\n          _this.updateProgress(Importer.ProgressStep.PREPARING_CHANNELS);\n          tempChannels = JSON.parse(entry.getData().toString());\n          return tempChannels = tempChannels.filter(function(channel) {\n            return channel.creator != null;\n          });\n        } else if (entry.entryName === 'users.json') {\n          _this.updateProgress(Importer.ProgressStep.PREPARING_USERS);\n          tempUsers = JSON.parse(entry.getData().toString());\n          results = [];\n          for (k = 0, len1 = tempUsers.length; k < len1; k++) {\n            user = tempUsers[k];\n            if (user.is_bot) {\n              results.push(_this.bots[user.profile.bot_id] = user);\n            }\n          }\n          return results;\n        } else if (!entry.isDirectory && entry.entryName.indexOf('/') > -1) {\n          item = entry.entryName.split('/');\n          channelName = item[0];\n          msgGroupData = item[1].split('.')[0];\n          if (!tempMessages[channelName]) {\n            tempMessages[channelName] = {};\n          }\n          try {\n            return tempMessages[channelName][msgGroupData] = JSON.parse(entry.getData().toString());\n          } catch (error1) {\n            return _this.logger.warn(entry.entryName + \" is not a valid JSON file! Unable to import it.\");\n          }\n        }\n      };\n    })(this);\n    for (j = 0, len = zipEntries.length; j < len; j++) {\n      entry = zipEntries[j];\n      fn(entry);\n    }\n    usersId = this.collection.insert({\n      'import': this.importRecord._id,\n      'importer': this.name,\n      'type': 'users',\n      'users': tempUsers\n    });\n    this.users = this.collection.findOne(usersId);\n    this.updateRecord({\n      'count.users': tempUsers.length\n    });\n    this.addCountToTotal(tempUsers.length);\n    channelsId = this.collection.insert({\n      'import': this.importRecord._id,\n      'importer': this.name,\n      'type': 'channels',\n      'channels': tempChannels\n    });\n    this.channels = this.collection.findOne(channelsId);\n    this.updateRecord({\n      'count.channels': tempChannels.length\n    });\n    this.addCountToTotal(tempChannels.length);\n    this.updateProgress(Importer.ProgressStep.PREPARING_MESSAGES);\n    messagesCount = 0;\n    fn1 = (function(_this) {\n      return function(channel, messagesObj) {\n        var date, i, messagesId, msgs, results, splitMsg;\n        if (!_this.messages[channel]) {\n          _this.messages[channel] = {};\n        }\n        results = [];\n        for (date in messagesObj) {\n          msgs = messagesObj[date];\n          messagesCount += msgs.length;\n          _this.updateRecord({\n            'messagesstatus': channel + \"/\" + date\n          });\n          if (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n            results.push((function() {\n              var k, len1, ref1, results1;\n              ref1 = Importer.Base.getBSONSafeArraysFromAnArray(msgs);\n              results1 = [];\n              for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {\n                splitMsg = ref1[i];\n                messagesId = this.collection.insert({\n                  'import': this.importRecord._id,\n                  'importer': this.name,\n                  'type': 'messages',\n                  'name': channel + \"/\" + date + \".\" + i,\n                  'messages': splitMsg\n                });\n                results1.push(this.messages[channel][date + \".\" + i] = this.collection.findOne(messagesId));\n              }\n              return results1;\n            }).call(_this));\n          } else {\n            messagesId = _this.collection.insert({\n              'import': _this.importRecord._id,\n              'importer': _this.name,\n              'type': 'messages',\n              'name': channel + \"/\" + date,\n              'messages': msgs\n            });\n            results.push(_this.messages[channel][date] = _this.collection.findOne(messagesId));\n          }\n        }\n        return results;\n      };\n    })(this);\n    for (channel in tempMessages) {\n      messagesObj = tempMessages[channel];\n      fn1(channel, messagesObj);\n    }\n    this.updateRecord({\n      'count.messages': messagesCount,\n      'messagesstatus': null\n    });\n    this.addCountToTotal(messagesCount);\n    if (tempUsers.length === 0 || tempChannels.length === 0 || messagesCount === 0) {\n      this.logger.warn(\"The loaded users count \" + tempUsers.length + \", the loaded channels \" + tempChannels.length + \", and the loaded messages \" + messagesCount);\n      this.updateProgress(Importer.ProgressStep.ERROR);\n      return this.getProgress();\n    }\n    selectionUsers = tempUsers.map(function(user) {\n      return new Importer.SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot);\n    });\n    selectionChannels = tempChannels.map(function(channel) {\n      return new Importer.SelectionChannel(channel.id, channel.name, channel.is_archived, true, false);\n    });\n    this.updateProgress(Importer.ProgressStep.USER_SELECTION);\n    return new Importer.Selection(this.name, selectionUsers, selectionChannels);\n  };\n\n  Slack.prototype.startImport = function(importSelection) {\n    var c, channel, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, start, startedByUserId, u, user;\n    Slack.__super__.startImport.call(this, importSelection);\n    start = Date.now();\n    ref = importSelection.users;\n    for (j = 0, len = ref.length; j < len; j++) {\n      user = ref[j];\n      ref1 = this.users.users;\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        u = ref1[k];\n        if (u.id === user.user_id) {\n          u.do_import = user.do_import;\n        }\n      }\n    }\n    this.collection.update({\n      _id: this.users._id\n    }, {\n      $set: {\n        'users': this.users.users\n      }\n    });\n    ref2 = importSelection.channels;\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      channel = ref2[l];\n      ref3 = this.channels.channels;\n      for (m = 0, len3 = ref3.length; m < len3; m++) {\n        c = ref3[m];\n        if (c.id === channel.channel_id) {\n          c.do_import = channel.do_import;\n        }\n      }\n    }\n    this.collection.update({\n      _id: this.channels._id\n    }, {\n      $set: {\n        'channels': this.channels.channels\n      }\n    });\n    startedByUserId = Meteor.userId();\n    Meteor.defer((function(_this) {\n      return function() {\n        var fn, ignoreTypes, len4, len5, len6, messagesObj, missedTypes, n, o, p, ref4, ref5, ref6, ref7, timeTook;\n        _this.updateProgress(Importer.ProgressStep.IMPORTING_USERS);\n        ref4 = _this.users.users;\n        for (n = 0, len4 = ref4.length; n < len4; n++) {\n          user = ref4[n];\n          if (user.do_import) {\n            (function(user) {\n              return Meteor.runAsUser(startedByUserId, function() {\n                var existantUser, userId;\n                existantUser = RocketChat.models.Users.findOneByEmailAddress(user.profile.email);\n                if (!existantUser) {\n                  existantUser = RocketChat.models.Users.findOneByUsername(user.name);\n                }\n                if (existantUser) {\n                  user.rocketId = existantUser._id;\n                  RocketChat.models.Users.update({\n                    _id: user.rocketId\n                  }, {\n                    $addToSet: {\n                      importIds: user.id\n                    }\n                  });\n                  _this.userTags.push({\n                    slack: \"<@\" + user.id + \">\",\n                    slackLong: \"<@\" + user.id + \"|\" + user.name + \">\",\n                    rocket: \"@\" + existantUser.username\n                  });\n                } else {\n                  if (user.profile.email) {\n                    userId = Accounts.createUser({\n                      email: user.profile.email,\n                      password: Date.now() + user.name + user.profile.email.toUpperCase()\n                    });\n                  } else {\n                    userId = Accounts.createUser({\n                      username: user.name,\n                      password: Date.now() + user.name,\n                      joinDefaultChannelsSilenced: true\n                    });\n                  }\n                  Meteor.runAsUser(userId, function() {\n                    var error, url;\n                    Meteor.call('setUsername', user.name, {\n                      joinDefaultChannelsSilenced: true\n                    });\n                    url = null;\n                    if (user.profile.image_original) {\n                      url = user.profile.image_original;\n                    } else if (user.profile.image_512) {\n                      url = user.profile.image_512;\n                    }\n                    try {\n                      Meteor.call('setAvatarFromService', url, void 0, 'url');\n                    } catch (error1) {\n                      error = error1;\n                      _this.logger.warn(\"Failed to set \" + user.name + \"'s avatar from url \" + url);\n                    }\n                    if (user.tz_offset) {\n                      return Meteor.call('userSetUtcOffset', user.tz_offset / 3600);\n                    }\n                  });\n                  RocketChat.models.Users.update({\n                    _id: userId\n                  }, {\n                    $addToSet: {\n                      importIds: user.id\n                    }\n                  });\n                  if (user.profile.real_name) {\n                    RocketChat.models.Users.setName(userId, user.profile.real_name);\n                  }\n                  if (user.deleted) {\n                    Meteor.call('setUserActiveStatus', userId, false);\n                  }\n                  user.rocketId = userId;\n                  _this.userTags.push({\n                    slack: \"<@\" + user.id + \">\",\n                    slackLong: \"<@\" + user.id + \"|\" + user.name + \">\",\n                    rocket: \"@\" + user.name\n                  });\n                }\n                return _this.addCountCompleted(1);\n              });\n            })(user);\n          }\n        }\n        _this.collection.update({\n          _id: _this.users._id\n        }, {\n          $set: {\n            'users': _this.users.users\n          }\n        });\n        _this.updateProgress(Importer.ProgressStep.IMPORTING_CHANNELS);\n        ref5 = _this.channels.channels;\n        for (o = 0, len5 = ref5.length; o < len5; o++) {\n          channel = ref5[o];\n          if (channel.do_import) {\n            (function(channel) {\n              return Meteor.runAsUser(startedByUserId, function() {\n                var existantRoom, len6, len7, member, p, q, ref6, ref7, ref8, ref9, roomUpdate, userId, users;\n                existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n                if (existantRoom || channel.is_general) {\n                  if (channel.is_general && channel.name !== (existantRoom != null ? existantRoom.name : void 0)) {\n                    Meteor.call('saveRoomSettings', 'GENERAL', 'roomName', channel.name);\n                  }\n                  channel.rocketId = channel.is_general ? 'GENERAL' : existantRoom._id;\n                  RocketChat.models.Rooms.update({\n                    _id: channel.rocketId\n                  }, {\n                    $addToSet: {\n                      importIds: channel.id\n                    }\n                  });\n                } else {\n                  users = [];\n                  ref6 = channel.members;\n                  for (p = 0, len6 = ref6.length; p < len6; p++) {\n                    member = ref6[p];\n                    if (!(member !== channel.creator)) {\n                      continue;\n                    }\n                    user = _this.getRocketUser(member);\n                    if (user != null) {\n                      users.push(user.username);\n                    }\n                  }\n                  userId = startedByUserId;\n                  ref7 = _this.users.users;\n                  for (q = 0, len7 = ref7.length; q < len7; q++) {\n                    user = ref7[q];\n                    if (user.id === channel.creator && user.do_import) {\n                      userId = user.rocketId;\n                    }\n                  }\n                  Meteor.runAsUser(userId, function() {\n                    var returned;\n                    returned = Meteor.call('createChannel', channel.name, users);\n                    return channel.rocketId = returned.rid;\n                  });\n                  roomUpdate = {\n                    ts: new Date(channel.created * 1000)\n                  };\n                  if (!_.isEmpty((ref8 = channel.topic) != null ? ref8.value : void 0)) {\n                    roomUpdate.topic = channel.topic.value;\n                  }\n                  if (!_.isEmpty((ref9 = channel.purpose) != null ? ref9.value : void 0)) {\n                    roomUpdate.description = channel.purpose.value;\n                  }\n                  RocketChat.models.Rooms.update({\n                    _id: channel.rocketId\n                  }, {\n                    $set: roomUpdate,\n                    $addToSet: {\n                      importIds: channel.id\n                    }\n                  });\n                }\n                return _this.addCountCompleted(1);\n              });\n            })(channel);\n          }\n        }\n        _this.collection.update({\n          _id: _this.channels._id\n        }, {\n          $set: {\n            'channels': _this.channels.channels\n          }\n        });\n        missedTypes = {};\n        ignoreTypes = {\n          'bot_add': true,\n          'file_comment': true,\n          'file_mention': true\n        };\n        _this.updateProgress(Importer.ProgressStep.IMPORTING_MESSAGES);\n        ref6 = _this.messages;\n        fn = function(channel, messagesObj) {\n          return Meteor.runAsUser(startedByUserId, function() {\n            var botUser, botUsername, date, details, editedBy, message, msgDataDefaults, msgObj, msgs, rcUser, reaction, results, room, slackChannel;\n            slackChannel = _this.getSlackChannelFromName(channel);\n            if (slackChannel != null ? slackChannel.do_import : void 0) {\n              room = RocketChat.models.Rooms.findOneById(slackChannel.rocketId, {\n                fields: {\n                  usernames: 1,\n                  t: 1,\n                  name: 1\n                }\n              });\n              results = [];\n              for (date in messagesObj) {\n                msgs = messagesObj[date];\n                _this.updateRecord({\n                  'messagesstatus': channel + \"/\" + date + \".\" + msgs.messages.length\n                });\n                results.push((function() {\n                  var len6, len7, len8, p, q, r, ref10, ref11, ref12, ref7, ref8, ref9, results1;\n                  ref7 = msgs.messages;\n                  results1 = [];\n                  for (p = 0, len6 = ref7.length; p < len6; p++) {\n                    message = ref7[p];\n                    msgDataDefaults = {\n                      _id: \"slack-\" + slackChannel.id + \"-\" + (message.ts.replace(/\\./g, '-')),\n                      ts: new Date(parseInt(message.ts.split('.')[0]) * 1000)\n                    };\n                    if (message.type === 'message') {\n                      if (message.subtype != null) {\n                        if (message.subtype === 'channel_join') {\n                          if (this.getRocketUser(message.user) != null) {\n                            RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n                          }\n                        } else if (message.subtype === 'channel_leave') {\n                          if (this.getRocketUser(message.user) != null) {\n                            RocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n                          }\n                        } else if (message.subtype === 'me_message') {\n                          msgObj = {\n                            msg: \"_\" + (this.convertSlackMessageToRocketChat(message.text)) + \"_\"\n                          };\n                          _.extend(msgObj, msgDataDefaults);\n                          RocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n                        } else if (message.subtype === 'bot_message' || message.subtype === 'slackbot_response') {\n                          botUser = RocketChat.models.Users.findOneById('rocket.cat', {\n                            fields: {\n                              username: 1\n                            }\n                          });\n                          botUsername = this.bots[message.bot_id] ? (ref8 = this.bots[message.bot_id]) != null ? ref8.name : void 0 : message.username;\n                          msgObj = {\n                            msg: this.convertSlackMessageToRocketChat(message.text),\n                            rid: room._id,\n                            bot: true,\n                            attachments: message.attachments,\n                            username: botUsername ? botUsername : void 0\n                          };\n                          _.extend(msgObj, msgDataDefaults);\n                          if (message.edited != null) {\n                            msgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n                            editedBy = this.getRocketUser(message.edited.user);\n                            if (editedBy != null) {\n                              msgObj.editedBy = {\n                                _id: editedBy._id,\n                                username: editedBy.username\n                              };\n                            }\n                          }\n                          if (message.icons != null) {\n                            msgObj.emoji = message.icons.emoji;\n                          }\n                          RocketChat.sendMessage(botUser, msgObj, room, true);\n                        } else if (message.subtype === 'channel_purpose') {\n                          if (this.getRocketUser(message.user) != null) {\n                            RocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_description', room._id, message.purpose, this.getRocketUser(message.user), msgDataDefaults);\n                          }\n                        } else if (message.subtype === 'channel_topic') {\n                          if (this.getRocketUser(message.user) != null) {\n                            RocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, message.topic, this.getRocketUser(message.user), msgDataDefaults);\n                          }\n                        } else if (message.subtype === 'channel_name') {\n                          if (this.getRocketUser(message.user) != null) {\n                            RocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(room._id, message.name, this.getRocketUser(message.user), msgDataDefaults);\n                          }\n                        } else if (message.subtype === 'pinned_item') {\n                          if (message.attachments) {\n                            msgObj = {\n                              attachments: [\n                                {\n                                  \"text\": this.convertSlackMessageToRocketChat(message.attachments[0].text),\n                                  \"author_name\": message.attachments[0].author_subname,\n                                  \"author_icon\": getAvatarUrlFromUsername(message.attachments[0].author_subname)\n                                }\n                              ]\n                            };\n                            _.extend(msgObj, msgDataDefaults);\n                            RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser('message_pinned', room._id, '', this.getRocketUser(message.user), msgObj);\n                          } else {\n                            this.logger.debug('Pinned item with no attachment, needs work.');\n                          }\n                        } else if (message.subtype === 'file_share') {\n                          if (((ref9 = message.file) != null ? ref9.url_private_download : void 0) !== void 0) {\n                            details = {\n                              message_id: \"slack-\" + (message.ts.replace(/\\./g, '-')),\n                              name: message.file.name,\n                              size: message.file.size,\n                              type: message.file.mimetype,\n                              rid: room._id\n                            };\n                            this.uploadFile(details, message.file.url_private_download, this.getRocketUser(message.user), room, new Date(parseInt(message.ts.split('.')[0]) * 1000));\n                          }\n                        } else {\n                          if (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n                            missedTypes[message.subtype] = message;\n                          }\n                        }\n                      } else {\n                        user = this.getRocketUser(message.user);\n                        if (user != null) {\n                          msgObj = {\n                            msg: this.convertSlackMessageToRocketChat(message.text),\n                            rid: room._id,\n                            u: {\n                              _id: user._id,\n                              username: user.username\n                            }\n                          };\n                          _.extend(msgObj, msgDataDefaults);\n                          if (message.edited != null) {\n                            msgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n                            editedBy = this.getRocketUser(message.edited.user);\n                            if (editedBy != null) {\n                              msgObj.editedBy = {\n                                _id: editedBy._id,\n                                username: editedBy.username\n                              };\n                            }\n                          }\n                          RocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n                        }\n                      }\n                    }\n                    if ((RocketChat.models.Messages.findOneById(msgDataDefaults._id) != null) && ((ref10 = message.reactions) != null ? ref10.length : void 0) > 0) {\n                      ref11 = message.reactions;\n                      for (q = 0, len7 = ref11.length; q < len7; q++) {\n                        reaction = ref11[q];\n                        ref12 = reaction.users;\n                        for (r = 0, len8 = ref12.length; r < len8; r++) {\n                          u = ref12[r];\n                          rcUser = this.getRocketUser(u);\n                          if (rcUser != null) {\n                            Meteor.runAsUser(rcUser._id, (function(_this) {\n                              return function() {\n                                return Meteor.call('setReaction', \":\" + reaction.name + \":\", msgDataDefaults._id);\n                              };\n                            })(this));\n                          }\n                        }\n                      }\n                    }\n                    results1.push(this.addCountCompleted(1));\n                  }\n                  return results1;\n                }).call(_this));\n              }\n              return results;\n            }\n          });\n        };\n        for (channel in ref6) {\n          messagesObj = ref6[channel];\n          fn(channel, messagesObj);\n        }\n        if (!_.isEmpty(missedTypes)) {\n          console.log('Missed import types:', missedTypes);\n        }\n        _this.updateProgress(Importer.ProgressStep.FINISHING);\n        ref7 = _this.channels.channels;\n        for (p = 0, len6 = ref7.length; p < len6; p++) {\n          channel = ref7[p];\n          if (channel.do_import && channel.is_archived) {\n            (function(channel) {\n              return Meteor.runAsUser(startedByUserId, function() {\n                return Meteor.call('archiveRoom', channel.rocketId);\n              });\n            })(channel);\n          }\n        }\n        _this.updateProgress(Importer.ProgressStep.DONE);\n        timeTook = Date.now() - start;\n        return _this.logger.log(\"Import took \" + timeTook + \" milliseconds.\");\n      };\n    })(this));\n    return this.getProgress();\n  };\n\n  Slack.prototype.getSlackChannelFromName = function(channelName) {\n    var channel, j, len, ref;\n    ref = this.channels.channels;\n    for (j = 0, len = ref.length; j < len; j++) {\n      channel = ref[j];\n      if (channel.name === channelName) {\n        return channel;\n      }\n    }\n  };\n\n  Slack.prototype.getRocketUser = function(slackId) {\n    var j, len, ref, user;\n    ref = this.users.users;\n    for (j = 0, len = ref.length; j < len; j++) {\n      user = ref[j];\n      if (user.id === slackId) {\n        return RocketChat.models.Users.findOneById(user.rocketId, {\n          fields: {\n            username: 1,\n            name: 1\n          }\n        });\n      }\n    }\n  };\n\n  Slack.prototype.convertSlackMessageToRocketChat = function(message) {\n    var j, len, ref, userReplace;\n    if (message != null) {\n      message = message.replace(/<!everyone>/g, '@all');\n      message = message.replace(/<!channel>/g, '@all');\n      message = message.replace(/<!here>/g, '@here');\n      message = message.replace(/&gt;/g, '>');\n      message = message.replace(/&lt;/g, '<');\n      message = message.replace(/&amp;/g, '&');\n      message = message.replace(/:simple_smile:/g, ':smile:');\n      message = message.replace(/:memo:/g, ':pencil:');\n      message = message.replace(/:piggy:/g, ':pig:');\n      message = message.replace(/:uk:/g, ':gb:');\n      message = message.replace(/<(http[s]?:[^>]*)>/g, '$1');\n      ref = this.userTags;\n      for (j = 0, len = ref.length; j < len; j++) {\n        userReplace = ref[j];\n        message = message.replace(userReplace.slack, userReplace.rocket);\n        message = message.replace(userReplace.slackLong, userReplace.rocket);\n      }\n    } else {\n      message = '';\n    }\n    return message;\n  };\n\n  Slack.prototype.getSelection = function() {\n    var selectionChannels, selectionUsers;\n    selectionUsers = this.users.users.map(function(user) {\n      return new Importer.SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot);\n    });\n    selectionChannels = this.channels.channels.map(function(channel) {\n      return new Importer.SelectionChannel(channel.id, channel.name, channel.is_archived, true, false);\n    });\n    return new Importer.Selection(this.name, selectionUsers, selectionChannels);\n  };\n\n  return Slack;\n\n})(Importer.Base);\n","Importer.addImporter 'slack', Importer.Slack,\n\tname: 'Slack'\n\tmimeType: 'application/zip'\n"]}