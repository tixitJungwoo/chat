{
  "_args": [
    [
      {
        "raw": "prom-client@https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
        "scope": null,
        "escapedName": "prom-client",
        "name": "prom-client",
        "rawSpec": "https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
        "spec": "https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
        "type": "remote"
      },
      "/app/lilychat/packages/rocketchat-lib/.npm/package-new-hrc3ty"
    ]
  ],
  "_from": "prom-client@7.0.1",
  "_id": "prom-client@7.0.1",
  "_inCache": true,
  "_location": "/prom-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "prom-client@https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
    "scope": null,
    "escapedName": "prom-client",
    "name": "prom-client",
    "rawSpec": "https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
    "spec": "https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
  "_shasum": "fa93ba31b76554b2ef1160be804762a9f6f3afe4",
  "_shrinkwrap": null,
  "_spec": "prom-client@https://registry.npmjs.org/prom-client/-/prom-client-7.0.1.tgz",
  "_where": "/app/lilychat/packages/rocketchat-lib/.npm/package-new-hrc3ty",
  "author": {
    "name": "Simon Nyberg"
  },
  "bugs": {
    "url": "https://github.com/siimon/prom-client/issues"
  },
  "dependencies": {
    "tdigest": "^0.1.1",
    "util-extend": "^1.0.1"
  },
  "description": "Client for prometheus",
  "devDependencies": {
    "chai": "^3.4.1",
    "eslint": "^3.5.0",
    "express": "^4.13.3",
    "mocha": "^2.3.4",
    "mockery": "^2.0.0",
    "nock": "^8.0.0",
    "node-version-check": "^2.1.1",
    "sinon": "^1.17.2",
    "typescript": "^2.0.3"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "lib/",
    "index.js",
    "index.d.ts"
  ],
  "homepage": "https://github.com/siimon/prom-client",
  "keywords": [
    "Prometheus",
    "Metrics",
    "Client"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "prom-client",
  "optionalDependencies": {},
  "readme": "# Prometheus client for node.js [![Build Status](https://travis-ci.org/siimon/prom-client.svg?branch=master)](https://travis-ci.org/siimon/prom-client) [![Build status](https://ci.appveyor.com/api/projects/status/k2e0gwonkcee3lp9/branch/master?svg=true)](https://ci.appveyor.com/project/siimon/prom-client/branch/master)\n\nA prometheus client for node.js that supports histogram, summaries, gauges and counters.\n\n### Usage\n\nSee example folder for a sample usage. The library does not bundle any web framework, to expose the metrics just return the metrics() function in the registry.\n\n### API\n\n#### Configuration\n\nAll metric types has 2 mandatory parameters, name and help.\n\n#### Default metrics\n\nThere are some default metrics recommended by Prometheus\n[itself](https://prometheus.io/docs/instrumenting/writing_clientlibs/#standard-and-runtime-collectors). These metrics are collected\nautomatically for you when you do `require('prom-client')`.\n\nNOTE: Some of the metrics, concerning File Descriptors and Memory, are only available on Linux.\n\nIn addition, some Node-specific metrics are included, such as event loop lag, and active handles. See what metrics there are in\n[lib/metrics](lib/metrics).\n\nThe function returned from `defaultMetrics` takes 2 options, a blacklist of metrics to skip, and a timeout for how often the probe should\nbe fired. By default all probes are launched every 10 seconds, but this can be modified like this:\n\n```js\nvar client = require('prom-client');\n\nvar defaultMetrics = client.defaultMetrics;\n\n// Skip `osMemoryHeap` probe, and probe every 5th second.\ndefaultMetrics(['osMemoryHeap'], 5000);\n````\n\nYou can get the full list of metrics by inspecting `client.defaultMetrics.metricsList`.\n\n`defaultMetrics` returns an identification when invoked, which is a reference to the `Timer` used to keep the probes going. This can be\npassed to `clearInterval` in order to stop all probes.\n\nNOTE: Existing intervals are automatically cleared when calling `defaultMetrics`.\n\n```js\nvar client = require('prom-client');\n\nvar defaultMetrics = client.defaultMetrics;\n\nvar interval = defaultMetrics();\n\n// ... some time later\n\nclearInterval(interval);\n````\n\nNOTE: `unref` is called on the `interval` internally, so it will not keep your node process going indefinitely if it's the only thing\nkeeping it from shutting down.\n\n##### Disabling default metrics\n\nTo disable collecting the default metrics, you have to call the function and pass it to `clearInterval`.\n\n```js\nvar client = require('prom-client');\n\nclearInterval(client.defaultMetrics());\n\n// Clear the register\nclient.register.clear();\n```\n\n#### Counter\n\nCounters go up, and reset when the process restarts.\n\n```js\nvar client = require('prom-client');\nvar counter = new client.Counter('metric_name', 'metric_help');\ncounter.inc(); // Inc with 1\ncounter.inc(10); // Inc with 10\n```\n\n#### Gauge\n\nGauges are similar to Counters but Gauges value can be decreased.\n\n```js\nvar client = require('prom-client');\nvar gauge = new client.Gauge('metric_name', 'metric_help');\ngauge.set(10); // Set to 10\ngauge.inc(); // Inc with 1\ngauge.inc(10); // Inc with 10\ngauge.dec(); // Dec with 1\ngauge.dec(10); // Dec with 10\n```\n\nThere are some utilities for common use cases:\n\n```js\ngauge.setToCurrentTime(); // Sets value to current time\n\nvar end = gauge.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Sets value to xhrRequests duration in seconds\n});\n```\n\n#### Histogram\n\nHistograms track sizes and frequency of events.  \n\n**Configuration**\n\nThe defaults buckets are intended to cover usual web/rpc requests, this can however be overriden.\n```js\nvar client = require('prom-client');\nnew client.Histogram('metric_name', 'metric_help', {\n\tbuckets: [ 0.10, 5, 15, 50, 100, 500 ]\n});\n```\n\nExamples\n\n```js\nvar client = require('prom-client');\nvar histogram = new client.Histogram('metric_name', 'metric_help');\nhistogram.observe(10); // Observe value in histogram\n```\n\nUtility to observe request durations\n```js\nvar end = histogram.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Observes the value to xhrRequests duration in seconds\n});\n```\n\n#### Summary\n\nSummaries calculate percentiles of observed values.\n\n**Configuration**\n\nThe default percentiles are: 0.01, 0.05, 0.5, 0.9, 0.95, 0.99, 0.999. But they can be overriden like this:\n\n```js\nvar client = require('prom-client');\nnew client.Summary('metric_name', 'metric_help', {\n\tpercentiles: [ 0.01, 0.1, 0.9, 0.99 ]\n});\n```\n\nUsage example\n\n```js\nvar client = require('prom-client');\nvar summary = new client.Summary('metric_name', 'metric_help');\nsummary.observe(10);\n```\n\nUtility to observe request durations\n```js\nvar end = summary.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Observes the value to xhrRequests duration in seconds\n});\n```\n\n#### Labels\n\nAll metrics take an array as 3rd parameter that should include all supported label keys. There are 2 ways to add values to the labels\n```js\nvar client = require('prom-client');\nvar gauge = new client.Gauge('metric_name', 'metric_help', [ 'method', 'statusCode' ]);\n\ngauge.set({ method: 'GET', statusCode: '200' }, 100); // 1st version, Set value 100 with method set to GET and statusCode to 200\ngauge.labels('GET', '200').set(100); // 2nd version, Same as above\n```\n\nIt is also possible to use timers with labels, both before and after the timer is created:\n```js\nvar end = startTimer({ method: 'GET' }); // Set method to GET, we don't know statusCode yet\nxhrRequest(function(err, res) {\n\tif (err) {\n\t\tend({ statusCode: '500' }); // Sets value to xhrRequest duration in seconds with statusCode 500\n\t} else {\n\t\tend({ statusCode: '200' }); // Sets value to xhrRequest duration in seconds with statusCode 200\n\t}\n});\n```\n\n#### Register\n\nYou can get all metrics by running `register.metrics()`, which will output a string for prometheus to consume.\n\n##### Getting a single metric\n\nIf you need to get a reference to a previously registered metric, you can use `register.getSingleMetric(*name of metric*)`.\n\n##### Removing metrics\n\nYou can remove all metrics by calling `register.clear()`. You can also remove a single metric by calling\n`register.removeSingleMetric(*name of metric*)`.\n\n#### Pushgateway\n\nIt is possible to push metrics via a [Pushgateway](https://github.com/prometheus/pushgateway). \n\n```js\nvar client = require('prom-client');\nvar gateway = new client.Pushgateway('http://127.0.0.1:9091');\n\ngateway.pushAdd({ jobName: 'test' }, function(err, resp, body) { }); //Add metric and overwrite old ones\ngateway.push({ jobName: 'test' }, function(err, resp, body) { }); //Overwrite all metrics (use PUT)\ngateway.delete({ jobName: 'test' }, function(err, resp, body) { }); //Delete all metrics for jobName\n\n//All gateway requests can have groupings on it\ngateway.pushAdd({ jobName: 'test', groupings: { key: 'value' } }, function(err, resp, body) { });\n```\n\n\n#### Utilites\n\nFor convenience, there are 2 bucket generator functions - linear and exponential. \n\n```js\nvar client = require('prom-client');\nnew client.Histogram('metric_name', 'metric_help', {\n\tbuckets: client.linearBuckets(0, 10, 20) //Create 20 buckets, starting on 0 and a width of 10\n});\n\nnew client.Histogram('metric_name', 'metric_help', {\n\tbuckets: client.exponentialBuckets(1, 2, 5) //Create 5 buckets, starting on 1 and with a factor of 2\n});\n```\n\n### Garbage Collection\n\nTo avoid dependencies in this module, GC stats are kept outside of it. If you want GC stats, you can use https://github.com/SimenB/node-prometheus-gc-stats\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/siimon/prom-client.git"
  },
  "scripts": {
    "compile-typescript": "tsc index.d.ts --noImplicitAny",
    "lint": "node-version-gte-4 && eslint . || node-version-lt-4",
    "test": "npm run lint && npm run compile-typescript && npm run test-unit",
    "test-unit": "mocha --recursive test/"
  },
  "types": "./index.d.ts",
  "version": "7.0.1"
}
