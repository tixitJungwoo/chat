{
  "_args": [
    [
      {
        "raw": "atlassian-crowd@https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
        "scope": null,
        "escapedName": "atlassian-crowd",
        "name": "atlassian-crowd",
        "rawSpec": "https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
        "spec": "https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
        "type": "remote"
      },
      "/app/lilychat/packages/rocketchat-crowd/.npm/package-new-x0gnuq"
    ]
  ],
  "_from": "atlassian-crowd@0.5.0",
  "_id": "atlassian-crowd@0.5.0",
  "_inCache": true,
  "_location": "/atlassian-crowd",
  "_phantomChildren": {},
  "_requested": {
    "raw": "atlassian-crowd@https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
    "scope": null,
    "escapedName": "atlassian-crowd",
    "name": "atlassian-crowd",
    "rawSpec": "https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
    "spec": "https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
  "_shasum": "8ac745a8783799490d1741fa09cf472e7ff30930",
  "_shrinkwrap": null,
  "_spec": "atlassian-crowd@https://registry.npmjs.org/atlassian-crowd/-/atlassian-crowd-0.5.0.tgz",
  "_where": "/app/lilychat/packages/rocketchat-crowd/.npm/package-new-x0gnuq",
  "author": {
    "name": "Gary Steven",
    "email": "garys@darksidenetworks.com"
  },
  "bugs": {
    "url": "https://github.com/dsn/node-atlassian-crowd/issues"
  },
  "bundledDependancies": [
    "nodeunit",
    "jshint"
  ],
  "contributors": [
    {
      "name": "Teemu Matilainen",
      "email": "teemu.matilainen@iki.fi"
    },
    {
      "name": "Petri Ämmälä"
    },
    {
      "name": "Trevor Hall"
    },
    {
      "name": "rhubarbselleven"
    },
    {
      "name": "fi-nationallibrary-artiva"
    }
  ],
  "dependencies": {},
  "description": "A node.js module to communicate with Atlassian Crowd",
  "devDependancies": {
    "nodeunit": "0.7.4",
    "jshint": "0.9.1"
  },
  "devDependencies": {},
  "engines": {
    "node": ">= 0.6.x"
  },
  "homepage": "https://github.com/dsn/node-atlassian-crowd#readme",
  "keywords": [
    "atlassian",
    "crowd",
    "sso"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "atlassian-crowd",
  "optionalDependencies": {},
  "readme": "I lost access to my crowd server awhile ago and things more or less stopped here, however I have had a handful of requets lately so I am going to restart this project when I get a few moments of free time.\n\n# Atlassian Crowd Client for node.js #\nA node.js module for interacting with the Atlassian Crowd.\n\nProvides the ability to Add, Remove, and Manage Users and Groups as well as SSO functionality.\n\n## Getting Started ##\nIn order to use this module you will first need to configure an application in Atlassian Crowd and Configure the Remote IP Address.\n\nSee the [Atlassian Crowd Documentation (Adding an Application)](https://confluence.atlassian.com/display/CROWD/Adding+an+Application#AddinganApplication-add) for assistance.\n\n## Usage ##\n```javascript\nvar AtlassianCrowd = require('atlassian-crowd');\n\nvar options = {\n  \"crowd\": {\n    \"base\": \"http://localhost:8059/crowd/\" \n  },\n  \"application\": {\n    \"name\": \"my application\",\n    \"password\": \"pass123\"\n  }\n}\n\nvar crowd = new AtlassianCrowd(options);\n```\n\n### Options ###\nIf you do not know these please ask your systems administrator.\n\n`crowd.base` Atlassian Crowd Base URL  \n`application.name` Application name as configured in Atlassian Crowd  \n`application.password` Application name as configured in Atlassian Crowd  \n\n## API ##\n\n#### Testing Configuration and Connectivity ####\nA simple function to check connectivity to Atlassian Crowd.\n\nping(callback)\n\n* callback Function (err, res)\n\n```javascript\ncrowd.ping(function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res)\n  }\n});\n```\n\n#### Search Users or Groups ####\nUses the Crowd Query Language  \nSee [Crowd Query Language Documenation](https://developer.atlassian.com/display/CROWDDEV/Crowd+Query+Language) for more details  \nsearch(entityType, query, callback)\n\n* entityType String 'user' or 'group'\n* query String Crowd Query\n\n#### Search Users #####\n```javascript\ncrowd.search('user', 'firstName=\"test*\"', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n##### Search Groups #####\n```javascript\ncrowd.search('group', 'name=\"*test*\"', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n### User Related Functions ###\nHere you can find utilities for Managing, Creating, Removing, Users as well as Changing Passwords, and Basic Authentication (NON SSO).\n\n#### Finding a User by Username ####\nuser.find(userrname, callback)\n\n* username String\n* callback Function (err, res)\n\n```javascript\ncrowd.user.find('user', function(err, res) {\n  if(err) { \n    throw err;\n   }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Checking if User is Active ####\nuser.active(username, callback)  \n\n* username String\n* callback Function (err, res)\n\n```javascript\ncrowd.user.active('user', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res.toString());\n  }\n});\n```\n\n#### Creating a User ####\nuser.create(firstname, lastname, displayname, email, username, password, callback)  \n\n* firstname String\n* lastname String\n* displayname String\n* email String\n* username String\n* password String\n* callback Function (err)\n\n```javascript\ncrowd.user.create('Test', 'User', 'Test User', 'test@foo.bar', 'testuser', 'abc123', function(err) {\n  if(err) { \n    throw err;\n  }\n  else {\n    console.log('Success')\n  }\n});\n```\n\n#### Removing a User ####\nuser.remove(username, callback)  \n\n* username String\n* callback Function (err)\n\n```javascript\ncrowd.user.remove('testuser', function(err) {\n  if(err) { \n    throw err;\n  }\n  else {\n    console.log('Success')\n  }\n});\n```\n\n#### List a Users Group Membership ####\nuser.groups(username, callback)  \n\n* username String\n* callback Function (err, res)\n\n```javascript\ncrowd.user.groups('testuser', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### List a Users Attributes ####\nuser.attributes(username, callback)\n\n* username String\n* callback Function (err, res) \n   \n```javascript\ncrowd.user.attributes('testuser', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Set a New Attribute to a User ####\nuser.setAttributes(username, name, values, callback)\n\n* username String\n* name String\n* values String **or** Array\n* callback Function (err, res)\n\n```javascript\ncrowd.user.removeAttribute('testuser', 'attributeName', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Remove an Attribute From a User ####\nuser.removeAttribute(username, name, values, callback)\n\n* username String\n* name String\n* callback Function (err, res)\n\n```javascript\ncrowd.user.attributes('testuser', 'attributeName', 'attributeValue', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### User Authentication (NON SSO) ####\nuser.authenticate(username, password, callback)  \n\n* username String\n* password String\n* callback Function (err, res)\n\n```javascript\ncrowd.user.authenticate('testuser', 'abc123', function(err, res) {\n  if(err) { \n    throw err;\n   }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Changing a Users Password ####\nuser.changepassword(username, newpassword)\n\n* username String\n* newpassword String\n* callback Function (err)\n\n```javascript\ncrowd.user.changepassword('testuser', 'newpass', function (err) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log('Success');\n  }\n});\n```\n\n### Group Functions ###\nHere you can find utilities for Managing, Creating, and Removing Groups.  \n\n#### Finding a Group ####\ngroups.find(groupname, callback)  \n\n* groupname String\n* callback Function (err, res)\n\n```javascript\ncrowd.groups.find('crowd-administrators', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Creating a Group ####\ngroups.create(name, description, callback)\n\n* name String\n* description String\n* callback Function (err)\n\n```javascript\ncrowd.groups.create('test-group', 'Test Description', function(err) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log('Success');\n  }\n});\n```\n\n#### Removing a Group ####\ngroups.remove(name, callback)\n\n* name String\n* callback Function (err)\n\n```javascript\ncrowd.groups.remove('test-group', function (err) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log('Success');\n  }\n```\n\n#### Adding a User to a Group ####\ngroups.addmember(username, group, callback)\n\n* username String\n* group String\n* callback Function (err)\n\n```javascript\ncrowd.groups.addmember('testuser', 'test-group', function (err) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log('Success');\n  }\n});\n```\n\n#### Removing a User from a Group ####\ngroups.removemember(username, group, callback)\n\n* username String\n* group String\n* callback Function (err)\n\n```javascript\ncrowd.groups.removemember('testuser', 'test-group', function (err) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log('Success');\n  }\n});\n```\n\n#### Find the Direct Members of a Group ####\ngroups.directmembers(groupname, callback)\n\n* groupname String\n* callback Function (err, res)\n\n```javascript\ncrowd.groups.find('test-group', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Find the Nested Members of a Group ####\ngroups.nestedmembers(groupname, callback)\n\n* groupname String\n* callback Function (err, res)\n\n```javascript\ncrowd.groups.nestedmembers('test-group', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n### Session Functions ###\nProvides SSO Functionality\n\n#### Create a new Session ####\nsession.create(username, password, callback)\n\n* username String\n* password String\n* remote_addr String (optional)\n* callback Function (err, res)\n\n```javascript\ncrowd.session.create('testuser', 'secret', function (err, token) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(token);\n  }\n});\n```\n\n#### Authenticate ####\nsession.authenticate(token, remote_addr, callback)\n\n* token String\n* remote_addr String (optional)\n* callback Function (err, res)\n\n```javascript\ncrowd.session.authenticate('xAbCd345', '192.168.1.100', function (err, res) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log(res);\n  }\n});\n```\n\n#### Destroy ####\nsession.destroy(token, callback)\n\n* token String\n* callback Function (err)\n\n```javascript\ncrowd.session.destroy('xAbCd345', function (err) {\n  if(err) {\n    throw err;\n  }\n  else {\n    console.log('Successfully Destroyed Session');\n  }\n});\n```\n\n## TODO ##\n* Update User Profile\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dsn/node-atlassian-crowd.git"
  },
  "scripts": {
    "lint": "node_modules/jshint/bin/hint package.json lib/index.js lib/user.js lib/groups.js lib/session.js test/test.config test/run-tests.js",
    "test": "node_modules/nodeunit/bin/nodeunit test/run-tests.js"
  },
  "version": "0.5.0"
}
