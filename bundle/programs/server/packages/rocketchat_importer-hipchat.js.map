{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_importer-hipchat/server.coffee","meteor://ðŸ’»app/server.coffee.js","meteor://ðŸ’»app/packages/rocketchat_importer-hipchat/main.coffee"],"names":["moment","module","watch","require","v","bind","fn","me","apply","arguments","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","Importer","HipChat","superClass","RoomPrefix","UsersPrefix","name","descriptionI18N","mimeType","getSelection","convertHipChatMessageToRocketChat","getRocketUser","getHipChatChannelFromName","startImport","prepare","logger","debug","userTags","dataURI","sentContentType","fileName","channel","channelsId","contentType","entry","fn1","image","j","len","messagesCount","messagesObj","ref","selectionChannels","selectionUsers","tempMessages","tempRooms","tempUsers","usersId","zip","zipEntries","RocketChatFile","dataURIParse","AdmZip","Buffer","getEntries","_this","item","k","len1","msgGroupData","results","room","roomName","usersName","entryName","indexOf","isDirectory","split","updateProgress","ProgressStep","PREPARING_CHANNELS","JSON","parse","getData","toString","rooms","length","push","_","slugify","error","warn","PREPARING_USERS","users","collection","insert","importRecord","_id","findOne","updateRecord","addCountToTotal","channels","PREPARING_MESSAGES","date","i","messagesId","msgs","splitMsg","messages","Base","getBSONSize","MaxBSONSize","ref1","results1","getBSONSafeArraysFromAnArray","ERROR","getProgress","map","user","SelectionUser","user_id","email","is_deleted","is_bot","SelectionChannel","room_id","is_archived","USER_SELECTION","Selection","importSelection","c","l","len2","len3","m","ref2","ref3","start","startedByUserId","u","Date","now","do_import","update","$set","channel_id","Meteor","userId","defer","len4","len5","len6","n","nousers","o","p","ref4","ref5","ref6","ref7","timeTook","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","rocketId","hipchat","mention_name","rocket","username","Accounts","createUser","password","toUpperCase","joinDefaultChannelsSilenced","photo_url","parseInt","tz","timezone","format","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","replace","Rooms","findOneByName","owner_user_id","returned","rid","created","IMPORTING_MESSAGES","hipchatChannel","message","msgObj","findOneById","fields","usernames","t","from","msg","ts","sendMessage","isArray","console","FINISHING","DONE","log","channelName","hipchatId","userReplace","addImporter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;AAAAC,OAAAC,KAAA,CAAAC,QAAA;AAAA,uBAAAC,CAAA;AAAAJ,aAAAI,CAAA;AAAA;AAAA;AAAAH,OAAAC,KAAA,CAAAC,QAAA;;AAAA,IAAAE,OAAA,UAAAC,EAAA,EAAAC,EAAA;AAAA;AAAA,WAAAD,GAAAE,KAAA,CAAAD,EAAA,EAAAE,SAAA;AAAA;AAAA;AAAA,ICCEC,SAAS,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAAE,OAAK,IAAIC,GAAT,2CAAgBD,MAAhB,GAAwB;AAAE,QAAIE,QAAQC,IAAR,CAAaH,MAAb,EAAqBC,GAArB,CAAJ,EAA+BF,MAAME,GAAN,IAAaD,OAAOC,GAAP,CAAb;AAA2B;;AAAC,WAASG,IAAT,GAAgB;AAAE,SAAKC,WAAL,GAAmBN,KAAnB;AAA2B;;AAACK,OAAKE,SAAL,GAAiBN,OAAOM,SAAxB;AAAmCP,QAAMO,SAAN,GAAkB,IAAIF,IAAJ,EAAlB;AAA8BL,QAAMQ,SAAN,GAAkBP,OAAOM,SAAzB;AAAoC,SAAOP,KAAP;AAAe,CDD5R;AAAA,ICEEG,UAAU,GAAGM,cDFf;;AAGAC,SAASC,OAAT,GAAyBD,SAASC,OAAT,GAAS,UAAAC,UAAA;ACMhCb,SAAOY,OAAP,EAAgBC,UAAhB;ADLDD,UAACE,UAAD,GAAc,uBAAd;AACAF,UAACG,WAAD,GAAe,uBAAf;;AAEa,WAAAH,OAAA,CAACI,IAAD,EAAOC,eAAP,EAAwBC,QAAxB;ACSV,SAAKC,YAAL,GAAoBxB,KAAK,KAAKwB,YAAV,EAAwB,IAAxB,CAApB;AACA,SAAKC,iCAAL,GAAyCzB,KAAK,KAAKyB,iCAAV,EAA6C,IAA7C,CAAzC;AACA,SAAKC,aAAL,GAAqB1B,KAAK,KAAK0B,aAAV,EAAyB,IAAzB,CAArB;AACA,SAAKC,yBAAL,GAAiC3B,KAAK,KAAK2B,yBAAV,EAAqC,IAArC,CAAjC;AACA,SAAKC,WAAL,GAAmB5B,KAAK,KAAK4B,WAAV,EAAuB,IAAvB,CAAnB;AACA,SAAKC,OAAL,GAAe7B,KAAK,KAAK6B,OAAV,EAAmB,IAAnB,CAAf;;ADbFZ,YAAAH,SAAA,CAAAF,WAAA,CAAAF,IAAA,OAAMW,IAAN,EAAYC,eAAZ,EAA6BC,QAA7B;;AACA,SAACO,MAAD,CAAQC,KAAR,CAAc,mCAAd;AACA,SAACC,QAAD,GAAY,EAAZ;AAHY;;ACoBZf,UAAQJ,SAAR,CDfDgB,OCeC,GDfQ,UAACI,OAAD,EAAUC,eAAV,EAA2BC,QAA3B;AACR,QAAAC,OAAA,EAAAC,UAAA,EAAAC,WAAA,EAAAC,KAAA,EAAAtC,EAAA,EAAAuC,GAAA,EAAAC,KAAA,EAAAC,CAAA,EAAAC,GAAA,EAAAC,aAAA,EAAAC,WAAA,EAAAC,GAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,YAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,OAAA,EAAAC,GAAA,EAAAC,UAAA;;AAAArC,YAAAH,SAAA,CAAAe,OAAA,CAAAnB,IAAA,OAAMuB,OAAN,EAAeC,eAAf,EAAgCC,QAAhC;;AAEAW,UAAuBS,eAAeC,YAAf,CAA4BvB,OAA5B,CAAvB,EAACQ,QAAAK,IAAAL,KAAD,EAAQH,cAAAQ,IAAAR,WAAR;AACAe,UAAM,IAAI,KAACI,MAAL,CAAY,IAAIC,MAAJ,CAAWjB,KAAX,EAAkB,QAAlB,CAAZ,CAAN;AACAa,iBAAaD,IAAIM,UAAJ,EAAb;AAEAT,gBAAY,EAAZ;AACAC,gBAAY,EAAZ;AACAF,mBAAe,EAAf;;ACeEhD,SDbE,UAAA2D,KAAA;ACcA,aDdA,UAACrB,KAAD;AACF,YAAAsB,IAAA,EAAAC,CAAA,EAAAC,IAAA,EAAAC,YAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,QAAA,EAAAC,SAAA;;AAAA,YAAG7B,MAAM8B,SAAN,CAAgBC,OAAhB,CAAwB,UAAxB,IAAsC,CAAC,CAA1C;AAECV,gBAAC9B,MAAD,CAAQC,KAAR,CAAc,wBAAsBQ,MAAM8B,SAA1C;ACeI;;ADdL,YAAG,CAAI9B,MAAMgC,WAAb;AACC,cAAGhC,MAAM8B,SAAN,CAAgBC,OAAhB,CAAwBtD,SAASC,OAAT,CAAiBE,UAAzC,IAAuD,CAAC,CAA3D;AACCgD,uBAAW5B,MAAM8B,SAAN,CAAgBG,KAAhB,CAAsBxD,SAASC,OAAT,CAAiBE,UAAvC,EAAmD,CAAnD,CAAX;;AACA,gBAAGgD,aAAY,WAAf;AACCP,oBAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBC,kBAAtC;;AACAzB,0BAAY0B,KAAKC,KAAL,CAAWtC,MAAMuC,OAAN,GAAgBC,QAAhB,EAAX,EAAuCC,KAAnD;AACAf,wBAAA;;ACgBO,mBDhBPH,IAAA,GAAAC,OAAAb,UAAA+B,MCgBO,EDhBPnB,IAAAC,ICgBO,EDhBPD,GCgBO,EDhBP;ACiBSI,uBAAOhB,UAAUY,CAAV,CAAP;AACAG,wBAAQiB,IAAR,CDjBRhB,KAAK7C,IAAL,GAAY8D,EAAEC,OAAF,CAAUlB,KAAK7C,IAAf,CCiBJ;ADlBT;;ACoBO,qBAAO4C,OAAP;ADvBR,mBAKK,IAAGE,SAASG,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA5B;AACJT,qBAAOM,SAASK,KAAT,CAAe,GAAf,CAAP;AACAL,yBAAWgB,EAAEC,OAAF,CAAUvB,KAAK,CAAL,CAAV,CAAX;AACAG,6BAAeH,KAAK,CAAL,EAAQW,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAf;;AACA,kBAAG,CAAIvB,aAAakB,QAAb,CAAP;AACClB,6BAAakB,QAAb,IAAyB,EAAzB;ACoBO;;ADjBR;ACmBS,uBDlBRlB,aAAakB,QAAb,EAAuBH,YAAvB,IAAuCY,KAAKC,KAAL,CAAWtC,MAAMuC,OAAN,GAAgBC,QAAhB,EAAX,CCkB/B;ADnBT,uBAAAM,KAAA;ACqBS,uBDlBRzB,MAAC9B,MAAD,CAAQwD,IAAR,CAAgB/C,MAAM8B,SAAN,GAAgB,iDAAhC,CCkBQ;AD7BL;AAPN;AAAA,iBAmBK,IAAG9B,MAAM8B,SAAN,CAAgBC,OAAhB,CAAwBtD,SAASC,OAAT,CAAiBG,WAAzC,IAAwD,CAAC,CAA5D;AACJgD,wBAAY7B,MAAM8B,SAAN,CAAgBG,KAAhB,CAAsBxD,SAASC,OAAT,CAAiBG,WAAvC,EAAoD,CAApD,CAAZ;;AACA,gBAAGgD,cAAa,WAAhB;AACCR,oBAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBa,eAAtC;;ACqBO,qBDpBPpC,YAAYyB,KAAKC,KAAL,CAAWtC,MAAMuC,OAAN,GAAgBC,QAAhB,EAAX,EAAuCS,KCoB5C;ADtBR;ACwBQ,qBDpBP5B,MAAC9B,MAAD,CAAQwD,IAAR,CAAa,4BAA0B1B,MAACvC,IAA3B,GAAgC,WAAhC,GAA2CkB,MAAM8B,SAA9D,CCoBO;AD1BJ;AApBN;ACiDK;ADrDH,OCcA;ADdA,WCaF;;ADdF,SAAA3B,IAAA,GAAAC,MAAAW,WAAA2B,MAAA,EAAAvC,IAAAC,GAAA,EAAAD,GAAA;AC0DIH,cAAQe,WAAWZ,CAAX,CAAR;AACAzC,SD1DCsC,KC0DD;AD3DJ;;AAmCAa,cAAU,KAACqC,UAAD,CAAYC,MAAZ,CAAmB;AAAE,gBAAU,KAACC,YAAD,CAAcC,GAA1B;AAA+B,kBAAY,KAACvE,IAA5C;AAAkD,cAAQ,OAA1D;AAAmE,eAAS8B;AAA5E,KAAnB,CAAV;AACA,SAACqC,KAAD,GAAS,KAACC,UAAD,CAAYI,OAAZ,CAAoBzC,OAApB,CAAT;AACA,SAAC0C,YAAD,CAAc;AAAE,qBAAe3C,UAAU8B;AAA3B,KAAd;AACA,SAACc,eAAD,CAAiB5C,UAAU8B,MAA3B;AAGA5C,iBAAa,KAACoD,UAAD,CAAYC,MAAZ,CAAmB;AAAE,gBAAU,KAACC,YAAD,CAAcC,GAA1B;AAA+B,kBAAY,KAACvE,IAA5C;AAAkD,cAAQ,UAA1D;AAAsE,kBAAY6B;AAAlF,KAAnB,CAAb;AACA,SAAC8C,QAAD,GAAY,KAACP,UAAD,CAAYI,OAAZ,CAAoBxD,UAApB,CAAZ;AACA,SAACyD,YAAD,CAAc;AAAE,wBAAkB5C,UAAU+B;AAA9B,KAAd;AACA,SAACc,eAAD,CAAiB7C,UAAU+B,MAA3B;AAGA,SAACR,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBuB,kBAAtC;AACArD,oBAAgB,CAAhB;;ACqCEJ,UDnCE,UAAAoB,KAAA;ACoCA,aDpCA,UAACxB,OAAD,EAAUS,WAAV;AACF,YAAAqD,IAAA,EAAAC,CAAA,EAAAC,UAAA,EAAAC,IAAA,EAAApC,OAAA,EAAAqC,QAAA;;AAAA,YAAG,CAAI1C,MAAC2C,QAAD,CAAUnE,OAAV,CAAP;AACCwB,gBAAC2C,QAAD,CAAUnE,OAAV,IAAqB,EAArB;ACsCI;;ADrCL6B,kBAAA;;ACuCI,aDvCJiC,ICuCI,2CDvCJrD,WCuCI,GDvCJ;ACwCMwD,iBAAOxD,YAAYqD,IAAZ,CAAP;ADvCLtD,2BAAiByD,KAAKpB,MAAtB;;AACArB,gBAACkC,YAAD,CAAc;AAAE,8BAAqB1D,UAAQ,GAAR,GAAW8D;AAAlC,WAAd;;AAEA,cAAGlF,SAASwF,IAAT,CAAcC,WAAd,CAA0BJ,IAA1B,IAAkCrF,SAASwF,IAAT,CAAcE,WAAnD;AC0COzC,oBAAQiB,IAAR,CAAc,YAAW;AACvB,kBAAIpB,CAAJ,EAAOC,IAAP,EAAa4C,IAAb,EAAmBC,QAAnB;AD1CRD,qBAAA3F,SAAAwF,IAAA,CAAAK,4BAAA,CAAAR,IAAA;AAAAO,yBAAA;;AC6CQ,mBD7CRT,IAAArC,IAAA,GAAAC,OAAA4C,KAAA1B,MC6CQ,ED7CRnB,IAAAC,IC6CQ,ED7CRoC,IAAA,EAAArC,CC6CQ,ED7CR;AC8CUwC,2BAAWK,KAAKR,CAAL,CAAX;AD7CTC,6BAAa,KAACX,UAAD,CAAYC,MAAZ,CAAmB;AAAE,4BAAU,KAACC,YAAD,CAAcC,GAA1B;AAA+B,8BAAY,KAACvE,IAA5C;AAAkD,0BAAQ,UAA1D;AAAsE,0BAAWe,UAAQ,GAAR,GAAW8D,IAAX,GAAgB,GAAhB,GAAmBC,CAApG;AAAyG,8BAAYG;AAArH,iBAAnB,CAAb;ACqDSM,yBAAS1B,IAAT,CDpDT,KAACqB,QAAD,CAAUnE,OAAV,EAAsB8D,OAAK,GAAL,GAAQC,CAA9B,IAAqC,KAACV,UAAD,CAAYI,OAAZ,CAAoBO,UAApB,CCoD5B;ADtDV;;ACwDQ,qBAAOQ,QAAP;AACD,aAhBY,CAgBVlG,IAhBU,CAgBLkD,KAhBK,CAAb;AD1CP;AAKCwC,yBAAaxC,MAAC6B,UAAD,CAAYC,MAAZ,CAAmB;AAAE,wBAAU9B,MAAC+B,YAAD,CAAcC,GAA1B;AAA+B,0BAAYhC,MAACvC,IAA5C;AAAkD,sBAAQ,UAA1D;AAAsE,sBAAWe,UAAQ,GAAR,GAAW8D,IAA5F;AAAoG,0BAAYG;AAAhH,aAAnB,CAAb;AC8DMpC,oBAAQiB,IAAR,CD7DNtB,MAAC2C,QAAD,CAAUnE,OAAV,EAAmB8D,IAAnB,IAA2BtC,MAAC6B,UAAD,CAAYI,OAAZ,CAAoBO,UAApB,CC6DrB;AACD;ADxEP;;AC0EI,eAAOnC,OAAP;AD7EF,OCoCA;ADpCA,WCmCF;;ADpCF,SAAA7B,OAAA,2CAAAa,YAAA;ACkFIJ,oBAAcI,aAAab,OAAb,CAAd;AACAI,UDlFCJ,OCkFD,EDlFUS,WCkFV;ADnFJ;;AAgBA,SAACiD,YAAD,CAAc;AAAE,wBAAkBlD,aAApB;AAAmC,wBAAkB;AAArD,KAAd;AACA,SAACmD,eAAD,CAAiBnD,aAAjB;;AAEA,QAAGO,UAAU8B,MAAV,KAAoB,CAApB,IAAyB/B,UAAU+B,MAAV,KAAoB,CAA7C,IAAkDrC,kBAAiB,CAAtE;AACC,WAACd,MAAD,CAAQwD,IAAR,CAAa,4BAA0BnC,UAAU8B,MAApC,GAA2C,wBAA3C,GAAmE/B,UAAU+B,MAA7E,GAAoF,4BAApF,GAAgHrC,aAA7H;AACA,WAAC6B,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBoC,KAAtC;AACA,aAAO,KAACC,WAAD,EAAP;ACwEE;;ADtEH/D,qBAAiBG,UAAU6D,GAAV,CAAc,UAACC,IAAD;AAE9B,aAAO,IAAIjG,SAASkG,aAAb,CAA2BD,KAAKE,OAAhC,EAAyCF,KAAK5F,IAA9C,EAAoD4F,KAAKG,KAAzD,EAAgEH,KAAKI,UAArE,EAAiF,KAAjF,EAAwF,CAACJ,KAAKK,MAA9F,CAAP;AAFgB,MAAjB;AAGAvE,wBAAoBG,UAAU8D,GAAV,CAAc,UAAC9C,IAAD;AACjC,aAAO,IAAIlD,SAASuG,gBAAb,CAA8BrD,KAAKsD,OAAnC,EAA4CtD,KAAK7C,IAAjD,EAAuD6C,KAAKuD,WAA5D,EAAyE,IAAzE,EAA+E,KAA/E,CAAP;AADmB,MAApB;AAGA,SAAChD,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBgD,cAAtC;AACA,WAAO,IAAI1G,SAAS2G,SAAb,CAAuB,KAACtG,IAAxB,EAA8B2B,cAA9B,EAA8CD,iBAA9C,CAAP;AA1FQ,GCeR;;AAqJA9B,UAAQJ,SAAR,CDxEDe,WCwEC,GDxEY,UAACgG,eAAD;AACZ,QAAAC,CAAA,EAAAzF,OAAA,EAAAM,CAAA,EAAAoB,CAAA,EAAAgE,CAAA,EAAAnF,GAAA,EAAAoB,IAAA,EAAAgE,IAAA,EAAAC,IAAA,EAAAC,CAAA,EAAAnF,GAAA,EAAA6D,IAAA,EAAAuB,IAAA,EAAAC,IAAA,EAAAC,KAAA,EAAAC,eAAA,EAAAC,CAAA,EAAArB,IAAA;;AAAAhG,YAAAH,SAAA,CAAAc,WAAA,CAAAlB,IAAA,OAAMkH,eAAN;;AACAQ,YAAQG,KAAKC,GAAL,EAAR;AAEA1F,UAAA8E,gBAAApC,KAAA;;AAAA,SAAA9C,IAAA,GAAAC,MAAAG,IAAAmC,MAAA,EAAAvC,IAAAC,GAAA,EAAAD,GAAA;AC0EIuE,aAAOnE,IAAIJ,CAAJ,CAAP;ADzEHiE,aAAA,KAAAnB,KAAA,CAAAA,KAAA;;AAAA,WAAA1B,IAAA,GAAAC,OAAA4C,KAAA1B,MAAA,EAAAnB,IAAAC,IAAA,EAAAD,GAAA;AC4EKwE,YAAI3B,KAAK7C,CAAL,CAAJ;;AACA,YD7EsBwE,EAAEnB,OAAF,KAAaF,KAAKE,OC6ExC,ED7EwC;AAC5CmB,YAAEG,SAAF,GAAcxB,KAAKwB,SAAnB;AC8EK;AD/EN;AADD;;AAGA,SAAChD,UAAD,CAAYiD,MAAZ,CAAmB;AAAE9C,WAAK,KAACJ,KAAD,CAAOI;AAAd,KAAnB,EAAwC;AAAE+C,YAAM;AAAE,iBAAS,KAACnD,KAAD,CAAOA;AAAlB;AAAR,KAAxC;AAEA0C,WAAAN,gBAAA5B,QAAA;;AAAA,SAAA8B,IAAA,GAAAC,OAAAG,KAAAjD,MAAA,EAAA6C,IAAAC,IAAA,EAAAD,GAAA;ACuFI1F,gBAAU8F,KAAKJ,CAAL,CAAV;ADtFHK,aAAA,KAAAnC,QAAA,CAAAA,QAAA;;AAAA,WAAAiC,IAAA,GAAAD,OAAAG,KAAAlD,MAAA,EAAAgD,IAAAD,IAAA,EAAAC,GAAA;ACyFKJ,YAAIM,KAAKF,CAAL,CAAJ;;AACA,YD1F4BJ,EAAEL,OAAF,KAAapF,QAAQwG,UC0FjD,ED1FiD;AACrDf,YAAEY,SAAF,GAAcrG,QAAQqG,SAAtB;AC2FK;AD5FN;AADD;;AAGA,SAAChD,UAAD,CAAYiD,MAAZ,CAAmB;AAAE9C,WAAK,KAACI,QAAD,CAAUJ;AAAjB,KAAnB,EAA2C;AAAE+C,YAAM;AAAE,oBAAY,KAAC3C,QAAD,CAAUA;AAAxB;AAAR,KAA3C;AAEAqC,sBAAkBQ,OAAOC,MAAP,EAAlB;AACAD,WAAOE,KAAP,CAAa,UAAAnF,KAAA;ACmGT,aDnGS;AACZ,YAAA3D,EAAA,EAAA+I,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAArG,WAAA,EAAAsG,CAAA,EAAAC,OAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,QAAA;;AAAA/F,cAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBkF,eAAtC;;AACAL,eAAA3F,MAAA4B,KAAA,CAAAA,KAAA;;AAAA,aAAA2D,IAAA,GAAAH,OAAAO,KAAAtE,MAAA,EAAAkE,IAAAH,IAAA,EAAAG,GAAA;ACsGOlC,iBAAOsC,KAAKJ,CAAL,CAAP;;AACA,cDvGuBlC,KAAKwB,SCuG5B,EDvG4B;AAC/B,uBAACxB,IAAD;ACwGO,qBDvGT4B,OAAOgB,SAAP,CAAiBxB,eAAjB,EAAkC;AACjC,oBAAAyB,YAAA,EAAAhB,MAAA;AAAAgB,+BAAeC,WAAWC,MAAX,CAAkBC,KAAlB,CAAwBC,qBAAxB,CAA8CjD,KAAKG,KAAnD,CAAf;;AACA,oBAAG0C,YAAH;AACC7C,uBAAKkD,QAAL,GAAgBL,aAAalE,GAA7B;;AACAhC,wBAAC5B,QAAD,CAAUkD,IAAV,CACC;AAAAkF,6BAAS,MAAInD,KAAKoD,YAAlB;AACAC,4BAAQ,MAAIR,aAAaS;AADzB,mBADD;AAFD;AAMCzB,2BAAS0B,SAASC,UAAT,CAAoB;AAAErD,2BAAOH,KAAKG,KAAd;AAAqBsD,8BAAUnC,KAAKC,GAAL,KAAavB,KAAK5F,IAAlB,GAAyB4F,KAAKG,KAAL,CAAWuD,WAAX;AAAxD,mBAApB,CAAT;AACA1D,uBAAKkD,QAAL,GAAgBrB,MAAhB;;AACAlF,wBAAC5B,QAAD,CAAUkD,IAAV,CACC;AAAAkF,6BAAS,MAAInD,KAAKoD,YAAlB;AACAC,4BAAQ,MAAIrD,KAAKoD;AADjB,mBADD;;AAGAxB,yBAAOgB,SAAP,CAAiBf,MAAjB,EAAyB;AACxBD,2BAAOnI,IAAP,CAAY,aAAZ,EAA2BuG,KAAKoD,YAAhC,EAA8C;AAACO,mDAA6B;AAA9B,qBAA9C;AACA/B,2BAAOnI,IAAP,CAAY,sBAAZ,EAAoCuG,KAAK4D,SAAzC,EAAoD,MAApD,EAA+D,KAA/D;ACgHY,2BD/GZhC,OAAOnI,IAAP,CAAY,kBAAZ,EAAgCoK,SAASnL,SAASoL,EAAT,CAAY9D,KAAK+D,QAAjB,EAA2BC,MAA3B,CAAkC,GAAlC,EAAuClG,QAAvC,GAAkDP,KAAlD,CAAwD,GAAxD,EAA6D,CAA7D,CAAT,CAAhC,CC+GY;ADlHb;;AAKA,sBAAGyC,KAAA5F,IAAA,QAAH;AACC0I,+BAAWC,MAAX,CAAkBC,KAAlB,CAAwBiB,OAAxB,CAAgCpC,MAAhC,EAAwC7B,KAAK5F,IAA7C;ACgHW;;AD7GZ,sBAAG4F,KAAKI,UAAR;AACCwB,2BAAOnI,IAAP,CAAY,qBAAZ,EAAmCoI,MAAnC,EAA2C,KAA3C;AArBF;ACqIW;;AACD,uBDhHVlF,MAACuH,iBAAD,CAAmB,CAAnB,CCgHU;ADxIX,gBCuGS;ADxGP,eAAClE,IAAD;AC4II;AD7IR;;AA2BArD,cAAC6B,UAAD,CAAYiD,MAAZ,CAAmB;AAAE9C,eAAKhC,MAAC4B,KAAD,CAAOI;AAAd,SAAnB,EAAwC;AAAE+C,gBAAM;AAAE,qBAAS/E,MAAC4B,KAAD,CAAOA;AAAlB;AAAR,SAAxC;;AAEA5B,cAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsB0G,kBAAtC;;AACA5B,eAAA5F,MAAAoC,QAAA,CAAAA,QAAA;;AAAA,aAAAqD,IAAA,GAAAJ,OAAAO,KAAAvE,MAAA,EAAAoE,IAAAJ,IAAA,EAAAI,GAAA;AC2HOjH,oBAAUoH,KAAKH,CAAL,CAAV;;AACA,cD5HgCjH,QAAQqG,SC4HxC,ED5HwC;AAC3C,uBAACrG,OAAD;AC6HO,qBD5HTyG,OAAOgB,SAAP,CAAiBxB,eAAjB,EAAkC;AACjC,oBAAAgD,YAAA,EAAAnC,IAAA,EAAAI,CAAA,EAAAG,IAAA,EAAAX,MAAA;AAAA1G,wBAAQf,IAAR,GAAee,QAAQf,IAAR,CAAaiK,OAAb,CAAqB,IAArB,EAA2B,EAA3B,CAAf;AACAD,+BAAetB,WAAWC,MAAX,CAAkBuB,KAAlB,CAAwBC,aAAxB,CAAsCpJ,QAAQf,IAA9C,CAAf;;AACA,oBAAGgK,YAAH;AACCjJ,0BAAQ+H,QAAR,GAAmBkB,aAAazF,GAAhC;AADD;AAGCkD,2BAAS,EAAT;AACAW,yBAAA7F,MAAA4B,KAAA,CAAAA,KAAA;;AAAA,uBAAA8D,IAAA,GAAAJ,OAAAO,KAAAxE,MAAA,EAAAqE,IAAAJ,IAAA,EAAAI,GAAA;AC+HarC,2BAAOwC,KAAKH,CAAL,CAAP;;AACA,wBDhIiBrC,KAAKE,OAAL,KAAgB/E,QAAQqJ,aCgIzC,EDhIyC;AACrD3C,+BAAS7B,KAAKkD,QAAd;ACiIa;ADlId;;AAGA,sBAAGrB,WAAU,EAAb;AACClF,0BAAC9B,MAAD,CAAQwD,IAAR,CAAa,4CAA0ClD,QAAQf,IAAlD,GAAuD,2CAApE;;AACAyH,6BAAST,eAAT;ACkIW;;ADhIZQ,yBAAOgB,SAAP,CAAiBf,MAAjB,EAAyB;AACxB,wBAAA4C,QAAA;AAAAA,+BAAW7C,OAAOnI,IAAP,CAAY,eAAZ,EAA6B0B,QAAQf,IAArC,EAA2C,EAA3C,CAAX;ACmIY,2BDlIZe,QAAQ+H,QAAR,GAAmBuB,SAASC,GCkIhB;ADpIb;AAGA5B,6BAAWC,MAAX,CAAkBuB,KAAlB,CAAwB7C,MAAxB,CAA+B;AAAE9C,yBAAKxD,QAAQ+H;AAAf,mBAA/B,EAA0D;AAAExB,0BAAM;AAAE,4BAAM,IAAIJ,IAAJ,CAASnG,QAAQwJ,OAAR,GAAkB,IAA3B;AAAR;AAAR,mBAA1D;AC0IU;;AACD,uBD1IVhI,MAACuH,iBAAD,CAAmB,CAAnB,CC0IU;AD5JX,gBC4HS;AD7HP,eAAC/I,OAAD;ACgKI;ADjKR;;AAqBAwB,cAAC6B,UAAD,CAAYiD,MAAZ,CAAmB;AAAE9C,eAAKhC,MAACoC,QAAD,CAAUJ;AAAjB,SAAnB,EAA2C;AAAE+C,gBAAM;AAAE,wBAAY/E,MAACoC,QAAD,CAAUA;AAAxB;AAAR,SAA3C;;AAEApC,cAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBmH,kBAAtC;;AACAzC,kBAAU,EAAV;AACAK,eAAA7F,MAAA2C,QAAA;;ACoJKtG,aDnJD,UAACmC,OAAD,EAAUS,WAAV;ACoJG,iBDnJLgG,OAAOgB,SAAP,CAAiBxB,eAAjB,EAAkC;AACjC,gBAAAnC,IAAA,EAAA4F,cAAA,EAAAC,OAAA,EAAAC,MAAA,EAAA3F,IAAA,EAAApC,OAAA,EAAAC,IAAA;AAAA4H,6BAAiBlI,MAACjC,yBAAD,CAA2BS,OAA3B,CAAjB;;AACA,gBAAA0J,kBAAA,OAAGA,eAAgBrD,SAAnB,GAAmB,MAAnB;AACCvE,qBAAO6F,WAAWC,MAAX,CAAkBuB,KAAlB,CAAwBU,WAAxB,CAAoCH,eAAe3B,QAAnD,EAA6D;AAAE+B,wBAAQ;AAAEC,6BAAW,CAAb;AAAgBC,qBAAG,CAAnB;AAAsB/K,wBAAM;AAA5B;AAAV,eAA7D,CAAP;AACA4C,wBAAA;;AC2JO,mBD3JPiC,IC2JO,2CD3JPrD,WC2JO,GD3JP;AC4JSwD,uBAAOxD,YAAYqD,IAAZ,CAAP;;AD3JRtC,sBAACkC,YAAD,CAAc;AAAE,oCAAqB1D,UAAQ,GAAR,GAAW8D,IAAX,GAAgB,GAAhB,GAAmBG,KAAKE,QAAL,CAActB;AAAxD,iBAAd;;AC+JQhB,wBAAQiB,IAAR,CAAc,YAAW;AACvB,sBAAIgE,IAAJ,EAAUI,CAAV,EAAaI,IAAb,EAAmB9C,QAAnB;AD/JV8C,yBAAArD,KAAAE,QAAA;AAAAK,6BAAA;;ACkKU,uBDlKV0C,IAAA,GAAAJ,OAAAQ,KAAAzE,MCkKU,EDlKVqE,IAAAJ,ICkKU,EDlKVI,GCkKU,EDlKV;ACmKYyC,8BAAUrC,KAAKJ,CAAL,CAAV;;ADlKX,wBAAGyC,QAAAM,IAAA,QAAH;AACCpF,6BAAO,KAACvF,aAAD,CAAeqK,QAAQM,IAAR,CAAalF,OAA5B,CAAP;;AACA,0BAAGF,QAAA,IAAH;AACC+E,iCACC;AAAAM,+BAAK,KAAC7K,iCAAD,CAAmCsK,QAAQA,OAA3C,CAAL;AACAQ,8BAAI,IAAIhE,IAAJ,CAASwD,QAAQ7F,IAAjB,CADJ;AAEAoC,6BACC;AAAA1C,iCAAKqB,KAAKrB,GAAV;AACA2E,sCAAUtD,KAAKsD;AADf;AAHD,yBADD;AAOAR,mCAAWyC,WAAX,CAAuBvF,IAAvB,EAA6B+E,MAA7B,EAAqC9H,IAArC,EAA2C,IAA3C;AARD;AAUC,4BAAG,CAAIkF,QAAQ2C,QAAQM,IAAR,CAAalF,OAArB,CAAP;AACCiC,kCAAQ2C,QAAQM,IAAR,CAAalF,OAArB,IAAgC4E,QAAQM,IAAxC;AAXF;AAFD;AAAA;AAeC,0BAAG,CAAIlH,EAAEsH,OAAF,CAAUV,OAAV,CAAP;AACCW,gCAAQpH,IAAR,CAAa,8BAAb,EAA6CyG,OAA7C;AAhBF;ACwLY;;AACDnF,6BAAS1B,IAAT,CDxKX,KAACiG,iBAAD,CAAmB,CAAnB,CCwKW;AD1LZ;;AC4LU,yBAAOvE,QAAP;AACD,iBA/BY,CA+BVlG,IA/BU,CA+BLkD,KA/BK,CAAb;ADhKT;;ACiMO,qBAAOK,OAAP;AACD;ADtMR,YCmJK;ADpJH,SCmJC;;ADpJL,aAAA7B,OAAA,2CAAAqH,IAAA;AC4MO5G,wBAAc4G,KAAKrH,OAAL,CAAd;AACAnC,aD5MFmC,OC4ME,ED5MOS,WC4MP;AD7MP;;AA2BAe,cAAC9B,MAAD,CAAQwD,IAAR,CAAa,mCAAb,EAAkD8D,OAAlD;;AAEAxF,cAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBiI,SAAtC;;AACAjD,eAAA9F,MAAAoC,QAAA,CAAAA,QAAA;;AAAA,aAAAsD,IAAA,GAAAJ,OAAAQ,KAAAzE,MAAA,EAAAqE,IAAAJ,IAAA,EAAAI,GAAA;ACqLOlH,oBAAUsH,KAAKJ,CAAL,CAAV;;AACA,cDtLgClH,QAAQqG,SAAR,IAAsBrG,QAAQqF,WCsL9D,EDtL8D;AACjE,uBAACrF,OAAD;ACuLO,qBDtLTyG,OAAOgB,SAAP,CAAiBxB,eAAjB,EAAkC;ACuLvB,uBDtLVQ,OAAOnI,IAAP,CAAY,aAAZ,EAA2B0B,QAAQ+H,QAAnC,CCsLU;ADvLX,gBCsLS;ADvLP,eAAC/H,OAAD;AC2LI;AD5LR;;AAKAwB,cAACa,cAAD,CAAgBzD,SAAS0D,YAAT,CAAsBkI,IAAtC;;AACAjD,mBAAWpB,KAAKC,GAAL,KAAaJ,KAAxB;AC0LK,eDzLLxE,MAAC9B,MAAD,CAAQ+K,GAAR,CAAY,iBAAelD,QAAf,GAAwB,gBAApC,CCyLK;ADvRO,OCmGT;ADnGS,WAAb;AAgGA,WAAO,KAAC5C,WAAD,EAAP;AA/GY,GCwEZ;;AAoOA9F,UAAQJ,SAAR,CD3LDc,yBC2LC,GD3L0B,UAACmL,WAAD;AAC1B,QAAA1K,OAAA,EAAAM,CAAA,EAAAC,GAAA,EAAAG,GAAA;AAAAA,UAAA,KAAAkD,QAAA,CAAAA,QAAA;;AAAA,SAAAtD,IAAA,GAAAC,MAAAG,IAAAmC,MAAA,EAAAvC,IAAAC,GAAA,EAAAD,GAAA;AC8LIN,gBAAUU,IAAIJ,CAAJ,CAAV;;AACA,UD/LmCN,QAAQf,IAAR,KAAgByL,WC+LnD,ED/LmD;AACtD,eAAO1K,OAAP;ACgMI;ADjML;AAD0B,GC2L1B;;AAWAnB,UAAQJ,SAAR,CDlMDa,aCkMC,GDlMc,UAACqL,SAAD;AACd,QAAArK,CAAA,EAAAC,GAAA,EAAAG,GAAA,EAAAmE,IAAA;AAAAnE,UAAA,KAAA0C,KAAA,CAAAA,KAAA;;AAAA,SAAA9C,IAAA,GAAAC,MAAAG,IAAAmC,MAAA,EAAAvC,IAAAC,GAAA,EAAAD,GAAA;ACqMIuE,aAAOnE,IAAIJ,CAAJ,CAAP;;AACA,UDtM0BuE,KAAKE,OAAL,KAAgB4F,SCsM1C,EDtM0C;AAC7C,eAAOhD,WAAWC,MAAX,CAAkBC,KAAlB,CAAwBgC,WAAxB,CAAoChF,KAAKkD,QAAzC,EAAmD;AAAE+B,kBAAQ;AAAE3B,sBAAU,CAAZ;AAAelJ,kBAAM;AAArB;AAAV,SAAnD,CAAP;AC4MI;AD7ML;AADc,GCkMd;;AAgBAJ,UAAQJ,SAAR,CD9MDY,iCC8MC,GD9MkC,UAACsK,OAAD;AAClC,QAAArJ,CAAA,EAAAC,GAAA,EAAAG,GAAA,EAAAkK,WAAA;;AAAA,QAAGjB,WAAA,IAAH;AACCjJ,YAAA,KAAAd,QAAA;;AAAA,WAAAU,IAAA,GAAAC,MAAAG,IAAAmC,MAAA,EAAAvC,IAAAC,GAAA,EAAAD,GAAA;ACiNKsK,sBAAclK,IAAIJ,CAAJ,CAAd;ADhNJqJ,kBAAUA,QAAQT,OAAR,CAAgB0B,YAAY5C,OAA5B,EAAqC4C,YAAY1C,MAAjD,CAAV;AAFF;AAAA;AAICyB,gBAAU,EAAV;ACmNE;;ADlNH,WAAOA,OAAP;AANkC,GC8MlC;;AAcA9K,UAAQJ,SAAR,CDpNDW,YCoNC,GDpNa;AACb,QAAAuB,iBAAA,EAAAC,cAAA;AAAAA,qBAAiB,KAACwC,KAAD,CAAOA,KAAP,CAAawB,GAAb,CAAiB,UAACC,IAAD;AAEjC,aAAO,IAAIjG,SAASkG,aAAb,CAA2BD,KAAKE,OAAhC,EAAyCF,KAAK5F,IAA9C,EAAoD4F,KAAKG,KAAzD,EAAgEH,KAAKI,UAArE,EAAiF,KAAjF,EAAwF,CAACJ,KAAKK,MAA9F,CAAP;AAFgB,MAAjB;AAGAvE,wBAAoB,KAACiD,QAAD,CAAUA,QAAV,CAAmBgB,GAAnB,CAAuB,UAAC9C,IAAD;AAC1C,aAAO,IAAIlD,SAASuG,gBAAb,CAA8BrD,KAAKsD,OAAnC,EAA4CtD,KAAK7C,IAAjD,EAAuD6C,KAAKuD,WAA5D,EAAyE,IAAzE,EAA+E,KAA/E,CAAP;AADmB,MAApB;AAGA,WAAO,IAAIzG,SAAS2G,SAAb,CAAuB,KAACtG,IAAxB,EAA8B2B,cAA9B,EAA8CD,iBAA9C,CAAP;AAPa,GCoNb;;AAWA,SAAO9B,OAAP;AAED,CDvciC,CAAgBD,SAASwF,IAAzB,CAAlC,0G;;;;;;;;;;;;AEHAxF,SAASiM,WAAT,CAAqB,SAArB,EAAgCjM,SAASC,OAAzC,EACC;AAAAI,QAAM,SAAN;AACAE,YAAU;AADV,CADD,uH","file":"/packages/rocketchat_importer-hipchat.js","sourcesContent":["import moment from 'moment'\nimport 'moment-timezone'\n\nImporter.HipChat = class Importer.HipChat extends Importer.Base\n\t@RoomPrefix = 'hipchat_export/rooms/'\n\t@UsersPrefix = 'hipchat_export/users/'\n\n\tconstructor: (name, descriptionI18N, mimeType) ->\n\t\tsuper(name, descriptionI18N, mimeType)\n\t\t@logger.debug('Constructed a new Slack Importer.')\n\t\t@userTags = []\n\n\tprepare: (dataURI, sentContentType, fileName) =>\n\t\tsuper(dataURI, sentContentType, fileName)\n\n\t\t{image, contentType} = RocketChatFile.dataURIParse dataURI\n\t\tzip = new @AdmZip(new Buffer(image, 'base64'))\n\t\tzipEntries = zip.getEntries()\n\n\t\ttempRooms = []\n\t\ttempUsers = []\n\t\ttempMessages = {}\n\t\tfor entry in zipEntries\n\t\t\tdo (entry) =>\n\t\t\t\tif entry.entryName.indexOf('__MACOSX') > -1\n\t\t\t\t\t#ignore all of the files inside of __MACOSX\n\t\t\t\t\t@logger.debug(\"Ignoring the file: #{entry.entryName}\")\n\t\t\t\tif not entry.isDirectory\n\t\t\t\t\tif entry.entryName.indexOf(Importer.HipChat.RoomPrefix) > -1\n\t\t\t\t\t\troomName = entry.entryName.split(Importer.HipChat.RoomPrefix)[1]\n\t\t\t\t\t\tif roomName is 'list.json'\n\t\t\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_CHANNELS\n\t\t\t\t\t\t\ttempRooms = JSON.parse(entry.getData().toString()).rooms\n\t\t\t\t\t\t\tfor room in tempRooms\n\t\t\t\t\t\t\t\troom.name = _.slugify room.name\n\t\t\t\t\t\telse if roomName.indexOf('/') > -1\n\t\t\t\t\t\t\titem = roomName.split('/')\n\t\t\t\t\t\t\troomName = _.slugify item[0] #random\n\t\t\t\t\t\t\tmsgGroupData = item[1].split('.')[0] #2015-10-04\n\t\t\t\t\t\t\tif not tempMessages[roomName]\n\t\t\t\t\t\t\t\ttempMessages[roomName] = {}\n\t\t\t\t\t\t\t# For some reason some of the json files in the HipChat export aren't valid JSON\n\t\t\t\t\t\t\t# files, so we need to catch those and just ignore them (sadly).\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\ttempMessages[roomName][msgGroupData] = JSON.parse entry.getData().toString()\n\t\t\t\t\t\t\tcatch\n\t\t\t\t\t\t\t\t@logger.warn \"#{entry.entryName} is not a valid JSON file! Unable to import it.\"\n\t\t\t\t\telse if entry.entryName.indexOf(Importer.HipChat.UsersPrefix) > -1\n\t\t\t\t\t\tusersName = entry.entryName.split(Importer.HipChat.UsersPrefix)[1]\n\t\t\t\t\t\tif usersName is 'list.json'\n\t\t\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_USERS\n\t\t\t\t\t\t\ttempUsers = JSON.parse(entry.getData().toString()).users\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t@logger.warn \"Unexpected file in the #{@name} import: #{entry.entryName}\"\n\n\t\t# Insert the users record, eventually this might have to be split into several ones as well\n\t\t# if someone tries to import a several thousands users instance\n\t\tusersId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'users', 'users': tempUsers }\n\t\t@users = @collection.findOne usersId\n\t\t@updateRecord { 'count.users': tempUsers.length }\n\t\t@addCountToTotal tempUsers.length\n\n\t\t# Insert the rooms records.\n\t\tchannelsId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'channels', 'channels': tempRooms }\n\t\t@channels = @collection.findOne channelsId\n\t\t@updateRecord { 'count.channels': tempRooms.length }\n\t\t@addCountToTotal tempRooms.length\n\n\t\t# Insert the messages records\n\t\t@updateProgress Importer.ProgressStep.PREPARING_MESSAGES\n\t\tmessagesCount = 0\n\t\tfor channel, messagesObj of tempMessages\n\t\t\tdo (channel, messagesObj) =>\n\t\t\t\tif not @messages[channel]\n\t\t\t\t\t@messages[channel] = {}\n\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\tmessagesCount += msgs.length\n\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}\" }\n\n\t\t\t\t\tif Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize\n\t\t\t\t\t\tfor splitMsg, i in Importer.Base.getBSONSafeArraysFromAnArray(msgs)\n\t\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}.#{i}\", 'messages': splitMsg }\n\t\t\t\t\t\t\t@messages[channel][\"#{date}.#{i}\"] = @collection.findOne messagesId\n\t\t\t\t\telse\n\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}\", 'messages': msgs }\n\t\t\t\t\t\t@messages[channel][date] = @collection.findOne messagesId\n\n\t\t@updateRecord { 'count.messages': messagesCount, 'messagesstatus': null }\n\t\t@addCountToTotal messagesCount\n\n\t\tif tempUsers.length is 0 or tempRooms.length is 0 or messagesCount is 0\n\t\t\t@logger.warn \"The loaded users count #{tempUsers.length}, the loaded channels #{tempRooms.length}, and the loaded messages #{messagesCount}\"\n\t\t\t@updateProgress Importer.ProgressStep.ERROR\n\t\t\treturn @getProgress()\n\n\t\tselectionUsers = tempUsers.map (user) ->\n\t\t\t#HipChat's export doesn't contain bot users, from the data I've seen\n\t\t\treturn new Importer.SelectionUser user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot\n\t\tselectionChannels = tempRooms.map (room) ->\n\t\t\treturn new Importer.SelectionChannel room.room_id, room.name, room.is_archived, true, false\n\n\t\t@updateProgress Importer.ProgressStep.USER_SELECTION\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n\n\tstartImport: (importSelection) =>\n\t\tsuper(importSelection)\n\t\tstart = Date.now()\n\n\t\tfor user in importSelection.users\n\t\t\tfor u in @users.users when u.user_id is user.user_id\n\t\t\t\tu.do_import = user.do_import\n\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\tfor channel in importSelection.channels\n\t\t\tfor c in @channels.channels when c.room_id is channel.channel_id\n\t\t\t\tc.do_import = channel.do_import\n\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\tstartedByUserId = Meteor.userId()\n\t\tMeteor.defer =>\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_USERS\n\t\t\tfor user in @users.users when user.do_import\n\t\t\t\tdo (user) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByEmailAddress user.email\n\t\t\t\t\t\tif existantUser\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\thipchat: \"@#{user.mention_name}\"\n\t\t\t\t\t\t\t\trocket: \"@#{existantUser.username}\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tuserId = Accounts.createUser { email: user.email, password: Date.now() + user.name + user.email.toUpperCase() }\n\t\t\t\t\t\t\tuser.rocketId = userId\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\thipchat: \"@#{user.mention_name}\"\n\t\t\t\t\t\t\t\trocket: \"@#{user.mention_name}\"\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\tMeteor.call 'setUsername', user.mention_name, {joinDefaultChannelsSilenced: true}\n\t\t\t\t\t\t\t\tMeteor.call 'setAvatarFromService', user.photo_url, undefined, 'url'\n\t\t\t\t\t\t\t\tMeteor.call 'userSetUtcOffset', parseInt moment().tz(user.timezone).format('Z').toString().split(':')[0]\n\n\t\t\t\t\t\t\tif user.name?\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName userId, user.name\n\n\t\t\t\t\t\t\t#Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif user.is_deleted\n\t\t\t\t\t\t\t\tMeteor.call 'setUserActiveStatus', userId, false\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_CHANNELS\n\t\t\tfor channel in @channels.channels when channel.do_import\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tchannel.name = channel.name.replace(/ /g, '')\n\t\t\t\t\t\texistantRoom = RocketChat.models.Rooms.findOneByName channel.name\n\t\t\t\t\t\tif existantRoom\n\t\t\t\t\t\t\tchannel.rocketId = existantRoom._id\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tuserId = ''\n\t\t\t\t\t\t\tfor user in @users.users when user.user_id is channel.owner_user_id\n\t\t\t\t\t\t\t\tuserId = user.rocketId\n\n\t\t\t\t\t\t\tif userId is ''\n\t\t\t\t\t\t\t\t@logger.warn \"Failed to find the channel creator for #{channel.name}, setting it to the current running user.\"\n\t\t\t\t\t\t\t\tuserId = startedByUserId\n\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\treturned = Meteor.call 'createChannel', channel.name, []\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update { _id: channel.rocketId }, { $set: { 'ts': new Date(channel.created * 1000) }}\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_MESSAGES\n\t\t\tnousers = {};\n\t\t\tfor channel, messagesObj of @messages\n\t\t\t\tdo (channel, messagesObj) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\thipchatChannel = @getHipChatChannelFromName channel\n\t\t\t\t\t\tif hipchatChannel?.do_import\n\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById hipchatChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } }\n\t\t\t\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}.#{msgs.messages.length}\" }\n\t\t\t\t\t\t\t\tfor message in msgs.messages\n\t\t\t\t\t\t\t\t\tif message.from?\n\t\t\t\t\t\t\t\t\t\tuser = @getRocketUser(message.from.user_id)\n\t\t\t\t\t\t\t\t\t\tif user?\n\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: @convertHipChatMessageToRocketChat(message.message)\n\t\t\t\t\t\t\t\t\t\t\t\tts: new Date(message.date)\n\t\t\t\t\t\t\t\t\t\t\t\tu:\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage user, msgObj, room, true\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tif not nousers[message.from.user_id]\n\t\t\t\t\t\t\t\t\t\t\t\tnousers[message.from.user_id] = message.from\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tif not _.isArray message\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn 'Please report the following:', message\n\t\t\t\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@logger.warn 'The following did not have users:', nousers\n\n\t\t\t@updateProgress Importer.ProgressStep.FINISHING\n\t\t\tfor channel in @channels.channels when channel.do_import and channel.is_archived\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tMeteor.call 'archiveRoom', channel.rocketId\n\n\t\t\t@updateProgress Importer.ProgressStep.DONE\n\t\t\ttimeTook = Date.now() - start\n\t\t\t@logger.log \"Import took #{timeTook} milliseconds.\"\n\n\t\treturn @getProgress()\n\n\tgetHipChatChannelFromName: (channelName) =>\n\t\tfor channel in @channels.channels when channel.name is channelName\n\t\t\treturn channel\n\n\tgetRocketUser: (hipchatId) =>\n\t\tfor user in @users.users when user.user_id is hipchatId\n\t\t\treturn RocketChat.models.Users.findOneById user.rocketId, { fields: { username: 1, name: 1 }}\n\n\tconvertHipChatMessageToRocketChat: (message) =>\n\t\tif message?\n\t\t\tfor userReplace in @userTags\n\t\t\t\tmessage = message.replace userReplace.hipchat, userReplace.rocket\n\t\telse\n\t\t\tmessage = ''\n\t\treturn message\n\n\tgetSelection: () =>\n\t\tselectionUsers = @users.users.map (user) ->\n\t\t\t#HipChat's export doesn't contain bot users, from the data I've seen\n\t\t\treturn new Importer.SelectionUser user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot\n\t\tselectionChannels = @channels.channels.map (room) ->\n\t\t\treturn new Importer.SelectionChannel room.room_id, room.name, room.is_archived, true, false\n\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n","var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nimport moment from 'moment';\n\nimport 'moment-timezone';\n\nImporter.HipChat = Importer.HipChat = (function(superClass) {\n  extend(HipChat, superClass);\n\n  HipChat.RoomPrefix = 'hipchat_export/rooms/';\n\n  HipChat.UsersPrefix = 'hipchat_export/users/';\n\n  function HipChat(name, descriptionI18N, mimeType) {\n    this.getSelection = bind(this.getSelection, this);\n    this.convertHipChatMessageToRocketChat = bind(this.convertHipChatMessageToRocketChat, this);\n    this.getRocketUser = bind(this.getRocketUser, this);\n    this.getHipChatChannelFromName = bind(this.getHipChatChannelFromName, this);\n    this.startImport = bind(this.startImport, this);\n    this.prepare = bind(this.prepare, this);\n    HipChat.__super__.constructor.call(this, name, descriptionI18N, mimeType);\n    this.logger.debug('Constructed a new Slack Importer.');\n    this.userTags = [];\n  }\n\n  HipChat.prototype.prepare = function(dataURI, sentContentType, fileName) {\n    var channel, channelsId, contentType, entry, fn, fn1, image, j, len, messagesCount, messagesObj, ref, selectionChannels, selectionUsers, tempMessages, tempRooms, tempUsers, usersId, zip, zipEntries;\n    HipChat.__super__.prepare.call(this, dataURI, sentContentType, fileName);\n    ref = RocketChatFile.dataURIParse(dataURI), image = ref.image, contentType = ref.contentType;\n    zip = new this.AdmZip(new Buffer(image, 'base64'));\n    zipEntries = zip.getEntries();\n    tempRooms = [];\n    tempUsers = [];\n    tempMessages = {};\n    fn = (function(_this) {\n      return function(entry) {\n        var item, k, len1, msgGroupData, results, room, roomName, usersName;\n        if (entry.entryName.indexOf('__MACOSX') > -1) {\n          _this.logger.debug(\"Ignoring the file: \" + entry.entryName);\n        }\n        if (!entry.isDirectory) {\n          if (entry.entryName.indexOf(Importer.HipChat.RoomPrefix) > -1) {\n            roomName = entry.entryName.split(Importer.HipChat.RoomPrefix)[1];\n            if (roomName === 'list.json') {\n              _this.updateProgress(Importer.ProgressStep.PREPARING_CHANNELS);\n              tempRooms = JSON.parse(entry.getData().toString()).rooms;\n              results = [];\n              for (k = 0, len1 = tempRooms.length; k < len1; k++) {\n                room = tempRooms[k];\n                results.push(room.name = _.slugify(room.name));\n              }\n              return results;\n            } else if (roomName.indexOf('/') > -1) {\n              item = roomName.split('/');\n              roomName = _.slugify(item[0]);\n              msgGroupData = item[1].split('.')[0];\n              if (!tempMessages[roomName]) {\n                tempMessages[roomName] = {};\n              }\n              try {\n                return tempMessages[roomName][msgGroupData] = JSON.parse(entry.getData().toString());\n              } catch (error) {\n                return _this.logger.warn(entry.entryName + \" is not a valid JSON file! Unable to import it.\");\n              }\n            }\n          } else if (entry.entryName.indexOf(Importer.HipChat.UsersPrefix) > -1) {\n            usersName = entry.entryName.split(Importer.HipChat.UsersPrefix)[1];\n            if (usersName === 'list.json') {\n              _this.updateProgress(Importer.ProgressStep.PREPARING_USERS);\n              return tempUsers = JSON.parse(entry.getData().toString()).users;\n            } else {\n              return _this.logger.warn(\"Unexpected file in the \" + _this.name + \" import: \" + entry.entryName);\n            }\n          }\n        }\n      };\n    })(this);\n    for (j = 0, len = zipEntries.length; j < len; j++) {\n      entry = zipEntries[j];\n      fn(entry);\n    }\n    usersId = this.collection.insert({\n      'import': this.importRecord._id,\n      'importer': this.name,\n      'type': 'users',\n      'users': tempUsers\n    });\n    this.users = this.collection.findOne(usersId);\n    this.updateRecord({\n      'count.users': tempUsers.length\n    });\n    this.addCountToTotal(tempUsers.length);\n    channelsId = this.collection.insert({\n      'import': this.importRecord._id,\n      'importer': this.name,\n      'type': 'channels',\n      'channels': tempRooms\n    });\n    this.channels = this.collection.findOne(channelsId);\n    this.updateRecord({\n      'count.channels': tempRooms.length\n    });\n    this.addCountToTotal(tempRooms.length);\n    this.updateProgress(Importer.ProgressStep.PREPARING_MESSAGES);\n    messagesCount = 0;\n    fn1 = (function(_this) {\n      return function(channel, messagesObj) {\n        var date, i, messagesId, msgs, results, splitMsg;\n        if (!_this.messages[channel]) {\n          _this.messages[channel] = {};\n        }\n        results = [];\n        for (date in messagesObj) {\n          msgs = messagesObj[date];\n          messagesCount += msgs.length;\n          _this.updateRecord({\n            'messagesstatus': channel + \"/\" + date\n          });\n          if (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n            results.push((function() {\n              var k, len1, ref1, results1;\n              ref1 = Importer.Base.getBSONSafeArraysFromAnArray(msgs);\n              results1 = [];\n              for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {\n                splitMsg = ref1[i];\n                messagesId = this.collection.insert({\n                  'import': this.importRecord._id,\n                  'importer': this.name,\n                  'type': 'messages',\n                  'name': channel + \"/\" + date + \".\" + i,\n                  'messages': splitMsg\n                });\n                results1.push(this.messages[channel][date + \".\" + i] = this.collection.findOne(messagesId));\n              }\n              return results1;\n            }).call(_this));\n          } else {\n            messagesId = _this.collection.insert({\n              'import': _this.importRecord._id,\n              'importer': _this.name,\n              'type': 'messages',\n              'name': channel + \"/\" + date,\n              'messages': msgs\n            });\n            results.push(_this.messages[channel][date] = _this.collection.findOne(messagesId));\n          }\n        }\n        return results;\n      };\n    })(this);\n    for (channel in tempMessages) {\n      messagesObj = tempMessages[channel];\n      fn1(channel, messagesObj);\n    }\n    this.updateRecord({\n      'count.messages': messagesCount,\n      'messagesstatus': null\n    });\n    this.addCountToTotal(messagesCount);\n    if (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n      this.logger.warn(\"The loaded users count \" + tempUsers.length + \", the loaded channels \" + tempRooms.length + \", and the loaded messages \" + messagesCount);\n      this.updateProgress(Importer.ProgressStep.ERROR);\n      return this.getProgress();\n    }\n    selectionUsers = tempUsers.map(function(user) {\n      return new Importer.SelectionUser(user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot);\n    });\n    selectionChannels = tempRooms.map(function(room) {\n      return new Importer.SelectionChannel(room.room_id, room.name, room.is_archived, true, false);\n    });\n    this.updateProgress(Importer.ProgressStep.USER_SELECTION);\n    return new Importer.Selection(this.name, selectionUsers, selectionChannels);\n  };\n\n  HipChat.prototype.startImport = function(importSelection) {\n    var c, channel, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, start, startedByUserId, u, user;\n    HipChat.__super__.startImport.call(this, importSelection);\n    start = Date.now();\n    ref = importSelection.users;\n    for (j = 0, len = ref.length; j < len; j++) {\n      user = ref[j];\n      ref1 = this.users.users;\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        u = ref1[k];\n        if (u.user_id === user.user_id) {\n          u.do_import = user.do_import;\n        }\n      }\n    }\n    this.collection.update({\n      _id: this.users._id\n    }, {\n      $set: {\n        'users': this.users.users\n      }\n    });\n    ref2 = importSelection.channels;\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      channel = ref2[l];\n      ref3 = this.channels.channels;\n      for (m = 0, len3 = ref3.length; m < len3; m++) {\n        c = ref3[m];\n        if (c.room_id === channel.channel_id) {\n          c.do_import = channel.do_import;\n        }\n      }\n    }\n    this.collection.update({\n      _id: this.channels._id\n    }, {\n      $set: {\n        'channels': this.channels.channels\n      }\n    });\n    startedByUserId = Meteor.userId();\n    Meteor.defer((function(_this) {\n      return function() {\n        var fn, len4, len5, len6, messagesObj, n, nousers, o, p, ref4, ref5, ref6, ref7, timeTook;\n        _this.updateProgress(Importer.ProgressStep.IMPORTING_USERS);\n        ref4 = _this.users.users;\n        for (n = 0, len4 = ref4.length; n < len4; n++) {\n          user = ref4[n];\n          if (user.do_import) {\n            (function(user) {\n              return Meteor.runAsUser(startedByUserId, function() {\n                var existantUser, userId;\n                existantUser = RocketChat.models.Users.findOneByEmailAddress(user.email);\n                if (existantUser) {\n                  user.rocketId = existantUser._id;\n                  _this.userTags.push({\n                    hipchat: \"@\" + user.mention_name,\n                    rocket: \"@\" + existantUser.username\n                  });\n                } else {\n                  userId = Accounts.createUser({\n                    email: user.email,\n                    password: Date.now() + user.name + user.email.toUpperCase()\n                  });\n                  user.rocketId = userId;\n                  _this.userTags.push({\n                    hipchat: \"@\" + user.mention_name,\n                    rocket: \"@\" + user.mention_name\n                  });\n                  Meteor.runAsUser(userId, function() {\n                    Meteor.call('setUsername', user.mention_name, {\n                      joinDefaultChannelsSilenced: true\n                    });\n                    Meteor.call('setAvatarFromService', user.photo_url, void 0, 'url');\n                    return Meteor.call('userSetUtcOffset', parseInt(moment().tz(user.timezone).format('Z').toString().split(':')[0]));\n                  });\n                  if (user.name != null) {\n                    RocketChat.models.Users.setName(userId, user.name);\n                  }\n                  if (user.is_deleted) {\n                    Meteor.call('setUserActiveStatus', userId, false);\n                  }\n                }\n                return _this.addCountCompleted(1);\n              });\n            })(user);\n          }\n        }\n        _this.collection.update({\n          _id: _this.users._id\n        }, {\n          $set: {\n            'users': _this.users.users\n          }\n        });\n        _this.updateProgress(Importer.ProgressStep.IMPORTING_CHANNELS);\n        ref5 = _this.channels.channels;\n        for (o = 0, len5 = ref5.length; o < len5; o++) {\n          channel = ref5[o];\n          if (channel.do_import) {\n            (function(channel) {\n              return Meteor.runAsUser(startedByUserId, function() {\n                var existantRoom, len6, p, ref6, userId;\n                channel.name = channel.name.replace(/ /g, '');\n                existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n                if (existantRoom) {\n                  channel.rocketId = existantRoom._id;\n                } else {\n                  userId = '';\n                  ref6 = _this.users.users;\n                  for (p = 0, len6 = ref6.length; p < len6; p++) {\n                    user = ref6[p];\n                    if (user.user_id === channel.owner_user_id) {\n                      userId = user.rocketId;\n                    }\n                  }\n                  if (userId === '') {\n                    _this.logger.warn(\"Failed to find the channel creator for \" + channel.name + \", setting it to the current running user.\");\n                    userId = startedByUserId;\n                  }\n                  Meteor.runAsUser(userId, function() {\n                    var returned;\n                    returned = Meteor.call('createChannel', channel.name, []);\n                    return channel.rocketId = returned.rid;\n                  });\n                  RocketChat.models.Rooms.update({\n                    _id: channel.rocketId\n                  }, {\n                    $set: {\n                      'ts': new Date(channel.created * 1000)\n                    }\n                  });\n                }\n                return _this.addCountCompleted(1);\n              });\n            })(channel);\n          }\n        }\n        _this.collection.update({\n          _id: _this.channels._id\n        }, {\n          $set: {\n            'channels': _this.channels.channels\n          }\n        });\n        _this.updateProgress(Importer.ProgressStep.IMPORTING_MESSAGES);\n        nousers = {};\n        ref6 = _this.messages;\n        fn = function(channel, messagesObj) {\n          return Meteor.runAsUser(startedByUserId, function() {\n            var date, hipchatChannel, message, msgObj, msgs, results, room;\n            hipchatChannel = _this.getHipChatChannelFromName(channel);\n            if (hipchatChannel != null ? hipchatChannel.do_import : void 0) {\n              room = RocketChat.models.Rooms.findOneById(hipchatChannel.rocketId, {\n                fields: {\n                  usernames: 1,\n                  t: 1,\n                  name: 1\n                }\n              });\n              results = [];\n              for (date in messagesObj) {\n                msgs = messagesObj[date];\n                _this.updateRecord({\n                  'messagesstatus': channel + \"/\" + date + \".\" + msgs.messages.length\n                });\n                results.push((function() {\n                  var len6, p, ref7, results1;\n                  ref7 = msgs.messages;\n                  results1 = [];\n                  for (p = 0, len6 = ref7.length; p < len6; p++) {\n                    message = ref7[p];\n                    if (message.from != null) {\n                      user = this.getRocketUser(message.from.user_id);\n                      if (user != null) {\n                        msgObj = {\n                          msg: this.convertHipChatMessageToRocketChat(message.message),\n                          ts: new Date(message.date),\n                          u: {\n                            _id: user._id,\n                            username: user.username\n                          }\n                        };\n                        RocketChat.sendMessage(user, msgObj, room, true);\n                      } else {\n                        if (!nousers[message.from.user_id]) {\n                          nousers[message.from.user_id] = message.from;\n                        }\n                      }\n                    } else {\n                      if (!_.isArray(message)) {\n                        console.warn('Please report the following:', message);\n                      }\n                    }\n                    results1.push(this.addCountCompleted(1));\n                  }\n                  return results1;\n                }).call(_this));\n              }\n              return results;\n            }\n          });\n        };\n        for (channel in ref6) {\n          messagesObj = ref6[channel];\n          fn(channel, messagesObj);\n        }\n        _this.logger.warn('The following did not have users:', nousers);\n        _this.updateProgress(Importer.ProgressStep.FINISHING);\n        ref7 = _this.channels.channels;\n        for (p = 0, len6 = ref7.length; p < len6; p++) {\n          channel = ref7[p];\n          if (channel.do_import && channel.is_archived) {\n            (function(channel) {\n              return Meteor.runAsUser(startedByUserId, function() {\n                return Meteor.call('archiveRoom', channel.rocketId);\n              });\n            })(channel);\n          }\n        }\n        _this.updateProgress(Importer.ProgressStep.DONE);\n        timeTook = Date.now() - start;\n        return _this.logger.log(\"Import took \" + timeTook + \" milliseconds.\");\n      };\n    })(this));\n    return this.getProgress();\n  };\n\n  HipChat.prototype.getHipChatChannelFromName = function(channelName) {\n    var channel, j, len, ref;\n    ref = this.channels.channels;\n    for (j = 0, len = ref.length; j < len; j++) {\n      channel = ref[j];\n      if (channel.name === channelName) {\n        return channel;\n      }\n    }\n  };\n\n  HipChat.prototype.getRocketUser = function(hipchatId) {\n    var j, len, ref, user;\n    ref = this.users.users;\n    for (j = 0, len = ref.length; j < len; j++) {\n      user = ref[j];\n      if (user.user_id === hipchatId) {\n        return RocketChat.models.Users.findOneById(user.rocketId, {\n          fields: {\n            username: 1,\n            name: 1\n          }\n        });\n      }\n    }\n  };\n\n  HipChat.prototype.convertHipChatMessageToRocketChat = function(message) {\n    var j, len, ref, userReplace;\n    if (message != null) {\n      ref = this.userTags;\n      for (j = 0, len = ref.length; j < len; j++) {\n        userReplace = ref[j];\n        message = message.replace(userReplace.hipchat, userReplace.rocket);\n      }\n    } else {\n      message = '';\n    }\n    return message;\n  };\n\n  HipChat.prototype.getSelection = function() {\n    var selectionChannels, selectionUsers;\n    selectionUsers = this.users.users.map(function(user) {\n      return new Importer.SelectionUser(user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot);\n    });\n    selectionChannels = this.channels.channels.map(function(room) {\n      return new Importer.SelectionChannel(room.room_id, room.name, room.is_archived, true, false);\n    });\n    return new Importer.Selection(this.name, selectionUsers, selectionChannels);\n  };\n\n  return HipChat;\n\n})(Importer.Base);\n","Importer.addImporter 'hipchat', Importer.HipChat,\n\tname: 'HipChat'\n\tmimeType: 'application/zip'\n"]}