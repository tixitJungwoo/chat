{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:custom-oauth/custom_oauth_client.js"],"names":["module","export","CustomOAuth","name","options","Match","test","String","Meteor","Error","configure","Accounts","oauth","registerService","configureLogin","Object","serverURL","authorizePath","scope","loginWithService","s","capitalize","callback","credentialRequestCompleteCallback","credentialRequestCompleteHandler","requestCredential","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","loginStyle","OAuth","_loginStyle","separator","indexOf","loginUrl","clientId","_redirectUri","_stateParam","redirectUrl","launchLogin","loginService","popupOptions","width","height"],"mappings":"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","file":"/packages/rocketchat_custom-oauth.js","sourcesContent":["/*globals OAuth*/\n// Request custom OAuth credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\n\nexport class CustomOAuth {\n\tconstructor(name, options) {\n\t\tthis.name = name;\n\t\tif (!Match.test(this.name, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Name is required and must be String');\n\t\t}\n\n\t\tthis.configure(options);\n\n\t\tAccounts.oauth.registerService(this.name);\n\n\t\tthis.configureLogin();\n\t}\n\n\tconfigure(options) {\n\t\tif (!Match.test(options, Object)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options is required and must be Object');\n\t\t}\n\n\t\tif (!Match.test(options.serverURL, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options.serverURL is required and must be String');\n\t\t}\n\n\t\tif (!Match.test(options.authorizePath, String)) {\n\t\t\toptions.authorizePath = '/oauth/authorize';\n\t\t}\n\n\t\tif (!Match.test(options.scope, String)) {\n\t\t\toptions.scope = 'openid';\n\t\t}\n\n\t\tthis.serverURL = options.serverURL;\n\t\tthis.authorizePath = options.authorizePath;\n\t\tthis.scope = options.scope;\n\n\t\tif (!/^https?:\\/\\/.+/.test(this.authorizePath)) {\n\t\t\tthis.authorizePath = this.serverURL + this.authorizePath;\n\t\t}\n\t}\n\n\tconfigureLogin() {\n\t\tconst loginWithService = `loginWith${ s.capitalize(this.name) }`;\n\n\t\tMeteor[loginWithService] = (options, callback) => {\n\t\t\t// support a callback without options\n\t\t\tif (!callback && typeof options === 'function') {\n\t\t\t\tcallback = options;\n\t\t\t\toptions = null;\n\t\t\t}\n\n\t\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\t\tthis.requestCredential(options, credentialRequestCompleteCallback);\n\t\t};\n\t}\n\n\trequestCredential(options, credentialRequestCompleteCallback) {\n\t\t// support both (options, callback) and (callback).\n\t\tif (!credentialRequestCompleteCallback && typeof options === 'function') {\n\t\t\tcredentialRequestCompleteCallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\tconst config = ServiceConfiguration.configurations.findOne({service: this.name});\n\t\tif (!config) {\n\t\t\tif (credentialRequestCompleteCallback) {\n\t\t\t\tcredentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst credentialToken = Random.secret();\n\t\tconst loginStyle = OAuth._loginStyle(this.name, config, options);\n\n\t\tconst separator = this.authorizePath.indexOf('?') !== -1 ? '&' : '?';\n\n\t\tconst loginUrl = `${ this.authorizePath\n\t\t\t}${ separator }client_id=${ config.clientId\n\t\t\t}&redirect_uri=${ OAuth._redirectUri(this.name, config)\n\t\t\t}&response_type=code` +\n\t\t\t`&state=${ OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\n\t\t\t}&scope=${ this.scope }`;\n\n\t\tOAuth.launchLogin({\n\t\t\tloginService: this.name,\n\t\t\tloginStyle,\n\t\t\tloginUrl,\n\t\t\tcredentialRequestCompleteCallback,\n\t\t\tcredentialToken,\n\t\t\tpopupOptions: {\n\t\t\t\twidth: 900,\n\t\t\t\theight: 450\n\t\t\t}\n\t\t});\n\t}\n}\n"]}