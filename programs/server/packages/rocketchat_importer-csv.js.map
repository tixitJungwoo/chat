{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-csv/server.js","meteor://ðŸ’»app/packages/rocketchat:importer-csv/main.js"],"names":["Importer","CSV","name","descriptionI18N","mimeType","logger","debug","csvParser","Npm","require","messages","Map","prepare","dataURI","sentContentType","fileName","uriResult","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","image","zipEntries","getEntries","tempChannels","tempUsers","tempMessages","entry","entryName","indexOf","isDirectory","toLowerCase","updateProgress","ProgressStep","PREPARING_CHANNELS","parsedChannels","getData","toString","map","c","id","trim","replace","creator","isPrivate","members","split","m","PREPARING_USERS","parsedUsers","u","username","email","item","channelName","msgGroupData","get","set","msgs","e","warn","ts","text","usersId","collection","insert","importRecord","_id","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","messagesMap","Base","getBSONSize","MaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","entries","error","ERROR","getProgress","selectionUsers","SelectionUser","selectionChannels","SelectionChannel","USER_SELECTION","Selection","startImport","importSelection","started","Date","now","user","user_id","do_import","update","$set","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","creatorId","roomInfo","rid","IMPORTING_MESSAGES","ch","csvChannel","getChannelFromName","room","findOneById","fields","usernames","t","msg","isNaN","parseInt","getUserFromUsername","msgObj","sendMessage","FINISHING","DONE","timeTook","log","getSelection","addImporter","warnings","href"],"mappings":"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","file":"/packages/rocketchat_importer-csv.js","sourcesContent":["/* globals Importer */\n\nImporter.CSV = class ImporterCSV extends Importer.Base {\n\tconstructor(name, descriptionI18N, mimeType) {\n\t\tsuper(name, descriptionI18N, mimeType);\n\t\tthis.logger.debug('Constructed a new CSV Importer.');\n\n\t\tthis.csvParser = Npm.require('csv-parse/lib/sync');\n\t\tthis.messages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst uriResult = RocketChatFile.dataURIParse(dataURI);\n\t\tconst zip = new this.AdmZip(new Buffer(uriResult.image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\n\t\tlet tempChannels = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = new Map();\n\t\tfor (const entry of zipEntries) {\n\t\t\tthis.logger.debug(`Entry: ${ entry.entryName }`);\n\n\t\t\t//Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${ entry.entryName }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tsuper.updateProgress(Importer.ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\ttempChannels = parsedChannels.map((c) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: c[0].trim().replace('.', '_'),\n\t\t\t\t\t\tname: c[0].trim(),\n\t\t\t\t\t\tcreator: c[1].trim(),\n\t\t\t\t\t\tisPrivate: c[2].trim().toLowerCase() === 'private' ? true : false,\n\t\t\t\t\t\tmembers: c[3].trim().split(';').map((m) => m.trim())\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tsuper.updateProgress(Importer.ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\ttempUsers = parsedUsers.map((u) => { return { id: u[0].trim().replace('.', '_'), username: u[0].trim(), email: u[1].trim(), name: u[2].trim() }; });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tconst item = entry.entryName.split('/'); //random/messages.csv\n\t\t\t\tconst channelName = item[0]; //random\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; //2015-10-04\n\n\t\t\t\tif (!tempMessages.get(channelName)) {\n\t\t\t\t\ttempMessages.set(channelName, new Map());\n\t\t\t\t}\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${ entry.entryName } contains invalid syntax`, e);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttempMessages.get(channelName).set(msgGroupData, msgs.map((m) => { return { username: m[0], ts: m[1], text: m[2] }; }));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t// if someone tries to import a several thousands users instance\n\t\tconst usersId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'users', 'users': tempUsers });\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t// Insert the channels records.\n\t\tconst channelsId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'channels', 'channels': tempChannels });\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tsuper.updateRecord({ 'count.channels': tempChannels.length });\n\t\tsuper.addCountToTotal(tempChannels.length);\n\n\t\t// Save the messages records to the import record for `startImport` usage\n\t\tsuper.updateProgress(Importer.ProgressStep.PREPARING_MESSAGES);\n\t\tlet messagesCount = 0;\n\t\tfor (const [channel, messagesMap] of tempMessages.entries()) {\n\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t}\n\n\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ channel }/${ msgGroupData }` });\n\n\t\t\t\tif (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n\t\t\t\t\tImporter.Base.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ msgGroupData }.${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\tthis.messages.get(channel).set(`${ msgGroupData }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ msgGroupData }`, 'messages': msgs });\n\t\t\t\t\tthis.messages.get(channel).set(msgGroupData, this.collection.findOne(messagesId));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t//Ensure we have at least a single user, channel, or message\n\t\tif (tempUsers.length === 0 && tempChannels.length === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tsuper.updateProgress(Importer.ProgressStep.ERROR);\n\t\t\treturn super.getProgress();\n\t\t}\n\n\t\tconst selectionUsers = tempUsers.map((u) => new Importer.SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = tempChannels.map((c) => new Importer.SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\n\t\tsuper.updateProgress(Importer.ProgressStep.USER_SELECTION);\n\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels);\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t//Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t//Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(Importer.ProgressStep.IMPORTING_USERS);\n\t\t\t//Import the users\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (!u.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\tlet existantUser = RocketChat.models.Users.findOneByEmailAddress(u.email);\n\n\t\t\t\t\t//If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t//since we have an existing user, let's try a few things\n\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst userId = Accounts.createUser({ email: u.email, password: Date.now() + u.name + u.email.toUpperCase() });\n\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, {joinDefaultChannelsSilenced: true});\n\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t//Import the channels\n\t\t\tsuper.updateProgress(Importer.ProgressStep.IMPORTING_CHANNELS);\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (!c.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t//If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\tif (u.username === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//Create the channel\n\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, c.members);\n\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t}\n\n\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t//Import the Messages\n\t\t\tsuper.updateProgress(Importer.ProgressStep.IMPORTING_MESSAGES);\n\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\tconst csvChannel = this.getChannelFromName(ch);\n\t\t\t\tif (!csvChannel.do_import) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(csvChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\tif (isNaN(new Date(parseInt(msg.ts)))) {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst creator = this.getUserFromUsername(msg.username);\n\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t_id: `csv-${ csvChannel.id }-${ msg.ts }`,\n\t\t\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\tusername: creator.username\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, msgObj, room, true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsuper.updateProgress(Importer.ProgressStep.FINISHING);\n\t\t\tsuper.updateProgress(Importer.ProgressStep.DONE);\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`CSV Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new Importer.SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new Importer.SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\n\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels);\n\t}\n\n\tgetChannelFromName(channelName) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (ch.name === channelName) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromUsername(username) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.username === username) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 }});\n\t\t\t}\n\t\t}\n\t}\n};\n","/* globals Importer */\n\nImporter.addImporter('csv', Importer.CSV, {\n\tname: 'CSV',\n\twarnings: [{\n\t\ttext: 'Importer_CSV_Information',\n\t\thref: 'https://rocket.chat/docs/administrator-guides/import/csv/'\n\t}],\n\tmimeType: 'application/zip'\n});\n"]}